
practica3-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca4  08005ca4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cac  08005cac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000070  08005d24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08005d24  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a1f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0d  00000000  00000000  00038abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289e7  00000000  00000000  0003e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019302  00000000  00000000  00066ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4ca7  00000000  00000000  000801c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000666c  00000000  00000000  00174eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ba4 	.word	0x08005ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ba4 	.word	0x08005ba4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
    set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif /* __GNUC__ */
	PUTCHAR_PROTOTYPE{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *) &ch,1,1000);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f003 fb9c 	bl	8003cc2 <HAL_UART_Transmit>
		return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
		}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001c0 	.word	0x200001c0

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 ff88 	bl	80014b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f825 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f9ed 	bl	8000984 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005aa:	f000 f883 	bl	80006b4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005ae:	f000 f8b9 	bl	8000724 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005b2:	f000 f8f5 	bl	80007a0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005b6:	f000 f919 	bl	80007ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f955 	bl	8000868 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005be:	f000 f983 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c2:	f000 f9b1 	bl	8000928 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i=0; i<1000;i++){
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	e009      	b.n	80005e0 <main+0x48>
		  printf("%d\r\n",i);
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x54>)
 80005d0:	f004 fb5a 	bl	8004c88 <iprintf>
		  HAL_Delay(250);
 80005d4:	20fa      	movs	r0, #250	; 0xfa
 80005d6:	f000 ffe1 	bl	800159c <HAL_Delay>
	  for (int i=0; i<1000;i++){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e6:	dbf1      	blt.n	80005cc <main+0x34>
 80005e8:	e7ed      	b.n	80005c6 <main+0x2e>
 80005ea:	bf00      	nop
 80005ec:	08005bbc 	.word	0x08005bbc

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fb3a 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f001 fe75 	bl	8002304 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fb62 	bl	8000ce8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f001 fe50 	bl	80022c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000638:	2314      	movs	r3, #20
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f001 ff6b 	bl	8002548 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000678:	f000 fb36 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fb33 	bl	8002d00 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a0:	f000 fb22 	bl	8000ce8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a4:	f003 f83a 	bl	800371c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <MX_DFSDM1_Init+0x6c>)
 80006bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_DFSDM1_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_DFSDM1_Init+0x68>)
 800070a:	f001 f87d 	bl	8001808 <HAL_DFSDM_ChannelInit>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000714:	f000 fae8 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000008c 	.word	0x2000008c
 8000720:	40016020 	.word	0x40016020

08000724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C2_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C2_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C2_Init+0x74>)
 8000730:	f640 6214 	movw	r2, #3604	; 0xe14
 8000734:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_I2C2_Init+0x74>)
 800073e:	2201      	movs	r2, #1
 8000740:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_I2C2_Init+0x74>)
 8000762:	f001 fb42 	bl	8001dea <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fabc 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_I2C2_Init+0x74>)
 8000774:	f001 fbc8 	bl	8001f08 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 fab3 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C2_Init+0x74>)
 8000786:	f001 fc0a 	bl	8001f9e <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 faaa 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000c4 	.word	0x200000c4
 800079c:	40005800 	.word	0x40005800

080007a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_QUADSPI_Init+0x48>)
 80007a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b8:	2210      	movs	r2, #16
 80007ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007be:	2217      	movs	r2, #23
 80007c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007d0:	f001 fdfe 	bl	80023d0 <HAL_QSPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007da:	f000 fa85 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000118 	.word	0x20000118
 80007e8:	a0001000 	.word	0xa0001000

080007ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_SPI3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_SPI3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_SPI3_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI3_Init+0x74>)
 8000806:	f44f 7240 	mov.w	r2, #768	; 0x300
 800080a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI3_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI3_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_SPI3_Init+0x74>)
 800084c:	f003 f948 	bl	8003ae0 <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa47 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000015c 	.word	0x2000015c
 8000864:	40003c00 	.word	0x40003c00

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART1_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008ac:	f003 f9bb 	bl	8003c26 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fa17 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001c0 	.word	0x200001c0
 80008c4:	40013800 	.word	0x40013800

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f003 f98b 	bl	8003c26 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f9e7 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000244 	.word	0x20000244
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2206      	movs	r2, #6
 8000938:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2202      	movs	r2, #2
 8000944:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	f001 fb63 	bl	8002036 <HAL_PCD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f9b7 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002c8 	.word	0x200002c8

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4bbd      	ldr	r3, [pc, #756]	; (8000c90 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4abc      	ldr	r2, [pc, #752]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4bba      	ldr	r3, [pc, #744]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4bb7      	ldr	r3, [pc, #732]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4ab6      	ldr	r2, [pc, #728]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4bb4      	ldr	r3, [pc, #720]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4bb1      	ldr	r3, [pc, #708]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4ab0      	ldr	r2, [pc, #704]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4bae      	ldr	r3, [pc, #696]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4bab      	ldr	r3, [pc, #684]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4aaa      	ldr	r2, [pc, #680]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4ba8      	ldr	r3, [pc, #672]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4ba5      	ldr	r3, [pc, #660]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4aa4      	ldr	r2, [pc, #656]	; (8000c90 <MX_GPIO_Init+0x30c>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4ba2      	ldr	r3, [pc, #648]	; (8000c90 <MX_GPIO_Init+0x30c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a18:	489e      	ldr	r0, [pc, #632]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a1a:	f001 f9ab 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 f9a4 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a32:	4899      	ldr	r0, [pc, #612]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000a34:	f001 f99e 	bl	8001d74 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a3e:	4897      	ldr	r0, [pc, #604]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000a40:	f001 f998 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	4894      	ldr	r0, [pc, #592]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000a4c:	f001 f992 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a56:	4892      	ldr	r0, [pc, #584]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000a58:	f001 f98c 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	488d      	ldr	r0, [pc, #564]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000a62:	f001 f987 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	488a      	ldr	r0, [pc, #552]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a6c:	f001 f982 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a70:	f240 1315 	movw	r3, #277	; 0x115
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4882      	ldr	r0, [pc, #520]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a8a:	f000 ffc9 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a8e:	236a      	movs	r3, #106	; 0x6a
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	487c      	ldr	r0, [pc, #496]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000aa4:	f000 ffbc 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4878      	ldr	r0, [pc, #480]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ac0:	f000 ffae 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ac4:	233f      	movs	r3, #63	; 0x3f
 8000ac6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4872      	ldr	r0, [pc, #456]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ad8:	f000 ffa2 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000adc:	2303      	movs	r3, #3
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aec:	2308      	movs	r3, #8
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 ff91 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000afe:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 ff81 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 ff70 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 ff63 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b5a:	23e0      	movs	r3, #224	; 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 ff52 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4841      	ldr	r0, [pc, #260]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000b92:	f000 ff45 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483b      	ldr	r0, [pc, #236]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000baa:	f000 ff39 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bae:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bb2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4834      	ldr	r0, [pc, #208]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000bc8:	f000 ff2a 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bcc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bd0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	482e      	ldr	r0, [pc, #184]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000be4:	f000 ff1c 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000be8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4826      	ldr	r0, [pc, #152]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c02:	f000 ff0d 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c20:	f000 fefe 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c3c:	f000 fef0 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c50:	2305      	movs	r3, #5
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c5c:	f000 fee0 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c60:	2378      	movs	r3, #120	; 0x78
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c7c:	f000 fed0 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <MX_GPIO_Init+0x320>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48001000 	.word	0x48001000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000caa:	2304      	movs	r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x360>)
 8000cb6:	f000 feb3 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f000 fd6b 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cc4:	2017      	movs	r0, #23
 8000cc6:	f000 fd84 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f000 fd63 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f000 fd7c 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ac      	sub	sp, #176	; 0xb0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 ff8b 	bl	8004c78 <memset>
  if(DFSDM1_Init == 0)
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d142      	bne.n	8000df0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f9e4 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ffaf 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dba:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000de2:	f000 fe1d 	bl	8001a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a02      	ldr	r2, [pc, #8]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dee:	6013      	str	r3, [r2, #0]
  }

}
 8000df0:	bf00      	nop
 8000df2:	37b0      	adds	r7, #176	; 0xb0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200007d4 	.word	0x200007d4
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48001000 	.word	0x48001000

08000e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ac      	sub	sp, #176	; 0xb0
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2288      	movs	r2, #136	; 0x88
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 ff27 	bl	8004c78 <memset>
  if(hi2c->Instance==I2C2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <HAL_I2C_MspInit+0xb0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d13b      	bne.n	8000eac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f981 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e4c:	f7ff ff4c 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HAL_I2C_MspInit+0xb8>)
 8000e90:	f000 fdc6 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	37b0      	adds	r7, #176	; 0xb0
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_QSPI_MspInit+0x7c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d128      	bne.n	8000f34 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6513      	str	r3, [r2, #80]	; 0x50
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f12:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f16:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f24:	230a      	movs	r3, #10
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_QSPI_MspInit+0x84>)
 8000f30:	f000 fd76 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	a0001000 	.word	0xa0001000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48001000 	.word	0x48001000

08000f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fac:	2306      	movs	r3, #6
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_SPI_MspInit+0x84>)
 8000fb8:	f000 fd32 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40003c00 	.word	0x40003c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000800 	.word	0x48000800

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ae      	sub	sp, #184	; 0xb8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fe41 	bl	8004c78 <memset>
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a42      	ldr	r2, [pc, #264]	; (8001104 <HAL_UART_MspInit+0x134>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001004:	2300      	movs	r3, #0
 8001006:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f89b 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fe66 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_UART_MspInit+0x138>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	4a39      	ldr	r2, [pc, #228]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6613      	str	r3, [r2, #96]	; 0x60
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_UART_MspInit+0x138>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a33      	ldr	r2, [pc, #204]	; (8001108 <HAL_UART_MspInit+0x138>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800104c:	23c0      	movs	r3, #192	; 0xc0
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106e:	4619      	mov	r1, r3
 8001070:	4826      	ldr	r0, [pc, #152]	; (800110c <HAL_UART_MspInit+0x13c>)
 8001072:	f000 fcd5 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001076:	e040      	b.n	80010fa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <HAL_UART_MspInit+0x140>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d13b      	bne.n	80010fa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001082:	2304      	movs	r3, #4
 8001084:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001086:	2300      	movs	r3, #0
 8001088:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4618      	mov	r0, r3
 8001090:	f002 f85a 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800109a:	f7ff fe25 	bl	8000ce8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6593      	str	r3, [r2, #88]	; 0x58
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e8:	2307      	movs	r3, #7
 80010ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_UART_MspInit+0x144>)
 80010f6:	f000 fc93 	bl	8001a20 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	37b8      	adds	r7, #184	; 0xb8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40013800 	.word	0x40013800
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400
 8001110:	40004800 	.word	0x40004800
 8001114:	48000c00 	.word	0x48000c00

08001118 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ac      	sub	sp, #176	; 0xb0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2288      	movs	r2, #136	; 0x88
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fd9d 	bl	8004c78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001146:	d17c      	bne.n	8001242 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800114e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800115e:	2318      	movs	r3, #24
 8001160:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001162:	2307      	movs	r3, #7
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800116e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f001 ffe5 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001184:	f7ff fdb0 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_PCD_MspInit+0x134>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_PCD_MspInit+0x134>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fc2f 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011dc:	230a      	movs	r3, #10
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 fc18 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d114      	bne.n	800123e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_PCD_MspInit+0x134>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800122c:	f001 f8c0 	bl	80023b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800123c:	e001      	b.n	8001242 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800123e:	f001 f8b7 	bl	80023b0 <HAL_PWREx_EnableVddUSB>
}
 8001242:	bf00      	nop
 8001244:	37b0      	adds	r7, #176	; 0xb0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f95e 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012a8:	2020      	movs	r0, #32
 80012aa:	f000 fd7b 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012ae:	2040      	movs	r0, #64	; 0x40
 80012b0:	f000 fd78 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80012b4:	2080      	movs	r0, #128	; 0x80
 80012b6:	f000 fd75 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80012ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012be:	f000 fd71 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80012ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012ce:	f000 fd69 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80012d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d6:	f000 fd65 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80012da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012de:	f000 fd61 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80012e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012e6:	f000 fd5d 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80012ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ee:	f000 fd59 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001308:	f3af 8000 	nop.w
 800130c:	4601      	mov	r1, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf0      	blt.n	8001308 <_read+0x12>
  }

  return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e009      	b.n	8001356 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f912 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf1      	blt.n	8001342 <_write+0x12>
  }
  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_close>:

int _close(int file)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001390:	605a      	str	r2, [r3, #4]
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f003 fc10 	bl	8004c24 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20018000 	.word	0x20018000
 8001430:	00000400 	.word	0x00000400
 8001434:	200007d8 	.word	0x200007d8
 8001438:	20000818 	.word	0x20000818

0800143c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001464:	f7ff ffea 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <LoopForever+0x6>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <LoopForever+0xe>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	; (80014ac <LoopForever+0x16>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148e:	f003 fbcf 	bl	8004c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001492:	f7ff f881 	bl	8000598 <main>

08001496 <LoopForever>:

LoopForever:
    b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001498:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014a4:	08005cb4 	.word	0x08005cb4
  ldr r2, =_sbss
 80014a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014ac:	20000814 	.word	0x20000814

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>

080014b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f961 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f80e 	bl	80014e4 <HAL_InitTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e001      	b.n	80014d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d4:	f7ff fc0e 	bl	8000cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_InitTick+0x6c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d023      	beq.n	8001540 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_InitTick+0x70>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_InitTick+0x6c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f96d 	bl	80017ee <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d809      	bhi.n	8001534 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001528:	f000 f937 	bl	800179a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_InitTick+0x74>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e007      	b.n	8001544 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e004      	b.n	8001544 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e001      	b.n	8001544 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	200007dc 	.word	0x200007dc

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200007dc 	.word	0x200007dc

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0ac      	b.n	8001974 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f8b2 	bl	8001988 <DFSDM_GetChannelFromInstance>
 8001824:	4603      	mov	r3, r0
 8001826:	4a55      	ldr	r2, [pc, #340]	; (800197c <HAL_DFSDM_ChannelInit+0x174>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e09f      	b.n	8001974 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fa81 	bl	8000d3c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800183a:	4b51      	ldr	r3, [pc, #324]	; (8001980 <HAL_DFSDM_ChannelInit+0x178>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_DFSDM_ChannelInit+0x178>)
 8001842:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001844:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <HAL_DFSDM_ChannelInit+0x178>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d125      	bne.n	8001898 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 8001852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001856:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4948      	ldr	r1, [pc, #288]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 800186c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001870:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	493f      	ldr	r1, [pc, #252]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <HAL_DFSDM_ChannelInit+0x17c>)
 8001892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001896:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020f 	bic.w	r2, r2, #15
 80018d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f002 0207 	and.w	r2, r2, #7
 8001928:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001954:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f810 	bl	8001988 <DFSDM_GetChannelFromInstance>
 8001968:	4602      	mov	r2, r0
 800196a:	4904      	ldr	r1, [pc, #16]	; (800197c <HAL_DFSDM_ChannelInit+0x174>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200007e4 	.word	0x200007e4
 8001980:	200007e0 	.word	0x200007e0
 8001984:	40016000 	.word	0x40016000

08001988 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <DFSDM_GetChannelFromInstance+0x7c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d102      	bne.n	800199e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e02b      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <DFSDM_GetChannelFromInstance+0x80>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d102      	bne.n	80019ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e024      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <DFSDM_GetChannelFromInstance+0x84>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e01d      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <DFSDM_GetChannelFromInstance+0x88>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d102      	bne.n	80019c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e016      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <DFSDM_GetChannelFromInstance+0x8c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d102      	bne.n	80019d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019d0:	2305      	movs	r3, #5
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e00f      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <DFSDM_GetChannelFromInstance+0x90>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d102      	bne.n	80019e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019de:	2306      	movs	r3, #6
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e008      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <DFSDM_GetChannelFromInstance+0x94>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d102      	bne.n	80019f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019ec:	2307      	movs	r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e001      	b.n	80019f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019f2:	2303      	movs	r3, #3
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40016000 	.word	0x40016000
 8001a08:	40016020 	.word	0x40016020
 8001a0c:	40016040 	.word	0x40016040
 8001a10:	40016080 	.word	0x40016080
 8001a14:	400160a0 	.word	0x400160a0
 8001a18:	400160c0 	.word	0x400160c0
 8001a1c:	400160e0 	.word	0x400160e0

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e17f      	b.n	8001d30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8171 	beq.w	8001d2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d005      	beq.n	8001a60 <HAL_GPIO_Init+0x40>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d130      	bne.n	8001ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a96:	2201      	movs	r2, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 0201 	and.w	r2, r3, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d118      	bne.n	8001b00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d017      	beq.n	8001b3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	6939      	ldr	r1, [r7, #16]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ac 	beq.w	8001d2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	4a5e      	ldr	r2, [pc, #376]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bea:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x242>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x23e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x23a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x236>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x232>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x22e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x22a>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x244>
 8001c62:	2300      	movs	r3, #0
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c74:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_GPIO_Init+0x350>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae78 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000c00 	.word	0x48000c00
 8001d64:	48001000 	.word	0x48001000
 8001d68:	48001400 	.word	0x48001400
 8001d6c:	48001800 	.word	0x48001800
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f806 	bl	8001dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e081      	b.n	8001f00 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fff7 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2224      	movs	r2, #36	; 0x24
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	e006      	b.n	8001e72 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d104      	bne.n	8001e84 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e96:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69d9      	ldr	r1, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1a      	ldr	r2, [r3, #32]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d138      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e032      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d139      	bne.n	8002028 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e033      	b.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2224      	movs	r2, #36	; 0x24
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002038:	b08f      	sub	sp, #60	; 0x3c
 800203a:	af0a      	add	r7, sp, #40	; 0x28
 800203c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e116      	b.n	8002276 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff f858 	bl	8001118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fb43 	bl	8004712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	687e      	ldr	r6, [r7, #4]
 8002094:	466d      	mov	r5, sp
 8002096:	f106 0410 	add.w	r4, r6, #16
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020aa:	1d33      	adds	r3, r6, #4
 80020ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f002 fb03 	bl	80046ba <USB_CoreInit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0d7      	b.n	8002276 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fb31 	bl	8004734 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e04a      	b.n	800216e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	333d      	adds	r3, #61	; 0x3d
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b298      	uxth	r0, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3344      	adds	r3, #68	; 0x44
 8002114:	4602      	mov	r2, r0
 8002116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3340      	adds	r3, #64	; 0x40
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3348      	adds	r3, #72	; 0x48
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	334c      	adds	r3, #76	; 0x4c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3354      	adds	r3, #84	; 0x54
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3af      	bcc.n	80020d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e044      	b.n	8002208 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3b5      	bcc.n	800217e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	687e      	ldr	r6, [r7, #4]
 800221a:	466d      	mov	r5, sp
 800221c:	f106 0410 	add.w	r4, r6, #16
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002230:	1d33      	adds	r3, r6, #4
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f002 fac9 	bl	80047cc <USB_DevInit>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e014      	b.n	8002276 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b01      	cmp	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f80a 	bl	800227e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f002 fc75 	bl	8004b5e <USB_DevDisconnect>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800227e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	f043 0303 	orr.w	r3, r3, #3
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000

080022e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_PWREx_GetVoltageRange+0x18>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000

08002304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002312:	d130      	bne.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d038      	beq.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2232      	movs	r2, #50	; 0x32
 8002338:	fb02 f303 	mul.w	r3, r2, r3
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002348:	e002      	b.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3b01      	subs	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235c:	d102      	bne.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f2      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d110      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e00f      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d007      	beq.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40007000 	.word	0x40007000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6053      	str	r3, [r2, #4]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff f8d4 	bl	8001584 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e063      	b.n	80024b0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe fd5f 	bl	8000ec0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002402:	f241 3188 	movw	r1, #5000	; 0x1388
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f858 	bl	80024bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	3b01      	subs	r3, #1
 800241c:	021a      	lsls	r2, r3, #8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	2120      	movs	r1, #32
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f850 	bl	80024d8 <QSPI_WaitFlagStateUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d131      	bne.n	80024a6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800244c:	f023 0310 	bic.w	r3, r3, #16
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6852      	ldr	r2, [r2, #4]
 8002454:	0611      	lsls	r1, r2, #24
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68d2      	ldr	r2, [r2, #12]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_QSPI_Init+0xe8>)
 800246c:	4013      	ands	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6912      	ldr	r2, [r2, #16]
 8002472:	0411      	lsls	r1, r2, #16
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6952      	ldr	r2, [r2, #20]
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6992      	ldr	r2, [r2, #24]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80024ae:	7afb      	ldrb	r3, [r7, #11]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	ffe0f8fe 	.word	0xffe0f8fe

080024bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024e8:	e01a      	b.n	8002520 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f0:	d016      	beq.n	8002520 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f2:	f7ff f847 	bl	8001584 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d302      	bcc.n	8002508 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2204      	movs	r2, #4
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00e      	b.n	800253e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	429a      	cmp	r2, r3
 800253a:	d1d6      	bne.n	80024ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e3ca      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b97      	ldr	r3, [pc, #604]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002564:	4b94      	ldr	r3, [pc, #592]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80e4 	beq.w	8002744 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_RCC_OscConfig+0x4a>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b0c      	cmp	r3, #12
 8002586:	f040 808b 	bne.w	80026a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 8087 	bne.w	80026a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e3a2      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	4b82      	ldr	r3, [pc, #520]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_RCC_OscConfig+0x7c>
 80025ba:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_OscConfig+0x88>
 80025c4:	4b7c      	ldr	r3, [pc, #496]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d223      	bcs.n	800261c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fd55 	bl	8003088 <RCC_SetFlashLatencyFromMSIRange>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e383      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e8:	4b73      	ldr	r3, [pc, #460]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a72      	ldr	r2, [pc, #456]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	496d      	ldr	r1, [pc, #436]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002606:	4b6c      	ldr	r3, [pc, #432]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4968      	ldr	r1, [pc, #416]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e025      	b.n	8002668 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261c:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4960      	ldr	r1, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b5f      	ldr	r3, [pc, #380]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	495b      	ldr	r1, [pc, #364]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fd15 	bl	8003088 <RCC_SetFlashLatencyFromMSIRange>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e343      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002668:	f000 fc4a 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	4950      	ldr	r1, [pc, #320]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	4a4e      	ldr	r2, [pc, #312]	; (80027c0 <HAL_RCC_OscConfig+0x278>)
 8002686:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002688:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <HAL_RCC_OscConfig+0x27c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe ff29 	bl	80014e4 <HAL_InitTick>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d052      	beq.n	8002742 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	e327      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff66 	bl	8001584 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026bc:	f7fe ff62 	bl	8001584 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e310      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4931      	ldr	r1, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	492c      	ldr	r1, [pc, #176]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e01a      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a29      	ldr	r2, [pc, #164]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800271a:	f7fe ff33 	bl	8001584 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002722:	f7fe ff2f 	bl	8001584 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e2dd      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x1da>
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002742:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d074      	beq.n	800283a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b08      	cmp	r3, #8
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x21a>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d10e      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d10b      	bne.n	800277a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d064      	beq.n	8002838 <HAL_RCC_OscConfig+0x2f0>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d160      	bne.n	8002838 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e2ba      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x24a>
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e026      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279a:	d115      	bne.n	80027c8 <HAL_RCC_OscConfig+0x280>
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a02      	ldr	r2, [pc, #8]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e014      	b.n	80027e0 <HAL_RCC_OscConfig+0x298>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08005bc4 	.word	0x08005bc4
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004
 80027c8:	4ba0      	ldr	r3, [pc, #640]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a9f      	ldr	r2, [pc, #636]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b9d      	ldr	r3, [pc, #628]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a9c      	ldr	r2, [pc, #624]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fecc 	bl	8001584 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fec8 	bl	8001584 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e276      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2a8>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe feb8 	bl	8001584 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe feb4 	bl	8001584 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e262      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282a:	4b88      	ldr	r3, [pc, #544]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x2d0>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d060      	beq.n	8002908 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x310>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d119      	bne.n	8002886 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d116      	bne.n	8002886 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x328>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e23f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	4973      	ldr	r1, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	e040      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d023      	beq.n	80028d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fe73 	bl	8001584 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe fe6f 	bl	8001584 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e21d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b4:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	495f      	ldr	r1, [pc, #380]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	e018      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a5c      	ldr	r2, [pc, #368]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fe4f 	bl	8001584 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fe4b 	bl	8001584 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1f9      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fc:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d03c      	beq.n	800298e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002922:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fe2a 	bl	8001584 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fe26 	bl	8001584 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1d4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002946:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCC_OscConfig+0x3ec>
 8002954:	e01b      	b.n	800298e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	4a3b      	ldr	r2, [pc, #236]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fe0d 	bl	8001584 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fe09 	bl	8001584 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1b7      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ef      	bne.n	800296e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80a6 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b6:	6593      	str	r3, [r2, #88]	; 0x58
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d118      	bne.n	8002a06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fdd0 	bl	8001584 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fdcc 	bl	8001584 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e17a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x508>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4d8>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1e:	e029      	b.n	8002a74 <HAL_RCC_OscConfig+0x52c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d115      	bne.n	8002a54 <HAL_RCC_OscConfig+0x50c>
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_RCC_OscConfig+0x504>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a48:	e014      	b.n	8002a74 <HAL_RCC_OscConfig+0x52c>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	4b9c      	ldr	r3, [pc, #624]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a9b      	ldr	r2, [pc, #620]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a64:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a97      	ldr	r2, [pc, #604]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d016      	beq.n	8002aaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fd82 	bl	8001584 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe fd7e 	bl	8001584 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e12a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ed      	beq.n	8002a84 <HAL_RCC_OscConfig+0x53c>
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fd6b 	bl	8001584 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fd67 	bl	8001584 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e113      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ed      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad6:	7ffb      	ldrb	r3, [r7, #31]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b7a      	ldr	r3, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a79      	ldr	r2, [pc, #484]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80fe 	beq.w	8002cee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f040 80d0 	bne.w	8002c9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002afc:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d130      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d127      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b3c:	2a07      	cmp	r2, #7
 8002b3e:	bf14      	ite	ne
 8002b40:	2201      	movne	r2, #1
 8002b42:	2200      	moveq	r2, #0
 8002b44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d113      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d06e      	beq.n	8002c50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d069      	beq.n	8002c4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0ad      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba0:	f7fe fcf0 	bl	8001584 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fcec 	bl	8001584 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e09a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc6:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x784>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bd6:	3a01      	subs	r2, #1
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002be0:	0212      	lsls	r2, r2, #8
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002be8:	0852      	lsrs	r2, r2, #1
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0552      	lsls	r2, r2, #21
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0652      	lsls	r2, r2, #25
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c00:	0912      	lsrs	r2, r2, #4
 8002c02:	0452      	lsls	r2, r2, #17
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4930      	ldr	r1, [pc, #192]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c24:	f7fe fcae 	bl	8001584 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fcaa 	bl	8001584 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c4a:	e050      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d148      	bne.n	8002cee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c74:	f7fe fc86 	bl	8001584 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fc82 	bl	8001584 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e030      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x734>
 8002c9a:	e028      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d023      	beq.n	8002cea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x780>)
 8002ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fc69 	bl	8001584 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	e00c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe fc65 	bl	8001584 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d905      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e013      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4905      	ldr	r1, [pc, #20]	; (8002cf8 <HAL_RCC_OscConfig+0x7b0>)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x7b4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
 8002ce8:	e001      	b.n	8002cee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	feeefffc 	.word	0xfeeefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0e7      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4970      	ldr	r1, [pc, #448]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b6e      	ldr	r3, [pc, #440]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0cf      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d908      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4960      	ldr	r1, [pc, #384]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d04c      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	4b5a      	ldr	r3, [pc, #360]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d121      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0a6      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d115      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e09a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db6:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08e      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e086      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4943      	ldr	r1, [pc, #268]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe fbcc 	bl	8001584 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fbc8 	bl	8001584 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e06e      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d208      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	492b      	ldr	r1, [pc, #172]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d210      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 0207 	bic.w	r2, r3, #7
 8002e5c:	4923      	ldr	r1, [pc, #140]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e036      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4918      	ldr	r1, [pc, #96]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4910      	ldr	r1, [pc, #64]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb4:	f000 f824 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1fc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fb03 	bl	80014e4 <HAL_InitTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08005bc4 	.word	0x08005bc4
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x34>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d121      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11e      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f5c:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	e004      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d134      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d003      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xac>
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fa8:	617b      	str	r3, [r7, #20]
      break;
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fae:	617b      	str	r3, [r7, #20]
      break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fb03 f202 	mul.w	r2, r3, r2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	0e5b      	lsrs	r3, r3, #25
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08005bdc 	.word	0x08005bdc
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000000 	.word	0x20000000

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003034:	f7ff fff0 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08005bd4 	.word	0x08005bd4

0800305c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003060:	f7ff ffda 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0adb      	lsrs	r3, r3, #11
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08005bd4 	.word	0x08005bd4

08003088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030a0:	f7ff f922 	bl	80022e8 <HAL_PWREx_GetVoltageRange>
 80030a4:	6178      	str	r0, [r7, #20]
 80030a6:	e014      	b.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	; 0x58
 80030b4:	4b22      	ldr	r3, [pc, #136]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030c0:	f7ff f912 	bl	80022e8 <HAL_PWREx_GetVoltageRange>
 80030c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d8:	d10b      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d919      	bls.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2ba0      	cmp	r3, #160	; 0xa0
 80030e4:	d902      	bls.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e6:	2302      	movs	r3, #2
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e013      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e010      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d902      	bls.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030f8:	2303      	movs	r3, #3
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e00a      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d102      	bne.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003104:	2302      	movs	r3, #2
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	e004      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b70      	cmp	r3, #112	; 0x70
 800310e:	d101      	bne.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003110:	2301      	movs	r3, #1
 8003112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	4909      	ldr	r1, [pc, #36]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	40022000 	.word	0x40022000

08003148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003150:	2300      	movs	r3, #0
 8003152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003154:	2300      	movs	r3, #0
 8003156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003160:	2b00      	cmp	r3, #0
 8003162:	d041      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800316c:	d02a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800316e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003172:	d824      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800317a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800317e:	d81e      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003188:	d010      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800318a:	e018      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800318c:	4b86      	ldr	r3, [pc, #536]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a85      	ldr	r2, [pc, #532]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003198:	e015      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 facb 	bl	800373c <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031aa:	e00c      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3320      	adds	r3, #32
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fbb6 	bl	8003924 <RCCEx_PLLSAI2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	74fb      	strb	r3, [r7, #19]
      break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031cc:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031da:	4973      	ldr	r1, [pc, #460]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031e2:	e001      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d041      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031fc:	d02a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003202:	d824      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003208:	d008      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800320a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320e:	d81e      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003218:	d010      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800321a:	e018      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800321c:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003228:	e015      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fa83 	bl	800373c <RCCEx_PLLSAI1_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800323a:	e00c      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3320      	adds	r3, #32
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fb6e 	bl	8003924 <RCCEx_PLLSAI2_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	74fb      	strb	r3, [r7, #19]
      break;
 8003252:	e000      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003256:	7cfb      	ldrb	r3, [r7, #19]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800325c:	4b52      	ldr	r3, [pc, #328]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326a:	494f      	ldr	r1, [pc, #316]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a0 	beq.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
 80032ac:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3a      	ldr	r2, [pc, #232]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c8:	f7fe f95c 	bl	8001584 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ce:	e009      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d0:	f7fe f958 	bl	8001584 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	74fb      	strb	r3, [r7, #19]
        break;
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d15c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032f6:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d019      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe f917 	bl	8001584 <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	e00b      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f913 	bl	8001584 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d902      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	74fb      	strb	r3, [r7, #19]
            break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ec      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800339e:	e009      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	74bb      	strb	r3, [r7, #18]
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b4:	7c7b      	ldrb	r3, [r7, #17]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b9e      	ldr	r3, [pc, #632]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	4a9d      	ldr	r2, [pc, #628]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d2:	4b98      	ldr	r3, [pc, #608]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 0203 	bic.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	4994      	ldr	r1, [pc, #592]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f4:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 020c 	bic.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	498c      	ldr	r1, [pc, #560]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003416:	4b87      	ldr	r3, [pc, #540]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4983      	ldr	r1, [pc, #524]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003438:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	497b      	ldr	r1, [pc, #492]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	4972      	ldr	r1, [pc, #456]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800347c:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	496a      	ldr	r1, [pc, #424]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	4961      	ldr	r1, [pc, #388]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034c0:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	4959      	ldr	r1, [pc, #356]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	4950      	ldr	r1, [pc, #320]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	4948      	ldr	r1, [pc, #288]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003526:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	493f      	ldr	r1, [pc, #252]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d028      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003556:	4937      	ldr	r1, [pc, #220]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003566:	d106      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003568:	4b32      	ldr	r3, [pc, #200]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a31      	ldr	r2, [pc, #196]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003572:	60d3      	str	r3, [r2, #12]
 8003574:	e011      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800357e:	d10c      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f8d8 	bl	800373c <RCCEx_PLLSAI1_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d028      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	491f      	ldr	r1, [pc, #124]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d0:	60d3      	str	r3, [r2, #12]
 80035d2:	e011      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f8a9 	bl	800373c <RCCEx_PLLSAI1_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02b      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	4908      	ldr	r1, [pc, #32]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003622:	d109      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a02      	ldr	r2, [pc, #8]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362e:	60d3      	str	r3, [r2, #12]
 8003630:	e014      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003640:	d10c      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	2101      	movs	r1, #1
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f877 	bl	800373c <RCCEx_PLLSAI1_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02f      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003676:	4928      	ldr	r1, [pc, #160]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003686:	d10d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f854 	bl	800373c <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d014      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
 80036a2:	e011      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3320      	adds	r3, #32
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f935 	bl	8003924 <RCCEx_PLLSAI2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e2:	490d      	ldr	r1, [pc, #52]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	4904      	ldr	r1, [pc, #16]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800370e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000

0800371c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800374a:	4b75      	ldr	r3, [pc, #468]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d10d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
       ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800376e:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
       ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d047      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e044      	b.n	8003812 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d018      	beq.n	80037c2 <RCCEx_PLLSAI1_Config+0x86>
 8003790:	2b03      	cmp	r3, #3
 8003792:	d825      	bhi.n	80037e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <RCCEx_PLLSAI1_Config+0x62>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d009      	beq.n	80037b0 <RCCEx_PLLSAI1_Config+0x74>
 800379c:	e020      	b.n	80037e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800379e:	4b60      	ldr	r3, [pc, #384]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11d      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ae:	e01a      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e013      	b.n	80037ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c2:	4b57      	ldr	r3, [pc, #348]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ce:	4b54      	ldr	r3, [pc, #336]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037de:	e006      	b.n	80037ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e004      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	430b      	orrs	r3, r1
 800380c:	4944      	ldr	r1, [pc, #272]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d17d      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fd feae 	bl	8001584 <HAL_GetTick>
 8003828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800382a:	e009      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800382c:	f7fd feaa 	bl	8001584 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d902      	bls.n	8003840 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	73fb      	strb	r3, [r7, #15]
        break;
 800383e:	e005      	b.n	800384c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003840:	4b37      	ldr	r3, [pc, #220]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ef      	bne.n	800382c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d160      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d111      	bne.n	800387c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6892      	ldr	r2, [r2, #8]
 8003868:	0211      	lsls	r1, r2, #8
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68d2      	ldr	r2, [r2, #12]
 800386e:	0912      	lsrs	r2, r2, #4
 8003870:	0452      	lsls	r2, r2, #17
 8003872:	430a      	orrs	r2, r1
 8003874:	492a      	ldr	r1, [pc, #168]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	610b      	str	r3, [r1, #16]
 800387a:	e027      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d112      	bne.n	80038a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800388a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6892      	ldr	r2, [r2, #8]
 8003892:	0211      	lsls	r1, r2, #8
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6912      	ldr	r2, [r2, #16]
 8003898:	0852      	lsrs	r2, r2, #1
 800389a:	3a01      	subs	r2, #1
 800389c:	0552      	lsls	r2, r2, #21
 800389e:	430a      	orrs	r2, r1
 80038a0:	491f      	ldr	r1, [pc, #124]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	610b      	str	r3, [r1, #16]
 80038a6:	e011      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6892      	ldr	r2, [r2, #8]
 80038b8:	0211      	lsls	r1, r2, #8
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6952      	ldr	r2, [r2, #20]
 80038be:	0852      	lsrs	r2, r2, #1
 80038c0:	3a01      	subs	r2, #1
 80038c2:	0652      	lsls	r2, r2, #25
 80038c4:	430a      	orrs	r2, r1
 80038c6:	4916      	ldr	r1, [pc, #88]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fd fe54 	bl	8001584 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038de:	e009      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e0:	f7fd fe50 	bl	8001584 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d902      	bls.n	80038f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	73fb      	strb	r3, [r7, #15]
          break;
 80038f2:	e005      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ef      	beq.n	80038e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4904      	ldr	r1, [pc, #16]	; (8003920 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000

08003924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003932:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d10d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
       ||
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003956:	4b61      	ldr	r3, [pc, #388]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
       ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d047      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e044      	b.n	80039fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d018      	beq.n	80039aa <RCCEx_PLLSAI2_Config+0x86>
 8003978:	2b03      	cmp	r3, #3
 800397a:	d825      	bhi.n	80039c8 <RCCEx_PLLSAI2_Config+0xa4>
 800397c:	2b01      	cmp	r3, #1
 800397e:	d002      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0x62>
 8003980:	2b02      	cmp	r3, #2
 8003982:	d009      	beq.n	8003998 <RCCEx_PLLSAI2_Config+0x74>
 8003984:	e020      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003986:	4b55      	ldr	r3, [pc, #340]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11d      	bne.n	80039ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e01a      	b.n	80039ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003998:	4b50      	ldr	r3, [pc, #320]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e013      	b.n	80039d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039aa:	4b4c      	ldr	r3, [pc, #304]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039b6:	4b49      	ldr	r3, [pc, #292]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039c6:	e006      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e004      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039de:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	430b      	orrs	r3, r1
 80039f4:	4939      	ldr	r1, [pc, #228]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d167      	bne.n	8003ad0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a35      	ldr	r2, [pc, #212]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fd fdba 	bl	8001584 <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a12:	e009      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a14:	f7fd fdb6 	bl	8001584 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d902      	bls.n	8003a28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	73fb      	strb	r3, [r7, #15]
        break;
 8003a26:	e005      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ef      	bne.n	8003a14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d14a      	bne.n	8003ad0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	0211      	lsls	r1, r2, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	0912      	lsrs	r2, r2, #4
 8003a58:	0452      	lsls	r2, r2, #17
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	491f      	ldr	r1, [pc, #124]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	614b      	str	r3, [r1, #20]
 8003a62:	e011      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6892      	ldr	r2, [r2, #8]
 8003a74:	0211      	lsls	r1, r2, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6912      	ldr	r2, [r2, #16]
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0652      	lsls	r2, r2, #25
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4916      	ldr	r1, [pc, #88]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7fd fd76 	bl	8001584 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a9a:	e009      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a9c:	f7fd fd72 	bl	8001584 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d902      	bls.n	8003ab0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	73fb      	strb	r3, [r7, #15]
          break;
 8003aae:	e005      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ef      	beq.n	8003a9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4904      	ldr	r1, [pc, #16]	; (8003adc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e095      	b.n	8003c1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b02:	d009      	beq.n	8003b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
 8003b0a:	e005      	b.n	8003b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fa08 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b58:	d902      	bls.n	8003b60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e002      	b.n	8003b66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b6e:	d007      	beq.n	8003b80 <HAL_SPI_Init+0xa0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc2:	ea42 0103 	orr.w	r1, r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	f003 0204 	and.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bfc:	ea42 0103 	orr.w	r1, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e040      	b.n	8003cba <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fd f9c1 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2224      	movs	r2, #36	; 0x24
 8003c52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8c1 	bl	8003dec <UART_SetConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e022      	b.n	8003cba <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb6d 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fbf4 	bl	80044a0 <UART_CheckIdleState>
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b08a      	sub	sp, #40	; 0x28
 8003cc6:	af02      	add	r7, sp, #8
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	f040 8082 	bne.w	8003de0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_UART_Transmit+0x26>
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e07a      	b.n	8003de2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit+0x38>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e073      	b.n	8003de2 <HAL_UART_Transmit+0x120>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2221      	movs	r2, #33	; 0x21
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d10:	f7fd fc38 	bl	8001584 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	d108      	bne.n	8003d42 <HAL_UART_Transmit+0x80>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e003      	b.n	8003d4a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d52:	e02d      	b.n	8003db0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fbe7 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e039      	b.n	8003de2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	881a      	ldrh	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	b292      	uxth	r2, r2
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	3302      	adds	r3, #2
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e008      	b.n	8003d9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b292      	uxth	r2, r2
 8003d96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1cb      	bne.n	8003d54 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2140      	movs	r1, #64	; 0x40
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fbb3 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e005      	b.n	8003de2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b08a      	sub	sp, #40	; 0x28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4ba4      	ldr	r3, [pc, #656]	; (80040ac <UART_SetConfig+0x2c0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a99      	ldr	r2, [pc, #612]	; (80040b0 <UART_SetConfig+0x2c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a90      	ldr	r2, [pc, #576]	; (80040b4 <UART_SetConfig+0x2c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d126      	bne.n	8003ec4 <UART_SetConfig+0xd8>
 8003e76:	4b90      	ldr	r3, [pc, #576]	; (80040b8 <UART_SetConfig+0x2cc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0xd0>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0xa0>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ead 	.word	0x08003ead
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e116      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e112      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb2:	e10e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e10a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e106      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <UART_SetConfig+0x2d0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d138      	bne.n	8003f40 <UART_SetConfig+0x154>
 8003ece:	4b7a      	ldr	r3, [pc, #488]	; (80040b8 <UART_SetConfig+0x2cc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d82d      	bhi.n	8003f38 <UART_SetConfig+0x14c>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0xf8>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f39 	.word	0x08003f39
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e0d8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	e0d4      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2e:	e0d0      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f36:	e0cc      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3e:	e0c8      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5e      	ldr	r2, [pc, #376]	; (80040c0 <UART_SetConfig+0x2d4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d125      	bne.n	8003f96 <UART_SetConfig+0x1aa>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	; (80040b8 <UART_SetConfig+0x2cc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d016      	beq.n	8003f86 <UART_SetConfig+0x19a>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d00a      	beq.n	8003f76 <UART_SetConfig+0x18a>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d814      	bhi.n	8003f8e <UART_SetConfig+0x1a2>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <UART_SetConfig+0x182>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d008      	beq.n	8003f7e <UART_SetConfig+0x192>
 8003f6c:	e00f      	b.n	8003f8e <UART_SetConfig+0x1a2>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f74:	e0ad      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7c:	e0a9      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f7e:	2304      	movs	r3, #4
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f84:	e0a5      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f86:	2308      	movs	r3, #8
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8c:	e0a1      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f8e:	2310      	movs	r3, #16
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f94:	e09d      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <UART_SetConfig+0x2d8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d125      	bne.n	8003fec <UART_SetConfig+0x200>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <UART_SetConfig+0x2cc>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003faa:	2bc0      	cmp	r3, #192	; 0xc0
 8003fac:	d016      	beq.n	8003fdc <UART_SetConfig+0x1f0>
 8003fae:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb0:	d818      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d00a      	beq.n	8003fcc <UART_SetConfig+0x1e0>
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d814      	bhi.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <UART_SetConfig+0x1d8>
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x1e8>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x1f8>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e082      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e07e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e07a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e076      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e072      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <UART_SetConfig+0x2dc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d12a      	bne.n	800404c <UART_SetConfig+0x260>
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <UART_SetConfig+0x2cc>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0x250>
 8004006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400a:	d81b      	bhi.n	8004044 <UART_SetConfig+0x258>
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d00c      	beq.n	800402c <UART_SetConfig+0x240>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004016:	d815      	bhi.n	8004044 <UART_SetConfig+0x258>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <UART_SetConfig+0x238>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004020:	d008      	beq.n	8004034 <UART_SetConfig+0x248>
 8004022:	e00f      	b.n	8004044 <UART_SetConfig+0x258>
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402a:	e052      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800402c:	2302      	movs	r3, #2
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004032:	e04e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004034:	2304      	movs	r3, #4
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e04a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800403c:	2308      	movs	r3, #8
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004042:	e046      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004044:	2310      	movs	r3, #16
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404a:	e042      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <UART_SetConfig+0x2c4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13a      	bne.n	80040cc <UART_SetConfig+0x2e0>
 8004056:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <UART_SetConfig+0x2cc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004064:	d01a      	beq.n	800409c <UART_SetConfig+0x2b0>
 8004066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800406a:	d81b      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d00c      	beq.n	800408c <UART_SetConfig+0x2a0>
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004076:	d815      	bhi.n	80040a4 <UART_SetConfig+0x2b8>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x298>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d008      	beq.n	8004094 <UART_SetConfig+0x2a8>
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x2b8>
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e022      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800408c:	2302      	movs	r3, #2
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004092:	e01e      	b.n	80040d2 <UART_SetConfig+0x2e6>
 8004094:	2304      	movs	r3, #4
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409a:	e01a      	b.n	80040d2 <UART_SetConfig+0x2e6>
 800409c:	2308      	movs	r3, #8
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a2:	e016      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e012      	b.n	80040d2 <UART_SetConfig+0x2e6>
 80040ac:	efff69f3 	.word	0xefff69f3
 80040b0:	40008000 	.word	0x40008000
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40004c00 	.word	0x40004c00
 80040c8:	40005000 	.word	0x40005000
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a9f      	ldr	r2, [pc, #636]	; (8004354 <UART_SetConfig+0x568>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d17a      	bne.n	80041d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d824      	bhi.n	800412e <UART_SetConfig+0x342>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x300>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	08004111 	.word	0x08004111
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	08004119 	.word	0x08004119
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800411f 	.word	0x0800411f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800412f 	.word	0x0800412f
 800410c:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7fe ff8e 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e010      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b8f      	ldr	r3, [pc, #572]	; (8004358 <UART_SetConfig+0x56c>)
 800411a:	61fb      	str	r3, [r7, #28]
        break;
 800411c:	e00d      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7fe feef 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004122:	61f8      	str	r0, [r7, #28]
        break;
 8004124:	e009      	b.n	800413a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	61fb      	str	r3, [r7, #28]
        break;
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80fb 	beq.w	8004338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	429a      	cmp	r2, r3
 8004150:	d305      	bcc.n	800415e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004164:	e0e8      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2200      	movs	r2, #0
 800416a:	461c      	mov	r4, r3
 800416c:	4615      	mov	r5, r2
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	022b      	lsls	r3, r5, #8
 8004178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800417c:	0222      	lsls	r2, r4, #8
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6849      	ldr	r1, [r1, #4]
 8004182:	0849      	lsrs	r1, r1, #1
 8004184:	2000      	movs	r0, #0
 8004186:	4688      	mov	r8, r1
 8004188:	4681      	mov	r9, r0
 800418a:	eb12 0a08 	adds.w	sl, r2, r8
 800418e:	eb43 0b09 	adc.w	fp, r3, r9
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	4650      	mov	r0, sl
 80041a2:	4659      	mov	r1, fp
 80041a4:	f7fc f864 	bl	8000270 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b6:	d308      	bcc.n	80041ca <UART_SetConfig+0x3de>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d204      	bcs.n	80041ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e0b6      	b.n	8004338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041d0:	e0b2      	b.n	8004338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d15e      	bne.n	800429a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d828      	bhi.n	8004236 <UART_SetConfig+0x44a>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x400>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004237 	.word	0x08004237
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
 800420c:	0800422f 	.word	0x0800422f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7fe ff0e 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8004214:	61f8      	str	r0, [r7, #28]
        break;
 8004216:	e014      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe ff20 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 800421c:	61f8      	str	r0, [r7, #28]
        break;
 800421e:	e010      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004220:	4b4d      	ldr	r3, [pc, #308]	; (8004358 <UART_SetConfig+0x56c>)
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004226:	f7fe fe6b 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 800422a:	61f8      	str	r0, [r7, #28]
        break;
 800422c:	e009      	b.n	8004242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e005      	b.n	8004242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d077      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005a      	lsls	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d916      	bls.n	8004292 <UART_SetConfig+0x4a6>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d212      	bcs.n	8004292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f023 030f 	bic.w	r3, r3, #15
 8004274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	b29a      	uxth	r2, r3
 8004282:	8afb      	ldrh	r3, [r7, #22]
 8004284:	4313      	orrs	r3, r2
 8004286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	8afa      	ldrh	r2, [r7, #22]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e052      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004298:	e04e      	b.n	8004338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d827      	bhi.n	80042f2 <UART_SetConfig+0x506>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x4bc>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042f3 	.word	0x080042f3
 80042b8:	080042e3 	.word	0x080042e3
 80042bc:	080042f3 	.word	0x080042f3
 80042c0:	080042f3 	.word	0x080042f3
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	080042eb 	.word	0x080042eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fe feb0 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
        break;
 80042d2:	e014      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fec2 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 80042d8:	61f8      	str	r0, [r7, #28]
        break;
 80042da:	e010      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042dc:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <UART_SetConfig+0x56c>)
 80042de:	61fb      	str	r3, [r7, #28]
        break;
 80042e0:	e00d      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e2:	f7fe fe0d 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 80042e6:	61f8      	str	r0, [r7, #28]
        break;
 80042e8:	e009      	b.n	80042fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	61fb      	str	r3, [r7, #28]
        break;
 80042f0:	e005      	b.n	80042fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042fc:	bf00      	nop
    }

    if (pclk != 0U)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d019      	beq.n	8004338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	085a      	lsrs	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	fbb2 f3f3 	udiv	r3, r2, r3
 8004316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d909      	bls.n	8004332 <UART_SetConfig+0x546>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d205      	bcs.n	8004332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	e002      	b.n	8004338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004344:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40008000 	.word	0x40008000
 8004358:	00f42400 	.word	0x00f42400

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01a      	beq.n	8004472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d10a      	bne.n	8004472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044b0:	f7fd f868 	bl	8001584 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d10e      	bne.n	80044e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f82d 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e023      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d10e      	bne.n	800450e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f817 	bl	8004532 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00d      	b.n	800452a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b09c      	sub	sp, #112	; 0x70
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	e0a5      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800454a:	f000 80a1 	beq.w	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fd f819 	bl	8001584 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
 800455e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004560:	2b00      	cmp	r3, #0
 8004562:	d13e      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004578:	667b      	str	r3, [r7, #100]	; 0x64
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	663b      	str	r3, [r7, #96]	; 0x60
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e067      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04f      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fe:	d147      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004608:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800461e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	613b      	str	r3, [r7, #16]
   return(result);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800465c:	623a      	str	r2, [r7, #32]
 800465e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	69f9      	ldr	r1, [r7, #28]
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	61bb      	str	r3, [r7, #24]
   return(result);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e010      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	f43f af4a 	beq.w	8004544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3770      	adds	r7, #112	; 0x70
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ba:	b084      	sub	sp, #16
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	f107 001c 	add.w	r0, r7, #28
 80046c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fa6f 	bl	8004bbc <USB_CoreReset>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80046e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
 80046f4:	e005      	b.n	8004702 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470e:	b004      	add	sp, #16
 8004710:	4770      	bx	lr

08004712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004762:	2001      	movs	r0, #1
 8004764:	f7fc ff1a 	bl	800159c <HAL_Delay>
      ms++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa16 	bl	8004ba0 <USB_GetMode>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d01e      	beq.n	80047b8 <USB_SetCurrentMode+0x84>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b31      	cmp	r3, #49	; 0x31
 800477e:	d9f0      	bls.n	8004762 <USB_SetCurrentMode+0x2e>
 8004780:	e01a      	b.n	80047b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d115      	bne.n	80047b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004794:	2001      	movs	r0, #1
 8004796:	f7fc ff01 	bl	800159c <HAL_Delay>
      ms++;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9fd 	bl	8004ba0 <USB_GetMode>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <USB_SetCurrentMode+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b31      	cmp	r3, #49	; 0x31
 80047b0:	d9f0      	bls.n	8004794 <USB_SetCurrentMode+0x60>
 80047b2:	e001      	b.n	80047b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e005      	b.n	80047c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b32      	cmp	r3, #50	; 0x32
 80047bc:	d101      	bne.n	80047c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e009      	b.n	8004800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3340      	adds	r3, #64	; 0x40
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3301      	adds	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0e      	cmp	r3, #14
 8004804:	d9f2      	bls.n	80047ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11c      	bne.n	8004846 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481a:	f043 0302 	orr.w	r3, r3, #2
 800481e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e005      	b.n	8004852 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	4619      	mov	r1, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	461a      	mov	r2, r3
 800486e:	680b      	ldr	r3, [r1, #0]
 8004870:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004872:	2103      	movs	r1, #3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f959 	bl	8004b2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800487a:	2110      	movs	r1, #16
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8f1 	bl	8004a64 <USB_FlushTxFifo>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f91d 	bl	8004acc <USB_FlushRxFifo>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	461a      	mov	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	e043      	b.n	800494e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048dc:	d118      	bne.n	8004910 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	461a      	mov	r2, r3
 80048f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e013      	b.n	8004922 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	461a      	mov	r2, r3
 8004908:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e008      	b.n	8004922 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3301      	adds	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3b7      	bcc.n	80048c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e043      	b.n	80049e4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004972:	d118      	bne.n	80049a6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	461a      	mov	r2, r3
 8004988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e013      	b.n	80049b8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	461a      	mov	r2, r3
 800499e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e008      	b.n	80049b8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	461a      	mov	r2, r3
 80049c6:	2300      	movs	r3, #0
 80049c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3301      	adds	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d3b7      	bcc.n	800495c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f043 0210 	orr.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <USB_DevInit+0x294>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f043 0208 	orr.w	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	803c3800 	.word	0x803c3800

08004a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <USB_FlushTxFifo+0x64>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e01b      	b.n	8004abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	daf2      	bge.n	8004a72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	019b      	lsls	r3, r3, #6
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <USB_FlushTxFifo+0x64>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e006      	b.n	8004abc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d0f0      	beq.n	8004a9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <USB_FlushRxFifo+0x5c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e018      	b.n	8004b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	daf2      	bge.n	8004ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2210      	movs	r2, #16
 8004afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <USB_FlushRxFifo+0x5c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e006      	b.n	8004b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d0f0      	beq.n	8004afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	00030d40 	.word	0x00030d40

08004b2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8c:	f043 0302 	orr.w	r3, r3, #2
 8004b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0301 	and.w	r3, r3, #1
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <USB_CoreReset+0x64>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e01b      	b.n	8004c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	daf2      	bge.n	8004bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <USB_CoreReset+0x64>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e006      	b.n	8004c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d0f0      	beq.n	8004bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	00030d40 	.word	0x00030d40

08004c24 <__errno>:
 8004c24:	4b01      	ldr	r3, [pc, #4]	; (8004c2c <__errno+0x8>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	2000000c 	.word	0x2000000c

08004c30 <__libc_init_array>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4d0d      	ldr	r5, [pc, #52]	; (8004c68 <__libc_init_array+0x38>)
 8004c34:	4c0d      	ldr	r4, [pc, #52]	; (8004c6c <__libc_init_array+0x3c>)
 8004c36:	1b64      	subs	r4, r4, r5
 8004c38:	10a4      	asrs	r4, r4, #2
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	42a6      	cmp	r6, r4
 8004c3e:	d109      	bne.n	8004c54 <__libc_init_array+0x24>
 8004c40:	4d0b      	ldr	r5, [pc, #44]	; (8004c70 <__libc_init_array+0x40>)
 8004c42:	4c0c      	ldr	r4, [pc, #48]	; (8004c74 <__libc_init_array+0x44>)
 8004c44:	f000 ffae 	bl	8005ba4 <_init>
 8004c48:	1b64      	subs	r4, r4, r5
 8004c4a:	10a4      	asrs	r4, r4, #2
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	42a6      	cmp	r6, r4
 8004c50:	d105      	bne.n	8004c5e <__libc_init_array+0x2e>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c58:	4798      	blx	r3
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7ee      	b.n	8004c3c <__libc_init_array+0xc>
 8004c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c62:	4798      	blx	r3
 8004c64:	3601      	adds	r6, #1
 8004c66:	e7f2      	b.n	8004c4e <__libc_init_array+0x1e>
 8004c68:	08005cac 	.word	0x08005cac
 8004c6c:	08005cac 	.word	0x08005cac
 8004c70:	08005cac 	.word	0x08005cac
 8004c74:	08005cb0 	.word	0x08005cb0

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <iprintf>:
 8004c88:	b40f      	push	{r0, r1, r2, r3}
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <iprintf+0x2c>)
 8004c8c:	b513      	push	{r0, r1, r4, lr}
 8004c8e:	681c      	ldr	r4, [r3, #0]
 8004c90:	b124      	cbz	r4, 8004c9c <iprintf+0x14>
 8004c92:	69a3      	ldr	r3, [r4, #24]
 8004c94:	b913      	cbnz	r3, 8004c9c <iprintf+0x14>
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f866 	bl	8004d68 <__sinit>
 8004c9c:	ab05      	add	r3, sp, #20
 8004c9e:	9a04      	ldr	r2, [sp, #16]
 8004ca0:	68a1      	ldr	r1, [r4, #8]
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f9bd 	bl	8005024 <_vfiprintf_r>
 8004caa:	b002      	add	sp, #8
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb0:	b004      	add	sp, #16
 8004cb2:	4770      	bx	lr
 8004cb4:	2000000c 	.word	0x2000000c

08004cb8 <std>:
 8004cb8:	2300      	movs	r3, #0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc6:	6083      	str	r3, [r0, #8]
 8004cc8:	8181      	strh	r1, [r0, #12]
 8004cca:	6643      	str	r3, [r0, #100]	; 0x64
 8004ccc:	81c2      	strh	r2, [r0, #14]
 8004cce:	6183      	str	r3, [r0, #24]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	305c      	adds	r0, #92	; 0x5c
 8004cd6:	f7ff ffcf 	bl	8004c78 <memset>
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <std+0x38>)
 8004cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <std+0x3c>)
 8004ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <std+0x40>)
 8004ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <std+0x44>)
 8004ce8:	6224      	str	r4, [r4, #32]
 8004cea:	6323      	str	r3, [r4, #48]	; 0x30
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	bf00      	nop
 8004cf0:	080055cd 	.word	0x080055cd
 8004cf4:	080055ef 	.word	0x080055ef
 8004cf8:	08005627 	.word	0x08005627
 8004cfc:	0800564b 	.word	0x0800564b

08004d00 <_cleanup_r>:
 8004d00:	4901      	ldr	r1, [pc, #4]	; (8004d08 <_cleanup_r+0x8>)
 8004d02:	f000 b8af 	b.w	8004e64 <_fwalk_reent>
 8004d06:	bf00      	nop
 8004d08:	08005925 	.word	0x08005925

08004d0c <__sfmoreglue>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	2268      	movs	r2, #104	; 0x68
 8004d10:	1e4d      	subs	r5, r1, #1
 8004d12:	4355      	muls	r5, r2
 8004d14:	460e      	mov	r6, r1
 8004d16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d1a:	f000 f8e5 	bl	8004ee8 <_malloc_r>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	b140      	cbz	r0, 8004d34 <__sfmoreglue+0x28>
 8004d22:	2100      	movs	r1, #0
 8004d24:	e9c0 1600 	strd	r1, r6, [r0]
 8004d28:	300c      	adds	r0, #12
 8004d2a:	60a0      	str	r0, [r4, #8]
 8004d2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d30:	f7ff ffa2 	bl	8004c78 <memset>
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd70      	pop	{r4, r5, r6, pc}

08004d38 <__sfp_lock_acquire>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__sfp_lock_acquire+0x8>)
 8004d3a:	f000 b8b3 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000805 	.word	0x20000805

08004d44 <__sfp_lock_release>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__sfp_lock_release+0x8>)
 8004d46:	f000 b8ae 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000805 	.word	0x20000805

08004d50 <__sinit_lock_acquire>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sinit_lock_acquire+0x8>)
 8004d52:	f000 b8a7 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	20000806 	.word	0x20000806

08004d5c <__sinit_lock_release>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__sinit_lock_release+0x8>)
 8004d5e:	f000 b8a2 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	20000806 	.word	0x20000806

08004d68 <__sinit>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	f7ff fff0 	bl	8004d50 <__sinit_lock_acquire>
 8004d70:	69a3      	ldr	r3, [r4, #24]
 8004d72:	b11b      	cbz	r3, 8004d7c <__sinit+0x14>
 8004d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d78:	f7ff bff0 	b.w	8004d5c <__sinit_lock_release>
 8004d7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d80:	6523      	str	r3, [r4, #80]	; 0x50
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <__sinit+0x68>)
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <__sinit+0x6c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	bf04      	itt	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	61a3      	streq	r3, [r4, #24]
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 f820 	bl	8004dd8 <__sfp>
 8004d98:	6060      	str	r0, [r4, #4]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 f81c 	bl	8004dd8 <__sfp>
 8004da0:	60a0      	str	r0, [r4, #8]
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f818 	bl	8004dd8 <__sfp>
 8004da8:	2200      	movs	r2, #0
 8004daa:	60e0      	str	r0, [r4, #12]
 8004dac:	2104      	movs	r1, #4
 8004dae:	6860      	ldr	r0, [r4, #4]
 8004db0:	f7ff ff82 	bl	8004cb8 <std>
 8004db4:	68a0      	ldr	r0, [r4, #8]
 8004db6:	2201      	movs	r2, #1
 8004db8:	2109      	movs	r1, #9
 8004dba:	f7ff ff7d 	bl	8004cb8 <std>
 8004dbe:	68e0      	ldr	r0, [r4, #12]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	2112      	movs	r1, #18
 8004dc4:	f7ff ff78 	bl	8004cb8 <std>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	61a3      	str	r3, [r4, #24]
 8004dcc:	e7d2      	b.n	8004d74 <__sinit+0xc>
 8004dce:	bf00      	nop
 8004dd0:	08005c0c 	.word	0x08005c0c
 8004dd4:	08004d01 	.word	0x08004d01

08004dd8 <__sfp>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	4607      	mov	r7, r0
 8004ddc:	f7ff ffac 	bl	8004d38 <__sfp_lock_acquire>
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <__sfp+0x84>)
 8004de2:	681e      	ldr	r6, [r3, #0]
 8004de4:	69b3      	ldr	r3, [r6, #24]
 8004de6:	b913      	cbnz	r3, 8004dee <__sfp+0x16>
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff ffbd 	bl	8004d68 <__sinit>
 8004dee:	3648      	adds	r6, #72	; 0x48
 8004df0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	d503      	bpl.n	8004e00 <__sfp+0x28>
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	b30b      	cbz	r3, 8004e40 <__sfp+0x68>
 8004dfc:	6836      	ldr	r6, [r6, #0]
 8004dfe:	e7f7      	b.n	8004df0 <__sfp+0x18>
 8004e00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e04:	b9d5      	cbnz	r5, 8004e3c <__sfp+0x64>
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <__sfp+0x88>)
 8004e08:	60e3      	str	r3, [r4, #12]
 8004e0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e0e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e10:	f000 f847 	bl	8004ea2 <__retarget_lock_init_recursive>
 8004e14:	f7ff ff96 	bl	8004d44 <__sfp_lock_release>
 8004e18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e20:	6025      	str	r5, [r4, #0]
 8004e22:	61a5      	str	r5, [r4, #24]
 8004e24:	2208      	movs	r2, #8
 8004e26:	4629      	mov	r1, r5
 8004e28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e2c:	f7ff ff24 	bl	8004c78 <memset>
 8004e30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e38:	4620      	mov	r0, r4
 8004e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3c:	3468      	adds	r4, #104	; 0x68
 8004e3e:	e7d9      	b.n	8004df4 <__sfp+0x1c>
 8004e40:	2104      	movs	r1, #4
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7ff ff62 	bl	8004d0c <__sfmoreglue>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	6030      	str	r0, [r6, #0]
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1d5      	bne.n	8004dfc <__sfp+0x24>
 8004e50:	f7ff ff78 	bl	8004d44 <__sfp_lock_release>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	e7ee      	b.n	8004e38 <__sfp+0x60>
 8004e5a:	bf00      	nop
 8004e5c:	08005c0c 	.word	0x08005c0c
 8004e60:	ffff0001 	.word	0xffff0001

08004e64 <_fwalk_reent>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	4606      	mov	r6, r0
 8004e6a:	4688      	mov	r8, r1
 8004e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e70:	2700      	movs	r7, #0
 8004e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e76:	f1b9 0901 	subs.w	r9, r9, #1
 8004e7a:	d505      	bpl.n	8004e88 <_fwalk_reent+0x24>
 8004e7c:	6824      	ldr	r4, [r4, #0]
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	d1f7      	bne.n	8004e72 <_fwalk_reent+0xe>
 8004e82:	4638      	mov	r0, r7
 8004e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e88:	89ab      	ldrh	r3, [r5, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d907      	bls.n	8004e9e <_fwalk_reent+0x3a>
 8004e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e92:	3301      	adds	r3, #1
 8004e94:	d003      	beq.n	8004e9e <_fwalk_reent+0x3a>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	47c0      	blx	r8
 8004e9c:	4307      	orrs	r7, r0
 8004e9e:	3568      	adds	r5, #104	; 0x68
 8004ea0:	e7e9      	b.n	8004e76 <_fwalk_reent+0x12>

08004ea2 <__retarget_lock_init_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <__retarget_lock_acquire_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_release_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <sbrk_aligned>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4e0e      	ldr	r6, [pc, #56]	; (8004ee4 <sbrk_aligned+0x3c>)
 8004eac:	460c      	mov	r4, r1
 8004eae:	6831      	ldr	r1, [r6, #0]
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	b911      	cbnz	r1, 8004eba <sbrk_aligned+0x12>
 8004eb4:	f000 fb7a 	bl	80055ac <_sbrk_r>
 8004eb8:	6030      	str	r0, [r6, #0]
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 fb75 	bl	80055ac <_sbrk_r>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	d00a      	beq.n	8004edc <sbrk_aligned+0x34>
 8004ec6:	1cc4      	adds	r4, r0, #3
 8004ec8:	f024 0403 	bic.w	r4, r4, #3
 8004ecc:	42a0      	cmp	r0, r4
 8004ece:	d007      	beq.n	8004ee0 <sbrk_aligned+0x38>
 8004ed0:	1a21      	subs	r1, r4, r0
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 fb6a 	bl	80055ac <_sbrk_r>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d101      	bne.n	8004ee0 <sbrk_aligned+0x38>
 8004edc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	2000080c 	.word	0x2000080c

08004ee8 <_malloc_r>:
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	1ccd      	adds	r5, r1, #3
 8004eee:	f025 0503 	bic.w	r5, r5, #3
 8004ef2:	3508      	adds	r5, #8
 8004ef4:	2d0c      	cmp	r5, #12
 8004ef6:	bf38      	it	cc
 8004ef8:	250c      	movcc	r5, #12
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	4607      	mov	r7, r0
 8004efe:	db01      	blt.n	8004f04 <_malloc_r+0x1c>
 8004f00:	42a9      	cmp	r1, r5
 8004f02:	d905      	bls.n	8004f10 <_malloc_r+0x28>
 8004f04:	230c      	movs	r3, #12
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	2600      	movs	r6, #0
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f10:	4e2e      	ldr	r6, [pc, #184]	; (8004fcc <_malloc_r+0xe4>)
 8004f12:	f000 fdbb 	bl	8005a8c <__malloc_lock>
 8004f16:	6833      	ldr	r3, [r6, #0]
 8004f18:	461c      	mov	r4, r3
 8004f1a:	bb34      	cbnz	r4, 8004f6a <_malloc_r+0x82>
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f7ff ffc2 	bl	8004ea8 <sbrk_aligned>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	4604      	mov	r4, r0
 8004f28:	d14d      	bne.n	8004fc6 <_malloc_r+0xde>
 8004f2a:	6834      	ldr	r4, [r6, #0]
 8004f2c:	4626      	mov	r6, r4
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d140      	bne.n	8004fb4 <_malloc_r+0xcc>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4631      	mov	r1, r6
 8004f36:	4638      	mov	r0, r7
 8004f38:	eb04 0803 	add.w	r8, r4, r3
 8004f3c:	f000 fb36 	bl	80055ac <_sbrk_r>
 8004f40:	4580      	cmp	r8, r0
 8004f42:	d13a      	bne.n	8004fba <_malloc_r+0xd2>
 8004f44:	6821      	ldr	r1, [r4, #0]
 8004f46:	3503      	adds	r5, #3
 8004f48:	1a6d      	subs	r5, r5, r1
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	4629      	mov	r1, r5
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ffa5 	bl	8004ea8 <sbrk_aligned>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d02b      	beq.n	8004fba <_malloc_r+0xd2>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	442b      	add	r3, r5
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	e00e      	b.n	8004f88 <_malloc_r+0xa0>
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	1b52      	subs	r2, r2, r5
 8004f6e:	d41e      	bmi.n	8004fae <_malloc_r+0xc6>
 8004f70:	2a0b      	cmp	r2, #11
 8004f72:	d916      	bls.n	8004fa2 <_malloc_r+0xba>
 8004f74:	1961      	adds	r1, r4, r5
 8004f76:	42a3      	cmp	r3, r4
 8004f78:	6025      	str	r5, [r4, #0]
 8004f7a:	bf18      	it	ne
 8004f7c:	6059      	strne	r1, [r3, #4]
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	bf08      	it	eq
 8004f82:	6031      	streq	r1, [r6, #0]
 8004f84:	5162      	str	r2, [r4, r5]
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f104 060b 	add.w	r6, r4, #11
 8004f8e:	f000 fd83 	bl	8005a98 <__malloc_unlock>
 8004f92:	f026 0607 	bic.w	r6, r6, #7
 8004f96:	1d23      	adds	r3, r4, #4
 8004f98:	1af2      	subs	r2, r6, r3
 8004f9a:	d0b6      	beq.n	8004f0a <_malloc_r+0x22>
 8004f9c:	1b9b      	subs	r3, r3, r6
 8004f9e:	50a3      	str	r3, [r4, r2]
 8004fa0:	e7b3      	b.n	8004f0a <_malloc_r+0x22>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	bf0c      	ite	eq
 8004fa8:	6032      	streq	r2, [r6, #0]
 8004faa:	605a      	strne	r2, [r3, #4]
 8004fac:	e7ec      	b.n	8004f88 <_malloc_r+0xa0>
 8004fae:	4623      	mov	r3, r4
 8004fb0:	6864      	ldr	r4, [r4, #4]
 8004fb2:	e7b2      	b.n	8004f1a <_malloc_r+0x32>
 8004fb4:	4634      	mov	r4, r6
 8004fb6:	6876      	ldr	r6, [r6, #4]
 8004fb8:	e7b9      	b.n	8004f2e <_malloc_r+0x46>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	f000 fd6a 	bl	8005a98 <__malloc_unlock>
 8004fc4:	e7a1      	b.n	8004f0a <_malloc_r+0x22>
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	e7de      	b.n	8004f88 <_malloc_r+0xa0>
 8004fca:	bf00      	nop
 8004fcc:	20000808 	.word	0x20000808

08004fd0 <__sfputc_r>:
 8004fd0:	6893      	ldr	r3, [r2, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	b410      	push	{r4}
 8004fd8:	6093      	str	r3, [r2, #8]
 8004fda:	da08      	bge.n	8004fee <__sfputc_r+0x1e>
 8004fdc:	6994      	ldr	r4, [r2, #24]
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	db01      	blt.n	8004fe6 <__sfputc_r+0x16>
 8004fe2:	290a      	cmp	r1, #10
 8004fe4:	d103      	bne.n	8004fee <__sfputc_r+0x1e>
 8004fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fea:	f000 bb33 	b.w	8005654 <__swbuf_r>
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	1c58      	adds	r0, r3, #1
 8004ff2:	6010      	str	r0, [r2, #0]
 8004ff4:	7019      	strb	r1, [r3, #0]
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <__sfputs_r>:
 8004ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005000:	4606      	mov	r6, r0
 8005002:	460f      	mov	r7, r1
 8005004:	4614      	mov	r4, r2
 8005006:	18d5      	adds	r5, r2, r3
 8005008:	42ac      	cmp	r4, r5
 800500a:	d101      	bne.n	8005010 <__sfputs_r+0x12>
 800500c:	2000      	movs	r0, #0
 800500e:	e007      	b.n	8005020 <__sfputs_r+0x22>
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	463a      	mov	r2, r7
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ffda 	bl	8004fd0 <__sfputc_r>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d1f3      	bne.n	8005008 <__sfputs_r+0xa>
 8005020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005024 <_vfiprintf_r>:
 8005024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005028:	460d      	mov	r5, r1
 800502a:	b09d      	sub	sp, #116	; 0x74
 800502c:	4614      	mov	r4, r2
 800502e:	4698      	mov	r8, r3
 8005030:	4606      	mov	r6, r0
 8005032:	b118      	cbz	r0, 800503c <_vfiprintf_r+0x18>
 8005034:	6983      	ldr	r3, [r0, #24]
 8005036:	b90b      	cbnz	r3, 800503c <_vfiprintf_r+0x18>
 8005038:	f7ff fe96 	bl	8004d68 <__sinit>
 800503c:	4b89      	ldr	r3, [pc, #548]	; (8005264 <_vfiprintf_r+0x240>)
 800503e:	429d      	cmp	r5, r3
 8005040:	d11b      	bne.n	800507a <_vfiprintf_r+0x56>
 8005042:	6875      	ldr	r5, [r6, #4]
 8005044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005046:	07d9      	lsls	r1, r3, #31
 8005048:	d405      	bmi.n	8005056 <_vfiprintf_r+0x32>
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	059a      	lsls	r2, r3, #22
 800504e:	d402      	bmi.n	8005056 <_vfiprintf_r+0x32>
 8005050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005052:	f7ff ff27 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	071b      	lsls	r3, r3, #28
 800505a:	d501      	bpl.n	8005060 <_vfiprintf_r+0x3c>
 800505c:	692b      	ldr	r3, [r5, #16]
 800505e:	b9eb      	cbnz	r3, 800509c <_vfiprintf_r+0x78>
 8005060:	4629      	mov	r1, r5
 8005062:	4630      	mov	r0, r6
 8005064:	f000 fb5a 	bl	800571c <__swsetup_r>
 8005068:	b1c0      	cbz	r0, 800509c <_vfiprintf_r+0x78>
 800506a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800506c:	07dc      	lsls	r4, r3, #31
 800506e:	d50e      	bpl.n	800508e <_vfiprintf_r+0x6a>
 8005070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005074:	b01d      	add	sp, #116	; 0x74
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <_vfiprintf_r+0x244>)
 800507c:	429d      	cmp	r5, r3
 800507e:	d101      	bne.n	8005084 <_vfiprintf_r+0x60>
 8005080:	68b5      	ldr	r5, [r6, #8]
 8005082:	e7df      	b.n	8005044 <_vfiprintf_r+0x20>
 8005084:	4b79      	ldr	r3, [pc, #484]	; (800526c <_vfiprintf_r+0x248>)
 8005086:	429d      	cmp	r5, r3
 8005088:	bf08      	it	eq
 800508a:	68f5      	ldreq	r5, [r6, #12]
 800508c:	e7da      	b.n	8005044 <_vfiprintf_r+0x20>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	0598      	lsls	r0, r3, #22
 8005092:	d4ed      	bmi.n	8005070 <_vfiprintf_r+0x4c>
 8005094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005096:	f7ff ff06 	bl	8004ea6 <__retarget_lock_release_recursive>
 800509a:	e7e9      	b.n	8005070 <_vfiprintf_r+0x4c>
 800509c:	2300      	movs	r3, #0
 800509e:	9309      	str	r3, [sp, #36]	; 0x24
 80050a0:	2320      	movs	r3, #32
 80050a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050aa:	2330      	movs	r3, #48	; 0x30
 80050ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005270 <_vfiprintf_r+0x24c>
 80050b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b4:	f04f 0901 	mov.w	r9, #1
 80050b8:	4623      	mov	r3, r4
 80050ba:	469a      	mov	sl, r3
 80050bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050c0:	b10a      	cbz	r2, 80050c6 <_vfiprintf_r+0xa2>
 80050c2:	2a25      	cmp	r2, #37	; 0x25
 80050c4:	d1f9      	bne.n	80050ba <_vfiprintf_r+0x96>
 80050c6:	ebba 0b04 	subs.w	fp, sl, r4
 80050ca:	d00b      	beq.n	80050e4 <_vfiprintf_r+0xc0>
 80050cc:	465b      	mov	r3, fp
 80050ce:	4622      	mov	r2, r4
 80050d0:	4629      	mov	r1, r5
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7ff ff93 	bl	8004ffe <__sfputs_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	f000 80aa 	beq.w	8005232 <_vfiprintf_r+0x20e>
 80050de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e0:	445a      	add	r2, fp
 80050e2:	9209      	str	r2, [sp, #36]	; 0x24
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a2 	beq.w	8005232 <_vfiprintf_r+0x20e>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f8:	f10a 0a01 	add.w	sl, sl, #1
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	9307      	str	r3, [sp, #28]
 8005100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005104:	931a      	str	r3, [sp, #104]	; 0x68
 8005106:	4654      	mov	r4, sl
 8005108:	2205      	movs	r2, #5
 800510a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510e:	4858      	ldr	r0, [pc, #352]	; (8005270 <_vfiprintf_r+0x24c>)
 8005110:	f7fb f85e 	bl	80001d0 <memchr>
 8005114:	9a04      	ldr	r2, [sp, #16]
 8005116:	b9d8      	cbnz	r0, 8005150 <_vfiprintf_r+0x12c>
 8005118:	06d1      	lsls	r1, r2, #27
 800511a:	bf44      	itt	mi
 800511c:	2320      	movmi	r3, #32
 800511e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005122:	0713      	lsls	r3, r2, #28
 8005124:	bf44      	itt	mi
 8005126:	232b      	movmi	r3, #43	; 0x2b
 8005128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800512c:	f89a 3000 	ldrb.w	r3, [sl]
 8005130:	2b2a      	cmp	r3, #42	; 0x2a
 8005132:	d015      	beq.n	8005160 <_vfiprintf_r+0x13c>
 8005134:	9a07      	ldr	r2, [sp, #28]
 8005136:	4654      	mov	r4, sl
 8005138:	2000      	movs	r0, #0
 800513a:	f04f 0c0a 	mov.w	ip, #10
 800513e:	4621      	mov	r1, r4
 8005140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005144:	3b30      	subs	r3, #48	; 0x30
 8005146:	2b09      	cmp	r3, #9
 8005148:	d94e      	bls.n	80051e8 <_vfiprintf_r+0x1c4>
 800514a:	b1b0      	cbz	r0, 800517a <_vfiprintf_r+0x156>
 800514c:	9207      	str	r2, [sp, #28]
 800514e:	e014      	b.n	800517a <_vfiprintf_r+0x156>
 8005150:	eba0 0308 	sub.w	r3, r0, r8
 8005154:	fa09 f303 	lsl.w	r3, r9, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	46a2      	mov	sl, r4
 800515e:	e7d2      	b.n	8005106 <_vfiprintf_r+0xe2>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	1d19      	adds	r1, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	9103      	str	r1, [sp, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	bfbb      	ittet	lt
 800516c:	425b      	neglt	r3, r3
 800516e:	f042 0202 	orrlt.w	r2, r2, #2
 8005172:	9307      	strge	r3, [sp, #28]
 8005174:	9307      	strlt	r3, [sp, #28]
 8005176:	bfb8      	it	lt
 8005178:	9204      	strlt	r2, [sp, #16]
 800517a:	7823      	ldrb	r3, [r4, #0]
 800517c:	2b2e      	cmp	r3, #46	; 0x2e
 800517e:	d10c      	bne.n	800519a <_vfiprintf_r+0x176>
 8005180:	7863      	ldrb	r3, [r4, #1]
 8005182:	2b2a      	cmp	r3, #42	; 0x2a
 8005184:	d135      	bne.n	80051f2 <_vfiprintf_r+0x1ce>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	9203      	str	r2, [sp, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfb8      	it	lt
 8005192:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005196:	3402      	adds	r4, #2
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005280 <_vfiprintf_r+0x25c>
 800519e:	7821      	ldrb	r1, [r4, #0]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4650      	mov	r0, sl
 80051a4:	f7fb f814 	bl	80001d0 <memchr>
 80051a8:	b140      	cbz	r0, 80051bc <_vfiprintf_r+0x198>
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	eba0 000a 	sub.w	r0, r0, sl
 80051b0:	fa03 f000 	lsl.w	r0, r3, r0
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	4303      	orrs	r3, r0
 80051b8:	3401      	adds	r4, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c0:	482c      	ldr	r0, [pc, #176]	; (8005274 <_vfiprintf_r+0x250>)
 80051c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c6:	2206      	movs	r2, #6
 80051c8:	f7fb f802 	bl	80001d0 <memchr>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d03f      	beq.n	8005250 <_vfiprintf_r+0x22c>
 80051d0:	4b29      	ldr	r3, [pc, #164]	; (8005278 <_vfiprintf_r+0x254>)
 80051d2:	bb1b      	cbnz	r3, 800521c <_vfiprintf_r+0x1f8>
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	3307      	adds	r3, #7
 80051d8:	f023 0307 	bic.w	r3, r3, #7
 80051dc:	3308      	adds	r3, #8
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e2:	443b      	add	r3, r7
 80051e4:	9309      	str	r3, [sp, #36]	; 0x24
 80051e6:	e767      	b.n	80050b8 <_vfiprintf_r+0x94>
 80051e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ec:	460c      	mov	r4, r1
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7a5      	b.n	800513e <_vfiprintf_r+0x11a>
 80051f2:	2300      	movs	r3, #0
 80051f4:	3401      	adds	r4, #1
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	4619      	mov	r1, r3
 80051fa:	f04f 0c0a 	mov.w	ip, #10
 80051fe:	4620      	mov	r0, r4
 8005200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005204:	3a30      	subs	r2, #48	; 0x30
 8005206:	2a09      	cmp	r2, #9
 8005208:	d903      	bls.n	8005212 <_vfiprintf_r+0x1ee>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0c5      	beq.n	800519a <_vfiprintf_r+0x176>
 800520e:	9105      	str	r1, [sp, #20]
 8005210:	e7c3      	b.n	800519a <_vfiprintf_r+0x176>
 8005212:	fb0c 2101 	mla	r1, ip, r1, r2
 8005216:	4604      	mov	r4, r0
 8005218:	2301      	movs	r3, #1
 800521a:	e7f0      	b.n	80051fe <_vfiprintf_r+0x1da>
 800521c:	ab03      	add	r3, sp, #12
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	462a      	mov	r2, r5
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <_vfiprintf_r+0x258>)
 8005224:	a904      	add	r1, sp, #16
 8005226:	4630      	mov	r0, r6
 8005228:	f3af 8000 	nop.w
 800522c:	4607      	mov	r7, r0
 800522e:	1c78      	adds	r0, r7, #1
 8005230:	d1d6      	bne.n	80051e0 <_vfiprintf_r+0x1bc>
 8005232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005234:	07d9      	lsls	r1, r3, #31
 8005236:	d405      	bmi.n	8005244 <_vfiprintf_r+0x220>
 8005238:	89ab      	ldrh	r3, [r5, #12]
 800523a:	059a      	lsls	r2, r3, #22
 800523c:	d402      	bmi.n	8005244 <_vfiprintf_r+0x220>
 800523e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005240:	f7ff fe31 	bl	8004ea6 <__retarget_lock_release_recursive>
 8005244:	89ab      	ldrh	r3, [r5, #12]
 8005246:	065b      	lsls	r3, r3, #25
 8005248:	f53f af12 	bmi.w	8005070 <_vfiprintf_r+0x4c>
 800524c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800524e:	e711      	b.n	8005074 <_vfiprintf_r+0x50>
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	462a      	mov	r2, r5
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <_vfiprintf_r+0x258>)
 8005258:	a904      	add	r1, sp, #16
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f880 	bl	8005360 <_printf_i>
 8005260:	e7e4      	b.n	800522c <_vfiprintf_r+0x208>
 8005262:	bf00      	nop
 8005264:	08005c30 	.word	0x08005c30
 8005268:	08005c50 	.word	0x08005c50
 800526c:	08005c10 	.word	0x08005c10
 8005270:	08005c70 	.word	0x08005c70
 8005274:	08005c7a 	.word	0x08005c7a
 8005278:	00000000 	.word	0x00000000
 800527c:	08004fff 	.word	0x08004fff
 8005280:	08005c76 	.word	0x08005c76

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4616      	mov	r6, r2
 800528a:	4699      	mov	r9, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005294:	4293      	cmp	r3, r2
 8005296:	bfb8      	it	lt
 8005298:	4613      	movlt	r3, r2
 800529a:	6033      	str	r3, [r6, #0]
 800529c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a0:	4607      	mov	r7, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b10a      	cbz	r2, 80052aa <_printf_common+0x26>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	6833      	ldrmi	r3, [r6, #0]
 80052b2:	3302      	addmi	r3, #2
 80052b4:	6033      	strmi	r3, [r6, #0]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d106      	bne.n	80052cc <_printf_common+0x48>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc26      	bgt.n	800531a <_printf_common+0x96>
 80052cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d0:	1e13      	subs	r3, r2, #0
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	0692      	lsls	r2, r2, #26
 80052da:	d42b      	bmi.n	8005334 <_printf_common+0xb0>
 80052dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e0:	4649      	mov	r1, r9
 80052e2:	4638      	mov	r0, r7
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d01e      	beq.n	8005328 <_printf_common+0xa4>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	68e5      	ldr	r5, [r4, #12]
 80052ee:	6832      	ldr	r2, [r6, #0]
 80052f0:	f003 0306 	and.w	r3, r3, #6
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	bf08      	it	eq
 80052f8:	1aad      	subeq	r5, r5, r2
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	bf0c      	ite	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	2500      	movne	r5, #0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfc4      	itt	gt
 800530a:	1a9b      	subgt	r3, r3, r2
 800530c:	18ed      	addgt	r5, r5, r3
 800530e:	2600      	movs	r6, #0
 8005310:	341a      	adds	r4, #26
 8005312:	42b5      	cmp	r5, r6
 8005314:	d11a      	bne.n	800534c <_printf_common+0xc8>
 8005316:	2000      	movs	r0, #0
 8005318:	e008      	b.n	800532c <_printf_common+0xa8>
 800531a:	2301      	movs	r3, #1
 800531c:	4652      	mov	r2, sl
 800531e:	4649      	mov	r1, r9
 8005320:	4638      	mov	r0, r7
 8005322:	47c0      	blx	r8
 8005324:	3001      	adds	r0, #1
 8005326:	d103      	bne.n	8005330 <_printf_common+0xac>
 8005328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	3501      	adds	r5, #1
 8005332:	e7c6      	b.n	80052c2 <_printf_common+0x3e>
 8005334:	18e1      	adds	r1, r4, r3
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	2030      	movs	r0, #48	; 0x30
 800533a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800533e:	4422      	add	r2, r4
 8005340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005348:	3302      	adds	r3, #2
 800534a:	e7c7      	b.n	80052dc <_printf_common+0x58>
 800534c:	2301      	movs	r3, #1
 800534e:	4622      	mov	r2, r4
 8005350:	4649      	mov	r1, r9
 8005352:	4638      	mov	r0, r7
 8005354:	47c0      	blx	r8
 8005356:	3001      	adds	r0, #1
 8005358:	d0e6      	beq.n	8005328 <_printf_common+0xa4>
 800535a:	3601      	adds	r6, #1
 800535c:	e7d9      	b.n	8005312 <_printf_common+0x8e>
	...

08005360 <_printf_i>:
 8005360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	7e0f      	ldrb	r7, [r1, #24]
 8005366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005368:	2f78      	cmp	r7, #120	; 0x78
 800536a:	4691      	mov	r9, r2
 800536c:	4680      	mov	r8, r0
 800536e:	460c      	mov	r4, r1
 8005370:	469a      	mov	sl, r3
 8005372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005376:	d807      	bhi.n	8005388 <_printf_i+0x28>
 8005378:	2f62      	cmp	r7, #98	; 0x62
 800537a:	d80a      	bhi.n	8005392 <_printf_i+0x32>
 800537c:	2f00      	cmp	r7, #0
 800537e:	f000 80d8 	beq.w	8005532 <_printf_i+0x1d2>
 8005382:	2f58      	cmp	r7, #88	; 0x58
 8005384:	f000 80a3 	beq.w	80054ce <_printf_i+0x16e>
 8005388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800538c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005390:	e03a      	b.n	8005408 <_printf_i+0xa8>
 8005392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005396:	2b15      	cmp	r3, #21
 8005398:	d8f6      	bhi.n	8005388 <_printf_i+0x28>
 800539a:	a101      	add	r1, pc, #4	; (adr r1, 80053a0 <_printf_i+0x40>)
 800539c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053a0:	080053f9 	.word	0x080053f9
 80053a4:	0800540d 	.word	0x0800540d
 80053a8:	08005389 	.word	0x08005389
 80053ac:	08005389 	.word	0x08005389
 80053b0:	08005389 	.word	0x08005389
 80053b4:	08005389 	.word	0x08005389
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	08005389 	.word	0x08005389
 80053c0:	08005389 	.word	0x08005389
 80053c4:	08005389 	.word	0x08005389
 80053c8:	08005389 	.word	0x08005389
 80053cc:	08005519 	.word	0x08005519
 80053d0:	0800543d 	.word	0x0800543d
 80053d4:	080054fb 	.word	0x080054fb
 80053d8:	08005389 	.word	0x08005389
 80053dc:	08005389 	.word	0x08005389
 80053e0:	0800553b 	.word	0x0800553b
 80053e4:	08005389 	.word	0x08005389
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	08005389 	.word	0x08005389
 80053f0:	08005389 	.word	0x08005389
 80053f4:	08005503 	.word	0x08005503
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	602a      	str	r2, [r5, #0]
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005408:	2301      	movs	r3, #1
 800540a:	e0a3      	b.n	8005554 <_printf_i+0x1f4>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	6829      	ldr	r1, [r5, #0]
 8005410:	0606      	lsls	r6, r0, #24
 8005412:	f101 0304 	add.w	r3, r1, #4
 8005416:	d50a      	bpl.n	800542e <_printf_i+0xce>
 8005418:	680e      	ldr	r6, [r1, #0]
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	2e00      	cmp	r6, #0
 800541e:	da03      	bge.n	8005428 <_printf_i+0xc8>
 8005420:	232d      	movs	r3, #45	; 0x2d
 8005422:	4276      	negs	r6, r6
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	485e      	ldr	r0, [pc, #376]	; (80055a4 <_printf_i+0x244>)
 800542a:	230a      	movs	r3, #10
 800542c:	e019      	b.n	8005462 <_printf_i+0x102>
 800542e:	680e      	ldr	r6, [r1, #0]
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005436:	bf18      	it	ne
 8005438:	b236      	sxthne	r6, r6
 800543a:	e7ef      	b.n	800541c <_printf_i+0xbc>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	6820      	ldr	r0, [r4, #0]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	6029      	str	r1, [r5, #0]
 8005444:	0601      	lsls	r1, r0, #24
 8005446:	d501      	bpl.n	800544c <_printf_i+0xec>
 8005448:	681e      	ldr	r6, [r3, #0]
 800544a:	e002      	b.n	8005452 <_printf_i+0xf2>
 800544c:	0646      	lsls	r6, r0, #25
 800544e:	d5fb      	bpl.n	8005448 <_printf_i+0xe8>
 8005450:	881e      	ldrh	r6, [r3, #0]
 8005452:	4854      	ldr	r0, [pc, #336]	; (80055a4 <_printf_i+0x244>)
 8005454:	2f6f      	cmp	r7, #111	; 0x6f
 8005456:	bf0c      	ite	eq
 8005458:	2308      	moveq	r3, #8
 800545a:	230a      	movne	r3, #10
 800545c:	2100      	movs	r1, #0
 800545e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005462:	6865      	ldr	r5, [r4, #4]
 8005464:	60a5      	str	r5, [r4, #8]
 8005466:	2d00      	cmp	r5, #0
 8005468:	bfa2      	ittt	ge
 800546a:	6821      	ldrge	r1, [r4, #0]
 800546c:	f021 0104 	bicge.w	r1, r1, #4
 8005470:	6021      	strge	r1, [r4, #0]
 8005472:	b90e      	cbnz	r6, 8005478 <_printf_i+0x118>
 8005474:	2d00      	cmp	r5, #0
 8005476:	d04d      	beq.n	8005514 <_printf_i+0x1b4>
 8005478:	4615      	mov	r5, r2
 800547a:	fbb6 f1f3 	udiv	r1, r6, r3
 800547e:	fb03 6711 	mls	r7, r3, r1, r6
 8005482:	5dc7      	ldrb	r7, [r0, r7]
 8005484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005488:	4637      	mov	r7, r6
 800548a:	42bb      	cmp	r3, r7
 800548c:	460e      	mov	r6, r1
 800548e:	d9f4      	bls.n	800547a <_printf_i+0x11a>
 8005490:	2b08      	cmp	r3, #8
 8005492:	d10b      	bne.n	80054ac <_printf_i+0x14c>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	07de      	lsls	r6, r3, #31
 8005498:	d508      	bpl.n	80054ac <_printf_i+0x14c>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4299      	cmp	r1, r3
 80054a0:	bfde      	ittt	le
 80054a2:	2330      	movle	r3, #48	; 0x30
 80054a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054ac:	1b52      	subs	r2, r2, r5
 80054ae:	6122      	str	r2, [r4, #16]
 80054b0:	f8cd a000 	str.w	sl, [sp]
 80054b4:	464b      	mov	r3, r9
 80054b6:	aa03      	add	r2, sp, #12
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fee2 	bl	8005284 <_printf_common>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d14c      	bne.n	800555e <_printf_i+0x1fe>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c8:	b004      	add	sp, #16
 80054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ce:	4835      	ldr	r0, [pc, #212]	; (80055a4 <_printf_i+0x244>)
 80054d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054d4:	6829      	ldr	r1, [r5, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80054dc:	6029      	str	r1, [r5, #0]
 80054de:	061d      	lsls	r5, r3, #24
 80054e0:	d514      	bpl.n	800550c <_printf_i+0x1ac>
 80054e2:	07df      	lsls	r7, r3, #31
 80054e4:	bf44      	itt	mi
 80054e6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ea:	6023      	strmi	r3, [r4, #0]
 80054ec:	b91e      	cbnz	r6, 80054f6 <_printf_i+0x196>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f023 0320 	bic.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	2310      	movs	r3, #16
 80054f8:	e7b0      	b.n	800545c <_printf_i+0xfc>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	2378      	movs	r3, #120	; 0x78
 8005504:	4828      	ldr	r0, [pc, #160]	; (80055a8 <_printf_i+0x248>)
 8005506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800550a:	e7e3      	b.n	80054d4 <_printf_i+0x174>
 800550c:	0659      	lsls	r1, r3, #25
 800550e:	bf48      	it	mi
 8005510:	b2b6      	uxthmi	r6, r6
 8005512:	e7e6      	b.n	80054e2 <_printf_i+0x182>
 8005514:	4615      	mov	r5, r2
 8005516:	e7bb      	b.n	8005490 <_printf_i+0x130>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	6826      	ldr	r6, [r4, #0]
 800551c:	6961      	ldr	r1, [r4, #20]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6028      	str	r0, [r5, #0]
 8005522:	0635      	lsls	r5, r6, #24
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	d501      	bpl.n	800552c <_printf_i+0x1cc>
 8005528:	6019      	str	r1, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0x1d2>
 800552c:	0670      	lsls	r0, r6, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0x1c8>
 8005530:	8019      	strh	r1, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	4615      	mov	r5, r2
 8005538:	e7ba      	b.n	80054b0 <_printf_i+0x150>
 800553a:	682b      	ldr	r3, [r5, #0]
 800553c:	1d1a      	adds	r2, r3, #4
 800553e:	602a      	str	r2, [r5, #0]
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	2100      	movs	r1, #0
 8005546:	4628      	mov	r0, r5
 8005548:	f7fa fe42 	bl	80001d0 <memchr>
 800554c:	b108      	cbz	r0, 8005552 <_printf_i+0x1f2>
 800554e:	1b40      	subs	r0, r0, r5
 8005550:	6060      	str	r0, [r4, #4]
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555c:	e7a8      	b.n	80054b0 <_printf_i+0x150>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	462a      	mov	r2, r5
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	47d0      	blx	sl
 8005568:	3001      	adds	r0, #1
 800556a:	d0ab      	beq.n	80054c4 <_printf_i+0x164>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	d413      	bmi.n	800559a <_printf_i+0x23a>
 8005572:	68e0      	ldr	r0, [r4, #12]
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	4298      	cmp	r0, r3
 8005578:	bfb8      	it	lt
 800557a:	4618      	movlt	r0, r3
 800557c:	e7a4      	b.n	80054c8 <_printf_i+0x168>
 800557e:	2301      	movs	r3, #1
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d09b      	beq.n	80054c4 <_printf_i+0x164>
 800558c:	3501      	adds	r5, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	9903      	ldr	r1, [sp, #12]
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	42ab      	cmp	r3, r5
 8005596:	dcf2      	bgt.n	800557e <_printf_i+0x21e>
 8005598:	e7eb      	b.n	8005572 <_printf_i+0x212>
 800559a:	2500      	movs	r5, #0
 800559c:	f104 0619 	add.w	r6, r4, #25
 80055a0:	e7f5      	b.n	800558e <_printf_i+0x22e>
 80055a2:	bf00      	nop
 80055a4:	08005c81 	.word	0x08005c81
 80055a8:	08005c92 	.word	0x08005c92

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	; (80055c8 <_sbrk_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fb ff0a 	bl	80013d0 <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000810 	.word	0x20000810

080055cc <__sread>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	460c      	mov	r4, r1
 80055d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d4:	f000 fab2 	bl	8005b3c <_read_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	bfab      	itete	ge
 80055dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055de:	89a3      	ldrhlt	r3, [r4, #12]
 80055e0:	181b      	addge	r3, r3, r0
 80055e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055e6:	bfac      	ite	ge
 80055e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ea:	81a3      	strhlt	r3, [r4, #12]
 80055ec:	bd10      	pop	{r4, pc}

080055ee <__swrite>:
 80055ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f2:	461f      	mov	r7, r3
 80055f4:	898b      	ldrh	r3, [r1, #12]
 80055f6:	05db      	lsls	r3, r3, #23
 80055f8:	4605      	mov	r5, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4616      	mov	r6, r2
 80055fe:	d505      	bpl.n	800560c <__swrite+0x1e>
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	2302      	movs	r3, #2
 8005606:	2200      	movs	r2, #0
 8005608:	f000 f9c8 	bl	800599c <_lseek_r>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	4628      	mov	r0, r5
 800561e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	f000 b869 	b.w	80056f8 <_write_r>

08005626 <__sseek>:
 8005626:	b510      	push	{r4, lr}
 8005628:	460c      	mov	r4, r1
 800562a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562e:	f000 f9b5 	bl	800599c <_lseek_r>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	bf15      	itete	ne
 8005638:	6560      	strne	r0, [r4, #84]	; 0x54
 800563a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800563e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005642:	81a3      	strheq	r3, [r4, #12]
 8005644:	bf18      	it	ne
 8005646:	81a3      	strhne	r3, [r4, #12]
 8005648:	bd10      	pop	{r4, pc}

0800564a <__sclose>:
 800564a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564e:	f000 b8d3 	b.w	80057f8 <_close_r>
	...

08005654 <__swbuf_r>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	460e      	mov	r6, r1
 8005658:	4614      	mov	r4, r2
 800565a:	4605      	mov	r5, r0
 800565c:	b118      	cbz	r0, 8005666 <__swbuf_r+0x12>
 800565e:	6983      	ldr	r3, [r0, #24]
 8005660:	b90b      	cbnz	r3, 8005666 <__swbuf_r+0x12>
 8005662:	f7ff fb81 	bl	8004d68 <__sinit>
 8005666:	4b21      	ldr	r3, [pc, #132]	; (80056ec <__swbuf_r+0x98>)
 8005668:	429c      	cmp	r4, r3
 800566a:	d12b      	bne.n	80056c4 <__swbuf_r+0x70>
 800566c:	686c      	ldr	r4, [r5, #4]
 800566e:	69a3      	ldr	r3, [r4, #24]
 8005670:	60a3      	str	r3, [r4, #8]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	071a      	lsls	r2, r3, #28
 8005676:	d52f      	bpl.n	80056d8 <__swbuf_r+0x84>
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	b36b      	cbz	r3, 80056d8 <__swbuf_r+0x84>
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	1ac0      	subs	r0, r0, r3
 8005682:	6963      	ldr	r3, [r4, #20]
 8005684:	b2f6      	uxtb	r6, r6
 8005686:	4283      	cmp	r3, r0
 8005688:	4637      	mov	r7, r6
 800568a:	dc04      	bgt.n	8005696 <__swbuf_r+0x42>
 800568c:	4621      	mov	r1, r4
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f948 	bl	8005924 <_fflush_r>
 8005694:	bb30      	cbnz	r0, 80056e4 <__swbuf_r+0x90>
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	3b01      	subs	r3, #1
 800569a:	60a3      	str	r3, [r4, #8]
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	701e      	strb	r6, [r3, #0]
 80056a4:	6963      	ldr	r3, [r4, #20]
 80056a6:	3001      	adds	r0, #1
 80056a8:	4283      	cmp	r3, r0
 80056aa:	d004      	beq.n	80056b6 <__swbuf_r+0x62>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	07db      	lsls	r3, r3, #31
 80056b0:	d506      	bpl.n	80056c0 <__swbuf_r+0x6c>
 80056b2:	2e0a      	cmp	r6, #10
 80056b4:	d104      	bne.n	80056c0 <__swbuf_r+0x6c>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f933 	bl	8005924 <_fflush_r>
 80056be:	b988      	cbnz	r0, 80056e4 <__swbuf_r+0x90>
 80056c0:	4638      	mov	r0, r7
 80056c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <__swbuf_r+0x9c>)
 80056c6:	429c      	cmp	r4, r3
 80056c8:	d101      	bne.n	80056ce <__swbuf_r+0x7a>
 80056ca:	68ac      	ldr	r4, [r5, #8]
 80056cc:	e7cf      	b.n	800566e <__swbuf_r+0x1a>
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <__swbuf_r+0xa0>)
 80056d0:	429c      	cmp	r4, r3
 80056d2:	bf08      	it	eq
 80056d4:	68ec      	ldreq	r4, [r5, #12]
 80056d6:	e7ca      	b.n	800566e <__swbuf_r+0x1a>
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 f81e 	bl	800571c <__swsetup_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d0cb      	beq.n	800567c <__swbuf_r+0x28>
 80056e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056e8:	e7ea      	b.n	80056c0 <__swbuf_r+0x6c>
 80056ea:	bf00      	nop
 80056ec:	08005c30 	.word	0x08005c30
 80056f0:	08005c50 	.word	0x08005c50
 80056f4:	08005c10 	.word	0x08005c10

080056f8 <_write_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_write_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fb fe12 	bl	8001330 <_write>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_write_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_write_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000810 	.word	0x20000810

0800571c <__swsetup_r>:
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <__swsetup_r+0xcc>)
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	681d      	ldr	r5, [r3, #0]
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	b125      	cbz	r5, 8005732 <__swsetup_r+0x16>
 8005728:	69ab      	ldr	r3, [r5, #24]
 800572a:	b913      	cbnz	r3, 8005732 <__swsetup_r+0x16>
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff fb1b 	bl	8004d68 <__sinit>
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <__swsetup_r+0xd0>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d10f      	bne.n	8005758 <__swsetup_r+0x3c>
 8005738:	686c      	ldr	r4, [r5, #4]
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005740:	0719      	lsls	r1, r3, #28
 8005742:	d42c      	bmi.n	800579e <__swsetup_r+0x82>
 8005744:	06dd      	lsls	r5, r3, #27
 8005746:	d411      	bmi.n	800576c <__swsetup_r+0x50>
 8005748:	2309      	movs	r3, #9
 800574a:	6033      	str	r3, [r6, #0]
 800574c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005756:	e03e      	b.n	80057d6 <__swsetup_r+0xba>
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <__swsetup_r+0xd4>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d101      	bne.n	8005762 <__swsetup_r+0x46>
 800575e:	68ac      	ldr	r4, [r5, #8]
 8005760:	e7eb      	b.n	800573a <__swsetup_r+0x1e>
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <__swsetup_r+0xd8>)
 8005764:	429c      	cmp	r4, r3
 8005766:	bf08      	it	eq
 8005768:	68ec      	ldreq	r4, [r5, #12]
 800576a:	e7e6      	b.n	800573a <__swsetup_r+0x1e>
 800576c:	0758      	lsls	r0, r3, #29
 800576e:	d512      	bpl.n	8005796 <__swsetup_r+0x7a>
 8005770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005772:	b141      	cbz	r1, 8005786 <__swsetup_r+0x6a>
 8005774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005778:	4299      	cmp	r1, r3
 800577a:	d002      	beq.n	8005782 <__swsetup_r+0x66>
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f991 	bl	8005aa4 <_free_r>
 8005782:	2300      	movs	r3, #0
 8005784:	6363      	str	r3, [r4, #52]	; 0x34
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	2300      	movs	r3, #0
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	f043 0308 	orr.w	r3, r3, #8
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	b94b      	cbnz	r3, 80057b6 <__swsetup_r+0x9a>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d003      	beq.n	80057b6 <__swsetup_r+0x9a>
 80057ae:	4621      	mov	r1, r4
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 f92b 	bl	8005a0c <__smakebuf_r>
 80057b6:	89a0      	ldrh	r0, [r4, #12]
 80057b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057bc:	f010 0301 	ands.w	r3, r0, #1
 80057c0:	d00a      	beq.n	80057d8 <__swsetup_r+0xbc>
 80057c2:	2300      	movs	r3, #0
 80057c4:	60a3      	str	r3, [r4, #8]
 80057c6:	6963      	ldr	r3, [r4, #20]
 80057c8:	425b      	negs	r3, r3
 80057ca:	61a3      	str	r3, [r4, #24]
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	b943      	cbnz	r3, 80057e2 <__swsetup_r+0xc6>
 80057d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057d4:	d1ba      	bne.n	800574c <__swsetup_r+0x30>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	0781      	lsls	r1, r0, #30
 80057da:	bf58      	it	pl
 80057dc:	6963      	ldrpl	r3, [r4, #20]
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	e7f4      	b.n	80057cc <__swsetup_r+0xb0>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7f7      	b.n	80057d6 <__swsetup_r+0xba>
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	08005c30 	.word	0x08005c30
 80057f0:	08005c50 	.word	0x08005c50
 80057f4:	08005c10 	.word	0x08005c10

080057f8 <_close_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_close_r+0x1c>)
 80057fc:	2300      	movs	r3, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	f7fb fdb0 	bl	8001368 <_close>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_close_r+0x1a>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_close_r+0x1a>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	20000810 	.word	0x20000810

08005818 <__sflush_r>:
 8005818:	898a      	ldrh	r2, [r1, #12]
 800581a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	0710      	lsls	r0, r2, #28
 8005822:	460c      	mov	r4, r1
 8005824:	d458      	bmi.n	80058d8 <__sflush_r+0xc0>
 8005826:	684b      	ldr	r3, [r1, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dc05      	bgt.n	8005838 <__sflush_r+0x20>
 800582c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	dc02      	bgt.n	8005838 <__sflush_r+0x20>
 8005832:	2000      	movs	r0, #0
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583a:	2e00      	cmp	r6, #0
 800583c:	d0f9      	beq.n	8005832 <__sflush_r+0x1a>
 800583e:	2300      	movs	r3, #0
 8005840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005844:	682f      	ldr	r7, [r5, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	d032      	beq.n	80058b0 <__sflush_r+0x98>
 800584a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	075a      	lsls	r2, r3, #29
 8005850:	d505      	bpl.n	800585e <__sflush_r+0x46>
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	1ac0      	subs	r0, r0, r3
 8005856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005858:	b10b      	cbz	r3, 800585e <__sflush_r+0x46>
 800585a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800585c:	1ac0      	subs	r0, r0, r3
 800585e:	2300      	movs	r3, #0
 8005860:	4602      	mov	r2, r0
 8005862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	4628      	mov	r0, r5
 8005868:	47b0      	blx	r6
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	d106      	bne.n	800587e <__sflush_r+0x66>
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	291d      	cmp	r1, #29
 8005874:	d82c      	bhi.n	80058d0 <__sflush_r+0xb8>
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <__sflush_r+0x108>)
 8005878:	40ca      	lsrs	r2, r1
 800587a:	07d6      	lsls	r6, r2, #31
 800587c:	d528      	bpl.n	80058d0 <__sflush_r+0xb8>
 800587e:	2200      	movs	r2, #0
 8005880:	6062      	str	r2, [r4, #4]
 8005882:	04d9      	lsls	r1, r3, #19
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	6022      	str	r2, [r4, #0]
 8005888:	d504      	bpl.n	8005894 <__sflush_r+0x7c>
 800588a:	1c42      	adds	r2, r0, #1
 800588c:	d101      	bne.n	8005892 <__sflush_r+0x7a>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	b903      	cbnz	r3, 8005894 <__sflush_r+0x7c>
 8005892:	6560      	str	r0, [r4, #84]	; 0x54
 8005894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005896:	602f      	str	r7, [r5, #0]
 8005898:	2900      	cmp	r1, #0
 800589a:	d0ca      	beq.n	8005832 <__sflush_r+0x1a>
 800589c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d002      	beq.n	80058aa <__sflush_r+0x92>
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 f8fd 	bl	8005aa4 <_free_r>
 80058aa:	2000      	movs	r0, #0
 80058ac:	6360      	str	r0, [r4, #52]	; 0x34
 80058ae:	e7c1      	b.n	8005834 <__sflush_r+0x1c>
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	2301      	movs	r3, #1
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	1c41      	adds	r1, r0, #1
 80058ba:	d1c7      	bne.n	800584c <__sflush_r+0x34>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0c4      	beq.n	800584c <__sflush_r+0x34>
 80058c2:	2b1d      	cmp	r3, #29
 80058c4:	d001      	beq.n	80058ca <__sflush_r+0xb2>
 80058c6:	2b16      	cmp	r3, #22
 80058c8:	d101      	bne.n	80058ce <__sflush_r+0xb6>
 80058ca:	602f      	str	r7, [r5, #0]
 80058cc:	e7b1      	b.n	8005832 <__sflush_r+0x1a>
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d4:	81a3      	strh	r3, [r4, #12]
 80058d6:	e7ad      	b.n	8005834 <__sflush_r+0x1c>
 80058d8:	690f      	ldr	r7, [r1, #16]
 80058da:	2f00      	cmp	r7, #0
 80058dc:	d0a9      	beq.n	8005832 <__sflush_r+0x1a>
 80058de:	0793      	lsls	r3, r2, #30
 80058e0:	680e      	ldr	r6, [r1, #0]
 80058e2:	bf08      	it	eq
 80058e4:	694b      	ldreq	r3, [r1, #20]
 80058e6:	600f      	str	r7, [r1, #0]
 80058e8:	bf18      	it	ne
 80058ea:	2300      	movne	r3, #0
 80058ec:	eba6 0807 	sub.w	r8, r6, r7
 80058f0:	608b      	str	r3, [r1, #8]
 80058f2:	f1b8 0f00 	cmp.w	r8, #0
 80058f6:	dd9c      	ble.n	8005832 <__sflush_r+0x1a>
 80058f8:	6a21      	ldr	r1, [r4, #32]
 80058fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058fc:	4643      	mov	r3, r8
 80058fe:	463a      	mov	r2, r7
 8005900:	4628      	mov	r0, r5
 8005902:	47b0      	blx	r6
 8005904:	2800      	cmp	r0, #0
 8005906:	dc06      	bgt.n	8005916 <__sflush_r+0xfe>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005914:	e78e      	b.n	8005834 <__sflush_r+0x1c>
 8005916:	4407      	add	r7, r0
 8005918:	eba8 0800 	sub.w	r8, r8, r0
 800591c:	e7e9      	b.n	80058f2 <__sflush_r+0xda>
 800591e:	bf00      	nop
 8005920:	20400001 	.word	0x20400001

08005924 <_fflush_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	690b      	ldr	r3, [r1, #16]
 8005928:	4605      	mov	r5, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b913      	cbnz	r3, 8005934 <_fflush_r+0x10>
 800592e:	2500      	movs	r5, #0
 8005930:	4628      	mov	r0, r5
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	b118      	cbz	r0, 800593e <_fflush_r+0x1a>
 8005936:	6983      	ldr	r3, [r0, #24]
 8005938:	b90b      	cbnz	r3, 800593e <_fflush_r+0x1a>
 800593a:	f7ff fa15 	bl	8004d68 <__sinit>
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <_fflush_r+0x6c>)
 8005940:	429c      	cmp	r4, r3
 8005942:	d11b      	bne.n	800597c <_fflush_r+0x58>
 8005944:	686c      	ldr	r4, [r5, #4]
 8005946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0ef      	beq.n	800592e <_fflush_r+0xa>
 800594e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005950:	07d0      	lsls	r0, r2, #31
 8005952:	d404      	bmi.n	800595e <_fflush_r+0x3a>
 8005954:	0599      	lsls	r1, r3, #22
 8005956:	d402      	bmi.n	800595e <_fflush_r+0x3a>
 8005958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595a:	f7ff faa3 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 800595e:	4628      	mov	r0, r5
 8005960:	4621      	mov	r1, r4
 8005962:	f7ff ff59 	bl	8005818 <__sflush_r>
 8005966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005968:	07da      	lsls	r2, r3, #31
 800596a:	4605      	mov	r5, r0
 800596c:	d4e0      	bmi.n	8005930 <_fflush_r+0xc>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	059b      	lsls	r3, r3, #22
 8005972:	d4dd      	bmi.n	8005930 <_fflush_r+0xc>
 8005974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005976:	f7ff fa96 	bl	8004ea6 <__retarget_lock_release_recursive>
 800597a:	e7d9      	b.n	8005930 <_fflush_r+0xc>
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <_fflush_r+0x70>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <_fflush_r+0x62>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7df      	b.n	8005946 <_fflush_r+0x22>
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <_fflush_r+0x74>)
 8005988:	429c      	cmp	r4, r3
 800598a:	bf08      	it	eq
 800598c:	68ec      	ldreq	r4, [r5, #12]
 800598e:	e7da      	b.n	8005946 <_fflush_r+0x22>
 8005990:	08005c30 	.word	0x08005c30
 8005994:	08005c50 	.word	0x08005c50
 8005998:	08005c10 	.word	0x08005c10

0800599c <_lseek_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d07      	ldr	r5, [pc, #28]	; (80059bc <_lseek_r+0x20>)
 80059a0:	4604      	mov	r4, r0
 80059a2:	4608      	mov	r0, r1
 80059a4:	4611      	mov	r1, r2
 80059a6:	2200      	movs	r2, #0
 80059a8:	602a      	str	r2, [r5, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f7fb fd03 	bl	80013b6 <_lseek>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_lseek_r+0x1e>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_lseek_r+0x1e>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	20000810 	.word	0x20000810

080059c0 <__swhatbuf_r>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	460e      	mov	r6, r1
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	2900      	cmp	r1, #0
 80059ca:	b096      	sub	sp, #88	; 0x58
 80059cc:	4614      	mov	r4, r2
 80059ce:	461d      	mov	r5, r3
 80059d0:	da08      	bge.n	80059e4 <__swhatbuf_r+0x24>
 80059d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	061a      	lsls	r2, r3, #24
 80059dc:	d410      	bmi.n	8005a00 <__swhatbuf_r+0x40>
 80059de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e2:	e00e      	b.n	8005a02 <__swhatbuf_r+0x42>
 80059e4:	466a      	mov	r2, sp
 80059e6:	f000 f8bb 	bl	8005b60 <_fstat_r>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	dbf1      	blt.n	80059d2 <__swhatbuf_r+0x12>
 80059ee:	9a01      	ldr	r2, [sp, #4]
 80059f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059f8:	425a      	negs	r2, r3
 80059fa:	415a      	adcs	r2, r3
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	e7ee      	b.n	80059de <__swhatbuf_r+0x1e>
 8005a00:	2340      	movs	r3, #64	; 0x40
 8005a02:	2000      	movs	r0, #0
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	b016      	add	sp, #88	; 0x58
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a0c <__smakebuf_r>:
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a10:	079d      	lsls	r5, r3, #30
 8005a12:	4606      	mov	r6, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	d507      	bpl.n	8005a28 <__smakebuf_r+0x1c>
 8005a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	2301      	movs	r3, #1
 8005a22:	6163      	str	r3, [r4, #20]
 8005a24:	b002      	add	sp, #8
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	ab01      	add	r3, sp, #4
 8005a2a:	466a      	mov	r2, sp
 8005a2c:	f7ff ffc8 	bl	80059c0 <__swhatbuf_r>
 8005a30:	9900      	ldr	r1, [sp, #0]
 8005a32:	4605      	mov	r5, r0
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff fa57 	bl	8004ee8 <_malloc_r>
 8005a3a:	b948      	cbnz	r0, 8005a50 <__smakebuf_r+0x44>
 8005a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a40:	059a      	lsls	r2, r3, #22
 8005a42:	d4ef      	bmi.n	8005a24 <__smakebuf_r+0x18>
 8005a44:	f023 0303 	bic.w	r3, r3, #3
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7e3      	b.n	8005a18 <__smakebuf_r+0xc>
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <__smakebuf_r+0x7c>)
 8005a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	6020      	str	r0, [r4, #0]
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	9b00      	ldr	r3, [sp, #0]
 8005a60:	6163      	str	r3, [r4, #20]
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	6120      	str	r0, [r4, #16]
 8005a66:	b15b      	cbz	r3, 8005a80 <__smakebuf_r+0x74>
 8005a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f000 f889 	bl	8005b84 <_isatty_r>
 8005a72:	b128      	cbz	r0, 8005a80 <__smakebuf_r+0x74>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	89a0      	ldrh	r0, [r4, #12]
 8005a82:	4305      	orrs	r5, r0
 8005a84:	81a5      	strh	r5, [r4, #12]
 8005a86:	e7cd      	b.n	8005a24 <__smakebuf_r+0x18>
 8005a88:	08004d01 	.word	0x08004d01

08005a8c <__malloc_lock>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	; (8005a94 <__malloc_lock+0x8>)
 8005a8e:	f7ff ba09 	b.w	8004ea4 <__retarget_lock_acquire_recursive>
 8005a92:	bf00      	nop
 8005a94:	20000804 	.word	0x20000804

08005a98 <__malloc_unlock>:
 8005a98:	4801      	ldr	r0, [pc, #4]	; (8005aa0 <__malloc_unlock+0x8>)
 8005a9a:	f7ff ba04 	b.w	8004ea6 <__retarget_lock_release_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	20000804 	.word	0x20000804

08005aa4 <_free_r>:
 8005aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aa6:	2900      	cmp	r1, #0
 8005aa8:	d044      	beq.n	8005b34 <_free_r+0x90>
 8005aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aae:	9001      	str	r0, [sp, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ab6:	bfb8      	it	lt
 8005ab8:	18e4      	addlt	r4, r4, r3
 8005aba:	f7ff ffe7 	bl	8005a8c <__malloc_lock>
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <_free_r+0x94>)
 8005ac0:	9801      	ldr	r0, [sp, #4]
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	b933      	cbnz	r3, 8005ad4 <_free_r+0x30>
 8005ac6:	6063      	str	r3, [r4, #4]
 8005ac8:	6014      	str	r4, [r2, #0]
 8005aca:	b003      	add	sp, #12
 8005acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad0:	f7ff bfe2 	b.w	8005a98 <__malloc_unlock>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d908      	bls.n	8005aea <_free_r+0x46>
 8005ad8:	6825      	ldr	r5, [r4, #0]
 8005ada:	1961      	adds	r1, r4, r5
 8005adc:	428b      	cmp	r3, r1
 8005ade:	bf01      	itttt	eq
 8005ae0:	6819      	ldreq	r1, [r3, #0]
 8005ae2:	685b      	ldreq	r3, [r3, #4]
 8005ae4:	1949      	addeq	r1, r1, r5
 8005ae6:	6021      	streq	r1, [r4, #0]
 8005ae8:	e7ed      	b.n	8005ac6 <_free_r+0x22>
 8005aea:	461a      	mov	r2, r3
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b10b      	cbz	r3, 8005af4 <_free_r+0x50>
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d9fa      	bls.n	8005aea <_free_r+0x46>
 8005af4:	6811      	ldr	r1, [r2, #0]
 8005af6:	1855      	adds	r5, r2, r1
 8005af8:	42a5      	cmp	r5, r4
 8005afa:	d10b      	bne.n	8005b14 <_free_r+0x70>
 8005afc:	6824      	ldr	r4, [r4, #0]
 8005afe:	4421      	add	r1, r4
 8005b00:	1854      	adds	r4, r2, r1
 8005b02:	42a3      	cmp	r3, r4
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	d1e0      	bne.n	8005aca <_free_r+0x26>
 8005b08:	681c      	ldr	r4, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	6053      	str	r3, [r2, #4]
 8005b0e:	4421      	add	r1, r4
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	e7da      	b.n	8005aca <_free_r+0x26>
 8005b14:	d902      	bls.n	8005b1c <_free_r+0x78>
 8005b16:	230c      	movs	r3, #12
 8005b18:	6003      	str	r3, [r0, #0]
 8005b1a:	e7d6      	b.n	8005aca <_free_r+0x26>
 8005b1c:	6825      	ldr	r5, [r4, #0]
 8005b1e:	1961      	adds	r1, r4, r5
 8005b20:	428b      	cmp	r3, r1
 8005b22:	bf04      	itt	eq
 8005b24:	6819      	ldreq	r1, [r3, #0]
 8005b26:	685b      	ldreq	r3, [r3, #4]
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	bf04      	itt	eq
 8005b2c:	1949      	addeq	r1, r1, r5
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	6054      	str	r4, [r2, #4]
 8005b32:	e7ca      	b.n	8005aca <_free_r+0x26>
 8005b34:	b003      	add	sp, #12
 8005b36:	bd30      	pop	{r4, r5, pc}
 8005b38:	20000808 	.word	0x20000808

08005b3c <_read_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_read_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fb fbd3 	bl	80012f6 <_read>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_read_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_read_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20000810 	.word	0x20000810

08005b60 <_fstat_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_fstat_r+0x20>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	602b      	str	r3, [r5, #0]
 8005b6e:	f7fb fc07 	bl	8001380 <_fstat>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d102      	bne.n	8005b7c <_fstat_r+0x1c>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	b103      	cbz	r3, 8005b7c <_fstat_r+0x1c>
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	bd38      	pop	{r3, r4, r5, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000810 	.word	0x20000810

08005b84 <_isatty_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d06      	ldr	r5, [pc, #24]	; (8005ba0 <_isatty_r+0x1c>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	f7fb fc06 	bl	80013a0 <_isatty>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_isatty_r+0x1a>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_isatty_r+0x1a>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20000810 	.word	0x20000810

08005ba4 <_init>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr

08005bb0 <_fini>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr


practica3-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009118  08009118  00019118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009554  08009554  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800955c  0800955c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  200001e8  0800974c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  0800974c  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aded  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003565  00000000  00000000  0003b005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0003e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  0003fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029500  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9d5  00000000  00000000  0006a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d7c  00000000  00000000  000872ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e0  00000000  00000000  0018107c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090fc 	.word	0x080090fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080090fc 	.word	0x080090fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ecc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481b      	ldr	r0, [pc, #108]	; (8000f58 <I2Cx_MspInit+0xac>)
 8000eea:	f001 fcad 	bl	8002848 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <I2Cx_MspInit+0xac>)
 8000ef6:	f001 fca7 	bl	8002848 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <I2Cx_MspInit+0xa8>)
 8000f24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	2021      	movs	r0, #33	; 0x21
 8000f30:	f001 fb47 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f34:	2021      	movs	r0, #33	; 0x21
 8000f36:	f001 fb60 	bl	80025fa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	2022      	movs	r0, #34	; 0x22
 8000f40:	f001 fb3f 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f44:	2022      	movs	r0, #34	; 0x22
 8000f46:	f001 fb58 	bl	80025fa <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400

08000f5c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <I2Cx_Init+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <I2Cx_Init+0x58>)
 8000f6e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff89 	bl	8000eac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 ff2d 	bl	8002dfa <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f002 fcbc 	bl	8003920 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005800 	.word	0x40005800
 8000fb4:	00702681 	.word	0x00702681

08000fb8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	72fb      	strb	r3, [r7, #11]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	813b      	strh	r3, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4603      	mov	r3, r0
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f002 f8d6 	bl	80031a0 <HAL_I2C_Mem_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 f832 	bl	800106c <I2Cx_Error>
  }
  return status;
 8001008:	7dfb      	ldrb	r3, [r7, #23]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b08a      	sub	sp, #40	; 0x28
 8001016:	af04      	add	r7, sp, #16
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	4608      	mov	r0, r1
 800101c:	4611      	mov	r1, r2
 800101e:	461a      	mov	r2, r3
 8001020:	4603      	mov	r3, r0
 8001022:	72fb      	strb	r3, [r7, #11]
 8001024:	460b      	mov	r3, r1
 8001026:	813b      	strh	r3, [r7, #8]
 8001028:	4613      	mov	r3, r2
 800102a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	b299      	uxth	r1, r3
 8001034:	88f8      	ldrh	r0, [r7, #6]
 8001036:	893a      	ldrh	r2, [r7, #8]
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4603      	mov	r3, r0
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f001 ff95 	bl	8002f78 <HAL_I2C_Mem_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	4619      	mov	r1, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 f805 	bl	800106c <I2Cx_Error>
  }
  return status;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f001 ff4d 	bl	8002f18 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff6c 	bl	8000f5c <I2Cx_Init>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <SENSOR_IO_Init+0x10>)
 8001092:	f7ff ff63 	bl	8000f5c <I2Cx_Init>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000204 	.word	0x20000204

080010a0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	460b      	mov	r3, r1
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	4613      	mov	r3, r2
 80010b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	79f9      	ldrb	r1, [r7, #7]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	1d7b      	adds	r3, r7, #5
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <SENSOR_IO_Write+0x30>)
 80010c4:	f7ff ffa5 	bl	8001012 <I2Cx_WriteMultiple>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000204 	.word	0x20000204

080010d4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	79f9      	ldrb	r1, [r7, #7]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <SENSOR_IO_Read+0x38>)
 80010fc:	f7ff ff5c 	bl	8000fb8 <I2Cx_ReadMultiple>

  return read_value;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000204 	.word	0x20000204

08001110 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <BSP_PSENSOR_Init+0x38>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	20ba      	movs	r0, #186	; 0xba
 800111c:	4798      	blx	r3
 800111e:	4603      	mov	r3, r0
 8001120:	2bb1      	cmp	r3, #177	; 0xb1
 8001122:	d002      	beq.n	800112a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e009      	b.n	800113e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <BSP_PSENSOR_Init+0x3c>)
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <BSP_PSENSOR_Init+0x38>)
 800112e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <BSP_PSENSOR_Init+0x3c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	20ba      	movs	r0, #186	; 0xba
 8001138:	4798      	blx	r3
    ret = PSENSOR_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800113e:	687b      	ldr	r3, [r7, #4]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000258 	.word	0x20000258

08001150 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <BSP_PSENSOR_ReadPressure+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	20ba      	movs	r0, #186	; 0xba
 800115c:	4798      	blx	r3
 800115e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000258 	.word	0x20000258

0800116c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f879 	bl	8001270 <LPS22HB_Init>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001194:	f7ff ff7a 	bl	800108c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	210f      	movs	r1, #15
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff98 	bl	80010d4 <SENSOR_IO_Read>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	74fb      	strb	r3, [r7, #19]
 80011c6:	e013      	b.n	80011f0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	7cfb      	ldrb	r3, [r7, #19]
 80011ce:	3328      	adds	r3, #40	; 0x28
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	7cfc      	ldrb	r4, [r7, #19]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4610      	mov	r0, r2
 80011d8:	f7ff ff7c 	bl	80010d4 <SENSOR_IO_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	f104 0318 	add.w	r3, r4, #24
 80011e4:	443b      	add	r3, r7
 80011e6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	3301      	adds	r3, #1
 80011ee:	74fb      	strb	r3, [r7, #19]
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d9e8      	bls.n	80011c8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	74fb      	strb	r3, [r7, #19]
 80011fa:	e00f      	b.n	800121c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80011fc:	7cfb      	ldrb	r3, [r7, #19]
 80011fe:	3318      	adds	r3, #24
 8001200:	443b      	add	r3, r7
 8001202:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001206:	461a      	mov	r2, r3
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001216:	7cfb      	ldrb	r3, [r7, #19]
 8001218:	3301      	adds	r3, #1
 800121a:	74fb      	strb	r3, [r7, #19]
 800121c:	7cfb      	ldrb	r3, [r7, #19]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d9ec      	bls.n	80011fc <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001232:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2264      	movs	r2, #100	; 0x64
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	da01      	bge.n	8001248 <LPS22HB_P_ReadPressure+0x94>
 8001244:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001248:	131b      	asrs	r3, r3, #12
 800124a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800126c <LPS22HB_P_ReadPressure+0xb8>
 800125a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}
 800126c:	42c80000 	.word	0x42c80000

08001270 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	211a      	movs	r1, #26
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff27 	bl	80010d4 <SENSOR_IO_Read>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	211a      	movs	r1, #26
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fefc 	bl	80010a0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2110      	movs	r1, #16
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff10 	bl	80010d4 <SENSOR_IO_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012be:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012c6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f023 0302 	bic.w	r3, r3, #2
 80012ce:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	2110      	movs	r1, #16
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fedd 	bl	80010a0 <SENSOR_IO_Write>
}  
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <__io_putchar>:
    set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif /* __GNUC__ */
	PUTCHAR_PROTOTYPE{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *) &ch,1,1000);
 80012f8:	1d39      	adds	r1, r7, #4
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	2201      	movs	r2, #1
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <__io_putchar+0x20>)
 8001302:	f004 f9ea 	bl	80056da <HAL_UART_Transmit>
		return ch;
 8001306:	687b      	ldr	r3, [r7, #4]
		}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000390 	.word	0x20000390

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f000 ffdf 	bl	80022da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f816 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f000 f9de 	bl	80016e0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001324:	f000 f874 	bl	8001410 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001328:	f000 f8aa 	bl	8001480 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800132c:	f000 f8e6 	bl	80014fc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001330:	f000 f90a 	bl	8001548 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001334:	f000 f946 	bl	80015c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001338:	f000 f974 	bl	8001624 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800133c:	f000 f9a2 	bl	8001684 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_sensors();
 8001340:	f000 fb85 	bl	8001a4e <init_sensors>
		  printf("%f\r\n",j);
		  HAL_Delay(250);
	  }
	  */

	  Pressure_Test();
 8001344:	f000 fb8a 	bl	8001a5c <Pressure_Test>
 8001348:	e7fc      	b.n	8001344 <main+0x30>
	...

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2244      	movs	r2, #68	; 0x44
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 f9a6 	bl	80066ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800136e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001372:	f002 fcd3 	bl	8003d1c <HAL_PWREx_ControlVoltageScaling>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800137c:	f000 fb62 	bl	8001a44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001380:	f002 fcae 	bl	8003ce0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <SystemClock_Config+0xc0>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	4a20      	ldr	r2, [pc, #128]	; (800140c <SystemClock_Config+0xc0>)
 800138c:	f023 0318 	bic.w	r3, r3, #24
 8001390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001394:	2314      	movs	r3, #20
 8001396:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013a4:	2360      	movs	r3, #96	; 0x60
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013b4:	2328      	movs	r3, #40	; 0x28
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fdc9 	bl	8003f60 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013d4:	f000 fb36 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2303      	movs	r3, #3
 80013de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f991 	bl	8004718 <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013fc:	f000 fb22 	bl	8001a44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001400:	f003 fe98 	bl	8005134 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001404:	bf00      	nop
 8001406:	3758      	adds	r7, #88	; 0x58
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000

08001410 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <MX_DFSDM1_Init+0x6c>)
 8001418:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_DFSDM1_Init+0x68>)
 800141c:	2201      	movs	r2, #1
 800141e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001428:	2202      	movs	r2, #2
 800142a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_DFSDM1_Init+0x68>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_DFSDM1_Init+0x68>)
 800143a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001448:	2204      	movs	r2, #4
 800144a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_DFSDM1_Init+0x68>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001454:	2201      	movs	r2, #1
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_DFSDM1_Init+0x68>)
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <MX_DFSDM1_Init+0x68>)
 8001466:	f001 f8e3 	bl	8002630 <HAL_DFSDM_ChannelInit>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001470:	f000 fae8 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000025c 	.word	0x2000025c
 800147c:	40016020 	.word	0x40016020

08001480 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C2_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C2_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C2_Init+0x74>)
 800148c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001490:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C2_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_I2C2_Init+0x74>)
 800149a:	2201      	movs	r2, #1
 800149c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014be:	f001 fc9c 	bl	8002dfa <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 fabc 	bl	8001a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014d0:	f002 fa26 	bl	8003920 <HAL_I2CEx_ConfigAnalogFilter>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80014da:	f000 fab3 	bl	8001a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_I2C2_Init+0x74>)
 80014e2:	f002 fa68 	bl	80039b6 <HAL_I2CEx_ConfigDigitalFilter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80014ec:	f000 faaa 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000294 	.word	0x20000294
 80014f8:	40005800 	.word	0x40005800

080014fc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_QUADSPI_Init+0x44>)
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <MX_QUADSPI_Init+0x48>)
 8001504:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_QUADSPI_Init+0x44>)
 8001508:	2202      	movs	r2, #2
 800150a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_QUADSPI_Init+0x44>)
 800150e:	2204      	movs	r2, #4
 8001510:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_QUADSPI_Init+0x44>)
 8001514:	2210      	movs	r2, #16
 8001516:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_QUADSPI_Init+0x44>)
 800151a:	2217      	movs	r2, #23
 800151c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_QUADSPI_Init+0x44>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_QUADSPI_Init+0x44>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_QUADSPI_Init+0x44>)
 800152c:	f002 fc5c 	bl	8003de8 <HAL_QSPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001536:	f000 fa85 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002e8 	.word	0x200002e8
 8001544:	a0001000 	.word	0xa0001000

08001548 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_SPI3_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_SPI3_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_SPI3_Init+0x74>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_SPI3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI3_Init+0x74>)
 8001562:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001566:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI3_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_SPI3_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI3_Init+0x74>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI3_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI3_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI3_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_SPI3_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI3_Init+0x74>)
 8001596:	2207      	movs	r2, #7
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_SPI3_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI3_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_SPI3_Init+0x74>)
 80015a8:	f003 ffa6 	bl	80054f8 <HAL_SPI_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fa47 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000032c 	.word	0x2000032c
 80015c0:	40003c00 	.word	0x40003c00

080015c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <MX_USART1_UART_Init+0x5c>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART1_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART1_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART1_UART_Init+0x58>)
 8001608:	f004 f819 	bl	800563e <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001612:	f000 fa17 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000390 	.word	0x20000390
 8001620:	40013800 	.word	0x40013800

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_USART3_UART_Init+0x58>)
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <MX_USART3_UART_Init+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_USART3_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART3_UART_Init+0x58>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART3_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART3_UART_Init+0x58>)
 8001668:	f003 ffe9 	bl	800563e <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001672:	f000 f9e7 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000414 	.word	0x20000414
 8001680:	40004800 	.word	0x40004800

08001684 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800168e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001692:	2206      	movs	r2, #6
 8001694:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001698:	2202      	movs	r2, #2
 800169a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169e:	2202      	movs	r2, #2
 80016a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c8:	f002 f9c1 	bl	8003a4e <HAL_PCD_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016d2:	f000 f9b7 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000498 	.word	0x20000498

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	4bbd      	ldr	r3, [pc, #756]	; (80019ec <MX_GPIO_Init+0x30c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4abc      	ldr	r2, [pc, #752]	; (80019ec <MX_GPIO_Init+0x30c>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4bba      	ldr	r3, [pc, #744]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4bb7      	ldr	r3, [pc, #732]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4ab6      	ldr	r2, [pc, #728]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4bb4      	ldr	r3, [pc, #720]	; (80019ec <MX_GPIO_Init+0x30c>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4bb1      	ldr	r3, [pc, #708]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4ab0      	ldr	r2, [pc, #704]	; (80019ec <MX_GPIO_Init+0x30c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4bae      	ldr	r3, [pc, #696]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4bab      	ldr	r3, [pc, #684]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4aaa      	ldr	r2, [pc, #680]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4ba8      	ldr	r3, [pc, #672]	; (80019ec <MX_GPIO_Init+0x30c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4ba5      	ldr	r3, [pc, #660]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4aa4      	ldr	r2, [pc, #656]	; (80019ec <MX_GPIO_Init+0x30c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4ba2      	ldr	r3, [pc, #648]	; (80019ec <MX_GPIO_Init+0x30c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001774:	489e      	ldr	r0, [pc, #632]	; (80019f0 <MX_GPIO_Init+0x310>)
 8001776:	f001 fb05 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 fafe 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001788:	2200      	movs	r2, #0
 800178a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800178e:	4899      	ldr	r0, [pc, #612]	; (80019f4 <MX_GPIO_Init+0x314>)
 8001790:	f001 faf8 	bl	8002d84 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f241 0181 	movw	r1, #4225	; 0x1081
 800179a:	4897      	ldr	r0, [pc, #604]	; (80019f8 <MX_GPIO_Init+0x318>)
 800179c:	f001 faf2 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a6:	4894      	ldr	r0, [pc, #592]	; (80019f8 <MX_GPIO_Init+0x318>)
 80017a8:	f001 faec 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80017b2:	4892      	ldr	r0, [pc, #584]	; (80019fc <MX_GPIO_Init+0x31c>)
 80017b4:	f001 fae6 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2120      	movs	r1, #32
 80017bc:	488d      	ldr	r0, [pc, #564]	; (80019f4 <MX_GPIO_Init+0x314>)
 80017be:	f001 fae1 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2101      	movs	r1, #1
 80017c6:	488a      	ldr	r0, [pc, #552]	; (80019f0 <MX_GPIO_Init+0x310>)
 80017c8:	f001 fadc 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80017cc:	f240 1315 	movw	r3, #277	; 0x115
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4882      	ldr	r0, [pc, #520]	; (80019f0 <MX_GPIO_Init+0x310>)
 80017e6:	f001 f82f 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80017ea:	236a      	movs	r3, #106	; 0x6a
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	487c      	ldr	r0, [pc, #496]	; (80019f0 <MX_GPIO_Init+0x310>)
 8001800:	f001 f822 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800180a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4878      	ldr	r0, [pc, #480]	; (80019fc <MX_GPIO_Init+0x31c>)
 800181c:	f001 f814 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001820:	233f      	movs	r3, #63	; 0x3f
 8001822:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001824:	230b      	movs	r3, #11
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4872      	ldr	r0, [pc, #456]	; (80019fc <MX_GPIO_Init+0x31c>)
 8001834:	f001 f808 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001838:	2303      	movs	r3, #3
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001848:	2308      	movs	r3, #8
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f000 fff7 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800185a:	f248 1304 	movw	r3, #33028	; 0x8104
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f000 ffe7 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800187a:	2308      	movs	r3, #8
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f000 ffd6 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800189c:	2310      	movs	r3, #16
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018a0:	230b      	movs	r3, #11
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b2:	f000 ffc9 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80018b6:	23e0      	movs	r3, #224	; 0xe0
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c6:	2305      	movs	r3, #5
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f000 ffb8 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018d8:	2301      	movs	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4841      	ldr	r0, [pc, #260]	; (80019f4 <MX_GPIO_Init+0x314>)
 80018ee:	f000 ffab 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80018f2:	2302      	movs	r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018f6:	230b      	movs	r3, #11
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	483b      	ldr	r0, [pc, #236]	; (80019f4 <MX_GPIO_Init+0x314>)
 8001906:	f000 ff9f 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800190a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800190e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4834      	ldr	r0, [pc, #208]	; (80019f4 <MX_GPIO_Init+0x314>)
 8001924:	f000 ff90 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001928:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800192c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	482e      	ldr	r0, [pc, #184]	; (80019f8 <MX_GPIO_Init+0x318>)
 8001940:	f000 ff82 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001944:	f243 0381 	movw	r3, #12417	; 0x3081
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4826      	ldr	r0, [pc, #152]	; (80019f8 <MX_GPIO_Init+0x318>)
 800195e:	f000 ff73 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001962:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <MX_GPIO_Init+0x31c>)
 800197c:	f000 ff64 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001980:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4819      	ldr	r0, [pc, #100]	; (80019fc <MX_GPIO_Init+0x31c>)
 8001998:	f000 ff56 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800199c:	2302      	movs	r3, #2
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4810      	ldr	r0, [pc, #64]	; (80019f8 <MX_GPIO_Init+0x318>)
 80019b8:	f000 ff46 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80019bc:	2378      	movs	r3, #120	; 0x78
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019cc:	2307      	movs	r3, #7
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <MX_GPIO_Init+0x318>)
 80019d8:	f000 ff36 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e00a      	b.n	8001a00 <MX_GPIO_Init+0x320>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48001000 	.word	0x48001000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	48000800 	.word	0x48000800
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a06:	2304      	movs	r3, #4
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <MX_GPIO_Init+0x360>)
 8001a12:	f000 ff19 	bl	8002848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2017      	movs	r0, #23
 8001a1c:	f000 fdd1 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a20:	2017      	movs	r0, #23
 8001a22:	f000 fdea 	bl	80025fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2028      	movs	r0, #40	; 0x28
 8001a2c:	f000 fdc9 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a30:	2028      	movs	r0, #40	; 0x28
 8001a32:	f000 fde2 	bl	80025fa <HAL_NVIC_EnableIRQ>

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	48000400 	.word	0x48000400

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>

08001a4e <init_sensors>:
#include "sensores.h"


void init_sensors(void){
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
	BSP_PSENSOR_Init();
 8001a52:	f7ff fb5d 	bl	8001110 <BSP_PSENSOR_Init>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <Pressure_Test>:



void Pressure_Test(void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	float press_value=0.;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
	while(1){
		press_value= BSP_PSENSOR_ReadPressure();
 8001a68:	f7ff fb72 	bl	8001150 <BSP_PSENSOR_ReadPressure>
 8001a6c:	ed87 0a01 	vstr	s0, [r7, #4]
		printf("Presion: %.2f mBar\r\n", press_value);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fd69 	bl	8000548 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <Pressure_Test+0x30>)
 8001a7c:	f005 fa88 	bl	8006f90 <iprintf>
		HAL_Delay(1000);
 8001a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a84:	f000 fc9e 	bl	80023c4 <HAL_Delay>
		press_value= BSP_PSENSOR_ReadPressure();
 8001a88:	e7ee      	b.n	8001a68 <Pressure_Test+0xc>
 8001a8a:	bf00      	nop
 8001a8c:	08009118 	.word	0x08009118

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ac      	sub	sp, #176	; 0xb0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2288      	movs	r2, #136	; 0x88
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fdd7 	bl	80066ac <memset>
  if(DFSDM1_Init == 0)
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d142      	bne.n	8001b8c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 f822 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b22:	f7ff ff8f 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b30:	6613      	str	r3, [r2, #96]	; 0x60
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b56:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b70:	2306      	movs	r3, #6
 8001b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b7e:	f000 fe63 	bl	8002848 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a02      	ldr	r2, [pc, #8]	; (8001b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b8a:	6013      	str	r3, [r2, #0]
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	37b0      	adds	r7, #176	; 0xb0
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200009a4 	.word	0x200009a4
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48001000 	.word	0x48001000

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ac      	sub	sp, #176	; 0xb0
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2288      	movs	r2, #136	; 0x88
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fd73 	bl	80066ac <memset>
  if(hi2c->Instance==I2C2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <HAL_I2C_MspInit+0xb0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d13b      	bne.n	8001c48 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 ffbf 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001be8:	f7ff ff2c 	bl	8001a44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <HAL_I2C_MspInit+0xb8>)
 8001c2c:	f000 fe0c 	bl	8002848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_I2C_MspInit+0xb4>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	37b0      	adds	r7, #176	; 0xb0
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40005800 	.word	0x40005800
 8001c54:	40021000 	.word	0x40021000
 8001c58:	48000400 	.word	0x48000400

08001c5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_I2C_MspDeInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10f      	bne.n	8001c8e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_I2C_MspDeInit+0x40>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_I2C_MspDeInit+0x40>)
 8001c74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <HAL_I2C_MspDeInit+0x44>)
 8001c80:	f000 ff8c 	bl	8002b9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_I2C_MspDeInit+0x44>)
 8001c8a:	f000 ff87 	bl	8002b9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40005800 	.word	0x40005800
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_QSPI_MspInit+0x7c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d128      	bne.n	8001d18 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6513      	str	r3, [r2, #80]	; 0x50
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_QSPI_MspInit+0x80>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001cf6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001cfa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d08:	230a      	movs	r3, #10
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_QSPI_MspInit+0x84>)
 8001d14:	f000 fd98 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	a0001000 	.word	0xa0001000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48001000 	.word	0x48001000

08001d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_SPI_MspInit+0x7c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d128      	bne.n	8001da0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d58:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_SPI_MspInit+0x80>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001d7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d90:	2306      	movs	r3, #6
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_SPI_MspInit+0x84>)
 8001d9c:	f000 fd54 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40003c00 	.word	0x40003c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000800 	.word	0x48000800

08001db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0ae      	sub	sp, #184	; 0xb8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2288      	movs	r2, #136	; 0x88
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 fc69 	bl	80066ac <memset>
  if(huart->Instance==USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a42      	ldr	r2, [pc, #264]	; (8001ee8 <HAL_UART_MspInit+0x134>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d13b      	bne.n	8001e5c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001de8:	2300      	movs	r3, #0
 8001dea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 feb5 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dfc:	f7ff fe22 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e00:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	4a39      	ldr	r2, [pc, #228]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0c:	4b37      	ldr	r3, [pc, #220]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4826      	ldr	r0, [pc, #152]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e56:	f000 fcf7 	bl	8002848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e5a:	e040      	b.n	8001ede <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_UART_MspInit+0x140>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d13b      	bne.n	8001ede <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e66:	2304      	movs	r3, #4
 8001e68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fe74 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001e7e:	f7ff fde1 	bl	8001a44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <HAL_UART_MspInit+0x144>)
 8001eda:	f000 fcb5 	bl	8002848 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	37b8      	adds	r7, #184	; 0xb8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	40004800 	.word	0x40004800
 8001ef8:	48000c00 	.word	0x48000c00

08001efc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0ac      	sub	sp, #176	; 0xb0
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2288      	movs	r2, #136	; 0x88
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 fbc5 	bl	80066ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2a:	d17c      	bne.n	8002026 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f42:	2318      	movs	r3, #24
 8001f44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f46:	2307      	movs	r3, #7
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fdff 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001f68:	f7ff fd6c 	bl	8001a44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f000 fc51 	bl	8002848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001fa6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fc0:	230a      	movs	r3, #10
 8001fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f000 fc3a 	bl	8002848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d114      	bne.n	8002022 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	; 0x58
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002010:	f001 feda 	bl	8003dc8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_PCD_MspInit+0x134>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_PCD_MspInit+0x134>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002020:	e001      	b.n	8002026 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002022:	f001 fed1 	bl	8003dc8 <HAL_PWREx_EnableVddUSB>
}
 8002026:	bf00      	nop
 8002028:	37b0      	adds	r7, #176	; 0xb0
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f980 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800208c:	2020      	movs	r0, #32
 800208e:	f000 fe91 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002092:	2040      	movs	r0, #64	; 0x40
 8002094:	f000 fe8e 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002098:	2080      	movs	r0, #128	; 0x80
 800209a:	f000 fe8b 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800209e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020a2:	f000 fe87 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}

080020aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020b2:	f000 fe7f 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80020b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020ba:	f000 fe7b 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020c2:	f000 fe77 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80020c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ca:	f000 fe73 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80020ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020d2:	f000 fe6f 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}

080020da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_kill>:

int _kill(int pid, int sig)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020f4:	f004 faa2 	bl	800663c <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2216      	movs	r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
  return -1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_exit>:

void _exit (int status)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffe7 	bl	80020ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800211c:	e7fe      	b.n	800211c <_exit+0x12>

0800211e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e00a      	b.n	8002146 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002130:	f3af 8000 	nop.w
 8002134:	4601      	mov	r1, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	60ba      	str	r2, [r7, #8]
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbf0      	blt.n	8002130 <_read+0x12>
  }

  return len;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e009      	b.n	800217e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	60ba      	str	r2, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f8bc 	bl	80012f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbf1      	blt.n	800216a <_write+0x12>
  }
  return len;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_close>:

int _close(int file)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_isatty>:

int _isatty(int file)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f004 fa08 	bl	800663c <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20018000 	.word	0x20018000
 8002258:	00000400 	.word	0x00000400
 800225c:	200009a8 	.word	0x200009a8
 8002260:	200009e8 	.word	0x200009e8

08002264 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800228c:	f7ff ffea 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <LoopForever+0xe>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <LoopForever+0x16>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022b6:	f004 f9c7 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ba:	f7ff f82b 	bl	8001314 <main>

080022be <LoopForever>:

LoopForever:
    b LoopForever
 80022be:	e7fe      	b.n	80022be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80022cc:	08009564 	.word	0x08009564
  ldr r2, =_sbss
 80022d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022d4:	200009e4 	.word	0x200009e4

080022d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>

080022da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f961 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ea:	2000      	movs	r0, #0
 80022ec:	f000 f80e 	bl	800230c <HAL_InitTick>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e001      	b.n	8002300 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022fc:	f7ff fbc8 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002300:	79fb      	ldrb	r3, [r7, #7]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_InitTick+0x6c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_InitTick+0x70>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_InitTick+0x6c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f96d 	bl	8002616 <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d809      	bhi.n	800235c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002350:	f000 f937 	bl	80025c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_InitTick+0x74>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e007      	b.n	800236c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e004      	b.n	800236c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e001      	b.n	800236c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000014 	.word	0x20000014
 800237c:	2000000c 	.word	0x2000000c
 8002380:	20000010 	.word	0x20000010

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000014 	.word	0x20000014
 80023a8:	200009ac 	.word	0x200009ac

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200009ac 	.word	0x200009ac

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000014 	.word	0x20000014

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	; (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff3e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff31 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0ac      	b.n	800279c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8b2 	bl	80027b0 <DFSDM_GetChannelFromInstance>
 800264c:	4603      	mov	r3, r0
 800264e:	4a55      	ldr	r2, [pc, #340]	; (80027a4 <HAL_DFSDM_ChannelInit+0x174>)
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e09f      	b.n	800279c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fa3b 	bl	8001ad8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_DFSDM_ChannelInit+0x178>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_DFSDM_ChannelInit+0x178>)
 800266a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_DFSDM_ChannelInit+0x178>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d125      	bne.n	80026c0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002674:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 800267a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800267e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002680:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4948      	ldr	r1, [pc, #288]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a46      	ldr	r2, [pc, #280]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 8002694:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002698:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	493f      	ldr	r1, [pc, #252]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026b4:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3c      	ldr	r2, [pc, #240]	; (80027ac <HAL_DFSDM_ChannelInit+0x17c>)
 80026ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026be:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026ce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026de:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026e4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020f 	bic.w	r2, r2, #15
 80026fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002724:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 0207 	and.w	r2, r2, #7
 8002750:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f810 	bl	80027b0 <DFSDM_GetChannelFromInstance>
 8002790:	4602      	mov	r2, r0
 8002792:	4904      	ldr	r1, [pc, #16]	; (80027a4 <HAL_DFSDM_ChannelInit+0x174>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200009b4 	.word	0x200009b4
 80027a8:	200009b0 	.word	0x200009b0
 80027ac:	40016000 	.word	0x40016000

080027b0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <DFSDM_GetChannelFromInstance+0x7c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e02b      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <DFSDM_GetChannelFromInstance+0x80>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d102      	bne.n	80027d4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e024      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a17      	ldr	r2, [pc, #92]	; (8002834 <DFSDM_GetChannelFromInstance+0x84>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d102      	bne.n	80027e2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80027dc:	2302      	movs	r3, #2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e01d      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <DFSDM_GetChannelFromInstance+0x88>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d102      	bne.n	80027f0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80027ea:	2304      	movs	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e016      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <DFSDM_GetChannelFromInstance+0x8c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d102      	bne.n	80027fe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80027f8:	2305      	movs	r3, #5
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e00f      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <DFSDM_GetChannelFromInstance+0x90>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d102      	bne.n	800280c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002806:	2306      	movs	r3, #6
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e008      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <DFSDM_GetChannelFromInstance+0x94>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002814:	2307      	movs	r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e001      	b.n	800281e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800281a:	2303      	movs	r3, #3
 800281c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40016000 	.word	0x40016000
 8002830:	40016020 	.word	0x40016020
 8002834:	40016040 	.word	0x40016040
 8002838:	40016080 	.word	0x40016080
 800283c:	400160a0 	.word	0x400160a0
 8002840:	400160c0 	.word	0x400160c0
 8002844:	400160e0 	.word	0x400160e0

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002856:	e17f      	b.n	8002b58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8171 	beq.w	8002b52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d005      	beq.n	8002888 <HAL_GPIO_Init+0x40>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d130      	bne.n	80028ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028be:	2201      	movs	r2, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0201 	and.w	r2, r3, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d118      	bne.n	8002928 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	6939      	ldr	r1, [r7, #16]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80ac 	beq.w	8002b52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <HAL_GPIO_Init+0x330>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <HAL_GPIO_Init+0x330>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6613      	str	r3, [r2, #96]	; 0x60
 8002a06:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <HAL_GPIO_Init+0x330>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_GPIO_Init+0x334>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x242>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	; (8002b80 <HAL_GPIO_Init+0x338>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x23e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_GPIO_Init+0x33c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x23a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_GPIO_Init+0x340>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x236>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <HAL_GPIO_Init+0x344>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x232>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_GPIO_Init+0x348>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x22e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x34c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x22a>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x244>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a9c:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_GPIO_Init+0x334>)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ace:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_GPIO_Init+0x350>)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f ae78 	bne.w	8002858 <HAL_GPIO_Init+0x10>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	48000400 	.word	0x48000400
 8002b84:	48000800 	.word	0x48000800
 8002b88:	48000c00 	.word	0x48000c00
 8002b8c:	48001000 	.word	0x48001000
 8002b90:	48001400 	.word	0x48001400
 8002b94:	48001800 	.word	0x48001800
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002baa:	e0cd      	b.n	8002d48 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bac:	2201      	movs	r2, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80c0 	beq.w	8002d42 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002bc2:	4a68      	ldr	r2, [pc, #416]	; (8002d64 <HAL_GPIO_DeInit+0x1c8>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	220f      	movs	r2, #15
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bea:	d025      	beq.n	8002c38 <HAL_GPIO_DeInit+0x9c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a5e      	ldr	r2, [pc, #376]	; (8002d68 <HAL_GPIO_DeInit+0x1cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d01f      	beq.n	8002c34 <HAL_GPIO_DeInit+0x98>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_GPIO_DeInit+0x1d0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d019      	beq.n	8002c30 <HAL_GPIO_DeInit+0x94>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_GPIO_DeInit+0x1d4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_GPIO_DeInit+0x90>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a5b      	ldr	r2, [pc, #364]	; (8002d74 <HAL_GPIO_DeInit+0x1d8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00d      	beq.n	8002c28 <HAL_GPIO_DeInit+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_GPIO_DeInit+0x1dc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d007      	beq.n	8002c24 <HAL_GPIO_DeInit+0x88>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a59      	ldr	r2, [pc, #356]	; (8002d7c <HAL_GPIO_DeInit+0x1e0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_GPIO_DeInit+0x84>
 8002c1c:	2306      	movs	r3, #6
 8002c1e:	e00c      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c20:	2307      	movs	r3, #7
 8002c22:	e00a      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c24:	2305      	movs	r3, #5
 8002c26:	e008      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e004      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_GPIO_DeInit+0x9e>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	f002 0203 	and.w	r2, r2, #3
 8002c40:	0092      	lsls	r2, r2, #2
 8002c42:	4093      	lsls	r3, r2
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d132      	bne.n	8002cb0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	494b      	ldr	r1, [pc, #300]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4947      	ldr	r1, [pc, #284]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002c66:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4944      	ldr	r1, [pc, #272]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	4940      	ldr	r1, [pc, #256]	; (8002d80 <HAL_GPIO_DeInit+0x1e4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_GPIO_DeInit+0x1c8>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <HAL_GPIO_DeInit+0x1c8>)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	400a      	ands	r2, r1
 8002caa:	3302      	adds	r3, #2
 8002cac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2103      	movs	r1, #3
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	08d2      	lsrs	r2, r2, #3
 8002ce4:	4019      	ands	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2103      	movs	r1, #3
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d32:	2101      	movs	r1, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af2b 	bne.w	8002bac <HAL_GPIO_DeInit+0x10>
  }
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	48001000 	.word	0x48001000
 8002d78:	48001400 	.word	0x48001400
 8002d7c:	48001800 	.word	0x48001800
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f806 	bl	8002de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e081      	b.n	8002f10 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe febd 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2224      	movs	r2, #36	; 0x24
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	e006      	b.n	8002e82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d104      	bne.n	8002e94 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69d9      	ldr	r1, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e021      	b.n	8002f6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2224      	movs	r2, #36	; 0x24
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fe8a 	bl	8001c5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	f040 80f9 	bne.w	8003192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_I2C_Mem_Write+0x34>
 8002fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ed      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Mem_Write+0x4e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0e6      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fce:	f7ff f9ed 	bl	80023ac <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fac3 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d1      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003018:	88f8      	ldrh	r0, [r7, #6]
 800301a:	893a      	ldrh	r2, [r7, #8]
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4603      	mov	r3, r0
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f9d3 	bl	80033d4 <I2C_RequestMemoryWrite>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0a9      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d90e      	bls.n	8003068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8979      	ldrh	r1, [r7, #10]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fc2b 	bl	80038bc <I2C_TransferConfig>
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	b2da      	uxtb	r2, r3
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	2300      	movs	r3, #0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fc1a 	bl	80038bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 faad 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e07b      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d034      	beq.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d130      	bne.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa3f 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e04d      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	d90e      	bls.n	8003120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	b2da      	uxtb	r2, r3
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	2300      	movs	r3, #0
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fbcf 	bl	80038bc <I2C_TransferConfig>
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fbbe 	bl	80038bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d19e      	bne.n	8003088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa8c 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01a      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_I2C_Mem_Write+0x224>)
 8003172:	400b      	ands	r3, r1
 8003174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	fe00e800 	.word	0xfe00e800

080031a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	817b      	strh	r3, [r7, #10]
 80031b2:	460b      	mov	r3, r1
 80031b4:	813b      	strh	r3, [r7, #8]
 80031b6:	4613      	mov	r3, r2
 80031b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	f040 80fd 	bne.w	80033c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x34>
 80031ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0f1      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_I2C_Mem_Read+0x4e>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e0ea      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f6:	f7ff f8d9 	bl	80023ac <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2319      	movs	r3, #25
 8003202:	2201      	movs	r2, #1
 8003204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9af 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d5      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2222      	movs	r2, #34	; 0x22
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a3a      	ldr	r2, [r7, #32]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003240:	88f8      	ldrh	r0, [r7, #6]
 8003242:	893a      	ldrh	r2, [r7, #8]
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4603      	mov	r3, r0
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f913 	bl	800347c <I2C_RequestMemoryRead>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0ad      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2bff      	cmp	r3, #255	; 0xff
 8003270:	d90e      	bls.n	8003290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	b2da      	uxtb	r2, r3
 800327e:	8979      	ldrh	r1, [r7, #10]
 8003280:	4b52      	ldr	r3, [pc, #328]	; (80033cc <HAL_I2C_Mem_Read+0x22c>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fb17 	bl	80038bc <I2C_TransferConfig>
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	8979      	ldrh	r1, [r7, #10]
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_I2C_Mem_Read+0x22c>)
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fb06 	bl	80038bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2200      	movs	r2, #0
 80032b8:	2104      	movs	r1, #4
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f956 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07c      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d034      	beq.n	8003370 <HAL_I2C_Mem_Read+0x1d0>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d130      	bne.n	8003370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f927 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04d      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2bff      	cmp	r3, #255	; 0xff
 8003330:	d90e      	bls.n	8003350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	b2da      	uxtb	r2, r3
 800333e:	8979      	ldrh	r1, [r7, #10]
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fab7 	bl	80038bc <I2C_TransferConfig>
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	b2da      	uxtb	r2, r3
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 faa6 	bl	80038bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d19a      	bne.n	80032b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f974 	bl	800366c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e01a      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_I2C_Mem_Read+0x230>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	80002400 	.word	0x80002400
 80033d0:	fe00e800 	.word	0xfe00e800

080033d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	8979      	ldrh	r1, [r7, #10]
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <I2C_RequestMemoryWrite+0xa4>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fa5d 	bl	80038bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8f0 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02c      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
 8003426:	e015      	b.n	8003454 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	69b9      	ldr	r1, [r7, #24]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8d6 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e012      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f884 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	80002000 	.word	0x80002000

0800347c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	4b20      	ldr	r3, [pc, #128]	; (8003520 <I2C_RequestMemoryRead+0xa4>)
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2300      	movs	r3, #0
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa0a 	bl	80038bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f89d 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e02c      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034c2:	893b      	ldrh	r3, [r7, #8]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e015      	b.n	80034fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f883 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e012      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2200      	movs	r2, #0
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f831 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	80002000 	.word	0x80002000

08003524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d103      	bne.n	8003542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d007      	beq.n	8003560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	619a      	str	r2, [r3, #24]
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e022      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003584:	d01e      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe ff11 	bl	80023ac <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e00f      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d0cd      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f8:	e02c      	b.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f870 	bl	80036e4 <I2C_IsErrorOccurred>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02a      	b.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003614:	d01e      	beq.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fec9 	bl	80023ac <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d1cb      	bne.n	80035fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003678:	e028      	b.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f830 	bl	80036e4 <I2C_IsErrorOccurred>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e026      	b.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fe8d 	bl	80023ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d1cf      	bne.n	800367a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d075      	beq.n	80037fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003718:	e056      	b.n	80037c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003720:	d052      	beq.n	80037c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fe43 	bl	80023ac <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_IsErrorOccurred+0x54>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d147      	bne.n	80037c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800374a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375a:	d12e      	bne.n	80037ba <I2C_IsErrorOccurred+0xd6>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003762:	d02a      	beq.n	80037ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b20      	cmp	r3, #32
 8003768:	d027      	beq.n	80037ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003778:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800377a:	f7fe fe17 	bl	80023ac <HAL_GetTick>
 800377e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003780:	e01b      	b.n	80037ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003782:	f7fe fe13 	bl	80023ac <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b19      	cmp	r3, #25
 800378e:	d914      	bls.n	80037ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d1dc      	bne.n	8003782 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d003      	beq.n	80037de <I2C_IsErrorOccurred+0xfa>
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d09d      	beq.n	800371a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2220      	movs	r2, #32
 80037ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003862:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800386a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01c      	beq.n	80038ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fe56 	bl	8003524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <I2C_IsErrorOccurred+0x1d4>)
 8003884:	400b      	ands	r3, r1
 8003886:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	4613      	mov	r3, r2
 80038cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d4:	7a7b      	ldrb	r3, [r7, #9]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	0d5b      	lsrs	r3, r3, #21
 80038f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <I2C_TransferConfig+0x60>)
 80038fc:	430b      	orrs	r3, r1
 80038fe:	43db      	mvns	r3, r3
 8003900:	ea02 0103 	and.w	r1, r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	03ff63ff 	.word	0x03ff63ff

08003920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b20      	cmp	r3, #32
 8003934:	d138      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003940:	2302      	movs	r3, #2
 8003942:	e032      	b.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d139      	bne.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e033      	b.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2224      	movs	r2, #36	; 0x24
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a50:	b08f      	sub	sp, #60	; 0x3c
 8003a52:	af0a      	add	r7, sp, #40	; 0x28
 8003a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e116      	b.n	8003c8e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe fa3e 	bl	8001efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fb43 	bl	800612a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	687e      	ldr	r6, [r7, #4]
 8003aac:	466d      	mov	r5, sp
 8003aae:	f106 0410 	add.w	r4, r6, #16
 8003ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ac2:	1d33      	adds	r3, r6, #4
 8003ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f002 fb03 	bl	80060d2 <USB_CoreInit>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0d7      	b.n	8003c8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fb31 	bl	800614c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	e04a      	b.n	8003b86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	333d      	adds	r3, #61	; 0x3d
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	333c      	adds	r3, #60	; 0x3c
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	b298      	uxth	r0, r3
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3344      	adds	r3, #68	; 0x44
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3340      	adds	r3, #64	; 0x40
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3348      	adds	r3, #72	; 0x48
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	334c      	adds	r3, #76	; 0x4c
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3354      	adds	r3, #84	; 0x54
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3301      	adds	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3af      	bcc.n	8003af0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e044      	b.n	8003c20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d3b5      	bcc.n	8003b96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	687e      	ldr	r6, [r7, #4]
 8003c32:	466d      	mov	r5, sp
 8003c34:	f106 0410 	add.w	r4, r6, #16
 8003c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c44:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c48:	1d33      	adds	r3, r6, #4
 8003c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4c:	6838      	ldr	r0, [r7, #0]
 8003c4e:	f002 fac9 	bl	80061e4 <USB_DevInit>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e014      	b.n	8003c8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f80a 	bl	8003c96 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f002 fc75 	bl	8006576 <USB_DevDisconnect>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	f043 0303 	orr.w	r3, r3, #3
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d130      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d038      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d42:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2232      	movs	r2, #50	; 0x32
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0c9b      	lsrs	r3, r3, #18
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d60:	e002      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d102      	bne.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f2      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d110      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d007      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003daa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	2000000c 	.word	0x2000000c
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	6053      	str	r3, [r2, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7fe fadc 	bl	80023ac <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e063      	b.n	8003ec8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd ff45 	bl	8001ca4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e1a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f858 	bl	8003ed4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	021a      	lsls	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2120      	movs	r1, #32
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f850 	bl	8003ef0 <QSPI_WaitFlagStateUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d131      	bne.n	8003ebe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e64:	f023 0310 	bic.w	r3, r3, #16
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6852      	ldr	r2, [r2, #4]
 8003e6c:	0611      	lsls	r1, r2, #24
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <HAL_QSPI_Init+0xe8>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6912      	ldr	r2, [r2, #16]
 8003e8a:	0411      	lsls	r1, r2, #16
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6952      	ldr	r2, [r2, #20]
 8003e90:	4311      	orrs	r1, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6992      	ldr	r2, [r2, #24]
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	ffe0f8fe 	.word	0xffe0f8fe

08003ed4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f00:	e01a      	b.n	8003f38 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f08:	d016      	beq.n	8003f38 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fa4f 	bl	80023ac <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2204      	movs	r2, #4
 8003f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e00e      	b.n	8003f56 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1d6      	bne.n	8003f02 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e3ca      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b97      	ldr	r3, [pc, #604]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b94      	ldr	r3, [pc, #592]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80e4 	beq.w	800415c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_RCC_OscConfig+0x4a>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	f040 808b 	bne.w	80040b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 8087 	bne.w	80040b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003faa:	4b89      	ldr	r3, [pc, #548]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e3a2      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	4b82      	ldr	r3, [pc, #520]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_RCC_OscConfig+0x7c>
 8003fd2:	4b7f      	ldr	r3, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_OscConfig+0x88>
 8003fdc:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d223      	bcs.n	8004034 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fd55 	bl	8004aa0 <RCC_SetFlashLatencyFromMSIRange>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e383      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004000:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a72      	ldr	r2, [pc, #456]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	496d      	ldr	r1, [pc, #436]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401e:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	4968      	ldr	r1, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
 8004032:	e025      	b.n	8004080 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004034:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a65      	ldr	r2, [pc, #404]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800403a:	f043 0308 	orr.w	r3, r3, #8
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b63      	ldr	r3, [pc, #396]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4960      	ldr	r1, [pc, #384]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004052:	4b5f      	ldr	r3, [pc, #380]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	495b      	ldr	r1, [pc, #364]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd15 	bl	8004aa0 <RCC_SetFlashLatencyFromMSIRange>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e343      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004080:	f000 fc4a 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	4950      	ldr	r1, [pc, #320]	; (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <HAL_RCC_OscConfig+0x278>)
 800409e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040a0:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f931 	bl	800230c <HAL_InitTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d052      	beq.n	800415a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	e327      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d032      	beq.n	8004126 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040cc:	f7fe f96e 	bl	80023ac <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d4:	f7fe f96a 	bl	80023ac <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e310      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f2:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a36      	ldr	r2, [pc, #216]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4931      	ldr	r1, [pc, #196]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004110:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	492c      	ldr	r1, [pc, #176]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	e01a      	b.n	800415c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004132:	f7fe f93b 	bl	80023ac <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800413a:	f7fe f937 	bl	80023ac <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e2dd      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x1da>
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800415a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d074      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x21a>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d10e      	bne.n	8004192 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d10b      	bne.n	8004192 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d064      	beq.n	8004250 <HAL_RCC_OscConfig+0x2f0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d160      	bne.n	8004250 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e2ba      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x24a>
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e026      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b2:	d115      	bne.n	80041e0 <HAL_RCC_OscConfig+0x280>
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a02      	ldr	r2, [pc, #8]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e014      	b.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08009130 	.word	0x08009130
 80041d8:	2000000c 	.word	0x2000000c
 80041dc:	20000010 	.word	0x20000010
 80041e0:	4ba0      	ldr	r3, [pc, #640]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a9f      	ldr	r2, [pc, #636]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b9d      	ldr	r3, [pc, #628]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a9c      	ldr	r2, [pc, #624]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe f8d4 	bl	80023ac <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe f8d0 	bl	80023ac <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e276      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b92      	ldr	r3, [pc, #584]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0x2a8>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe f8c0 	bl	80023ac <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe f8bc 	bl	80023ac <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e262      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b88      	ldr	r3, [pc, #544]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x2d0>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d060      	beq.n	8004320 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x310>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d119      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d116      	bne.n	800429e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004270:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_OscConfig+0x328>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e23f      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4973      	ldr	r1, [pc, #460]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429c:	e040      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d023      	beq.n	80042ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a6:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6e      	ldr	r2, [pc, #440]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe f87b 	bl	80023ac <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fe f877 	bl	80023ac <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e21d      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042cc:	4b65      	ldr	r3, [pc, #404]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b62      	ldr	r3, [pc, #392]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	495f      	ldr	r1, [pc, #380]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fe f857 	bl	80023ac <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe f853 	bl	80023ac <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1f9      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d03c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004334:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	4a4a      	ldr	r2, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fe f832 	bl	80023ac <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe f82e 	bl	80023ac <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1d4      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ef      	beq.n	800434c <HAL_RCC_OscConfig+0x3ec>
 800436c:	e01b      	b.n	80043a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	4a3b      	ldr	r2, [pc, #236]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fe f815 	bl	80023ac <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004386:	f7fe f811 	bl	80023ac <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1b7      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004398:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ef      	bne.n	8004386 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80a6 	beq.w	8004500 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d118      	bne.n	800441e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f8:	f7fd ffd8 	bl	80023ac <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd ffd4 	bl	80023ac <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e17a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCC_OscConfig+0x508>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0x4d8>
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004436:	e029      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d115      	bne.n	800446c <HAL_RCC_OscConfig+0x50c>
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_RCC_OscConfig+0x504>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	40007000 	.word	0x40007000
 800446c:	4b9c      	ldr	r3, [pc, #624]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a9b      	ldr	r2, [pc, #620]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800447c:	4b98      	ldr	r3, [pc, #608]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a97      	ldr	r2, [pc, #604]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d016      	beq.n	80044c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd ff8a 	bl	80023ac <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd ff86 	bl	80023ac <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e12a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b2:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ed      	beq.n	800449c <HAL_RCC_OscConfig+0x53c>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd ff73 	bl	80023ac <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd ff6f 	bl	80023ac <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e113      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e0:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ed      	bne.n	80044ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b7a      	ldr	r3, [pc, #488]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a79      	ldr	r2, [pc, #484]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80fe 	beq.w	8004706 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 80d0 	bne.w	80046b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004514:	4b72      	ldr	r3, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0203 	and.w	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	429a      	cmp	r2, r3
 8004526:	d130      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	3b01      	subs	r3, #1
 8004534:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d127      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d11f      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004554:	2a07      	cmp	r2, #7
 8004556:	bf14      	ite	ne
 8004558:	2201      	movne	r2, #1
 800455a:	2200      	moveq	r2, #0
 800455c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	4293      	cmp	r3, r2
 8004560:	d113      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d109      	bne.n	800458a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d06e      	beq.n	8004668 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d069      	beq.n	8004664 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0ad      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045ac:	4b4c      	ldr	r3, [pc, #304]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4b      	ldr	r2, [pc, #300]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b8:	f7fd fef8 	bl	80023ac <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fd fef4 	bl	80023ac <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e09a      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045de:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <HAL_RCC_OscConfig+0x784>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f8:	0212      	lsls	r2, r2, #8
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	3a01      	subs	r2, #1
 8004604:	0552      	lsls	r2, r2, #21
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800460c:	0852      	lsrs	r2, r2, #1
 800460e:	3a01      	subs	r2, #1
 8004610:	0652      	lsls	r2, r2, #25
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004618:	0912      	lsrs	r2, r2, #4
 800461a:	0452      	lsls	r2, r2, #17
 800461c:	430a      	orrs	r2, r1
 800461e:	4930      	ldr	r1, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463c:	f7fd feb6 	bl	80023ac <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd feb2 	bl	80023ac <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e058      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004662:	e050      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e04f      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d148      	bne.n	8004706 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468c:	f7fd fe8e 	bl	80023ac <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd fe8a 	bl	80023ac <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e030      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x734>
 80046b2:	e028      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d023      	beq.n	8004702 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x780>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fe71 	bl	80023ac <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e00c      	b.n	80046e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fd fe6d 	bl	80023ac <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d905      	bls.n	80046e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e013      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ec      	bne.n	80046ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4905      	ldr	r1, [pc, #20]	; (8004710 <HAL_RCC_OscConfig+0x7b0>)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x7b4>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	60cb      	str	r3, [r1, #12]
 8004700:	e001      	b.n	8004706 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	feeefffc 	.word	0xfeeefffc

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0e7      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b75      	ldr	r3, [pc, #468]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b72      	ldr	r3, [pc, #456]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4970      	ldr	r1, [pc, #448]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b6e      	ldr	r3, [pc, #440]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cf      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004774:	429a      	cmp	r2, r3
 8004776:	d908      	bls.n	800478a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4960      	ldr	r1, [pc, #384]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04c      	beq.n	8004830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	4b5a      	ldr	r3, [pc, #360]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d121      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0a6      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	4b54      	ldr	r3, [pc, #336]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d115      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e09a      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ce:	4b4e      	ldr	r3, [pc, #312]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e08e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047de:	4b4a      	ldr	r3, [pc, #296]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e086      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b46      	ldr	r3, [pc, #280]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4943      	ldr	r1, [pc, #268]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd fdd4 	bl	80023ac <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fd fdd0 	bl	80023ac <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e06e      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004848:	429a      	cmp	r2, r3
 800484a:	d208      	bcs.n	800485e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b2e      	ldr	r3, [pc, #184]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	492b      	ldr	r1, [pc, #172]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485e:	4b29      	ldr	r3, [pc, #164]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d210      	bcs.n	800488e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 0207 	bic.w	r2, r3, #7
 8004874:	4923      	ldr	r1, [pc, #140]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_RCC_ClockConfig+0x1ec>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d001      	beq.n	800488e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e036      	b.n	80048fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4918      	ldr	r1, [pc, #96]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4910      	ldr	r1, [pc, #64]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048cc:	f000 f824 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	490b      	ldr	r1, [pc, #44]	; (800490c <HAL_RCC_ClockConfig+0x1f4>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1f8>)
 80048ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1fc>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fd0b 	bl	800230c <HAL_InitTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80048fa:	7afb      	ldrb	r3, [r7, #11]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40022000 	.word	0x40022000
 8004908:	40021000 	.word	0x40021000
 800490c:	08009130 	.word	0x08009130
 8004910:	2000000c 	.word	0x2000000c
 8004914:	20000010 	.word	0x20000010

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	; 0x24
 800491c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b3e      	ldr	r3, [pc, #248]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004930:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x34>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d121      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11e      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004958:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	e005      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004968:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10d      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d102      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e004      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800499e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d134      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0xa6>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d003      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0xac>
 80049bc:	e005      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80049c0:	617b      	str	r3, [r7, #20]
      break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80049c6:	617b      	str	r3, [r7, #20]
      break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	617b      	str	r3, [r7, #20]
      break;
 80049ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	3301      	adds	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	fb03 f202 	mul.w	r2, r3, r2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	0e5b      	lsrs	r3, r3, #25
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	3301      	adds	r3, #1
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a10:	69bb      	ldr	r3, [r7, #24]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3724      	adds	r7, #36	; 0x24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08009148 	.word	0x08009148
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4904      	ldr	r1, [pc, #16]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	08009140 	.word	0x08009140

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a78:	f7ff ffda 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0adb      	lsrs	r3, r3, #11
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4904      	ldr	r1, [pc, #16]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	08009140 	.word	0x08009140

08004aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004aac:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ab8:	f7ff f922 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 8004abc:	6178      	str	r0, [r7, #20]
 8004abe:	e014      	b.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aca:	6593      	str	r3, [r2, #88]	; 0x58
 8004acc:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ad8:	f7ff f912 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 8004adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d10b      	bne.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d919      	bls.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2ba0      	cmp	r3, #160	; 0xa0
 8004afc:	d902      	bls.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004afe:	2302      	movs	r3, #2
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	e013      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b04:	2301      	movs	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e010      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d902      	bls.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b10:	2303      	movs	r3, #3
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e00a      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d102      	bne.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e004      	b.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b70      	cmp	r3, #112	; 0x70
 8004b26:	d101      	bne.n	8004b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b28:	2301      	movs	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 0207 	bic.w	r2, r3, #7
 8004b34:	4909      	ldr	r1, [pc, #36]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d041      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b84:	d02a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b8a:	d824      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b96:	d81e      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ba2:	e018      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ba4:	4b86      	ldr	r3, [pc, #536]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a85      	ldr	r2, [pc, #532]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bb0:	e015      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 facb 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bc2:	e00c      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3320      	adds	r3, #32
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fbb6 	bl	800533c <RCCEx_PLLSAI2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd4:	e003      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be4:	4b76      	ldr	r3, [pc, #472]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf2:	4973      	ldr	r1, [pc, #460]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bfa:	e001      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d041      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c14:	d02a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c1a:	d824      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c20:	d008      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c26:	d81e      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c30:	d010      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c32:	e018      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c34:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c40:	e015      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fa83 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c52:	e00c      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3320      	adds	r3, #32
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb6e 	bl	800533c <RCCEx_PLLSAI2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	74fb      	strb	r3, [r7, #19]
      break;
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c74:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c82:	494f      	ldr	r1, [pc, #316]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c8a:	e001      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a0 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3a      	ldr	r2, [pc, #232]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce0:	f7fd fb64 	bl	80023ac <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ce6:	e009      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fd fb60 	bl	80023ac <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8004cfa:	e005      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ef      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d15c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01f      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d019      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a20      	ldr	r2, [pc, #128]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fd fb1f 	bl	80023ac <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d70:	e00b      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fd fb1b 	bl	80023ac <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	74fb      	strb	r3, [r7, #19]
            break;
 8004d88:	e006      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ec      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dae:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db6:	e009      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dcc:	7c7b      	ldrb	r3, [r7, #17]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4b9e      	ldr	r3, [pc, #632]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	4a9d      	ldr	r2, [pc, #628]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dea:	4b98      	ldr	r3, [pc, #608]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	4994      	ldr	r1, [pc, #592]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0c:	4b8f      	ldr	r3, [pc, #572]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	498c      	ldr	r1, [pc, #560]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2e:	4b87      	ldr	r3, [pc, #540]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4983      	ldr	r1, [pc, #524]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e50:	4b7e      	ldr	r3, [pc, #504]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	497b      	ldr	r1, [pc, #492]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e72:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	4972      	ldr	r1, [pc, #456]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e94:	4b6d      	ldr	r3, [pc, #436]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	496a      	ldr	r1, [pc, #424]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb6:	4b65      	ldr	r3, [pc, #404]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	4961      	ldr	r1, [pc, #388]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ed8:	4b5c      	ldr	r3, [pc, #368]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	4959      	ldr	r1, [pc, #356]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efa:	4b54      	ldr	r3, [pc, #336]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	4950      	ldr	r1, [pc, #320]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	4948      	ldr	r1, [pc, #288]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3e:	4b43      	ldr	r3, [pc, #268]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	493f      	ldr	r1, [pc, #252]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d028      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f60:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	4937      	ldr	r1, [pc, #220]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b32      	ldr	r3, [pc, #200]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a31      	ldr	r2, [pc, #196]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
 8004f8c:	e011      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f8d8 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d028      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	491f      	ldr	r1, [pc, #124]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe8:	60d3      	str	r3, [r2, #12]
 8004fea:	e011      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f8a9 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	4908      	ldr	r1, [pc, #32]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d109      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a02      	ldr	r2, [pc, #8]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
 8005048:	e014      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	2101      	movs	r1, #1
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f877 	bl	8005154 <RCCEx_PLLSAI1_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005080:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	4928      	ldr	r1, [pc, #160]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d10d      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	2102      	movs	r1, #2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f854 	bl	8005154 <RCCEx_PLLSAI1_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d014      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	74bb      	strb	r3, [r7, #18]
 80050ba:	e011      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3320      	adds	r3, #32
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f935 	bl	800533c <RCCEx_PLLSAI2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fa:	490d      	ldr	r1, [pc, #52]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511e:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005126:	7cbb      	ldrb	r3, [r7, #18]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a04      	ldr	r2, [pc, #16]	; (8005150 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800513e:	f043 0304 	orr.w	r3, r3, #4
 8005142:	6013      	str	r3, [r2, #0]
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000

08005154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005162:	4b75      	ldr	r3, [pc, #468]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0203 	and.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
       ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
       ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d047      	beq.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e044      	b.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d018      	beq.n	80051da <RCCEx_PLLSAI1_Config+0x86>
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d825      	bhi.n	80051f8 <RCCEx_PLLSAI1_Config+0xa4>
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d002      	beq.n	80051b6 <RCCEx_PLLSAI1_Config+0x62>
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d009      	beq.n	80051c8 <RCCEx_PLLSAI1_Config+0x74>
 80051b4:	e020      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051b6:	4b60      	ldr	r3, [pc, #384]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11d      	bne.n	80051fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c6:	e01a      	b.n	80051fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051c8:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d116      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d8:	e013      	b.n	8005202 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051da:	4b57      	ldr	r3, [pc, #348]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051f6:	e006      	b.n	8005206 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e004      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051fe:	bf00      	nop
 8005200:	e002      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005206:	bf00      	nop
    }

    if(status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	3b01      	subs	r3, #1
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	430b      	orrs	r3, r1
 8005224:	4944      	ldr	r1, [pc, #272]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d17d      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005230:	4b41      	ldr	r3, [pc, #260]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a40      	ldr	r2, [pc, #256]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005236:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800523a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800523c:	f7fd f8b6 	bl	80023ac <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005242:	e009      	b.n	8005258 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005244:	f7fd f8b2 	bl	80023ac <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d902      	bls.n	8005258 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	73fb      	strb	r3, [r7, #15]
        break;
 8005256:	e005      	b.n	8005264 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005258:	4b37      	ldr	r3, [pc, #220]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ef      	bne.n	8005244 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d160      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d111      	bne.n	8005294 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	0211      	lsls	r1, r2, #8
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68d2      	ldr	r2, [r2, #12]
 8005286:	0912      	lsrs	r2, r2, #4
 8005288:	0452      	lsls	r2, r2, #17
 800528a:	430a      	orrs	r2, r1
 800528c:	492a      	ldr	r1, [pc, #168]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	610b      	str	r3, [r1, #16]
 8005292:	e027      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d112      	bne.n	80052c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529a:	4b27      	ldr	r3, [pc, #156]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	0211      	lsls	r1, r2, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6912      	ldr	r2, [r2, #16]
 80052b0:	0852      	lsrs	r2, r2, #1
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0552      	lsls	r2, r2, #21
 80052b6:	430a      	orrs	r2, r1
 80052b8:	491f      	ldr	r1, [pc, #124]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
 80052be:	e011      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c0:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6892      	ldr	r2, [r2, #8]
 80052d0:	0211      	lsls	r1, r2, #8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6952      	ldr	r2, [r2, #20]
 80052d6:	0852      	lsrs	r2, r2, #1
 80052d8:	3a01      	subs	r2, #1
 80052da:	0652      	lsls	r2, r2, #25
 80052dc:	430a      	orrs	r2, r1
 80052de:	4916      	ldr	r1, [pc, #88]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052e4:	4b14      	ldr	r3, [pc, #80]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a13      	ldr	r2, [pc, #76]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fd f85c 	bl	80023ac <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052f6:	e009      	b.n	800530c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f8:	f7fd f858 	bl	80023ac <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	73fb      	strb	r3, [r7, #15]
          break;
 800530a:	e005      	b.n	8005318 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ef      	beq.n	80052f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	4904      	ldr	r1, [pc, #16]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000

0800533c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005356:	4b67      	ldr	r3, [pc, #412]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0203 	and.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d10d      	bne.n	8005382 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
       ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800536e:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
       ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d047      	beq.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	e044      	b.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d018      	beq.n	80053c2 <RCCEx_PLLSAI2_Config+0x86>
 8005390:	2b03      	cmp	r3, #3
 8005392:	d825      	bhi.n	80053e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005394:	2b01      	cmp	r3, #1
 8005396:	d002      	beq.n	800539e <RCCEx_PLLSAI2_Config+0x62>
 8005398:	2b02      	cmp	r3, #2
 800539a:	d009      	beq.n	80053b0 <RCCEx_PLLSAI2_Config+0x74>
 800539c:	e020      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800539e:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11d      	bne.n	80053e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ae:	e01a      	b.n	80053e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053b0:	4b50      	ldr	r3, [pc, #320]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d116      	bne.n	80053ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c0:	e013      	b.n	80053ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053c2:	4b4c      	ldr	r3, [pc, #304]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ce:	4b49      	ldr	r3, [pc, #292]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053de:	e006      	b.n	80053ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      break;
 80053e4:	e004      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ea:	bf00      	nop
 80053ec:	e000      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10d      	bne.n	8005412 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053f6:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	430b      	orrs	r3, r1
 800540c:	4939      	ldr	r1, [pc, #228]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540e:	4313      	orrs	r3, r2
 8005410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d167      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005418:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005424:	f7fc ffc2 	bl	80023ac <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800542c:	f7fc ffbe 	bl	80023ac <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
        break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005440:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ef      	bne.n	800542c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d14a      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d111      	bne.n	800547c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005458:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6892      	ldr	r2, [r2, #8]
 8005468:	0211      	lsls	r1, r2, #8
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68d2      	ldr	r2, [r2, #12]
 800546e:	0912      	lsrs	r2, r2, #4
 8005470:	0452      	lsls	r2, r2, #17
 8005472:	430a      	orrs	r2, r1
 8005474:	491f      	ldr	r1, [pc, #124]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	614b      	str	r3, [r1, #20]
 800547a:	e011      	b.n	80054a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
 800548c:	0211      	lsls	r1, r2, #8
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6912      	ldr	r2, [r2, #16]
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0652      	lsls	r2, r2, #25
 8005498:	430a      	orrs	r2, r1
 800549a:	4916      	ldr	r1, [pc, #88]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fc ff7e 	bl	80023ac <HAL_GetTick>
 80054b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054b2:	e009      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b4:	f7fc ff7a 	bl	80023ac <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d902      	bls.n	80054c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	73fb      	strb	r3, [r7, #15]
          break;
 80054c6:	e005      	b.n	80054d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ef      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e095      	b.n	8005636 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551a:	d009      	beq.n	8005530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	61da      	str	r2, [r3, #28]
 8005522:	e005      	b.n	8005530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fbee 	bl	8001d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005570:	d902      	bls.n	8005578 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e002      	b.n	800557e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800557c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Init+0xa0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	ea42 0103 	orr.w	r1, r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	f003 0204 	and.w	r2, r3, #4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005614:	ea42 0103 	orr.w	r1, r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e040      	b.n	80056d2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fc fba7 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2224      	movs	r2, #36	; 0x24
 800566a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8c1 	bl	8005804 <UART_SetConfig>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e022      	b.n	80056d2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fb6d 	bl	8005d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fbf4 	bl	8005eb8 <UART_CheckIdleState>
 80056d0:	4603      	mov	r3, r0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b08a      	sub	sp, #40	; 0x28
 80056de:	af02      	add	r7, sp, #8
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	f040 8082 	bne.w	80057f8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Transmit+0x26>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e07a      	b.n	80057fa <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_UART_Transmit+0x38>
 800570e:	2302      	movs	r3, #2
 8005710:	e073      	b.n	80057fa <HAL_UART_Transmit+0x120>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2221      	movs	r2, #33	; 0x21
 8005726:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005728:	f7fc fe40 	bl	80023ac <HAL_GetTick>
 800572c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005746:	d108      	bne.n	800575a <HAL_UART_Transmit+0x80>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e003      	b.n	8005762 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800576a:	e02d      	b.n	80057c8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fbe7 	bl	8005f4a <UART_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e039      	b.n	80057fa <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005798:	b292      	uxth	r2, r2
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	3302      	adds	r3, #2
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e008      	b.n	80057b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	b292      	uxth	r2, r2
 80057ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1cb      	bne.n	800576c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fbb3 	bl	8005f4a <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e005      	b.n	80057fa <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b08a      	sub	sp, #40	; 0x28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4ba4      	ldr	r3, [pc, #656]	; (8005ac4 <UART_SetConfig+0x2c0>)
 8005834:	4013      	ands	r3, r2
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a99      	ldr	r2, [pc, #612]	; (8005ac8 <UART_SetConfig+0x2c4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	4313      	orrs	r3, r2
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a90      	ldr	r2, [pc, #576]	; (8005acc <UART_SetConfig+0x2c8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d126      	bne.n	80058dc <UART_SetConfig+0xd8>
 800588e:	4b90      	ldr	r3, [pc, #576]	; (8005ad0 <UART_SetConfig+0x2cc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d81b      	bhi.n	80058d4 <UART_SetConfig+0xd0>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0xa0>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058bd 	.word	0x080058bd
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ba:	e116      	b.n	8005aea <UART_SetConfig+0x2e6>
 80058bc:	2302      	movs	r3, #2
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c2:	e112      	b.n	8005aea <UART_SetConfig+0x2e6>
 80058c4:	2304      	movs	r3, #4
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ca:	e10e      	b.n	8005aea <UART_SetConfig+0x2e6>
 80058cc:	2308      	movs	r3, #8
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e10a      	b.n	8005aea <UART_SetConfig+0x2e6>
 80058d4:	2310      	movs	r3, #16
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e106      	b.n	8005aea <UART_SetConfig+0x2e6>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7c      	ldr	r2, [pc, #496]	; (8005ad4 <UART_SetConfig+0x2d0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d138      	bne.n	8005958 <UART_SetConfig+0x154>
 80058e6:	4b7a      	ldr	r3, [pc, #488]	; (8005ad0 <UART_SetConfig+0x2cc>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d82d      	bhi.n	8005950 <UART_SetConfig+0x14c>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0xf8>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005951 	.word	0x08005951
 8005904:	08005951 	.word	0x08005951
 8005908:	08005951 	.word	0x08005951
 800590c:	08005941 	.word	0x08005941
 8005910:	08005951 	.word	0x08005951
 8005914:	08005951 	.word	0x08005951
 8005918:	08005951 	.word	0x08005951
 800591c:	08005939 	.word	0x08005939
 8005920:	08005951 	.word	0x08005951
 8005924:	08005951 	.word	0x08005951
 8005928:	08005951 	.word	0x08005951
 800592c:	08005949 	.word	0x08005949
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005936:	e0d8      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005938:	2302      	movs	r3, #2
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593e:	e0d4      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005946:	e0d0      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e0cc      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e0c8      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a5e      	ldr	r2, [pc, #376]	; (8005ad8 <UART_SetConfig+0x2d4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d125      	bne.n	80059ae <UART_SetConfig+0x1aa>
 8005962:	4b5b      	ldr	r3, [pc, #364]	; (8005ad0 <UART_SetConfig+0x2cc>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d016      	beq.n	800599e <UART_SetConfig+0x19a>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d818      	bhi.n	80059a6 <UART_SetConfig+0x1a2>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d00a      	beq.n	800598e <UART_SetConfig+0x18a>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d814      	bhi.n	80059a6 <UART_SetConfig+0x1a2>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <UART_SetConfig+0x182>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d008      	beq.n	8005996 <UART_SetConfig+0x192>
 8005984:	e00f      	b.n	80059a6 <UART_SetConfig+0x1a2>
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598c:	e0ad      	b.n	8005aea <UART_SetConfig+0x2e6>
 800598e:	2302      	movs	r3, #2
 8005990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005994:	e0a9      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005996:	2304      	movs	r3, #4
 8005998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599c:	e0a5      	b.n	8005aea <UART_SetConfig+0x2e6>
 800599e:	2308      	movs	r3, #8
 80059a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a4:	e0a1      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059a6:	2310      	movs	r3, #16
 80059a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ac:	e09d      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a4a      	ldr	r2, [pc, #296]	; (8005adc <UART_SetConfig+0x2d8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d125      	bne.n	8005a04 <UART_SetConfig+0x200>
 80059b8:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <UART_SetConfig+0x2cc>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059c2:	2bc0      	cmp	r3, #192	; 0xc0
 80059c4:	d016      	beq.n	80059f4 <UART_SetConfig+0x1f0>
 80059c6:	2bc0      	cmp	r3, #192	; 0xc0
 80059c8:	d818      	bhi.n	80059fc <UART_SetConfig+0x1f8>
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d00a      	beq.n	80059e4 <UART_SetConfig+0x1e0>
 80059ce:	2b80      	cmp	r3, #128	; 0x80
 80059d0:	d814      	bhi.n	80059fc <UART_SetConfig+0x1f8>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <UART_SetConfig+0x1d8>
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d008      	beq.n	80059ec <UART_SetConfig+0x1e8>
 80059da:	e00f      	b.n	80059fc <UART_SetConfig+0x1f8>
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e082      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059e4:	2302      	movs	r3, #2
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ea:	e07e      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f2:	e07a      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e076      	b.n	8005aea <UART_SetConfig+0x2e6>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e072      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a35      	ldr	r2, [pc, #212]	; (8005ae0 <UART_SetConfig+0x2dc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d12a      	bne.n	8005a64 <UART_SetConfig+0x260>
 8005a0e:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <UART_SetConfig+0x2cc>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1c:	d01a      	beq.n	8005a54 <UART_SetConfig+0x250>
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d81b      	bhi.n	8005a5c <UART_SetConfig+0x258>
 8005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a28:	d00c      	beq.n	8005a44 <UART_SetConfig+0x240>
 8005a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2e:	d815      	bhi.n	8005a5c <UART_SetConfig+0x258>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <UART_SetConfig+0x238>
 8005a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a38:	d008      	beq.n	8005a4c <UART_SetConfig+0x248>
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x258>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e052      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e04e      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e04a      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e046      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e042      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <UART_SetConfig+0x2c4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d13a      	bne.n	8005ae4 <UART_SetConfig+0x2e0>
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <UART_SetConfig+0x2cc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a7c:	d01a      	beq.n	8005ab4 <UART_SetConfig+0x2b0>
 8005a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a82:	d81b      	bhi.n	8005abc <UART_SetConfig+0x2b8>
 8005a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a88:	d00c      	beq.n	8005aa4 <UART_SetConfig+0x2a0>
 8005a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8e:	d815      	bhi.n	8005abc <UART_SetConfig+0x2b8>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <UART_SetConfig+0x298>
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d008      	beq.n	8005aac <UART_SetConfig+0x2a8>
 8005a9a:	e00f      	b.n	8005abc <UART_SetConfig+0x2b8>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e022      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e01e      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab2:	e01a      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aba:	e016      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e012      	b.n	8005aea <UART_SetConfig+0x2e6>
 8005ac4:	efff69f3 	.word	0xefff69f3
 8005ac8:	40008000 	.word	0x40008000
 8005acc:	40013800 	.word	0x40013800
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	40004400 	.word	0x40004400
 8005ad8:	40004800 	.word	0x40004800
 8005adc:	40004c00 	.word	0x40004c00
 8005ae0:	40005000 	.word	0x40005000
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a9f      	ldr	r2, [pc, #636]	; (8005d6c <UART_SetConfig+0x568>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d17a      	bne.n	8005bea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d824      	bhi.n	8005b46 <UART_SetConfig+0x342>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <UART_SetConfig+0x300>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005b29 	.word	0x08005b29
 8005b08:	08005b47 	.word	0x08005b47
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b47 	.word	0x08005b47
 8005b14:	08005b37 	.word	0x08005b37
 8005b18:	08005b47 	.word	0x08005b47
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b47 	.word	0x08005b47
 8005b24:	08005b3f 	.word	0x08005b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7fe ff8e 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	61f8      	str	r0, [r7, #28]
        break;
 8005b2e:	e010      	b.n	8005b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b30:	4b8f      	ldr	r3, [pc, #572]	; (8005d70 <UART_SetConfig+0x56c>)
 8005b32:	61fb      	str	r3, [r7, #28]
        break;
 8005b34:	e00d      	b.n	8005b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fe feef 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005b3a:	61f8      	str	r0, [r7, #28]
        break;
 8005b3c:	e009      	b.n	8005b52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b42:	61fb      	str	r3, [r7, #28]
        break;
 8005b44:	e005      	b.n	8005b52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80fb 	beq.w	8005d50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d305      	bcc.n	8005b76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b7c:	e0e8      	b.n	8005d50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2200      	movs	r2, #0
 8005b82:	461c      	mov	r4, r3
 8005b84:	4615      	mov	r5, r2
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	022b      	lsls	r3, r5, #8
 8005b90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b94:	0222      	lsls	r2, r4, #8
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6849      	ldr	r1, [r1, #4]
 8005b9a:	0849      	lsrs	r1, r1, #1
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4688      	mov	r8, r1
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ba6:	eb43 0b09 	adc.w	fp, r3, r9
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb8:	4650      	mov	r0, sl
 8005bba:	4659      	mov	r1, fp
 8005bbc:	f7fa fff4 	bl	8000ba8 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bce:	d308      	bcc.n	8005be2 <UART_SetConfig+0x3de>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd6:	d204      	bcs.n	8005be2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	e0b6      	b.n	8005d50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005be8:	e0b2      	b.n	8005d50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf2:	d15e      	bne.n	8005cb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d828      	bhi.n	8005c4e <UART_SetConfig+0x44a>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x400>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	08005c4f 	.word	0x08005c4f
 8005c14:	08005c3f 	.word	0x08005c3f
 8005c18:	08005c4f 	.word	0x08005c4f
 8005c1c:	08005c4f 	.word	0x08005c4f
 8005c20:	08005c4f 	.word	0x08005c4f
 8005c24:	08005c47 	.word	0x08005c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7fe ff0e 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005c2c:	61f8      	str	r0, [r7, #28]
        break;
 8005c2e:	e014      	b.n	8005c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c30:	f7fe ff20 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8005c34:	61f8      	str	r0, [r7, #28]
        break;
 8005c36:	e010      	b.n	8005c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c38:	4b4d      	ldr	r3, [pc, #308]	; (8005d70 <UART_SetConfig+0x56c>)
 8005c3a:	61fb      	str	r3, [r7, #28]
        break;
 8005c3c:	e00d      	b.n	8005c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3e:	f7fe fe6b 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005c42:	61f8      	str	r0, [r7, #28]
        break;
 8005c44:	e009      	b.n	8005c5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4a:	61fb      	str	r3, [r7, #28]
        break;
 8005c4c:	e005      	b.n	8005c5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d077      	beq.n	8005d50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	005a      	lsls	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d916      	bls.n	8005caa <UART_SetConfig+0x4a6>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c82:	d212      	bcs.n	8005caa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f023 030f 	bic.w	r3, r3, #15
 8005c8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	8afb      	ldrh	r3, [r7, #22]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	8afa      	ldrh	r2, [r7, #22]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e052      	b.n	8005d50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cb0:	e04e      	b.n	8005d50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d827      	bhi.n	8005d0a <UART_SetConfig+0x506>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <UART_SetConfig+0x4bc>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005ced 	.word	0x08005ced
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	08005d0b 	.word	0x08005d0b
 8005cd0:	08005cfb 	.word	0x08005cfb
 8005cd4:	08005d0b 	.word	0x08005d0b
 8005cd8:	08005d0b 	.word	0x08005d0b
 8005cdc:	08005d0b 	.word	0x08005d0b
 8005ce0:	08005d03 	.word	0x08005d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7fe feb0 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8005ce8:	61f8      	str	r0, [r7, #28]
        break;
 8005cea:	e014      	b.n	8005d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7fe fec2 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e010      	b.n	8005d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <UART_SetConfig+0x56c>)
 8005cf6:	61fb      	str	r3, [r7, #28]
        break;
 8005cf8:	e00d      	b.n	8005d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fe fe0d 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8005cfe:	61f8      	str	r0, [r7, #28]
        break;
 8005d00:	e009      	b.n	8005d16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d06:	61fb      	str	r3, [r7, #28]
        break;
 8005d08:	e005      	b.n	8005d16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d14:	bf00      	nop
    }

    if (pclk != 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d019      	beq.n	8005d50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	085a      	lsrs	r2, r3, #1
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d909      	bls.n	8005d4a <UART_SetConfig+0x546>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3c:	d205      	bcs.n	8005d4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e002      	b.n	8005d50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3728      	adds	r7, #40	; 0x28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40008000 	.word	0x40008000
 8005d70:	00f42400 	.word	0x00f42400

08005d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	d10a      	bne.n	8005e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec8:	f7fc fa70 	bl	80023ac <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10e      	bne.n	8005efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f82d 	bl	8005f4a <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e023      	b.n	8005f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d10e      	bne.n	8005f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f817 	bl	8005f4a <UART_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e00d      	b.n	8005f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b09c      	sub	sp, #112	; 0x70
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	603b      	str	r3, [r7, #0]
 8005f56:	4613      	mov	r3, r2
 8005f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5a:	e0a5      	b.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f62:	f000 80a1 	beq.w	80060a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fc fa21 	bl	80023ac <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d13e      	bne.n	8005ffa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f90:	667b      	str	r3, [r7, #100]	; 0x64
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e067      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d04f      	beq.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d147      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006020:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
 8006042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3308      	adds	r3, #8
 800605a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	613b      	str	r3, [r7, #16]
   return(result);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	66bb      	str	r3, [r7, #104]	; 0x68
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006074:	623a      	str	r2, [r7, #32]
 8006076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	61bb      	str	r3, [r7, #24]
   return(result);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e5      	bne.n	8006054 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e010      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f43f af4a 	beq.w	8005f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3770      	adds	r7, #112	; 0x70
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d2:	b084      	sub	sp, #16
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	f107 001c 	add.w	r0, r7, #28
 80060e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa6f 	bl	80065d4 <USB_CoreReset>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80060fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
 800610c:	e005      	b.n	800611a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006126:	b004      	add	sp, #16
 8006128:	4770      	bx	lr

0800612a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d115      	bne.n	800619a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800617a:	2001      	movs	r0, #1
 800617c:	f7fc f922 	bl	80023c4 <HAL_Delay>
      ms++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa16 	bl	80065b8 <USB_GetMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d01e      	beq.n	80061d0 <USB_SetCurrentMode+0x84>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b31      	cmp	r3, #49	; 0x31
 8006196:	d9f0      	bls.n	800617a <USB_SetCurrentMode+0x2e>
 8006198:	e01a      	b.n	80061d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d115      	bne.n	80061cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061ac:	2001      	movs	r0, #1
 80061ae:	f7fc f909 	bl	80023c4 <HAL_Delay>
      ms++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f9fd 	bl	80065b8 <USB_GetMode>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <USB_SetCurrentMode+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b31      	cmp	r3, #49	; 0x31
 80061c8:	d9f0      	bls.n	80061ac <USB_SetCurrentMode+0x60>
 80061ca:	e001      	b.n	80061d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e005      	b.n	80061dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b32      	cmp	r3, #50	; 0x32
 80061d4:	d101      	bne.n	80061da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061e4:	b084      	sub	sp, #16
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	e009      	b.n	8006218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3340      	adds	r3, #64	; 0x40
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	2200      	movs	r2, #0
 8006210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3301      	adds	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b0e      	cmp	r3, #14
 800621c:	d9f2      	bls.n	8006204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800621e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11c      	bne.n	800625e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f043 0302 	orr.w	r3, r3, #2
 8006236:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e005      	b.n	800626a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006270:	461a      	mov	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	4619      	mov	r1, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	461a      	mov	r2, r3
 8006286:	680b      	ldr	r3, [r1, #0]
 8006288:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800628a:	2103      	movs	r1, #3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f959 	bl	8006544 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006292:	2110      	movs	r1, #16
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8f1 	bl	800647c <USB_FlushTxFifo>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f91d 	bl	80064e4 <USB_FlushRxFifo>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	461a      	mov	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	461a      	mov	r2, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	461a      	mov	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	e043      	b.n	8006366 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f4:	d118      	bne.n	8006328 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e013      	b.n	800633a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	461a      	mov	r2, r3
 8006320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e008      	b.n	800633a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	461a      	mov	r2, r3
 8006348:	2300      	movs	r3, #0
 800634a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006358:	461a      	mov	r2, r3
 800635a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800635e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3301      	adds	r3, #1
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d3b7      	bcc.n	80062de <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e043      	b.n	80063fc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800638a:	d118      	bne.n	80063be <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	461a      	mov	r2, r3
 80063a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e013      	b.n	80063d0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e008      	b.n	80063d0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	2300      	movs	r3, #0
 80063ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	461a      	mov	r2, r3
 80063de:	2300      	movs	r3, #0
 80063e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	461a      	mov	r2, r3
 80063f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3301      	adds	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d3b7      	bcc.n	8006374 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006416:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006424:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f043 0210 	orr.w	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <USB_DevInit+0x294>)
 8006438:	4313      	orrs	r3, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 0208 	orr.w	r2, r3, #8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800645e:	f043 0304 	orr.w	r3, r3, #4
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006472:	b004      	add	sp, #16
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	803c3800 	.word	0x803c3800

0800647c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <USB_FlushTxFifo+0x64>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d901      	bls.n	800649c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e01b      	b.n	80064d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	daf2      	bge.n	800648a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	019b      	lsls	r3, r3, #6
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <USB_FlushTxFifo+0x64>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e006      	b.n	80064d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d0f0      	beq.n	80064b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	00030d40 	.word	0x00030d40

080064e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3301      	adds	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <USB_FlushRxFifo+0x5c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d901      	bls.n	8006502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e018      	b.n	8006534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	daf2      	bge.n	80064f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2210      	movs	r2, #16
 8006512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <USB_FlushRxFifo+0x5c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e006      	b.n	8006534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b10      	cmp	r3, #16
 8006530:	d0f0      	beq.n	8006514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	00030d40 	.word	0x00030d40

08006544 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006590:	f023 0303 	bic.w	r3, r3, #3
 8006594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a4:	f043 0302 	orr.w	r3, r3, #2
 80065a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f003 0301 	and.w	r3, r3, #1
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a13      	ldr	r2, [pc, #76]	; (8006638 <USB_CoreReset+0x64>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e01b      	b.n	800662a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	daf2      	bge.n	80065e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <USB_CoreReset+0x64>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e006      	b.n	800662a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d0f0      	beq.n	800660a <USB_CoreReset+0x36>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	00030d40 	.word	0x00030d40

0800663c <__errno>:
 800663c:	4b01      	ldr	r3, [pc, #4]	; (8006644 <__errno+0x8>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000018 	.word	0x20000018

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4d0d      	ldr	r5, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2600      	movs	r6, #0
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4d0b      	ldr	r5, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f002 fd4e 	bl	80090fc <_init>
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2600      	movs	r6, #0
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f855 3b04 	ldr.w	r3, [r5], #4
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	0800955c 	.word	0x0800955c
 8006684:	0800955c 	.word	0x0800955c
 8006688:	0800955c 	.word	0x0800955c
 800668c:	08009560 	.word	0x08009560

08006690 <memcpy>:
 8006690:	440a      	add	r2, r1
 8006692:	4291      	cmp	r1, r2
 8006694:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006698:	d100      	bne.n	800669c <memcpy+0xc>
 800669a:	4770      	bx	lr
 800669c:	b510      	push	{r4, lr}
 800669e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d1f9      	bne.n	800669e <memcpy+0xe>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <memset>:
 80066ac:	4402      	add	r2, r0
 80066ae:	4603      	mov	r3, r0
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d100      	bne.n	80066b6 <memset+0xa>
 80066b4:	4770      	bx	lr
 80066b6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ba:	e7f9      	b.n	80066b0 <memset+0x4>

080066bc <__cvt>:
 80066bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	ec55 4b10 	vmov	r4, r5, d0
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	460e      	mov	r6, r1
 80066c8:	4619      	mov	r1, r3
 80066ca:	462b      	mov	r3, r5
 80066cc:	bfbb      	ittet	lt
 80066ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066d2:	461d      	movlt	r5, r3
 80066d4:	2300      	movge	r3, #0
 80066d6:	232d      	movlt	r3, #45	; 0x2d
 80066d8:	700b      	strb	r3, [r1, #0]
 80066da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066e0:	4691      	mov	r9, r2
 80066e2:	f023 0820 	bic.w	r8, r3, #32
 80066e6:	bfbc      	itt	lt
 80066e8:	4622      	movlt	r2, r4
 80066ea:	4614      	movlt	r4, r2
 80066ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066f0:	d005      	beq.n	80066fe <__cvt+0x42>
 80066f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066f6:	d100      	bne.n	80066fa <__cvt+0x3e>
 80066f8:	3601      	adds	r6, #1
 80066fa:	2102      	movs	r1, #2
 80066fc:	e000      	b.n	8006700 <__cvt+0x44>
 80066fe:	2103      	movs	r1, #3
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	ab02      	add	r3, sp, #8
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	ec45 4b10 	vmov	d0, r4, r5
 800670c:	4653      	mov	r3, sl
 800670e:	4632      	mov	r2, r6
 8006710:	f000 fce2 	bl	80070d8 <_dtoa_r>
 8006714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006718:	4607      	mov	r7, r0
 800671a:	d102      	bne.n	8006722 <__cvt+0x66>
 800671c:	f019 0f01 	tst.w	r9, #1
 8006720:	d022      	beq.n	8006768 <__cvt+0xac>
 8006722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006726:	eb07 0906 	add.w	r9, r7, r6
 800672a:	d110      	bne.n	800674e <__cvt+0x92>
 800672c:	783b      	ldrb	r3, [r7, #0]
 800672e:	2b30      	cmp	r3, #48	; 0x30
 8006730:	d10a      	bne.n	8006748 <__cvt+0x8c>
 8006732:	2200      	movs	r2, #0
 8006734:	2300      	movs	r3, #0
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7fa f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800673e:	b918      	cbnz	r0, 8006748 <__cvt+0x8c>
 8006740:	f1c6 0601 	rsb	r6, r6, #1
 8006744:	f8ca 6000 	str.w	r6, [sl]
 8006748:	f8da 3000 	ldr.w	r3, [sl]
 800674c:	4499      	add	r9, r3
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	4620      	mov	r0, r4
 8006754:	4629      	mov	r1, r5
 8006756:	f7fa f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800675a:	b108      	cbz	r0, 8006760 <__cvt+0xa4>
 800675c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006760:	2230      	movs	r2, #48	; 0x30
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	454b      	cmp	r3, r9
 8006766:	d307      	bcc.n	8006778 <__cvt+0xbc>
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800676c:	1bdb      	subs	r3, r3, r7
 800676e:	4638      	mov	r0, r7
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	b004      	add	sp, #16
 8006774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006778:	1c59      	adds	r1, r3, #1
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e7f0      	b.n	8006762 <__cvt+0xa6>

08006780 <__exponent>:
 8006780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006782:	4603      	mov	r3, r0
 8006784:	2900      	cmp	r1, #0
 8006786:	bfb8      	it	lt
 8006788:	4249      	neglt	r1, r1
 800678a:	f803 2b02 	strb.w	r2, [r3], #2
 800678e:	bfb4      	ite	lt
 8006790:	222d      	movlt	r2, #45	; 0x2d
 8006792:	222b      	movge	r2, #43	; 0x2b
 8006794:	2909      	cmp	r1, #9
 8006796:	7042      	strb	r2, [r0, #1]
 8006798:	dd2a      	ble.n	80067f0 <__exponent+0x70>
 800679a:	f10d 0407 	add.w	r4, sp, #7
 800679e:	46a4      	mov	ip, r4
 80067a0:	270a      	movs	r7, #10
 80067a2:	46a6      	mov	lr, r4
 80067a4:	460a      	mov	r2, r1
 80067a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80067aa:	fb07 1516 	mls	r5, r7, r6, r1
 80067ae:	3530      	adds	r5, #48	; 0x30
 80067b0:	2a63      	cmp	r2, #99	; 0x63
 80067b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80067b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067ba:	4631      	mov	r1, r6
 80067bc:	dcf1      	bgt.n	80067a2 <__exponent+0x22>
 80067be:	3130      	adds	r1, #48	; 0x30
 80067c0:	f1ae 0502 	sub.w	r5, lr, #2
 80067c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067c8:	1c44      	adds	r4, r0, #1
 80067ca:	4629      	mov	r1, r5
 80067cc:	4561      	cmp	r1, ip
 80067ce:	d30a      	bcc.n	80067e6 <__exponent+0x66>
 80067d0:	f10d 0209 	add.w	r2, sp, #9
 80067d4:	eba2 020e 	sub.w	r2, r2, lr
 80067d8:	4565      	cmp	r5, ip
 80067da:	bf88      	it	hi
 80067dc:	2200      	movhi	r2, #0
 80067de:	4413      	add	r3, r2
 80067e0:	1a18      	subs	r0, r3, r0
 80067e2:	b003      	add	sp, #12
 80067e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067ee:	e7ed      	b.n	80067cc <__exponent+0x4c>
 80067f0:	2330      	movs	r3, #48	; 0x30
 80067f2:	3130      	adds	r1, #48	; 0x30
 80067f4:	7083      	strb	r3, [r0, #2]
 80067f6:	70c1      	strb	r1, [r0, #3]
 80067f8:	1d03      	adds	r3, r0, #4
 80067fa:	e7f1      	b.n	80067e0 <__exponent+0x60>

080067fc <_printf_float>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	ed2d 8b02 	vpush	{d8}
 8006804:	b08d      	sub	sp, #52	; 0x34
 8006806:	460c      	mov	r4, r1
 8006808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800680c:	4616      	mov	r6, r2
 800680e:	461f      	mov	r7, r3
 8006810:	4605      	mov	r5, r0
 8006812:	f001 fb45 	bl	8007ea0 <_localeconv_r>
 8006816:	f8d0 a000 	ldr.w	sl, [r0]
 800681a:	4650      	mov	r0, sl
 800681c:	f7f9 fcd8 	bl	80001d0 <strlen>
 8006820:	2300      	movs	r3, #0
 8006822:	930a      	str	r3, [sp, #40]	; 0x28
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	9305      	str	r3, [sp, #20]
 8006828:	f8d8 3000 	ldr.w	r3, [r8]
 800682c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006830:	3307      	adds	r3, #7
 8006832:	f023 0307 	bic.w	r3, r3, #7
 8006836:	f103 0208 	add.w	r2, r3, #8
 800683a:	f8c8 2000 	str.w	r2, [r8]
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006846:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800684a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800684e:	9307      	str	r3, [sp, #28]
 8006850:	f8cd 8018 	str.w	r8, [sp, #24]
 8006854:	ee08 0a10 	vmov	s16, r0
 8006858:	4b9f      	ldr	r3, [pc, #636]	; (8006ad8 <_printf_float+0x2dc>)
 800685a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800685e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006862:	f7fa f963 	bl	8000b2c <__aeabi_dcmpun>
 8006866:	bb88      	cbnz	r0, 80068cc <_printf_float+0xd0>
 8006868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686c:	4b9a      	ldr	r3, [pc, #616]	; (8006ad8 <_printf_float+0x2dc>)
 800686e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006872:	f7fa f93d 	bl	8000af0 <__aeabi_dcmple>
 8006876:	bb48      	cbnz	r0, 80068cc <_printf_float+0xd0>
 8006878:	2200      	movs	r2, #0
 800687a:	2300      	movs	r3, #0
 800687c:	4640      	mov	r0, r8
 800687e:	4649      	mov	r1, r9
 8006880:	f7fa f92c 	bl	8000adc <__aeabi_dcmplt>
 8006884:	b110      	cbz	r0, 800688c <_printf_float+0x90>
 8006886:	232d      	movs	r3, #45	; 0x2d
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688c:	4b93      	ldr	r3, [pc, #588]	; (8006adc <_printf_float+0x2e0>)
 800688e:	4894      	ldr	r0, [pc, #592]	; (8006ae0 <_printf_float+0x2e4>)
 8006890:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006894:	bf94      	ite	ls
 8006896:	4698      	movls	r8, r3
 8006898:	4680      	movhi	r8, r0
 800689a:	2303      	movs	r3, #3
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	9b05      	ldr	r3, [sp, #20]
 80068a0:	f023 0204 	bic.w	r2, r3, #4
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	f04f 0900 	mov.w	r9, #0
 80068aa:	9700      	str	r7, [sp, #0]
 80068ac:	4633      	mov	r3, r6
 80068ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f9d8 	bl	8006c68 <_printf_common>
 80068b8:	3001      	adds	r0, #1
 80068ba:	f040 8090 	bne.w	80069de <_printf_float+0x1e2>
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c2:	b00d      	add	sp, #52	; 0x34
 80068c4:	ecbd 8b02 	vpop	{d8}
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7fa f92a 	bl	8000b2c <__aeabi_dcmpun>
 80068d8:	b140      	cbz	r0, 80068ec <_printf_float+0xf0>
 80068da:	464b      	mov	r3, r9
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bfbc      	itt	lt
 80068e0:	232d      	movlt	r3, #45	; 0x2d
 80068e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068e6:	487f      	ldr	r0, [pc, #508]	; (8006ae4 <_printf_float+0x2e8>)
 80068e8:	4b7f      	ldr	r3, [pc, #508]	; (8006ae8 <_printf_float+0x2ec>)
 80068ea:	e7d1      	b.n	8006890 <_printf_float+0x94>
 80068ec:	6863      	ldr	r3, [r4, #4]
 80068ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80068f2:	9206      	str	r2, [sp, #24]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	d13f      	bne.n	8006978 <_printf_float+0x17c>
 80068f8:	2306      	movs	r3, #6
 80068fa:	6063      	str	r3, [r4, #4]
 80068fc:	9b05      	ldr	r3, [sp, #20]
 80068fe:	6861      	ldr	r1, [r4, #4]
 8006900:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006904:	2300      	movs	r3, #0
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	ab0a      	add	r3, sp, #40	; 0x28
 800690a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800690e:	ab09      	add	r3, sp, #36	; 0x24
 8006910:	ec49 8b10 	vmov	d0, r8, r9
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	6022      	str	r2, [r4, #0]
 8006918:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800691c:	4628      	mov	r0, r5
 800691e:	f7ff fecd 	bl	80066bc <__cvt>
 8006922:	9b06      	ldr	r3, [sp, #24]
 8006924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006926:	2b47      	cmp	r3, #71	; 0x47
 8006928:	4680      	mov	r8, r0
 800692a:	d108      	bne.n	800693e <_printf_float+0x142>
 800692c:	1cc8      	adds	r0, r1, #3
 800692e:	db02      	blt.n	8006936 <_printf_float+0x13a>
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	4299      	cmp	r1, r3
 8006934:	dd41      	ble.n	80069ba <_printf_float+0x1be>
 8006936:	f1ab 0b02 	sub.w	fp, fp, #2
 800693a:	fa5f fb8b 	uxtb.w	fp, fp
 800693e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006942:	d820      	bhi.n	8006986 <_printf_float+0x18a>
 8006944:	3901      	subs	r1, #1
 8006946:	465a      	mov	r2, fp
 8006948:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800694c:	9109      	str	r1, [sp, #36]	; 0x24
 800694e:	f7ff ff17 	bl	8006780 <__exponent>
 8006952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006954:	1813      	adds	r3, r2, r0
 8006956:	2a01      	cmp	r2, #1
 8006958:	4681      	mov	r9, r0
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	dc02      	bgt.n	8006964 <_printf_float+0x168>
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	07d2      	lsls	r2, r2, #31
 8006962:	d501      	bpl.n	8006968 <_printf_float+0x16c>
 8006964:	3301      	adds	r3, #1
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800696c:	2b00      	cmp	r3, #0
 800696e:	d09c      	beq.n	80068aa <_printf_float+0xae>
 8006970:	232d      	movs	r3, #45	; 0x2d
 8006972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006976:	e798      	b.n	80068aa <_printf_float+0xae>
 8006978:	9a06      	ldr	r2, [sp, #24]
 800697a:	2a47      	cmp	r2, #71	; 0x47
 800697c:	d1be      	bne.n	80068fc <_printf_float+0x100>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1bc      	bne.n	80068fc <_printf_float+0x100>
 8006982:	2301      	movs	r3, #1
 8006984:	e7b9      	b.n	80068fa <_printf_float+0xfe>
 8006986:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800698a:	d118      	bne.n	80069be <_printf_float+0x1c2>
 800698c:	2900      	cmp	r1, #0
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	dd0b      	ble.n	80069aa <_printf_float+0x1ae>
 8006992:	6121      	str	r1, [r4, #16]
 8006994:	b913      	cbnz	r3, 800699c <_printf_float+0x1a0>
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	07d0      	lsls	r0, r2, #31
 800699a:	d502      	bpl.n	80069a2 <_printf_float+0x1a6>
 800699c:	3301      	adds	r3, #1
 800699e:	440b      	add	r3, r1
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069a4:	f04f 0900 	mov.w	r9, #0
 80069a8:	e7de      	b.n	8006968 <_printf_float+0x16c>
 80069aa:	b913      	cbnz	r3, 80069b2 <_printf_float+0x1b6>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	07d2      	lsls	r2, r2, #31
 80069b0:	d501      	bpl.n	80069b6 <_printf_float+0x1ba>
 80069b2:	3302      	adds	r3, #2
 80069b4:	e7f4      	b.n	80069a0 <_printf_float+0x1a4>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e7f2      	b.n	80069a0 <_printf_float+0x1a4>
 80069ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	4299      	cmp	r1, r3
 80069c2:	db05      	blt.n	80069d0 <_printf_float+0x1d4>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	6121      	str	r1, [r4, #16]
 80069c8:	07d8      	lsls	r0, r3, #31
 80069ca:	d5ea      	bpl.n	80069a2 <_printf_float+0x1a6>
 80069cc:	1c4b      	adds	r3, r1, #1
 80069ce:	e7e7      	b.n	80069a0 <_printf_float+0x1a4>
 80069d0:	2900      	cmp	r1, #0
 80069d2:	bfd4      	ite	le
 80069d4:	f1c1 0202 	rsble	r2, r1, #2
 80069d8:	2201      	movgt	r2, #1
 80069da:	4413      	add	r3, r2
 80069dc:	e7e0      	b.n	80069a0 <_printf_float+0x1a4>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	055a      	lsls	r2, r3, #21
 80069e2:	d407      	bmi.n	80069f4 <_printf_float+0x1f8>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	4642      	mov	r2, r8
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	d12c      	bne.n	8006a4c <_printf_float+0x250>
 80069f2:	e764      	b.n	80068be <_printf_float+0xc2>
 80069f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069f8:	f240 80e0 	bls.w	8006bbc <_printf_float+0x3c0>
 80069fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a00:	2200      	movs	r2, #0
 8006a02:	2300      	movs	r3, #0
 8006a04:	f7fa f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d034      	beq.n	8006a76 <_printf_float+0x27a>
 8006a0c:	4a37      	ldr	r2, [pc, #220]	; (8006aec <_printf_float+0x2f0>)
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f af51 	beq.w	80068be <_printf_float+0xc2>
 8006a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a20:	429a      	cmp	r2, r3
 8006a22:	db02      	blt.n	8006a2a <_printf_float+0x22e>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07d8      	lsls	r0, r3, #31
 8006a28:	d510      	bpl.n	8006a4c <_printf_float+0x250>
 8006a2a:	ee18 3a10 	vmov	r3, s16
 8006a2e:	4652      	mov	r2, sl
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f af41 	beq.w	80068be <_printf_float+0xc2>
 8006a3c:	f04f 0800 	mov.w	r8, #0
 8006a40:	f104 091a 	add.w	r9, r4, #26
 8006a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a46:	3b01      	subs	r3, #1
 8006a48:	4543      	cmp	r3, r8
 8006a4a:	dc09      	bgt.n	8006a60 <_printf_float+0x264>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	079b      	lsls	r3, r3, #30
 8006a50:	f100 8105 	bmi.w	8006c5e <_printf_float+0x462>
 8006a54:	68e0      	ldr	r0, [r4, #12]
 8006a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a58:	4298      	cmp	r0, r3
 8006a5a:	bfb8      	it	lt
 8006a5c:	4618      	movlt	r0, r3
 8006a5e:	e730      	b.n	80068c2 <_printf_float+0xc6>
 8006a60:	2301      	movs	r3, #1
 8006a62:	464a      	mov	r2, r9
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f af27 	beq.w	80068be <_printf_float+0xc2>
 8006a70:	f108 0801 	add.w	r8, r8, #1
 8006a74:	e7e6      	b.n	8006a44 <_printf_float+0x248>
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc39      	bgt.n	8006af0 <_printf_float+0x2f4>
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <_printf_float+0x2f0>)
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af19 	beq.w	80068be <_printf_float+0xc2>
 8006a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d102      	bne.n	8006a9a <_printf_float+0x29e>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	d5d8      	bpl.n	8006a4c <_printf_float+0x250>
 8006a9a:	ee18 3a10 	vmov	r3, s16
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af09 	beq.w	80068be <_printf_float+0xc2>
 8006aac:	f04f 0900 	mov.w	r9, #0
 8006ab0:	f104 0a1a 	add.w	sl, r4, #26
 8006ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab6:	425b      	negs	r3, r3
 8006ab8:	454b      	cmp	r3, r9
 8006aba:	dc01      	bgt.n	8006ac0 <_printf_float+0x2c4>
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	e792      	b.n	80069e6 <_printf_float+0x1ea>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f aef7 	beq.w	80068be <_printf_float+0xc2>
 8006ad0:	f109 0901 	add.w	r9, r9, #1
 8006ad4:	e7ee      	b.n	8006ab4 <_printf_float+0x2b8>
 8006ad6:	bf00      	nop
 8006ad8:	7fefffff 	.word	0x7fefffff
 8006adc:	0800917c 	.word	0x0800917c
 8006ae0:	08009180 	.word	0x08009180
 8006ae4:	08009188 	.word	0x08009188
 8006ae8:	08009184 	.word	0x08009184
 8006aec:	0800918c 	.word	0x0800918c
 8006af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006af4:	429a      	cmp	r2, r3
 8006af6:	bfa8      	it	ge
 8006af8:	461a      	movge	r2, r3
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	4691      	mov	r9, r2
 8006afe:	dc37      	bgt.n	8006b70 <_printf_float+0x374>
 8006b00:	f04f 0b00 	mov.w	fp, #0
 8006b04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b08:	f104 021a 	add.w	r2, r4, #26
 8006b0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	eba3 0309 	sub.w	r3, r3, r9
 8006b14:	455b      	cmp	r3, fp
 8006b16:	dc33      	bgt.n	8006b80 <_printf_float+0x384>
 8006b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	db3b      	blt.n	8006b98 <_printf_float+0x39c>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07da      	lsls	r2, r3, #31
 8006b24:	d438      	bmi.n	8006b98 <_printf_float+0x39c>
 8006b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b28:	9a05      	ldr	r2, [sp, #20]
 8006b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b2c:	1a9a      	subs	r2, r3, r2
 8006b2e:	eba3 0901 	sub.w	r9, r3, r1
 8006b32:	4591      	cmp	r9, r2
 8006b34:	bfa8      	it	ge
 8006b36:	4691      	movge	r9, r2
 8006b38:	f1b9 0f00 	cmp.w	r9, #0
 8006b3c:	dc35      	bgt.n	8006baa <_printf_float+0x3ae>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b46:	f104 0a1a 	add.w	sl, r4, #26
 8006b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	eba3 0309 	sub.w	r3, r3, r9
 8006b54:	4543      	cmp	r3, r8
 8006b56:	f77f af79 	ble.w	8006a4c <_printf_float+0x250>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f aeaa 	beq.w	80068be <_printf_float+0xc2>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	e7ec      	b.n	8006b4a <_printf_float+0x34e>
 8006b70:	4613      	mov	r3, r2
 8006b72:	4631      	mov	r1, r6
 8006b74:	4642      	mov	r2, r8
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d1c0      	bne.n	8006b00 <_printf_float+0x304>
 8006b7e:	e69e      	b.n	80068be <_printf_float+0xc2>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	9205      	str	r2, [sp, #20]
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f ae97 	beq.w	80068be <_printf_float+0xc2>
 8006b90:	9a05      	ldr	r2, [sp, #20]
 8006b92:	f10b 0b01 	add.w	fp, fp, #1
 8006b96:	e7b9      	b.n	8006b0c <_printf_float+0x310>
 8006b98:	ee18 3a10 	vmov	r3, s16
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d1be      	bne.n	8006b26 <_printf_float+0x32a>
 8006ba8:	e689      	b.n	80068be <_printf_float+0xc2>
 8006baa:	9a05      	ldr	r2, [sp, #20]
 8006bac:	464b      	mov	r3, r9
 8006bae:	4442      	add	r2, r8
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d1c1      	bne.n	8006b3e <_printf_float+0x342>
 8006bba:	e680      	b.n	80068be <_printf_float+0xc2>
 8006bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bbe:	2a01      	cmp	r2, #1
 8006bc0:	dc01      	bgt.n	8006bc6 <_printf_float+0x3ca>
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	d538      	bpl.n	8006c38 <_printf_float+0x43c>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f43f ae74 	beq.w	80068be <_printf_float+0xc2>
 8006bd6:	ee18 3a10 	vmov	r3, s16
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f ae6b 	beq.w	80068be <_printf_float+0xc2>
 8006be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f7f9 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf4:	b9d8      	cbnz	r0, 8006c2e <_printf_float+0x432>
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	f108 0201 	add.w	r2, r8, #1
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	d10e      	bne.n	8006c26 <_printf_float+0x42a>
 8006c08:	e659      	b.n	80068be <_printf_float+0xc2>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae52 	beq.w	80068be <_printf_float+0xc2>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	4543      	cmp	r3, r8
 8006c24:	dcf1      	bgt.n	8006c0a <_printf_float+0x40e>
 8006c26:	464b      	mov	r3, r9
 8006c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c2c:	e6dc      	b.n	80069e8 <_printf_float+0x1ec>
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	f104 0a1a 	add.w	sl, r4, #26
 8006c36:	e7f2      	b.n	8006c1e <_printf_float+0x422>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	e7df      	b.n	8006bfe <_printf_float+0x402>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	464a      	mov	r2, r9
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f ae38 	beq.w	80068be <_printf_float+0xc2>
 8006c4e:	f108 0801 	add.w	r8, r8, #1
 8006c52:	68e3      	ldr	r3, [r4, #12]
 8006c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c56:	1a5b      	subs	r3, r3, r1
 8006c58:	4543      	cmp	r3, r8
 8006c5a:	dcf0      	bgt.n	8006c3e <_printf_float+0x442>
 8006c5c:	e6fa      	b.n	8006a54 <_printf_float+0x258>
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	f104 0919 	add.w	r9, r4, #25
 8006c66:	e7f4      	b.n	8006c52 <_printf_float+0x456>

08006c68 <_printf_common>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	4699      	mov	r9, r3
 8006c70:	688a      	ldr	r2, [r1, #8]
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	bfb8      	it	lt
 8006c7c:	4613      	movlt	r3, r2
 8006c7e:	6033      	str	r3, [r6, #0]
 8006c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c84:	4607      	mov	r7, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	b10a      	cbz	r2, 8006c8e <_printf_common+0x26>
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	6033      	str	r3, [r6, #0]
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	0699      	lsls	r1, r3, #26
 8006c92:	bf42      	ittt	mi
 8006c94:	6833      	ldrmi	r3, [r6, #0]
 8006c96:	3302      	addmi	r3, #2
 8006c98:	6033      	strmi	r3, [r6, #0]
 8006c9a:	6825      	ldr	r5, [r4, #0]
 8006c9c:	f015 0506 	ands.w	r5, r5, #6
 8006ca0:	d106      	bne.n	8006cb0 <_printf_common+0x48>
 8006ca2:	f104 0a19 	add.w	sl, r4, #25
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	6832      	ldr	r2, [r6, #0]
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	42ab      	cmp	r3, r5
 8006cae:	dc26      	bgt.n	8006cfe <_printf_common+0x96>
 8006cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cb4:	1e13      	subs	r3, r2, #0
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	0692      	lsls	r2, r2, #26
 8006cbe:	d42b      	bmi.n	8006d18 <_printf_common+0xb0>
 8006cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	47c0      	blx	r8
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d01e      	beq.n	8006d0c <_printf_common+0xa4>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	68e5      	ldr	r5, [r4, #12]
 8006cd2:	6832      	ldr	r2, [r6, #0]
 8006cd4:	f003 0306 	and.w	r3, r3, #6
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	bf08      	it	eq
 8006cdc:	1aad      	subeq	r5, r5, r2
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	bf0c      	ite	eq
 8006ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce8:	2500      	movne	r5, #0
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bfc4      	itt	gt
 8006cee:	1a9b      	subgt	r3, r3, r2
 8006cf0:	18ed      	addgt	r5, r5, r3
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	341a      	adds	r4, #26
 8006cf6:	42b5      	cmp	r5, r6
 8006cf8:	d11a      	bne.n	8006d30 <_printf_common+0xc8>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	e008      	b.n	8006d10 <_printf_common+0xa8>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4652      	mov	r2, sl
 8006d02:	4649      	mov	r1, r9
 8006d04:	4638      	mov	r0, r7
 8006d06:	47c0      	blx	r8
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d103      	bne.n	8006d14 <_printf_common+0xac>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	3501      	adds	r5, #1
 8006d16:	e7c6      	b.n	8006ca6 <_printf_common+0x3e>
 8006d18:	18e1      	adds	r1, r4, r3
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	2030      	movs	r0, #48	; 0x30
 8006d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d22:	4422      	add	r2, r4
 8006d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	e7c7      	b.n	8006cc0 <_printf_common+0x58>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4622      	mov	r2, r4
 8006d34:	4649      	mov	r1, r9
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c0      	blx	r8
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d0e6      	beq.n	8006d0c <_printf_common+0xa4>
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7d9      	b.n	8006cf6 <_printf_common+0x8e>
	...

08006d44 <_printf_i>:
 8006d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	7e0f      	ldrb	r7, [r1, #24]
 8006d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d4c:	2f78      	cmp	r7, #120	; 0x78
 8006d4e:	4691      	mov	r9, r2
 8006d50:	4680      	mov	r8, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	469a      	mov	sl, r3
 8006d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d5a:	d807      	bhi.n	8006d6c <_printf_i+0x28>
 8006d5c:	2f62      	cmp	r7, #98	; 0x62
 8006d5e:	d80a      	bhi.n	8006d76 <_printf_i+0x32>
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f000 80d8 	beq.w	8006f16 <_printf_i+0x1d2>
 8006d66:	2f58      	cmp	r7, #88	; 0x58
 8006d68:	f000 80a3 	beq.w	8006eb2 <_printf_i+0x16e>
 8006d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d74:	e03a      	b.n	8006dec <_printf_i+0xa8>
 8006d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d7a:	2b15      	cmp	r3, #21
 8006d7c:	d8f6      	bhi.n	8006d6c <_printf_i+0x28>
 8006d7e:	a101      	add	r1, pc, #4	; (adr r1, 8006d84 <_printf_i+0x40>)
 8006d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d84:	08006ddd 	.word	0x08006ddd
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006d6d 	.word	0x08006d6d
 8006d90:	08006d6d 	.word	0x08006d6d
 8006d94:	08006d6d 	.word	0x08006d6d
 8006d98:	08006d6d 	.word	0x08006d6d
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006d6d 	.word	0x08006d6d
 8006da4:	08006d6d 	.word	0x08006d6d
 8006da8:	08006d6d 	.word	0x08006d6d
 8006dac:	08006d6d 	.word	0x08006d6d
 8006db0:	08006efd 	.word	0x08006efd
 8006db4:	08006e21 	.word	0x08006e21
 8006db8:	08006edf 	.word	0x08006edf
 8006dbc:	08006d6d 	.word	0x08006d6d
 8006dc0:	08006d6d 	.word	0x08006d6d
 8006dc4:	08006f1f 	.word	0x08006f1f
 8006dc8:	08006d6d 	.word	0x08006d6d
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006d6d 	.word	0x08006d6d
 8006dd4:	08006d6d 	.word	0x08006d6d
 8006dd8:	08006ee7 	.word	0x08006ee7
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	602a      	str	r2, [r5, #0]
 8006de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0a3      	b.n	8006f38 <_printf_i+0x1f4>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	6829      	ldr	r1, [r5, #0]
 8006df4:	0606      	lsls	r6, r0, #24
 8006df6:	f101 0304 	add.w	r3, r1, #4
 8006dfa:	d50a      	bpl.n	8006e12 <_printf_i+0xce>
 8006dfc:	680e      	ldr	r6, [r1, #0]
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	da03      	bge.n	8006e0c <_printf_i+0xc8>
 8006e04:	232d      	movs	r3, #45	; 0x2d
 8006e06:	4276      	negs	r6, r6
 8006e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e0c:	485e      	ldr	r0, [pc, #376]	; (8006f88 <_printf_i+0x244>)
 8006e0e:	230a      	movs	r3, #10
 8006e10:	e019      	b.n	8006e46 <_printf_i+0x102>
 8006e12:	680e      	ldr	r6, [r1, #0]
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e1a:	bf18      	it	ne
 8006e1c:	b236      	sxthne	r6, r6
 8006e1e:	e7ef      	b.n	8006e00 <_printf_i+0xbc>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	1d19      	adds	r1, r3, #4
 8006e26:	6029      	str	r1, [r5, #0]
 8006e28:	0601      	lsls	r1, r0, #24
 8006e2a:	d501      	bpl.n	8006e30 <_printf_i+0xec>
 8006e2c:	681e      	ldr	r6, [r3, #0]
 8006e2e:	e002      	b.n	8006e36 <_printf_i+0xf2>
 8006e30:	0646      	lsls	r6, r0, #25
 8006e32:	d5fb      	bpl.n	8006e2c <_printf_i+0xe8>
 8006e34:	881e      	ldrh	r6, [r3, #0]
 8006e36:	4854      	ldr	r0, [pc, #336]	; (8006f88 <_printf_i+0x244>)
 8006e38:	2f6f      	cmp	r7, #111	; 0x6f
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2308      	moveq	r3, #8
 8006e3e:	230a      	movne	r3, #10
 8006e40:	2100      	movs	r1, #0
 8006e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e46:	6865      	ldr	r5, [r4, #4]
 8006e48:	60a5      	str	r5, [r4, #8]
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	bfa2      	ittt	ge
 8006e4e:	6821      	ldrge	r1, [r4, #0]
 8006e50:	f021 0104 	bicge.w	r1, r1, #4
 8006e54:	6021      	strge	r1, [r4, #0]
 8006e56:	b90e      	cbnz	r6, 8006e5c <_printf_i+0x118>
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	d04d      	beq.n	8006ef8 <_printf_i+0x1b4>
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e62:	fb03 6711 	mls	r7, r3, r1, r6
 8006e66:	5dc7      	ldrb	r7, [r0, r7]
 8006e68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e6c:	4637      	mov	r7, r6
 8006e6e:	42bb      	cmp	r3, r7
 8006e70:	460e      	mov	r6, r1
 8006e72:	d9f4      	bls.n	8006e5e <_printf_i+0x11a>
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d10b      	bne.n	8006e90 <_printf_i+0x14c>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	07de      	lsls	r6, r3, #31
 8006e7c:	d508      	bpl.n	8006e90 <_printf_i+0x14c>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6861      	ldr	r1, [r4, #4]
 8006e82:	4299      	cmp	r1, r3
 8006e84:	bfde      	ittt	le
 8006e86:	2330      	movle	r3, #48	; 0x30
 8006e88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006e90:	1b52      	subs	r2, r2, r5
 8006e92:	6122      	str	r2, [r4, #16]
 8006e94:	f8cd a000 	str.w	sl, [sp]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	aa03      	add	r2, sp, #12
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	f7ff fee2 	bl	8006c68 <_printf_common>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d14c      	bne.n	8006f42 <_printf_i+0x1fe>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eac:	b004      	add	sp, #16
 8006eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb2:	4835      	ldr	r0, [pc, #212]	; (8006f88 <_printf_i+0x244>)
 8006eb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006eb8:	6829      	ldr	r1, [r5, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ec0:	6029      	str	r1, [r5, #0]
 8006ec2:	061d      	lsls	r5, r3, #24
 8006ec4:	d514      	bpl.n	8006ef0 <_printf_i+0x1ac>
 8006ec6:	07df      	lsls	r7, r3, #31
 8006ec8:	bf44      	itt	mi
 8006eca:	f043 0320 	orrmi.w	r3, r3, #32
 8006ece:	6023      	strmi	r3, [r4, #0]
 8006ed0:	b91e      	cbnz	r6, 8006eda <_printf_i+0x196>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	f023 0320 	bic.w	r3, r3, #32
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	2310      	movs	r3, #16
 8006edc:	e7b0      	b.n	8006e40 <_printf_i+0xfc>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f043 0320 	orr.w	r3, r3, #32
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	2378      	movs	r3, #120	; 0x78
 8006ee8:	4828      	ldr	r0, [pc, #160]	; (8006f8c <_printf_i+0x248>)
 8006eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eee:	e7e3      	b.n	8006eb8 <_printf_i+0x174>
 8006ef0:	0659      	lsls	r1, r3, #25
 8006ef2:	bf48      	it	mi
 8006ef4:	b2b6      	uxthmi	r6, r6
 8006ef6:	e7e6      	b.n	8006ec6 <_printf_i+0x182>
 8006ef8:	4615      	mov	r5, r2
 8006efa:	e7bb      	b.n	8006e74 <_printf_i+0x130>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	6826      	ldr	r6, [r4, #0]
 8006f00:	6961      	ldr	r1, [r4, #20]
 8006f02:	1d18      	adds	r0, r3, #4
 8006f04:	6028      	str	r0, [r5, #0]
 8006f06:	0635      	lsls	r5, r6, #24
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	d501      	bpl.n	8006f10 <_printf_i+0x1cc>
 8006f0c:	6019      	str	r1, [r3, #0]
 8006f0e:	e002      	b.n	8006f16 <_printf_i+0x1d2>
 8006f10:	0670      	lsls	r0, r6, #25
 8006f12:	d5fb      	bpl.n	8006f0c <_printf_i+0x1c8>
 8006f14:	8019      	strh	r1, [r3, #0]
 8006f16:	2300      	movs	r3, #0
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	4615      	mov	r5, r2
 8006f1c:	e7ba      	b.n	8006e94 <_printf_i+0x150>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	1d1a      	adds	r2, r3, #4
 8006f22:	602a      	str	r2, [r5, #0]
 8006f24:	681d      	ldr	r5, [r3, #0]
 8006f26:	6862      	ldr	r2, [r4, #4]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f7f9 f958 	bl	80001e0 <memchr>
 8006f30:	b108      	cbz	r0, 8006f36 <_printf_i+0x1f2>
 8006f32:	1b40      	subs	r0, r0, r5
 8006f34:	6060      	str	r0, [r4, #4]
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f40:	e7a8      	b.n	8006e94 <_printf_i+0x150>
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	462a      	mov	r2, r5
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	47d0      	blx	sl
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d0ab      	beq.n	8006ea8 <_printf_i+0x164>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	079b      	lsls	r3, r3, #30
 8006f54:	d413      	bmi.n	8006f7e <_printf_i+0x23a>
 8006f56:	68e0      	ldr	r0, [r4, #12]
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	4298      	cmp	r0, r3
 8006f5c:	bfb8      	it	lt
 8006f5e:	4618      	movlt	r0, r3
 8006f60:	e7a4      	b.n	8006eac <_printf_i+0x168>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4632      	mov	r2, r6
 8006f66:	4649      	mov	r1, r9
 8006f68:	4640      	mov	r0, r8
 8006f6a:	47d0      	blx	sl
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d09b      	beq.n	8006ea8 <_printf_i+0x164>
 8006f70:	3501      	adds	r5, #1
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	9903      	ldr	r1, [sp, #12]
 8006f76:	1a5b      	subs	r3, r3, r1
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	dcf2      	bgt.n	8006f62 <_printf_i+0x21e>
 8006f7c:	e7eb      	b.n	8006f56 <_printf_i+0x212>
 8006f7e:	2500      	movs	r5, #0
 8006f80:	f104 0619 	add.w	r6, r4, #25
 8006f84:	e7f5      	b.n	8006f72 <_printf_i+0x22e>
 8006f86:	bf00      	nop
 8006f88:	0800918e 	.word	0x0800918e
 8006f8c:	0800919f 	.word	0x0800919f

08006f90 <iprintf>:
 8006f90:	b40f      	push	{r0, r1, r2, r3}
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <iprintf+0x2c>)
 8006f94:	b513      	push	{r0, r1, r4, lr}
 8006f96:	681c      	ldr	r4, [r3, #0]
 8006f98:	b124      	cbz	r4, 8006fa4 <iprintf+0x14>
 8006f9a:	69a3      	ldr	r3, [r4, #24]
 8006f9c:	b913      	cbnz	r3, 8006fa4 <iprintf+0x14>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fee0 	bl	8007d64 <__sinit>
 8006fa4:	ab05      	add	r3, sp, #20
 8006fa6:	9a04      	ldr	r2, [sp, #16]
 8006fa8:	68a1      	ldr	r1, [r4, #8]
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	4620      	mov	r0, r4
 8006fae:	f001 fc2b 	bl	8008808 <_vfiprintf_r>
 8006fb2:	b002      	add	sp, #8
 8006fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb8:	b004      	add	sp, #16
 8006fba:	4770      	bx	lr
 8006fbc:	20000018 	.word	0x20000018

08006fc0 <quorem>:
 8006fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	6903      	ldr	r3, [r0, #16]
 8006fc6:	690c      	ldr	r4, [r1, #16]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	4607      	mov	r7, r0
 8006fcc:	f2c0 8081 	blt.w	80070d2 <quorem+0x112>
 8006fd0:	3c01      	subs	r4, #1
 8006fd2:	f101 0814 	add.w	r8, r1, #20
 8006fd6:	f100 0514 	add.w	r5, r0, #20
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff8:	d331      	bcc.n	800705e <quorem+0x9e>
 8006ffa:	f04f 0e00 	mov.w	lr, #0
 8006ffe:	4640      	mov	r0, r8
 8007000:	46ac      	mov	ip, r5
 8007002:	46f2      	mov	sl, lr
 8007004:	f850 2b04 	ldr.w	r2, [r0], #4
 8007008:	b293      	uxth	r3, r2
 800700a:	fb06 e303 	mla	r3, r6, r3, lr
 800700e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007012:	b29b      	uxth	r3, r3
 8007014:	ebaa 0303 	sub.w	r3, sl, r3
 8007018:	f8dc a000 	ldr.w	sl, [ip]
 800701c:	0c12      	lsrs	r2, r2, #16
 800701e:	fa13 f38a 	uxtah	r3, r3, sl
 8007022:	fb06 e202 	mla	r2, r6, r2, lr
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	9b00      	ldr	r3, [sp, #0]
 800702a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800702e:	b292      	uxth	r2, r2
 8007030:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007038:	f8bd 3000 	ldrh.w	r3, [sp]
 800703c:	4581      	cmp	r9, r0
 800703e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007042:	f84c 3b04 	str.w	r3, [ip], #4
 8007046:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800704a:	d2db      	bcs.n	8007004 <quorem+0x44>
 800704c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007050:	b92b      	cbnz	r3, 800705e <quorem+0x9e>
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	3b04      	subs	r3, #4
 8007056:	429d      	cmp	r5, r3
 8007058:	461a      	mov	r2, r3
 800705a:	d32e      	bcc.n	80070ba <quorem+0xfa>
 800705c:	613c      	str	r4, [r7, #16]
 800705e:	4638      	mov	r0, r7
 8007060:	f001 f9b0 	bl	80083c4 <__mcmp>
 8007064:	2800      	cmp	r0, #0
 8007066:	db24      	blt.n	80070b2 <quorem+0xf2>
 8007068:	3601      	adds	r6, #1
 800706a:	4628      	mov	r0, r5
 800706c:	f04f 0c00 	mov.w	ip, #0
 8007070:	f858 2b04 	ldr.w	r2, [r8], #4
 8007074:	f8d0 e000 	ldr.w	lr, [r0]
 8007078:	b293      	uxth	r3, r2
 800707a:	ebac 0303 	sub.w	r3, ip, r3
 800707e:	0c12      	lsrs	r2, r2, #16
 8007080:	fa13 f38e 	uxtah	r3, r3, lr
 8007084:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007092:	45c1      	cmp	r9, r8
 8007094:	f840 3b04 	str.w	r3, [r0], #4
 8007098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800709c:	d2e8      	bcs.n	8007070 <quorem+0xb0>
 800709e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a6:	b922      	cbnz	r2, 80070b2 <quorem+0xf2>
 80070a8:	3b04      	subs	r3, #4
 80070aa:	429d      	cmp	r5, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	d30a      	bcc.n	80070c6 <quorem+0x106>
 80070b0:	613c      	str	r4, [r7, #16]
 80070b2:	4630      	mov	r0, r6
 80070b4:	b003      	add	sp, #12
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	3b04      	subs	r3, #4
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d1cc      	bne.n	800705c <quorem+0x9c>
 80070c2:	3c01      	subs	r4, #1
 80070c4:	e7c7      	b.n	8007056 <quorem+0x96>
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	d1f0      	bne.n	80070b0 <quorem+0xf0>
 80070ce:	3c01      	subs	r4, #1
 80070d0:	e7eb      	b.n	80070aa <quorem+0xea>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7ee      	b.n	80070b4 <quorem+0xf4>
	...

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b04 	vpush	{d8-d9}
 80070e0:	ec57 6b10 	vmov	r6, r7, d0
 80070e4:	b093      	sub	sp, #76	; 0x4c
 80070e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070ec:	9106      	str	r1, [sp, #24]
 80070ee:	ee10 aa10 	vmov	sl, s0
 80070f2:	4604      	mov	r4, r0
 80070f4:	9209      	str	r2, [sp, #36]	; 0x24
 80070f6:	930c      	str	r3, [sp, #48]	; 0x30
 80070f8:	46bb      	mov	fp, r7
 80070fa:	b975      	cbnz	r5, 800711a <_dtoa_r+0x42>
 80070fc:	2010      	movs	r0, #16
 80070fe:	f000 fed7 	bl	8007eb0 <malloc>
 8007102:	4602      	mov	r2, r0
 8007104:	6260      	str	r0, [r4, #36]	; 0x24
 8007106:	b920      	cbnz	r0, 8007112 <_dtoa_r+0x3a>
 8007108:	4ba7      	ldr	r3, [pc, #668]	; (80073a8 <_dtoa_r+0x2d0>)
 800710a:	21ea      	movs	r1, #234	; 0xea
 800710c:	48a7      	ldr	r0, [pc, #668]	; (80073ac <_dtoa_r+0x2d4>)
 800710e:	f001 fdd1 	bl	8008cb4 <__assert_func>
 8007112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007116:	6005      	str	r5, [r0, #0]
 8007118:	60c5      	str	r5, [r0, #12]
 800711a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	b151      	cbz	r1, 8007136 <_dtoa_r+0x5e>
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	604a      	str	r2, [r1, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	4093      	lsls	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
 800712a:	4620      	mov	r0, r4
 800712c:	f000 ff08 	bl	8007f40 <_Bfree>
 8007130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	1e3b      	subs	r3, r7, #0
 8007138:	bfaa      	itet	ge
 800713a:	2300      	movge	r3, #0
 800713c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007140:	f8c8 3000 	strge.w	r3, [r8]
 8007144:	4b9a      	ldr	r3, [pc, #616]	; (80073b0 <_dtoa_r+0x2d8>)
 8007146:	bfbc      	itt	lt
 8007148:	2201      	movlt	r2, #1
 800714a:	f8c8 2000 	strlt.w	r2, [r8]
 800714e:	ea33 030b 	bics.w	r3, r3, fp
 8007152:	d11b      	bne.n	800718c <_dtoa_r+0xb4>
 8007154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007156:	f242 730f 	movw	r3, #9999	; 0x270f
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007160:	4333      	orrs	r3, r6
 8007162:	f000 8592 	beq.w	8007c8a <_dtoa_r+0xbb2>
 8007166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007168:	b963      	cbnz	r3, 8007184 <_dtoa_r+0xac>
 800716a:	4b92      	ldr	r3, [pc, #584]	; (80073b4 <_dtoa_r+0x2dc>)
 800716c:	e022      	b.n	80071b4 <_dtoa_r+0xdc>
 800716e:	4b92      	ldr	r3, [pc, #584]	; (80073b8 <_dtoa_r+0x2e0>)
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	3308      	adds	r3, #8
 8007174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	9801      	ldr	r0, [sp, #4]
 800717a:	b013      	add	sp, #76	; 0x4c
 800717c:	ecbd 8b04 	vpop	{d8-d9}
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	4b8b      	ldr	r3, [pc, #556]	; (80073b4 <_dtoa_r+0x2dc>)
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	3303      	adds	r3, #3
 800718a:	e7f3      	b.n	8007174 <_dtoa_r+0x9c>
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	4650      	mov	r0, sl
 8007192:	4659      	mov	r1, fp
 8007194:	f7f9 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007198:	ec4b ab19 	vmov	d9, sl, fp
 800719c:	4680      	mov	r8, r0
 800719e:	b158      	cbz	r0, 80071b8 <_dtoa_r+0xe0>
 80071a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a2:	2301      	movs	r3, #1
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 856b 	beq.w	8007c84 <_dtoa_r+0xbac>
 80071ae:	4883      	ldr	r0, [pc, #524]	; (80073bc <_dtoa_r+0x2e4>)
 80071b0:	6018      	str	r0, [r3, #0]
 80071b2:	1e43      	subs	r3, r0, #1
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	e7df      	b.n	8007178 <_dtoa_r+0xa0>
 80071b8:	ec4b ab10 	vmov	d0, sl, fp
 80071bc:	aa10      	add	r2, sp, #64	; 0x40
 80071be:	a911      	add	r1, sp, #68	; 0x44
 80071c0:	4620      	mov	r0, r4
 80071c2:	f001 f9a5 	bl	8008510 <__d2b>
 80071c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80071ca:	ee08 0a10 	vmov	s16, r0
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	f000 8084 	beq.w	80072dc <_dtoa_r+0x204>
 80071d4:	ee19 3a90 	vmov	r3, s19
 80071d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071e0:	4656      	mov	r6, sl
 80071e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80071ee:	4b74      	ldr	r3, [pc, #464]	; (80073c0 <_dtoa_r+0x2e8>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	f7f9 f847 	bl	8000288 <__aeabi_dsub>
 80071fa:	a365      	add	r3, pc, #404	; (adr r3, 8007390 <_dtoa_r+0x2b8>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 f9fa 	bl	80005f8 <__aeabi_dmul>
 8007204:	a364      	add	r3, pc, #400	; (adr r3, 8007398 <_dtoa_r+0x2c0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f83f 	bl	800028c <__adddf3>
 800720e:	4606      	mov	r6, r0
 8007210:	4628      	mov	r0, r5
 8007212:	460f      	mov	r7, r1
 8007214:	f7f9 f986 	bl	8000524 <__aeabi_i2d>
 8007218:	a361      	add	r3, pc, #388	; (adr r3, 80073a0 <_dtoa_r+0x2c8>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 f82f 	bl	800028c <__adddf3>
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	f7f9 fc91 	bl	8000b58 <__aeabi_d2iz>
 8007236:	2200      	movs	r2, #0
 8007238:	9000      	str	r0, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8007244:	b150      	cbz	r0, 800725c <_dtoa_r+0x184>
 8007246:	9800      	ldr	r0, [sp, #0]
 8007248:	f7f9 f96c 	bl	8000524 <__aeabi_i2d>
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	f7f9 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007254:	b910      	cbnz	r0, 800725c <_dtoa_r+0x184>
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	2b16      	cmp	r3, #22
 8007260:	d85a      	bhi.n	8007318 <_dtoa_r+0x240>
 8007262:	9a00      	ldr	r2, [sp, #0]
 8007264:	4b57      	ldr	r3, [pc, #348]	; (80073c4 <_dtoa_r+0x2ec>)
 8007266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	ec51 0b19 	vmov	r0, r1, d9
 8007272:	f7f9 fc33 	bl	8000adc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	d050      	beq.n	800731c <_dtoa_r+0x244>
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2300      	movs	r3, #0
 8007282:	930b      	str	r3, [sp, #44]	; 0x2c
 8007284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007286:	1b5d      	subs	r5, r3, r5
 8007288:	1e6b      	subs	r3, r5, #1
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	bf45      	ittet	mi
 800728e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007292:	9304      	strmi	r3, [sp, #16]
 8007294:	2300      	movpl	r3, #0
 8007296:	2300      	movmi	r3, #0
 8007298:	bf4c      	ite	mi
 800729a:	9305      	strmi	r3, [sp, #20]
 800729c:	9304      	strpl	r3, [sp, #16]
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	db3d      	blt.n	8007320 <_dtoa_r+0x248>
 80072a4:	9b05      	ldr	r3, [sp, #20]
 80072a6:	9a00      	ldr	r2, [sp, #0]
 80072a8:	920a      	str	r2, [sp, #40]	; 0x28
 80072aa:	4413      	add	r3, r2
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	f200 8089 	bhi.w	80073cc <_dtoa_r+0x2f4>
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	bfc4      	itt	gt
 80072be:	3b04      	subgt	r3, #4
 80072c0:	9306      	strgt	r3, [sp, #24]
 80072c2:	9b06      	ldr	r3, [sp, #24]
 80072c4:	f1a3 0302 	sub.w	r3, r3, #2
 80072c8:	bfcc      	ite	gt
 80072ca:	2500      	movgt	r5, #0
 80072cc:	2501      	movle	r5, #1
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f200 8087 	bhi.w	80073e2 <_dtoa_r+0x30a>
 80072d4:	e8df f003 	tbb	[pc, r3]
 80072d8:	59383a2d 	.word	0x59383a2d
 80072dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80072e0:	441d      	add	r5, r3
 80072e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	bfc1      	itttt	gt
 80072ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80072f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072fa:	bfda      	itte	le
 80072fc:	f1c3 0320 	rsble	r3, r3, #32
 8007300:	fa06 f003 	lslle.w	r0, r6, r3
 8007304:	4318      	orrgt	r0, r3
 8007306:	f7f9 f8fd 	bl	8000504 <__aeabi_ui2d>
 800730a:	2301      	movs	r3, #1
 800730c:	4606      	mov	r6, r0
 800730e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007312:	3d01      	subs	r5, #1
 8007314:	930e      	str	r3, [sp, #56]	; 0x38
 8007316:	e76a      	b.n	80071ee <_dtoa_r+0x116>
 8007318:	2301      	movs	r3, #1
 800731a:	e7b2      	b.n	8007282 <_dtoa_r+0x1aa>
 800731c:	900b      	str	r0, [sp, #44]	; 0x2c
 800731e:	e7b1      	b.n	8007284 <_dtoa_r+0x1ac>
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	9a00      	ldr	r2, [sp, #0]
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	4253      	negs	r3, r2
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	2300      	movs	r3, #0
 800732e:	930a      	str	r3, [sp, #40]	; 0x28
 8007330:	e7bf      	b.n	80072b2 <_dtoa_r+0x1da>
 8007332:	2300      	movs	r3, #0
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	dc55      	bgt.n	80073e8 <_dtoa_r+0x310>
 800733c:	2301      	movs	r3, #1
 800733e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007342:	461a      	mov	r2, r3
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	e00c      	b.n	8007362 <_dtoa_r+0x28a>
 8007348:	2301      	movs	r3, #1
 800734a:	e7f3      	b.n	8007334 <_dtoa_r+0x25c>
 800734c:	2300      	movs	r3, #0
 800734e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007350:	9308      	str	r3, [sp, #32]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	4413      	add	r3, r2
 8007356:	9302      	str	r3, [sp, #8]
 8007358:	3301      	adds	r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	bfb8      	it	lt
 8007360:	2301      	movlt	r3, #1
 8007362:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007364:	2200      	movs	r2, #0
 8007366:	6042      	str	r2, [r0, #4]
 8007368:	2204      	movs	r2, #4
 800736a:	f102 0614 	add.w	r6, r2, #20
 800736e:	429e      	cmp	r6, r3
 8007370:	6841      	ldr	r1, [r0, #4]
 8007372:	d93d      	bls.n	80073f0 <_dtoa_r+0x318>
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fda3 	bl	8007ec0 <_Balloc>
 800737a:	9001      	str	r0, [sp, #4]
 800737c:	2800      	cmp	r0, #0
 800737e:	d13b      	bne.n	80073f8 <_dtoa_r+0x320>
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <_dtoa_r+0x2f0>)
 8007382:	4602      	mov	r2, r0
 8007384:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007388:	e6c0      	b.n	800710c <_dtoa_r+0x34>
 800738a:	2301      	movs	r3, #1
 800738c:	e7df      	b.n	800734e <_dtoa_r+0x276>
 800738e:	bf00      	nop
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	080091bd 	.word	0x080091bd
 80073ac:	080091d4 	.word	0x080091d4
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	080091b9 	.word	0x080091b9
 80073b8:	080091b0 	.word	0x080091b0
 80073bc:	0800918d 	.word	0x0800918d
 80073c0:	3ff80000 	.word	0x3ff80000
 80073c4:	08009328 	.word	0x08009328
 80073c8:	0800922f 	.word	0x0800922f
 80073cc:	2501      	movs	r5, #1
 80073ce:	2300      	movs	r3, #0
 80073d0:	9306      	str	r3, [sp, #24]
 80073d2:	9508      	str	r5, [sp, #32]
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	2312      	movs	r3, #18
 80073e0:	e7b0      	b.n	8007344 <_dtoa_r+0x26c>
 80073e2:	2301      	movs	r3, #1
 80073e4:	9308      	str	r3, [sp, #32]
 80073e6:	e7f5      	b.n	80073d4 <_dtoa_r+0x2fc>
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073ee:	e7b8      	b.n	8007362 <_dtoa_r+0x28a>
 80073f0:	3101      	adds	r1, #1
 80073f2:	6041      	str	r1, [r0, #4]
 80073f4:	0052      	lsls	r2, r2, #1
 80073f6:	e7b8      	b.n	800736a <_dtoa_r+0x292>
 80073f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073fa:	9a01      	ldr	r2, [sp, #4]
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	2b0e      	cmp	r3, #14
 8007402:	f200 809d 	bhi.w	8007540 <_dtoa_r+0x468>
 8007406:	2d00      	cmp	r5, #0
 8007408:	f000 809a 	beq.w	8007540 <_dtoa_r+0x468>
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dd32      	ble.n	8007478 <_dtoa_r+0x3a0>
 8007412:	4ab7      	ldr	r2, [pc, #732]	; (80076f0 <_dtoa_r+0x618>)
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800741c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	05d8      	lsls	r0, r3, #23
 8007424:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007428:	d516      	bpl.n	8007458 <_dtoa_r+0x380>
 800742a:	4bb2      	ldr	r3, [pc, #712]	; (80076f4 <_dtoa_r+0x61c>)
 800742c:	ec51 0b19 	vmov	r0, r1, d9
 8007430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007434:	f7f9 fa0a 	bl	800084c <__aeabi_ddiv>
 8007438:	f007 070f 	and.w	r7, r7, #15
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	2503      	movs	r5, #3
 8007442:	4eac      	ldr	r6, [pc, #688]	; (80076f4 <_dtoa_r+0x61c>)
 8007444:	b957      	cbnz	r7, 800745c <_dtoa_r+0x384>
 8007446:	4642      	mov	r2, r8
 8007448:	464b      	mov	r3, r9
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	f7f9 f9fd 	bl	800084c <__aeabi_ddiv>
 8007452:	4682      	mov	sl, r0
 8007454:	468b      	mov	fp, r1
 8007456:	e028      	b.n	80074aa <_dtoa_r+0x3d2>
 8007458:	2502      	movs	r5, #2
 800745a:	e7f2      	b.n	8007442 <_dtoa_r+0x36a>
 800745c:	07f9      	lsls	r1, r7, #31
 800745e:	d508      	bpl.n	8007472 <_dtoa_r+0x39a>
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	3501      	adds	r5, #1
 800746e:	4680      	mov	r8, r0
 8007470:	4689      	mov	r9, r1
 8007472:	107f      	asrs	r7, r7, #1
 8007474:	3608      	adds	r6, #8
 8007476:	e7e5      	b.n	8007444 <_dtoa_r+0x36c>
 8007478:	f000 809b 	beq.w	80075b2 <_dtoa_r+0x4da>
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	4f9d      	ldr	r7, [pc, #628]	; (80076f4 <_dtoa_r+0x61c>)
 8007480:	425e      	negs	r6, r3
 8007482:	4b9b      	ldr	r3, [pc, #620]	; (80076f0 <_dtoa_r+0x618>)
 8007484:	f006 020f 	and.w	r2, r6, #15
 8007488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	ec51 0b19 	vmov	r0, r1, d9
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	1136      	asrs	r6, r6, #4
 800749a:	4682      	mov	sl, r0
 800749c:	468b      	mov	fp, r1
 800749e:	2300      	movs	r3, #0
 80074a0:	2502      	movs	r5, #2
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	d17a      	bne.n	800759c <_dtoa_r+0x4c4>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d3      	bne.n	8007452 <_dtoa_r+0x37a>
 80074aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8082 	beq.w	80075b6 <_dtoa_r+0x4de>
 80074b2:	4b91      	ldr	r3, [pc, #580]	; (80076f8 <_dtoa_r+0x620>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4650      	mov	r0, sl
 80074b8:	4659      	mov	r1, fp
 80074ba:	f7f9 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d079      	beq.n	80075b6 <_dtoa_r+0x4de>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d076      	beq.n	80075b6 <_dtoa_r+0x4de>
 80074c8:	9b02      	ldr	r3, [sp, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dd36      	ble.n	800753c <_dtoa_r+0x464>
 80074ce:	9b00      	ldr	r3, [sp, #0]
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	1e5f      	subs	r7, r3, #1
 80074d6:	2200      	movs	r2, #0
 80074d8:	4b88      	ldr	r3, [pc, #544]	; (80076fc <_dtoa_r+0x624>)
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	9e02      	ldr	r6, [sp, #8]
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	3501      	adds	r5, #1
 80074e6:	4628      	mov	r0, r5
 80074e8:	f7f9 f81c 	bl	8000524 <__aeabi_i2d>
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	4b82      	ldr	r3, [pc, #520]	; (8007700 <_dtoa_r+0x628>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	f7f8 fec8 	bl	800028c <__adddf3>
 80074fc:	46d0      	mov	r8, sl
 80074fe:	46d9      	mov	r9, fp
 8007500:	4682      	mov	sl, r0
 8007502:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007506:	2e00      	cmp	r6, #0
 8007508:	d158      	bne.n	80075bc <_dtoa_r+0x4e4>
 800750a:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <_dtoa_r+0x62c>)
 800750c:	2200      	movs	r2, #0
 800750e:	4640      	mov	r0, r8
 8007510:	4649      	mov	r1, r9
 8007512:	f7f8 feb9 	bl	8000288 <__aeabi_dsub>
 8007516:	4652      	mov	r2, sl
 8007518:	465b      	mov	r3, fp
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	f7f9 fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8007522:	2800      	cmp	r0, #0
 8007524:	f040 8295 	bne.w	8007a52 <_dtoa_r+0x97a>
 8007528:	4652      	mov	r2, sl
 800752a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 fad3 	bl	8000adc <__aeabi_dcmplt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8289 	bne.w	8007a4e <_dtoa_r+0x976>
 800753c:	ec5b ab19 	vmov	sl, fp, d9
 8007540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007542:	2b00      	cmp	r3, #0
 8007544:	f2c0 8148 	blt.w	80077d8 <_dtoa_r+0x700>
 8007548:	9a00      	ldr	r2, [sp, #0]
 800754a:	2a0e      	cmp	r2, #14
 800754c:	f300 8144 	bgt.w	80077d8 <_dtoa_r+0x700>
 8007550:	4b67      	ldr	r3, [pc, #412]	; (80076f0 <_dtoa_r+0x618>)
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	e9d3 8900 	ldrd	r8, r9, [r3]
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	f280 80d5 	bge.w	800770c <_dtoa_r+0x634>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f300 80d1 	bgt.w	800770c <_dtoa_r+0x634>
 800756a:	f040 826f 	bne.w	8007a4c <_dtoa_r+0x974>
 800756e:	4b65      	ldr	r3, [pc, #404]	; (8007704 <_dtoa_r+0x62c>)
 8007570:	2200      	movs	r2, #0
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	f7f9 fac1 	bl	8000b04 <__aeabi_dcmpge>
 8007582:	9e03      	ldr	r6, [sp, #12]
 8007584:	4637      	mov	r7, r6
 8007586:	2800      	cmp	r0, #0
 8007588:	f040 8245 	bne.w	8007a16 <_dtoa_r+0x93e>
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	f805 3b01 	strb.w	r3, [r5], #1
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	e240      	b.n	8007a1e <_dtoa_r+0x946>
 800759c:	07f2      	lsls	r2, r6, #31
 800759e:	d505      	bpl.n	80075ac <_dtoa_r+0x4d4>
 80075a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	3501      	adds	r5, #1
 80075aa:	2301      	movs	r3, #1
 80075ac:	1076      	asrs	r6, r6, #1
 80075ae:	3708      	adds	r7, #8
 80075b0:	e777      	b.n	80074a2 <_dtoa_r+0x3ca>
 80075b2:	2502      	movs	r5, #2
 80075b4:	e779      	b.n	80074aa <_dtoa_r+0x3d2>
 80075b6:	9f00      	ldr	r7, [sp, #0]
 80075b8:	9e03      	ldr	r6, [sp, #12]
 80075ba:	e794      	b.n	80074e6 <_dtoa_r+0x40e>
 80075bc:	9901      	ldr	r1, [sp, #4]
 80075be:	4b4c      	ldr	r3, [pc, #304]	; (80076f0 <_dtoa_r+0x618>)
 80075c0:	4431      	add	r1, r6
 80075c2:	910d      	str	r1, [sp, #52]	; 0x34
 80075c4:	9908      	ldr	r1, [sp, #32]
 80075c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d043      	beq.n	800765a <_dtoa_r+0x582>
 80075d2:	494d      	ldr	r1, [pc, #308]	; (8007708 <_dtoa_r+0x630>)
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f9 f939 	bl	800084c <__aeabi_ddiv>
 80075da:	4652      	mov	r2, sl
 80075dc:	465b      	mov	r3, fp
 80075de:	f7f8 fe53 	bl	8000288 <__aeabi_dsub>
 80075e2:	9d01      	ldr	r5, [sp, #4]
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	4649      	mov	r1, r9
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7f9 fab4 	bl	8000b58 <__aeabi_d2iz>
 80075f0:	4606      	mov	r6, r0
 80075f2:	f7f8 ff97 	bl	8000524 <__aeabi_i2d>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4640      	mov	r0, r8
 80075fc:	4649      	mov	r1, r9
 80075fe:	f7f8 fe43 	bl	8000288 <__aeabi_dsub>
 8007602:	3630      	adds	r6, #48	; 0x30
 8007604:	f805 6b01 	strb.w	r6, [r5], #1
 8007608:	4652      	mov	r2, sl
 800760a:	465b      	mov	r3, fp
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d163      	bne.n	80076e0 <_dtoa_r+0x608>
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	4936      	ldr	r1, [pc, #216]	; (80076f8 <_dtoa_r+0x620>)
 800761e:	2000      	movs	r0, #0
 8007620:	f7f8 fe32 	bl	8000288 <__aeabi_dsub>
 8007624:	4652      	mov	r2, sl
 8007626:	465b      	mov	r3, fp
 8007628:	f7f9 fa58 	bl	8000adc <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 80b5 	bne.w	800779c <_dtoa_r+0x6c4>
 8007632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007634:	429d      	cmp	r5, r3
 8007636:	d081      	beq.n	800753c <_dtoa_r+0x464>
 8007638:	4b30      	ldr	r3, [pc, #192]	; (80076fc <_dtoa_r+0x624>)
 800763a:	2200      	movs	r2, #0
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	f7f8 ffda 	bl	80005f8 <__aeabi_dmul>
 8007644:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <_dtoa_r+0x624>)
 8007646:	4682      	mov	sl, r0
 8007648:	468b      	mov	fp, r1
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	2200      	movs	r2, #0
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	4680      	mov	r8, r0
 8007656:	4689      	mov	r9, r1
 8007658:	e7c6      	b.n	80075e8 <_dtoa_r+0x510>
 800765a:	4650      	mov	r0, sl
 800765c:	4659      	mov	r1, fp
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007664:	9d01      	ldr	r5, [sp, #4]
 8007666:	930f      	str	r3, [sp, #60]	; 0x3c
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	4649      	mov	r1, r9
 800766e:	4640      	mov	r0, r8
 8007670:	f7f9 fa72 	bl	8000b58 <__aeabi_d2iz>
 8007674:	4606      	mov	r6, r0
 8007676:	f7f8 ff55 	bl	8000524 <__aeabi_i2d>
 800767a:	3630      	adds	r6, #48	; 0x30
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	f805 6b01 	strb.w	r6, [r5], #1
 800768c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768e:	429d      	cmp	r5, r3
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	d124      	bne.n	80076e4 <_dtoa_r+0x60c>
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <_dtoa_r+0x630>)
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	f7f8 fdf4 	bl	800028c <__adddf3>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d173      	bne.n	800779c <_dtoa_r+0x6c4>
 80076b4:	4652      	mov	r2, sl
 80076b6:	465b      	mov	r3, fp
 80076b8:	4913      	ldr	r1, [pc, #76]	; (8007708 <_dtoa_r+0x630>)
 80076ba:	2000      	movs	r0, #0
 80076bc:	f7f8 fde4 	bl	8000288 <__aeabi_dsub>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 fa08 	bl	8000adc <__aeabi_dcmplt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f af35 	beq.w	800753c <_dtoa_r+0x464>
 80076d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076d4:	1e6b      	subs	r3, r5, #1
 80076d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d0f8      	beq.n	80076d2 <_dtoa_r+0x5fa>
 80076e0:	9700      	str	r7, [sp, #0]
 80076e2:	e049      	b.n	8007778 <_dtoa_r+0x6a0>
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <_dtoa_r+0x624>)
 80076e6:	f7f8 ff87 	bl	80005f8 <__aeabi_dmul>
 80076ea:	4680      	mov	r8, r0
 80076ec:	4689      	mov	r9, r1
 80076ee:	e7bd      	b.n	800766c <_dtoa_r+0x594>
 80076f0:	08009328 	.word	0x08009328
 80076f4:	08009300 	.word	0x08009300
 80076f8:	3ff00000 	.word	0x3ff00000
 80076fc:	40240000 	.word	0x40240000
 8007700:	401c0000 	.word	0x401c0000
 8007704:	40140000 	.word	0x40140000
 8007708:	3fe00000 	.word	0x3fe00000
 800770c:	9d01      	ldr	r5, [sp, #4]
 800770e:	4656      	mov	r6, sl
 8007710:	465f      	mov	r7, fp
 8007712:	4642      	mov	r2, r8
 8007714:	464b      	mov	r3, r9
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f9 f897 	bl	800084c <__aeabi_ddiv>
 800771e:	f7f9 fa1b 	bl	8000b58 <__aeabi_d2iz>
 8007722:	4682      	mov	sl, r0
 8007724:	f7f8 fefe 	bl	8000524 <__aeabi_i2d>
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800773c:	f7f8 fda4 	bl	8000288 <__aeabi_dsub>
 8007740:	f805 6b01 	strb.w	r6, [r5], #1
 8007744:	9e01      	ldr	r6, [sp, #4]
 8007746:	9f03      	ldr	r7, [sp, #12]
 8007748:	1bae      	subs	r6, r5, r6
 800774a:	42b7      	cmp	r7, r6
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	d135      	bne.n	80077be <_dtoa_r+0x6e6>
 8007752:	f7f8 fd9b 	bl	800028c <__adddf3>
 8007756:	4642      	mov	r2, r8
 8007758:	464b      	mov	r3, r9
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	f7f9 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8007762:	b9d0      	cbnz	r0, 800779a <_dtoa_r+0x6c2>
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f9 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007770:	b110      	cbz	r0, 8007778 <_dtoa_r+0x6a0>
 8007772:	f01a 0f01 	tst.w	sl, #1
 8007776:	d110      	bne.n	800779a <_dtoa_r+0x6c2>
 8007778:	4620      	mov	r0, r4
 800777a:	ee18 1a10 	vmov	r1, s16
 800777e:	f000 fbdf 	bl	8007f40 <_Bfree>
 8007782:	2300      	movs	r3, #0
 8007784:	9800      	ldr	r0, [sp, #0]
 8007786:	702b      	strb	r3, [r5, #0]
 8007788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800778a:	3001      	adds	r0, #1
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007790:	2b00      	cmp	r3, #0
 8007792:	f43f acf1 	beq.w	8007178 <_dtoa_r+0xa0>
 8007796:	601d      	str	r5, [r3, #0]
 8007798:	e4ee      	b.n	8007178 <_dtoa_r+0xa0>
 800779a:	9f00      	ldr	r7, [sp, #0]
 800779c:	462b      	mov	r3, r5
 800779e:	461d      	mov	r5, r3
 80077a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a4:	2a39      	cmp	r2, #57	; 0x39
 80077a6:	d106      	bne.n	80077b6 <_dtoa_r+0x6de>
 80077a8:	9a01      	ldr	r2, [sp, #4]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1f7      	bne.n	800779e <_dtoa_r+0x6c6>
 80077ae:	9901      	ldr	r1, [sp, #4]
 80077b0:	2230      	movs	r2, #48	; 0x30
 80077b2:	3701      	adds	r7, #1
 80077b4:	700a      	strb	r2, [r1, #0]
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	3201      	adds	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e790      	b.n	80076e0 <_dtoa_r+0x608>
 80077be:	4ba6      	ldr	r3, [pc, #664]	; (8007a58 <_dtoa_r+0x980>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	2200      	movs	r2, #0
 80077c8:	2300      	movs	r3, #0
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	f7f9 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d09d      	beq.n	8007712 <_dtoa_r+0x63a>
 80077d6:	e7cf      	b.n	8007778 <_dtoa_r+0x6a0>
 80077d8:	9a08      	ldr	r2, [sp, #32]
 80077da:	2a00      	cmp	r2, #0
 80077dc:	f000 80d7 	beq.w	800798e <_dtoa_r+0x8b6>
 80077e0:	9a06      	ldr	r2, [sp, #24]
 80077e2:	2a01      	cmp	r2, #1
 80077e4:	f300 80ba 	bgt.w	800795c <_dtoa_r+0x884>
 80077e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	f000 80b2 	beq.w	8007954 <_dtoa_r+0x87c>
 80077f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077f4:	9e07      	ldr	r6, [sp, #28]
 80077f6:	9d04      	ldr	r5, [sp, #16]
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	441a      	add	r2, r3
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	9a05      	ldr	r2, [sp, #20]
 8007800:	2101      	movs	r1, #1
 8007802:	441a      	add	r2, r3
 8007804:	4620      	mov	r0, r4
 8007806:	9205      	str	r2, [sp, #20]
 8007808:	f000 fc52 	bl	80080b0 <__i2b>
 800780c:	4607      	mov	r7, r0
 800780e:	2d00      	cmp	r5, #0
 8007810:	dd0c      	ble.n	800782c <_dtoa_r+0x754>
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd09      	ble.n	800782c <_dtoa_r+0x754>
 8007818:	42ab      	cmp	r3, r5
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	bfa8      	it	ge
 800781e:	462b      	movge	r3, r5
 8007820:	1ad2      	subs	r2, r2, r3
 8007822:	9204      	str	r2, [sp, #16]
 8007824:	9a05      	ldr	r2, [sp, #20]
 8007826:	1aed      	subs	r5, r5, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	b31b      	cbz	r3, 8007878 <_dtoa_r+0x7a0>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80af 	beq.w	8007996 <_dtoa_r+0x8be>
 8007838:	2e00      	cmp	r6, #0
 800783a:	dd13      	ble.n	8007864 <_dtoa_r+0x78c>
 800783c:	4639      	mov	r1, r7
 800783e:	4632      	mov	r2, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fcf5 	bl	8008230 <__pow5mult>
 8007846:	ee18 2a10 	vmov	r2, s16
 800784a:	4601      	mov	r1, r0
 800784c:	4607      	mov	r7, r0
 800784e:	4620      	mov	r0, r4
 8007850:	f000 fc44 	bl	80080dc <__multiply>
 8007854:	ee18 1a10 	vmov	r1, s16
 8007858:	4680      	mov	r8, r0
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fb70 	bl	8007f40 <_Bfree>
 8007860:	ee08 8a10 	vmov	s16, r8
 8007864:	9b07      	ldr	r3, [sp, #28]
 8007866:	1b9a      	subs	r2, r3, r6
 8007868:	d006      	beq.n	8007878 <_dtoa_r+0x7a0>
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	4620      	mov	r0, r4
 8007870:	f000 fcde 	bl	8008230 <__pow5mult>
 8007874:	ee08 0a10 	vmov	s16, r0
 8007878:	2101      	movs	r1, #1
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fc18 	bl	80080b0 <__i2b>
 8007880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	4606      	mov	r6, r0
 8007886:	f340 8088 	ble.w	800799a <_dtoa_r+0x8c2>
 800788a:	461a      	mov	r2, r3
 800788c:	4601      	mov	r1, r0
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fcce 	bl	8008230 <__pow5mult>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	2b01      	cmp	r3, #1
 8007898:	4606      	mov	r6, r0
 800789a:	f340 8081 	ble.w	80079a0 <_dtoa_r+0x8c8>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	6933      	ldr	r3, [r6, #16]
 80078a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078a8:	6918      	ldr	r0, [r3, #16]
 80078aa:	f000 fbb1 	bl	8008010 <__hi0bits>
 80078ae:	f1c0 0020 	rsb	r0, r0, #32
 80078b2:	9b05      	ldr	r3, [sp, #20]
 80078b4:	4418      	add	r0, r3
 80078b6:	f010 001f 	ands.w	r0, r0, #31
 80078ba:	f000 8092 	beq.w	80079e2 <_dtoa_r+0x90a>
 80078be:	f1c0 0320 	rsb	r3, r0, #32
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	f340 808a 	ble.w	80079dc <_dtoa_r+0x904>
 80078c8:	f1c0 001c 	rsb	r0, r0, #28
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	4403      	add	r3, r0
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	4403      	add	r3, r0
 80078d6:	4405      	add	r5, r0
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd07      	ble.n	80078f0 <_dtoa_r+0x818>
 80078e0:	ee18 1a10 	vmov	r1, s16
 80078e4:	461a      	mov	r2, r3
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fcfc 	bl	80082e4 <__lshift>
 80078ec:	ee08 0a10 	vmov	s16, r0
 80078f0:	9b05      	ldr	r3, [sp, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd05      	ble.n	8007902 <_dtoa_r+0x82a>
 80078f6:	4631      	mov	r1, r6
 80078f8:	461a      	mov	r2, r3
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 fcf2 	bl	80082e4 <__lshift>
 8007900:	4606      	mov	r6, r0
 8007902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d06e      	beq.n	80079e6 <_dtoa_r+0x90e>
 8007908:	ee18 0a10 	vmov	r0, s16
 800790c:	4631      	mov	r1, r6
 800790e:	f000 fd59 	bl	80083c4 <__mcmp>
 8007912:	2800      	cmp	r0, #0
 8007914:	da67      	bge.n	80079e6 <_dtoa_r+0x90e>
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	ee18 1a10 	vmov	r1, s16
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	220a      	movs	r2, #10
 8007922:	2300      	movs	r3, #0
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fb2d 	bl	8007f84 <__multadd>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 81b1 	beq.w	8007c98 <_dtoa_r+0xbc0>
 8007936:	2300      	movs	r3, #0
 8007938:	4639      	mov	r1, r7
 800793a:	220a      	movs	r2, #10
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fb21 	bl	8007f84 <__multadd>
 8007942:	9b02      	ldr	r3, [sp, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	4607      	mov	r7, r0
 8007948:	f300 808e 	bgt.w	8007a68 <_dtoa_r+0x990>
 800794c:	9b06      	ldr	r3, [sp, #24]
 800794e:	2b02      	cmp	r3, #2
 8007950:	dc51      	bgt.n	80079f6 <_dtoa_r+0x91e>
 8007952:	e089      	b.n	8007a68 <_dtoa_r+0x990>
 8007954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800795a:	e74b      	b.n	80077f4 <_dtoa_r+0x71c>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1e5e      	subs	r6, r3, #1
 8007960:	9b07      	ldr	r3, [sp, #28]
 8007962:	42b3      	cmp	r3, r6
 8007964:	bfbf      	itttt	lt
 8007966:	9b07      	ldrlt	r3, [sp, #28]
 8007968:	9607      	strlt	r6, [sp, #28]
 800796a:	1af2      	sublt	r2, r6, r3
 800796c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800796e:	bfb6      	itet	lt
 8007970:	189b      	addlt	r3, r3, r2
 8007972:	1b9e      	subge	r6, r3, r6
 8007974:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	bfb8      	it	lt
 800797a:	2600      	movlt	r6, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb7      	itett	lt
 8007980:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007984:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007988:	1a9d      	sublt	r5, r3, r2
 800798a:	2300      	movlt	r3, #0
 800798c:	e734      	b.n	80077f8 <_dtoa_r+0x720>
 800798e:	9e07      	ldr	r6, [sp, #28]
 8007990:	9d04      	ldr	r5, [sp, #16]
 8007992:	9f08      	ldr	r7, [sp, #32]
 8007994:	e73b      	b.n	800780e <_dtoa_r+0x736>
 8007996:	9a07      	ldr	r2, [sp, #28]
 8007998:	e767      	b.n	800786a <_dtoa_r+0x792>
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	2b01      	cmp	r3, #1
 800799e:	dc18      	bgt.n	80079d2 <_dtoa_r+0x8fa>
 80079a0:	f1ba 0f00 	cmp.w	sl, #0
 80079a4:	d115      	bne.n	80079d2 <_dtoa_r+0x8fa>
 80079a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079aa:	b993      	cbnz	r3, 80079d2 <_dtoa_r+0x8fa>
 80079ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	b183      	cbz	r3, 80079d8 <_dtoa_r+0x900>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	3301      	adds	r3, #1
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f04f 0801 	mov.w	r8, #1
 80079c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af6a 	bne.w	80078a2 <_dtoa_r+0x7ca>
 80079ce:	2001      	movs	r0, #1
 80079d0:	e76f      	b.n	80078b2 <_dtoa_r+0x7da>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	e7f6      	b.n	80079c6 <_dtoa_r+0x8ee>
 80079d8:	4698      	mov	r8, r3
 80079da:	e7f4      	b.n	80079c6 <_dtoa_r+0x8ee>
 80079dc:	f43f af7d 	beq.w	80078da <_dtoa_r+0x802>
 80079e0:	4618      	mov	r0, r3
 80079e2:	301c      	adds	r0, #28
 80079e4:	e772      	b.n	80078cc <_dtoa_r+0x7f4>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc37      	bgt.n	8007a5c <_dtoa_r+0x984>
 80079ec:	9b06      	ldr	r3, [sp, #24]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	dd34      	ble.n	8007a5c <_dtoa_r+0x984>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	9b02      	ldr	r3, [sp, #8]
 80079f8:	b96b      	cbnz	r3, 8007a16 <_dtoa_r+0x93e>
 80079fa:	4631      	mov	r1, r6
 80079fc:	2205      	movs	r2, #5
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 fac0 	bl	8007f84 <__multadd>
 8007a04:	4601      	mov	r1, r0
 8007a06:	4606      	mov	r6, r0
 8007a08:	ee18 0a10 	vmov	r0, s16
 8007a0c:	f000 fcda 	bl	80083c4 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f73f adbb 	bgt.w	800758c <_dtoa_r+0x4b4>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	9d01      	ldr	r5, [sp, #4]
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	4631      	mov	r1, r6
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fa8b 	bl	8007f40 <_Bfree>
 8007a2a:	2f00      	cmp	r7, #0
 8007a2c:	f43f aea4 	beq.w	8007778 <_dtoa_r+0x6a0>
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d005      	beq.n	8007a42 <_dtoa_r+0x96a>
 8007a36:	45b8      	cmp	r8, r7
 8007a38:	d003      	beq.n	8007a42 <_dtoa_r+0x96a>
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fa7f 	bl	8007f40 <_Bfree>
 8007a42:	4639      	mov	r1, r7
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fa7b 	bl	8007f40 <_Bfree>
 8007a4a:	e695      	b.n	8007778 <_dtoa_r+0x6a0>
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	4637      	mov	r7, r6
 8007a50:	e7e1      	b.n	8007a16 <_dtoa_r+0x93e>
 8007a52:	9700      	str	r7, [sp, #0]
 8007a54:	4637      	mov	r7, r6
 8007a56:	e599      	b.n	800758c <_dtoa_r+0x4b4>
 8007a58:	40240000 	.word	0x40240000
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80ca 	beq.w	8007bf8 <_dtoa_r+0xb20>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	9302      	str	r3, [sp, #8]
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	dd05      	ble.n	8007a78 <_dtoa_r+0x9a0>
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fc37 	bl	80082e4 <__lshift>
 8007a76:	4607      	mov	r7, r0
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	d05b      	beq.n	8007b36 <_dtoa_r+0xa5e>
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fa1d 	bl	8007ec0 <_Balloc>
 8007a86:	4605      	mov	r5, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <_dtoa_r+0x9be>
 8007a8a:	4b87      	ldr	r3, [pc, #540]	; (8007ca8 <_dtoa_r+0xbd0>)
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a92:	f7ff bb3b 	b.w	800710c <_dtoa_r+0x34>
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	f107 010c 	add.w	r1, r7, #12
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7fe fdf5 	bl	8006690 <memcpy>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fc1a 	bl	80082e4 <__lshift>
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	f103 0901 	add.w	r9, r3, #1
 8007ab6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	f00a 0301 	and.w	r3, sl, #1
 8007ac2:	46b8      	mov	r8, r7
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	4631      	mov	r1, r6
 8007aca:	ee18 0a10 	vmov	r0, s16
 8007ace:	f7ff fa77 	bl	8006fc0 <quorem>
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	9002      	str	r0, [sp, #8]
 8007ad6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ada:	ee18 0a10 	vmov	r0, s16
 8007ade:	f000 fc71 	bl	80083c4 <__mcmp>
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	9003      	str	r0, [sp, #12]
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fc87 	bl	80083fc <__mdiff>
 8007aee:	68c2      	ldr	r2, [r0, #12]
 8007af0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007af4:	4605      	mov	r5, r0
 8007af6:	bb02      	cbnz	r2, 8007b3a <_dtoa_r+0xa62>
 8007af8:	4601      	mov	r1, r0
 8007afa:	ee18 0a10 	vmov	r0, s16
 8007afe:	f000 fc61 	bl	80083c4 <__mcmp>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	9207      	str	r2, [sp, #28]
 8007b0a:	f000 fa19 	bl	8007f40 <_Bfree>
 8007b0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b12:	ea43 0102 	orr.w	r1, r3, r2
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	464d      	mov	r5, r9
 8007b1c:	d10f      	bne.n	8007b3e <_dtoa_r+0xa66>
 8007b1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b22:	d02a      	beq.n	8007b7a <_dtoa_r+0xaa2>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd02      	ble.n	8007b30 <_dtoa_r+0xa58>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b30:	f88b a000 	strb.w	sl, [fp]
 8007b34:	e775      	b.n	8007a22 <_dtoa_r+0x94a>
 8007b36:	4638      	mov	r0, r7
 8007b38:	e7ba      	b.n	8007ab0 <_dtoa_r+0x9d8>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e7e2      	b.n	8007b04 <_dtoa_r+0xa2c>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db04      	blt.n	8007b4e <_dtoa_r+0xa76>
 8007b44:	9906      	ldr	r1, [sp, #24]
 8007b46:	430b      	orrs	r3, r1
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	d122      	bne.n	8007b94 <_dtoa_r+0xabc>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	ddee      	ble.n	8007b30 <_dtoa_r+0xa58>
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	2201      	movs	r2, #1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fbc3 	bl	80082e4 <__lshift>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	ee08 0a10 	vmov	s16, r0
 8007b64:	f000 fc2e 	bl	80083c4 <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dc03      	bgt.n	8007b74 <_dtoa_r+0xa9c>
 8007b6c:	d1e0      	bne.n	8007b30 <_dtoa_r+0xa58>
 8007b6e:	f01a 0f01 	tst.w	sl, #1
 8007b72:	d0dd      	beq.n	8007b30 <_dtoa_r+0xa58>
 8007b74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b78:	d1d7      	bne.n	8007b2a <_dtoa_r+0xa52>
 8007b7a:	2339      	movs	r3, #57	; 0x39
 8007b7c:	f88b 3000 	strb.w	r3, [fp]
 8007b80:	462b      	mov	r3, r5
 8007b82:	461d      	mov	r5, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b8a:	2a39      	cmp	r2, #57	; 0x39
 8007b8c:	d071      	beq.n	8007c72 <_dtoa_r+0xb9a>
 8007b8e:	3201      	adds	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e746      	b.n	8007a22 <_dtoa_r+0x94a>
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	dd07      	ble.n	8007ba8 <_dtoa_r+0xad0>
 8007b98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b9c:	d0ed      	beq.n	8007b7a <_dtoa_r+0xaa2>
 8007b9e:	f10a 0301 	add.w	r3, sl, #1
 8007ba2:	f88b 3000 	strb.w	r3, [fp]
 8007ba6:	e73c      	b.n	8007a22 <_dtoa_r+0x94a>
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bae:	4599      	cmp	r9, r3
 8007bb0:	d047      	beq.n	8007c42 <_dtoa_r+0xb6a>
 8007bb2:	ee18 1a10 	vmov	r1, s16
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 f9e2 	bl	8007f84 <__multadd>
 8007bc0:	45b8      	cmp	r8, r7
 8007bc2:	ee08 0a10 	vmov	s16, r0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 020a 	mov.w	r2, #10
 8007bce:	4641      	mov	r1, r8
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	d106      	bne.n	8007be2 <_dtoa_r+0xb0a>
 8007bd4:	f000 f9d6 	bl	8007f84 <__multadd>
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4607      	mov	r7, r0
 8007bdc:	f109 0901 	add.w	r9, r9, #1
 8007be0:	e772      	b.n	8007ac8 <_dtoa_r+0x9f0>
 8007be2:	f000 f9cf 	bl	8007f84 <__multadd>
 8007be6:	4639      	mov	r1, r7
 8007be8:	4680      	mov	r8, r0
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f9c8 	bl	8007f84 <__multadd>
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	e7f1      	b.n	8007bdc <_dtoa_r+0xb04>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	9d01      	ldr	r5, [sp, #4]
 8007bfe:	ee18 0a10 	vmov	r0, s16
 8007c02:	4631      	mov	r1, r6
 8007c04:	f7ff f9dc 	bl	8006fc0 <quorem>
 8007c08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c12:	1aea      	subs	r2, r5, r3
 8007c14:	9b02      	ldr	r3, [sp, #8]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	dd09      	ble.n	8007c2e <_dtoa_r+0xb56>
 8007c1a:	ee18 1a10 	vmov	r1, s16
 8007c1e:	2300      	movs	r3, #0
 8007c20:	220a      	movs	r2, #10
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f9ae 	bl	8007f84 <__multadd>
 8007c28:	ee08 0a10 	vmov	s16, r0
 8007c2c:	e7e7      	b.n	8007bfe <_dtoa_r+0xb26>
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bfc8      	it	gt
 8007c34:	461d      	movgt	r5, r3
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	bfd8      	it	le
 8007c3a:	2501      	movle	r5, #1
 8007c3c:	441d      	add	r5, r3
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	ee18 1a10 	vmov	r1, s16
 8007c46:	2201      	movs	r2, #1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fb4b 	bl	80082e4 <__lshift>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	ee08 0a10 	vmov	s16, r0
 8007c54:	f000 fbb6 	bl	80083c4 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	dc91      	bgt.n	8007b80 <_dtoa_r+0xaa8>
 8007c5c:	d102      	bne.n	8007c64 <_dtoa_r+0xb8c>
 8007c5e:	f01a 0f01 	tst.w	sl, #1
 8007c62:	d18d      	bne.n	8007b80 <_dtoa_r+0xaa8>
 8007c64:	462b      	mov	r3, r5
 8007c66:	461d      	mov	r5, r3
 8007c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c6c:	2a30      	cmp	r2, #48	; 0x30
 8007c6e:	d0fa      	beq.n	8007c66 <_dtoa_r+0xb8e>
 8007c70:	e6d7      	b.n	8007a22 <_dtoa_r+0x94a>
 8007c72:	9a01      	ldr	r2, [sp, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d184      	bne.n	8007b82 <_dtoa_r+0xaaa>
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2331      	movs	r3, #49	; 0x31
 8007c80:	7013      	strb	r3, [r2, #0]
 8007c82:	e6ce      	b.n	8007a22 <_dtoa_r+0x94a>
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <_dtoa_r+0xbd4>)
 8007c86:	f7ff ba95 	b.w	80071b4 <_dtoa_r+0xdc>
 8007c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f aa6e 	bne.w	800716e <_dtoa_r+0x96>
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <_dtoa_r+0xbd8>)
 8007c94:	f7ff ba8e 	b.w	80071b4 <_dtoa_r+0xdc>
 8007c98:	9b02      	ldr	r3, [sp, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dcae      	bgt.n	8007bfc <_dtoa_r+0xb24>
 8007c9e:	9b06      	ldr	r3, [sp, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f73f aea8 	bgt.w	80079f6 <_dtoa_r+0x91e>
 8007ca6:	e7a9      	b.n	8007bfc <_dtoa_r+0xb24>
 8007ca8:	0800922f 	.word	0x0800922f
 8007cac:	0800918c 	.word	0x0800918c
 8007cb0:	080091b0 	.word	0x080091b0

08007cb4 <std>:
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	4604      	mov	r4, r0
 8007cba:	e9c0 3300 	strd	r3, r3, [r0]
 8007cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cc2:	6083      	str	r3, [r0, #8]
 8007cc4:	8181      	strh	r1, [r0, #12]
 8007cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cc8:	81c2      	strh	r2, [r0, #14]
 8007cca:	6183      	str	r3, [r0, #24]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	2208      	movs	r2, #8
 8007cd0:	305c      	adds	r0, #92	; 0x5c
 8007cd2:	f7fe fceb 	bl	80066ac <memset>
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <std+0x38>)
 8007cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <std+0x3c>)
 8007cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <std+0x40>)
 8007ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ce2:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <std+0x44>)
 8007ce4:	6224      	str	r4, [r4, #32]
 8007ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08008a89 	.word	0x08008a89
 8007cf0:	08008aab 	.word	0x08008aab
 8007cf4:	08008ae3 	.word	0x08008ae3
 8007cf8:	08008b07 	.word	0x08008b07

08007cfc <_cleanup_r>:
 8007cfc:	4901      	ldr	r1, [pc, #4]	; (8007d04 <_cleanup_r+0x8>)
 8007cfe:	f000 b8af 	b.w	8007e60 <_fwalk_reent>
 8007d02:	bf00      	nop
 8007d04:	08008e1d 	.word	0x08008e1d

08007d08 <__sfmoreglue>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	2268      	movs	r2, #104	; 0x68
 8007d0c:	1e4d      	subs	r5, r1, #1
 8007d0e:	4355      	muls	r5, r2
 8007d10:	460e      	mov	r6, r1
 8007d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d16:	f000 fcd9 	bl	80086cc <_malloc_r>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	b140      	cbz	r0, 8007d30 <__sfmoreglue+0x28>
 8007d1e:	2100      	movs	r1, #0
 8007d20:	e9c0 1600 	strd	r1, r6, [r0]
 8007d24:	300c      	adds	r0, #12
 8007d26:	60a0      	str	r0, [r4, #8]
 8007d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d2c:	f7fe fcbe 	bl	80066ac <memset>
 8007d30:	4620      	mov	r0, r4
 8007d32:	bd70      	pop	{r4, r5, r6, pc}

08007d34 <__sfp_lock_acquire>:
 8007d34:	4801      	ldr	r0, [pc, #4]	; (8007d3c <__sfp_lock_acquire+0x8>)
 8007d36:	f000 b8b8 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	200009d5 	.word	0x200009d5

08007d40 <__sfp_lock_release>:
 8007d40:	4801      	ldr	r0, [pc, #4]	; (8007d48 <__sfp_lock_release+0x8>)
 8007d42:	f000 b8b3 	b.w	8007eac <__retarget_lock_release_recursive>
 8007d46:	bf00      	nop
 8007d48:	200009d5 	.word	0x200009d5

08007d4c <__sinit_lock_acquire>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	; (8007d54 <__sinit_lock_acquire+0x8>)
 8007d4e:	f000 b8ac 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8007d52:	bf00      	nop
 8007d54:	200009d6 	.word	0x200009d6

08007d58 <__sinit_lock_release>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__sinit_lock_release+0x8>)
 8007d5a:	f000 b8a7 	b.w	8007eac <__retarget_lock_release_recursive>
 8007d5e:	bf00      	nop
 8007d60:	200009d6 	.word	0x200009d6

08007d64 <__sinit>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	f7ff fff0 	bl	8007d4c <__sinit_lock_acquire>
 8007d6c:	69a3      	ldr	r3, [r4, #24]
 8007d6e:	b11b      	cbz	r3, 8007d78 <__sinit+0x14>
 8007d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d74:	f7ff bff0 	b.w	8007d58 <__sinit_lock_release>
 8007d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <__sinit+0x68>)
 8007d80:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <__sinit+0x6c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d86:	42a3      	cmp	r3, r4
 8007d88:	bf04      	itt	eq
 8007d8a:	2301      	moveq	r3, #1
 8007d8c:	61a3      	streq	r3, [r4, #24]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 f820 	bl	8007dd4 <__sfp>
 8007d94:	6060      	str	r0, [r4, #4]
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 f81c 	bl	8007dd4 <__sfp>
 8007d9c:	60a0      	str	r0, [r4, #8]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 f818 	bl	8007dd4 <__sfp>
 8007da4:	2200      	movs	r2, #0
 8007da6:	60e0      	str	r0, [r4, #12]
 8007da8:	2104      	movs	r1, #4
 8007daa:	6860      	ldr	r0, [r4, #4]
 8007dac:	f7ff ff82 	bl	8007cb4 <std>
 8007db0:	68a0      	ldr	r0, [r4, #8]
 8007db2:	2201      	movs	r2, #1
 8007db4:	2109      	movs	r1, #9
 8007db6:	f7ff ff7d 	bl	8007cb4 <std>
 8007dba:	68e0      	ldr	r0, [r4, #12]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	2112      	movs	r1, #18
 8007dc0:	f7ff ff78 	bl	8007cb4 <std>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	61a3      	str	r3, [r4, #24]
 8007dc8:	e7d2      	b.n	8007d70 <__sinit+0xc>
 8007dca:	bf00      	nop
 8007dcc:	08009178 	.word	0x08009178
 8007dd0:	08007cfd 	.word	0x08007cfd

08007dd4 <__sfp>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	f7ff ffac 	bl	8007d34 <__sfp_lock_acquire>
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	; (8007e58 <__sfp+0x84>)
 8007dde:	681e      	ldr	r6, [r3, #0]
 8007de0:	69b3      	ldr	r3, [r6, #24]
 8007de2:	b913      	cbnz	r3, 8007dea <__sfp+0x16>
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7ff ffbd 	bl	8007d64 <__sinit>
 8007dea:	3648      	adds	r6, #72	; 0x48
 8007dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	d503      	bpl.n	8007dfc <__sfp+0x28>
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	b30b      	cbz	r3, 8007e3c <__sfp+0x68>
 8007df8:	6836      	ldr	r6, [r6, #0]
 8007dfa:	e7f7      	b.n	8007dec <__sfp+0x18>
 8007dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e00:	b9d5      	cbnz	r5, 8007e38 <__sfp+0x64>
 8007e02:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <__sfp+0x88>)
 8007e04:	60e3      	str	r3, [r4, #12]
 8007e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e0c:	f000 f84c 	bl	8007ea8 <__retarget_lock_init_recursive>
 8007e10:	f7ff ff96 	bl	8007d40 <__sfp_lock_release>
 8007e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e1c:	6025      	str	r5, [r4, #0]
 8007e1e:	61a5      	str	r5, [r4, #24]
 8007e20:	2208      	movs	r2, #8
 8007e22:	4629      	mov	r1, r5
 8007e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e28:	f7fe fc40 	bl	80066ac <memset>
 8007e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e34:	4620      	mov	r0, r4
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	3468      	adds	r4, #104	; 0x68
 8007e3a:	e7d9      	b.n	8007df0 <__sfp+0x1c>
 8007e3c:	2104      	movs	r1, #4
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7ff ff62 	bl	8007d08 <__sfmoreglue>
 8007e44:	4604      	mov	r4, r0
 8007e46:	6030      	str	r0, [r6, #0]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d1d5      	bne.n	8007df8 <__sfp+0x24>
 8007e4c:	f7ff ff78 	bl	8007d40 <__sfp_lock_release>
 8007e50:	230c      	movs	r3, #12
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	e7ee      	b.n	8007e34 <__sfp+0x60>
 8007e56:	bf00      	nop
 8007e58:	08009178 	.word	0x08009178
 8007e5c:	ffff0001 	.word	0xffff0001

08007e60 <_fwalk_reent>:
 8007e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e64:	4606      	mov	r6, r0
 8007e66:	4688      	mov	r8, r1
 8007e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e6c:	2700      	movs	r7, #0
 8007e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e72:	f1b9 0901 	subs.w	r9, r9, #1
 8007e76:	d505      	bpl.n	8007e84 <_fwalk_reent+0x24>
 8007e78:	6824      	ldr	r4, [r4, #0]
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	d1f7      	bne.n	8007e6e <_fwalk_reent+0xe>
 8007e7e:	4638      	mov	r0, r7
 8007e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e84:	89ab      	ldrh	r3, [r5, #12]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d907      	bls.n	8007e9a <_fwalk_reent+0x3a>
 8007e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	d003      	beq.n	8007e9a <_fwalk_reent+0x3a>
 8007e92:	4629      	mov	r1, r5
 8007e94:	4630      	mov	r0, r6
 8007e96:	47c0      	blx	r8
 8007e98:	4307      	orrs	r7, r0
 8007e9a:	3568      	adds	r5, #104	; 0x68
 8007e9c:	e7e9      	b.n	8007e72 <_fwalk_reent+0x12>
	...

08007ea0 <_localeconv_r>:
 8007ea0:	4800      	ldr	r0, [pc, #0]	; (8007ea4 <_localeconv_r+0x4>)
 8007ea2:	4770      	bx	lr
 8007ea4:	2000016c 	.word	0x2000016c

08007ea8 <__retarget_lock_init_recursive>:
 8007ea8:	4770      	bx	lr

08007eaa <__retarget_lock_acquire_recursive>:
 8007eaa:	4770      	bx	lr

08007eac <__retarget_lock_release_recursive>:
 8007eac:	4770      	bx	lr
	...

08007eb0 <malloc>:
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <malloc+0xc>)
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	f000 bc09 	b.w	80086cc <_malloc_r>
 8007eba:	bf00      	nop
 8007ebc:	20000018 	.word	0x20000018

08007ec0 <_Balloc>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	b976      	cbnz	r6, 8007ee8 <_Balloc+0x28>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f7ff fff0 	bl	8007eb0 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_Balloc+0x20>
 8007ed6:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <_Balloc+0x78>)
 8007ed8:	4818      	ldr	r0, [pc, #96]	; (8007f3c <_Balloc+0x7c>)
 8007eda:	2166      	movs	r1, #102	; 0x66
 8007edc:	f000 feea 	bl	8008cb4 <__assert_func>
 8007ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee4:	6006      	str	r6, [r0, #0]
 8007ee6:	60c6      	str	r6, [r0, #12]
 8007ee8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007eea:	68f3      	ldr	r3, [r6, #12]
 8007eec:	b183      	cbz	r3, 8007f10 <_Balloc+0x50>
 8007eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef6:	b9b8      	cbnz	r0, 8007f28 <_Balloc+0x68>
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f605 	lsl.w	r6, r1, r5
 8007efe:	1d72      	adds	r2, r6, #5
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fb60 	bl	80085c8 <_calloc_r>
 8007f08:	b160      	cbz	r0, 8007f24 <_Balloc+0x64>
 8007f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f0e:	e00e      	b.n	8007f2e <_Balloc+0x6e>
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	2104      	movs	r1, #4
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fb57 	bl	80085c8 <_calloc_r>
 8007f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1c:	60f0      	str	r0, [r6, #12]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e4      	bne.n	8007eee <_Balloc+0x2e>
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	6802      	ldr	r2, [r0, #0]
 8007f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f34:	e7f7      	b.n	8007f26 <_Balloc+0x66>
 8007f36:	bf00      	nop
 8007f38:	080091bd 	.word	0x080091bd
 8007f3c:	080092a0 	.word	0x080092a0

08007f40 <_Bfree>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Bfree+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ffb0 	bl	8007eb0 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6268      	str	r0, [r5, #36]	; 0x24
 8007f54:	b920      	cbnz	r0, 8007f60 <_Bfree+0x20>
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <_Bfree+0x3c>)
 8007f58:	4809      	ldr	r0, [pc, #36]	; (8007f80 <_Bfree+0x40>)
 8007f5a:	218a      	movs	r1, #138	; 0x8a
 8007f5c:	f000 feaa 	bl	8008cb4 <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	b13c      	cbz	r4, 8007f7a <_Bfree+0x3a>
 8007f6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f74:	6021      	str	r1, [r4, #0]
 8007f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	080091bd 	.word	0x080091bd
 8007f80:	080092a0 	.word	0x080092a0

08007f84 <__multadd>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	690d      	ldr	r5, [r1, #16]
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	461e      	mov	r6, r3
 8007f90:	f101 0c14 	add.w	ip, r1, #20
 8007f94:	2000      	movs	r0, #0
 8007f96:	f8dc 3000 	ldr.w	r3, [ip]
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007fa0:	0c1e      	lsrs	r6, r3, #16
 8007fa2:	0c0b      	lsrs	r3, r1, #16
 8007fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fa8:	b289      	uxth	r1, r1
 8007faa:	3001      	adds	r0, #1
 8007fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fb0:	4285      	cmp	r5, r0
 8007fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fba:	dcec      	bgt.n	8007f96 <__multadd+0x12>
 8007fbc:	b30e      	cbz	r6, 8008002 <__multadd+0x7e>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc19      	bgt.n	8007ff8 <__multadd+0x74>
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	3101      	adds	r1, #1
 8007fca:	f7ff ff79 	bl	8007ec0 <_Balloc>
 8007fce:	4680      	mov	r8, r0
 8007fd0:	b928      	cbnz	r0, 8007fde <__multadd+0x5a>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <__multadd+0x84>)
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <__multadd+0x88>)
 8007fd8:	21b5      	movs	r1, #181	; 0xb5
 8007fda:	f000 fe6b 	bl	8008cb4 <__assert_func>
 8007fde:	6922      	ldr	r2, [r4, #16]
 8007fe0:	3202      	adds	r2, #2
 8007fe2:	f104 010c 	add.w	r1, r4, #12
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	300c      	adds	r0, #12
 8007fea:	f7fe fb51 	bl	8006690 <memcpy>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ffa5 	bl	8007f40 <_Bfree>
 8007ff6:	4644      	mov	r4, r8
 8007ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	615e      	str	r6, [r3, #20]
 8008000:	6125      	str	r5, [r4, #16]
 8008002:	4620      	mov	r0, r4
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	0800922f 	.word	0x0800922f
 800800c:	080092a0 	.word	0x080092a0

08008010 <__hi0bits>:
 8008010:	0c03      	lsrs	r3, r0, #16
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	b9d3      	cbnz	r3, 800804c <__hi0bits+0x3c>
 8008016:	0400      	lsls	r0, r0, #16
 8008018:	2310      	movs	r3, #16
 800801a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800801e:	bf04      	itt	eq
 8008020:	0200      	lsleq	r0, r0, #8
 8008022:	3308      	addeq	r3, #8
 8008024:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008028:	bf04      	itt	eq
 800802a:	0100      	lsleq	r0, r0, #4
 800802c:	3304      	addeq	r3, #4
 800802e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008032:	bf04      	itt	eq
 8008034:	0080      	lsleq	r0, r0, #2
 8008036:	3302      	addeq	r3, #2
 8008038:	2800      	cmp	r0, #0
 800803a:	db05      	blt.n	8008048 <__hi0bits+0x38>
 800803c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008040:	f103 0301 	add.w	r3, r3, #1
 8008044:	bf08      	it	eq
 8008046:	2320      	moveq	r3, #32
 8008048:	4618      	mov	r0, r3
 800804a:	4770      	bx	lr
 800804c:	2300      	movs	r3, #0
 800804e:	e7e4      	b.n	800801a <__hi0bits+0xa>

08008050 <__lo0bits>:
 8008050:	6803      	ldr	r3, [r0, #0]
 8008052:	f013 0207 	ands.w	r2, r3, #7
 8008056:	4601      	mov	r1, r0
 8008058:	d00b      	beq.n	8008072 <__lo0bits+0x22>
 800805a:	07da      	lsls	r2, r3, #31
 800805c:	d423      	bmi.n	80080a6 <__lo0bits+0x56>
 800805e:	0798      	lsls	r0, r3, #30
 8008060:	bf49      	itett	mi
 8008062:	085b      	lsrmi	r3, r3, #1
 8008064:	089b      	lsrpl	r3, r3, #2
 8008066:	2001      	movmi	r0, #1
 8008068:	600b      	strmi	r3, [r1, #0]
 800806a:	bf5c      	itt	pl
 800806c:	600b      	strpl	r3, [r1, #0]
 800806e:	2002      	movpl	r0, #2
 8008070:	4770      	bx	lr
 8008072:	b298      	uxth	r0, r3
 8008074:	b9a8      	cbnz	r0, 80080a2 <__lo0bits+0x52>
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	2010      	movs	r0, #16
 800807a:	b2da      	uxtb	r2, r3
 800807c:	b90a      	cbnz	r2, 8008082 <__lo0bits+0x32>
 800807e:	3008      	adds	r0, #8
 8008080:	0a1b      	lsrs	r3, r3, #8
 8008082:	071a      	lsls	r2, r3, #28
 8008084:	bf04      	itt	eq
 8008086:	091b      	lsreq	r3, r3, #4
 8008088:	3004      	addeq	r0, #4
 800808a:	079a      	lsls	r2, r3, #30
 800808c:	bf04      	itt	eq
 800808e:	089b      	lsreq	r3, r3, #2
 8008090:	3002      	addeq	r0, #2
 8008092:	07da      	lsls	r2, r3, #31
 8008094:	d403      	bmi.n	800809e <__lo0bits+0x4e>
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	f100 0001 	add.w	r0, r0, #1
 800809c:	d005      	beq.n	80080aa <__lo0bits+0x5a>
 800809e:	600b      	str	r3, [r1, #0]
 80080a0:	4770      	bx	lr
 80080a2:	4610      	mov	r0, r2
 80080a4:	e7e9      	b.n	800807a <__lo0bits+0x2a>
 80080a6:	2000      	movs	r0, #0
 80080a8:	4770      	bx	lr
 80080aa:	2020      	movs	r0, #32
 80080ac:	4770      	bx	lr
	...

080080b0 <__i2b>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	460c      	mov	r4, r1
 80080b4:	2101      	movs	r1, #1
 80080b6:	f7ff ff03 	bl	8007ec0 <_Balloc>
 80080ba:	4602      	mov	r2, r0
 80080bc:	b928      	cbnz	r0, 80080ca <__i2b+0x1a>
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <__i2b+0x24>)
 80080c0:	4805      	ldr	r0, [pc, #20]	; (80080d8 <__i2b+0x28>)
 80080c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080c6:	f000 fdf5 	bl	8008cb4 <__assert_func>
 80080ca:	2301      	movs	r3, #1
 80080cc:	6144      	str	r4, [r0, #20]
 80080ce:	6103      	str	r3, [r0, #16]
 80080d0:	bd10      	pop	{r4, pc}
 80080d2:	bf00      	nop
 80080d4:	0800922f 	.word	0x0800922f
 80080d8:	080092a0 	.word	0x080092a0

080080dc <__multiply>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4691      	mov	r9, r2
 80080e2:	690a      	ldr	r2, [r1, #16]
 80080e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bfb8      	it	lt
 80080ec:	460b      	movlt	r3, r1
 80080ee:	460c      	mov	r4, r1
 80080f0:	bfbc      	itt	lt
 80080f2:	464c      	movlt	r4, r9
 80080f4:	4699      	movlt	r9, r3
 80080f6:	6927      	ldr	r7, [r4, #16]
 80080f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	6861      	ldr	r1, [r4, #4]
 8008100:	eb07 060a 	add.w	r6, r7, sl
 8008104:	42b3      	cmp	r3, r6
 8008106:	b085      	sub	sp, #20
 8008108:	bfb8      	it	lt
 800810a:	3101      	addlt	r1, #1
 800810c:	f7ff fed8 	bl	8007ec0 <_Balloc>
 8008110:	b930      	cbnz	r0, 8008120 <__multiply+0x44>
 8008112:	4602      	mov	r2, r0
 8008114:	4b44      	ldr	r3, [pc, #272]	; (8008228 <__multiply+0x14c>)
 8008116:	4845      	ldr	r0, [pc, #276]	; (800822c <__multiply+0x150>)
 8008118:	f240 115d 	movw	r1, #349	; 0x15d
 800811c:	f000 fdca 	bl	8008cb4 <__assert_func>
 8008120:	f100 0514 	add.w	r5, r0, #20
 8008124:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008128:	462b      	mov	r3, r5
 800812a:	2200      	movs	r2, #0
 800812c:	4543      	cmp	r3, r8
 800812e:	d321      	bcc.n	8008174 <__multiply+0x98>
 8008130:	f104 0314 	add.w	r3, r4, #20
 8008134:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008138:	f109 0314 	add.w	r3, r9, #20
 800813c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	1b3a      	subs	r2, r7, r4
 8008144:	3a15      	subs	r2, #21
 8008146:	f022 0203 	bic.w	r2, r2, #3
 800814a:	3204      	adds	r2, #4
 800814c:	f104 0115 	add.w	r1, r4, #21
 8008150:	428f      	cmp	r7, r1
 8008152:	bf38      	it	cc
 8008154:	2204      	movcc	r2, #4
 8008156:	9201      	str	r2, [sp, #4]
 8008158:	9a02      	ldr	r2, [sp, #8]
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	429a      	cmp	r2, r3
 800815e:	d80c      	bhi.n	800817a <__multiply+0x9e>
 8008160:	2e00      	cmp	r6, #0
 8008162:	dd03      	ble.n	800816c <__multiply+0x90>
 8008164:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008168:	2b00      	cmp	r3, #0
 800816a:	d05a      	beq.n	8008222 <__multiply+0x146>
 800816c:	6106      	str	r6, [r0, #16]
 800816e:	b005      	add	sp, #20
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	f843 2b04 	str.w	r2, [r3], #4
 8008178:	e7d8      	b.n	800812c <__multiply+0x50>
 800817a:	f8b3 a000 	ldrh.w	sl, [r3]
 800817e:	f1ba 0f00 	cmp.w	sl, #0
 8008182:	d024      	beq.n	80081ce <__multiply+0xf2>
 8008184:	f104 0e14 	add.w	lr, r4, #20
 8008188:	46a9      	mov	r9, r5
 800818a:	f04f 0c00 	mov.w	ip, #0
 800818e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008192:	f8d9 1000 	ldr.w	r1, [r9]
 8008196:	fa1f fb82 	uxth.w	fp, r2
 800819a:	b289      	uxth	r1, r1
 800819c:	fb0a 110b 	mla	r1, sl, fp, r1
 80081a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081a4:	f8d9 2000 	ldr.w	r2, [r9]
 80081a8:	4461      	add	r1, ip
 80081aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80081b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081b6:	b289      	uxth	r1, r1
 80081b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081bc:	4577      	cmp	r7, lr
 80081be:	f849 1b04 	str.w	r1, [r9], #4
 80081c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081c6:	d8e2      	bhi.n	800818e <__multiply+0xb2>
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	f845 c002 	str.w	ip, [r5, r2]
 80081ce:	9a03      	ldr	r2, [sp, #12]
 80081d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081d4:	3304      	adds	r3, #4
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	d020      	beq.n	800821e <__multiply+0x142>
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	f104 0c14 	add.w	ip, r4, #20
 80081e2:	46ae      	mov	lr, r5
 80081e4:	f04f 0a00 	mov.w	sl, #0
 80081e8:	f8bc b000 	ldrh.w	fp, [ip]
 80081ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081f0:	fb09 220b 	mla	r2, r9, fp, r2
 80081f4:	4492      	add	sl, r2
 80081f6:	b289      	uxth	r1, r1
 80081f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80081fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008200:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008204:	f8be 1000 	ldrh.w	r1, [lr]
 8008208:	0c12      	lsrs	r2, r2, #16
 800820a:	fb09 1102 	mla	r1, r9, r2, r1
 800820e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008212:	4567      	cmp	r7, ip
 8008214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008218:	d8e6      	bhi.n	80081e8 <__multiply+0x10c>
 800821a:	9a01      	ldr	r2, [sp, #4]
 800821c:	50a9      	str	r1, [r5, r2]
 800821e:	3504      	adds	r5, #4
 8008220:	e79a      	b.n	8008158 <__multiply+0x7c>
 8008222:	3e01      	subs	r6, #1
 8008224:	e79c      	b.n	8008160 <__multiply+0x84>
 8008226:	bf00      	nop
 8008228:	0800922f 	.word	0x0800922f
 800822c:	080092a0 	.word	0x080092a0

08008230 <__pow5mult>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	4615      	mov	r5, r2
 8008236:	f012 0203 	ands.w	r2, r2, #3
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	d007      	beq.n	8008250 <__pow5mult+0x20>
 8008240:	4c25      	ldr	r4, [pc, #148]	; (80082d8 <__pow5mult+0xa8>)
 8008242:	3a01      	subs	r2, #1
 8008244:	2300      	movs	r3, #0
 8008246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800824a:	f7ff fe9b 	bl	8007f84 <__multadd>
 800824e:	4607      	mov	r7, r0
 8008250:	10ad      	asrs	r5, r5, #2
 8008252:	d03d      	beq.n	80082d0 <__pow5mult+0xa0>
 8008254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008256:	b97c      	cbnz	r4, 8008278 <__pow5mult+0x48>
 8008258:	2010      	movs	r0, #16
 800825a:	f7ff fe29 	bl	8007eb0 <malloc>
 800825e:	4602      	mov	r2, r0
 8008260:	6270      	str	r0, [r6, #36]	; 0x24
 8008262:	b928      	cbnz	r0, 8008270 <__pow5mult+0x40>
 8008264:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <__pow5mult+0xac>)
 8008266:	481e      	ldr	r0, [pc, #120]	; (80082e0 <__pow5mult+0xb0>)
 8008268:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800826c:	f000 fd22 	bl	8008cb4 <__assert_func>
 8008270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008274:	6004      	str	r4, [r0, #0]
 8008276:	60c4      	str	r4, [r0, #12]
 8008278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800827c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008280:	b94c      	cbnz	r4, 8008296 <__pow5mult+0x66>
 8008282:	f240 2171 	movw	r1, #625	; 0x271
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff12 	bl	80080b0 <__i2b>
 800828c:	2300      	movs	r3, #0
 800828e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008292:	4604      	mov	r4, r0
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	07eb      	lsls	r3, r5, #31
 800829c:	d50a      	bpl.n	80082b4 <__pow5mult+0x84>
 800829e:	4639      	mov	r1, r7
 80082a0:	4622      	mov	r2, r4
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff ff1a 	bl	80080dc <__multiply>
 80082a8:	4639      	mov	r1, r7
 80082aa:	4680      	mov	r8, r0
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fe47 	bl	8007f40 <_Bfree>
 80082b2:	4647      	mov	r7, r8
 80082b4:	106d      	asrs	r5, r5, #1
 80082b6:	d00b      	beq.n	80082d0 <__pow5mult+0xa0>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	b938      	cbnz	r0, 80082cc <__pow5mult+0x9c>
 80082bc:	4622      	mov	r2, r4
 80082be:	4621      	mov	r1, r4
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff ff0b 	bl	80080dc <__multiply>
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	f8c0 9000 	str.w	r9, [r0]
 80082cc:	4604      	mov	r4, r0
 80082ce:	e7e4      	b.n	800829a <__pow5mult+0x6a>
 80082d0:	4638      	mov	r0, r7
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	bf00      	nop
 80082d8:	080093f0 	.word	0x080093f0
 80082dc:	080091bd 	.word	0x080091bd
 80082e0:	080092a0 	.word	0x080092a0

080082e4 <__lshift>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	6849      	ldr	r1, [r1, #4]
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082f2:	68a3      	ldr	r3, [r4, #8]
 80082f4:	4607      	mov	r7, r0
 80082f6:	4691      	mov	r9, r2
 80082f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082fc:	f108 0601 	add.w	r6, r8, #1
 8008300:	42b3      	cmp	r3, r6
 8008302:	db0b      	blt.n	800831c <__lshift+0x38>
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fddb 	bl	8007ec0 <_Balloc>
 800830a:	4605      	mov	r5, r0
 800830c:	b948      	cbnz	r0, 8008322 <__lshift+0x3e>
 800830e:	4602      	mov	r2, r0
 8008310:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <__lshift+0xd8>)
 8008312:	482b      	ldr	r0, [pc, #172]	; (80083c0 <__lshift+0xdc>)
 8008314:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008318:	f000 fccc 	bl	8008cb4 <__assert_func>
 800831c:	3101      	adds	r1, #1
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	e7ee      	b.n	8008300 <__lshift+0x1c>
 8008322:	2300      	movs	r3, #0
 8008324:	f100 0114 	add.w	r1, r0, #20
 8008328:	f100 0210 	add.w	r2, r0, #16
 800832c:	4618      	mov	r0, r3
 800832e:	4553      	cmp	r3, sl
 8008330:	db37      	blt.n	80083a2 <__lshift+0xbe>
 8008332:	6920      	ldr	r0, [r4, #16]
 8008334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008338:	f104 0314 	add.w	r3, r4, #20
 800833c:	f019 091f 	ands.w	r9, r9, #31
 8008340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008348:	d02f      	beq.n	80083aa <__lshift+0xc6>
 800834a:	f1c9 0e20 	rsb	lr, r9, #32
 800834e:	468a      	mov	sl, r1
 8008350:	f04f 0c00 	mov.w	ip, #0
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	fa02 f209 	lsl.w	r2, r2, r9
 800835a:	ea42 020c 	orr.w	r2, r2, ip
 800835e:	f84a 2b04 	str.w	r2, [sl], #4
 8008362:	f853 2b04 	ldr.w	r2, [r3], #4
 8008366:	4298      	cmp	r0, r3
 8008368:	fa22 fc0e 	lsr.w	ip, r2, lr
 800836c:	d8f2      	bhi.n	8008354 <__lshift+0x70>
 800836e:	1b03      	subs	r3, r0, r4
 8008370:	3b15      	subs	r3, #21
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	3304      	adds	r3, #4
 8008378:	f104 0215 	add.w	r2, r4, #21
 800837c:	4290      	cmp	r0, r2
 800837e:	bf38      	it	cc
 8008380:	2304      	movcc	r3, #4
 8008382:	f841 c003 	str.w	ip, [r1, r3]
 8008386:	f1bc 0f00 	cmp.w	ip, #0
 800838a:	d001      	beq.n	8008390 <__lshift+0xac>
 800838c:	f108 0602 	add.w	r6, r8, #2
 8008390:	3e01      	subs	r6, #1
 8008392:	4638      	mov	r0, r7
 8008394:	612e      	str	r6, [r5, #16]
 8008396:	4621      	mov	r1, r4
 8008398:	f7ff fdd2 	bl	8007f40 <_Bfree>
 800839c:	4628      	mov	r0, r5
 800839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083a6:	3301      	adds	r3, #1
 80083a8:	e7c1      	b.n	800832e <__lshift+0x4a>
 80083aa:	3904      	subs	r1, #4
 80083ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80083b4:	4298      	cmp	r0, r3
 80083b6:	d8f9      	bhi.n	80083ac <__lshift+0xc8>
 80083b8:	e7ea      	b.n	8008390 <__lshift+0xac>
 80083ba:	bf00      	nop
 80083bc:	0800922f 	.word	0x0800922f
 80083c0:	080092a0 	.word	0x080092a0

080083c4 <__mcmp>:
 80083c4:	b530      	push	{r4, r5, lr}
 80083c6:	6902      	ldr	r2, [r0, #16]
 80083c8:	690c      	ldr	r4, [r1, #16]
 80083ca:	1b12      	subs	r2, r2, r4
 80083cc:	d10e      	bne.n	80083ec <__mcmp+0x28>
 80083ce:	f100 0314 	add.w	r3, r0, #20
 80083d2:	3114      	adds	r1, #20
 80083d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083e4:	42a5      	cmp	r5, r4
 80083e6:	d003      	beq.n	80083f0 <__mcmp+0x2c>
 80083e8:	d305      	bcc.n	80083f6 <__mcmp+0x32>
 80083ea:	2201      	movs	r2, #1
 80083ec:	4610      	mov	r0, r2
 80083ee:	bd30      	pop	{r4, r5, pc}
 80083f0:	4283      	cmp	r3, r0
 80083f2:	d3f3      	bcc.n	80083dc <__mcmp+0x18>
 80083f4:	e7fa      	b.n	80083ec <__mcmp+0x28>
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083fa:	e7f7      	b.n	80083ec <__mcmp+0x28>

080083fc <__mdiff>:
 80083fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460c      	mov	r4, r1
 8008402:	4606      	mov	r6, r0
 8008404:	4611      	mov	r1, r2
 8008406:	4620      	mov	r0, r4
 8008408:	4690      	mov	r8, r2
 800840a:	f7ff ffdb 	bl	80083c4 <__mcmp>
 800840e:	1e05      	subs	r5, r0, #0
 8008410:	d110      	bne.n	8008434 <__mdiff+0x38>
 8008412:	4629      	mov	r1, r5
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff fd53 	bl	8007ec0 <_Balloc>
 800841a:	b930      	cbnz	r0, 800842a <__mdiff+0x2e>
 800841c:	4b3a      	ldr	r3, [pc, #232]	; (8008508 <__mdiff+0x10c>)
 800841e:	4602      	mov	r2, r0
 8008420:	f240 2132 	movw	r1, #562	; 0x232
 8008424:	4839      	ldr	r0, [pc, #228]	; (800850c <__mdiff+0x110>)
 8008426:	f000 fc45 	bl	8008cb4 <__assert_func>
 800842a:	2301      	movs	r3, #1
 800842c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	bfa4      	itt	ge
 8008436:	4643      	movge	r3, r8
 8008438:	46a0      	movge	r8, r4
 800843a:	4630      	mov	r0, r6
 800843c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008440:	bfa6      	itte	ge
 8008442:	461c      	movge	r4, r3
 8008444:	2500      	movge	r5, #0
 8008446:	2501      	movlt	r5, #1
 8008448:	f7ff fd3a 	bl	8007ec0 <_Balloc>
 800844c:	b920      	cbnz	r0, 8008458 <__mdiff+0x5c>
 800844e:	4b2e      	ldr	r3, [pc, #184]	; (8008508 <__mdiff+0x10c>)
 8008450:	4602      	mov	r2, r0
 8008452:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008456:	e7e5      	b.n	8008424 <__mdiff+0x28>
 8008458:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800845c:	6926      	ldr	r6, [r4, #16]
 800845e:	60c5      	str	r5, [r0, #12]
 8008460:	f104 0914 	add.w	r9, r4, #20
 8008464:	f108 0514 	add.w	r5, r8, #20
 8008468:	f100 0e14 	add.w	lr, r0, #20
 800846c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008470:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008474:	f108 0210 	add.w	r2, r8, #16
 8008478:	46f2      	mov	sl, lr
 800847a:	2100      	movs	r1, #0
 800847c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008484:	fa1f f883 	uxth.w	r8, r3
 8008488:	fa11 f18b 	uxtah	r1, r1, fp
 800848c:	0c1b      	lsrs	r3, r3, #16
 800848e:	eba1 0808 	sub.w	r8, r1, r8
 8008492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800849a:	fa1f f888 	uxth.w	r8, r8
 800849e:	1419      	asrs	r1, r3, #16
 80084a0:	454e      	cmp	r6, r9
 80084a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084a6:	f84a 3b04 	str.w	r3, [sl], #4
 80084aa:	d8e7      	bhi.n	800847c <__mdiff+0x80>
 80084ac:	1b33      	subs	r3, r6, r4
 80084ae:	3b15      	subs	r3, #21
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	3304      	adds	r3, #4
 80084b6:	3415      	adds	r4, #21
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	bf38      	it	cc
 80084bc:	2304      	movcc	r3, #4
 80084be:	441d      	add	r5, r3
 80084c0:	4473      	add	r3, lr
 80084c2:	469e      	mov	lr, r3
 80084c4:	462e      	mov	r6, r5
 80084c6:	4566      	cmp	r6, ip
 80084c8:	d30e      	bcc.n	80084e8 <__mdiff+0xec>
 80084ca:	f10c 0203 	add.w	r2, ip, #3
 80084ce:	1b52      	subs	r2, r2, r5
 80084d0:	f022 0203 	bic.w	r2, r2, #3
 80084d4:	3d03      	subs	r5, #3
 80084d6:	45ac      	cmp	ip, r5
 80084d8:	bf38      	it	cc
 80084da:	2200      	movcc	r2, #0
 80084dc:	441a      	add	r2, r3
 80084de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084e2:	b17b      	cbz	r3, 8008504 <__mdiff+0x108>
 80084e4:	6107      	str	r7, [r0, #16]
 80084e6:	e7a3      	b.n	8008430 <__mdiff+0x34>
 80084e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80084ec:	fa11 f288 	uxtah	r2, r1, r8
 80084f0:	1414      	asrs	r4, r2, #16
 80084f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084f6:	b292      	uxth	r2, r2
 80084f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80084fc:	f84e 2b04 	str.w	r2, [lr], #4
 8008500:	1421      	asrs	r1, r4, #16
 8008502:	e7e0      	b.n	80084c6 <__mdiff+0xca>
 8008504:	3f01      	subs	r7, #1
 8008506:	e7ea      	b.n	80084de <__mdiff+0xe2>
 8008508:	0800922f 	.word	0x0800922f
 800850c:	080092a0 	.word	0x080092a0

08008510 <__d2b>:
 8008510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008514:	4689      	mov	r9, r1
 8008516:	2101      	movs	r1, #1
 8008518:	ec57 6b10 	vmov	r6, r7, d0
 800851c:	4690      	mov	r8, r2
 800851e:	f7ff fccf 	bl	8007ec0 <_Balloc>
 8008522:	4604      	mov	r4, r0
 8008524:	b930      	cbnz	r0, 8008534 <__d2b+0x24>
 8008526:	4602      	mov	r2, r0
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <__d2b+0xb0>)
 800852a:	4826      	ldr	r0, [pc, #152]	; (80085c4 <__d2b+0xb4>)
 800852c:	f240 310a 	movw	r1, #778	; 0x30a
 8008530:	f000 fbc0 	bl	8008cb4 <__assert_func>
 8008534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800853c:	bb35      	cbnz	r5, 800858c <__d2b+0x7c>
 800853e:	2e00      	cmp	r6, #0
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	d028      	beq.n	8008596 <__d2b+0x86>
 8008544:	4668      	mov	r0, sp
 8008546:	9600      	str	r6, [sp, #0]
 8008548:	f7ff fd82 	bl	8008050 <__lo0bits>
 800854c:	9900      	ldr	r1, [sp, #0]
 800854e:	b300      	cbz	r0, 8008592 <__d2b+0x82>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	430b      	orrs	r3, r1
 800855c:	40c2      	lsrs	r2, r0
 800855e:	6163      	str	r3, [r4, #20]
 8008560:	9201      	str	r2, [sp, #4]
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	61a3      	str	r3, [r4, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf14      	ite	ne
 800856a:	2202      	movne	r2, #2
 800856c:	2201      	moveq	r2, #1
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	b1d5      	cbz	r5, 80085a8 <__d2b+0x98>
 8008572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008576:	4405      	add	r5, r0
 8008578:	f8c9 5000 	str.w	r5, [r9]
 800857c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008580:	f8c8 0000 	str.w	r0, [r8]
 8008584:	4620      	mov	r0, r4
 8008586:	b003      	add	sp, #12
 8008588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800858c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008590:	e7d5      	b.n	800853e <__d2b+0x2e>
 8008592:	6161      	str	r1, [r4, #20]
 8008594:	e7e5      	b.n	8008562 <__d2b+0x52>
 8008596:	a801      	add	r0, sp, #4
 8008598:	f7ff fd5a 	bl	8008050 <__lo0bits>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	2201      	movs	r2, #1
 80085a2:	6122      	str	r2, [r4, #16]
 80085a4:	3020      	adds	r0, #32
 80085a6:	e7e3      	b.n	8008570 <__d2b+0x60>
 80085a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b0:	f8c9 0000 	str.w	r0, [r9]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fd2b 	bl	8008010 <__hi0bits>
 80085ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085be:	e7df      	b.n	8008580 <__d2b+0x70>
 80085c0:	0800922f 	.word	0x0800922f
 80085c4:	080092a0 	.word	0x080092a0

080085c8 <_calloc_r>:
 80085c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ca:	fba1 2402 	umull	r2, r4, r1, r2
 80085ce:	b94c      	cbnz	r4, 80085e4 <_calloc_r+0x1c>
 80085d0:	4611      	mov	r1, r2
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	f000 f87a 	bl	80086cc <_malloc_r>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	4605      	mov	r5, r0
 80085dc:	b930      	cbnz	r0, 80085ec <_calloc_r+0x24>
 80085de:	4628      	mov	r0, r5
 80085e0:	b003      	add	sp, #12
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	220c      	movs	r2, #12
 80085e6:	6002      	str	r2, [r0, #0]
 80085e8:	2500      	movs	r5, #0
 80085ea:	e7f8      	b.n	80085de <_calloc_r+0x16>
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7fe f85d 	bl	80066ac <memset>
 80085f2:	e7f4      	b.n	80085de <_calloc_r+0x16>

080085f4 <_free_r>:
 80085f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d044      	beq.n	8008684 <_free_r+0x90>
 80085fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fe:	9001      	str	r0, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f1a1 0404 	sub.w	r4, r1, #4
 8008606:	bfb8      	it	lt
 8008608:	18e4      	addlt	r4, r4, r3
 800860a:	f000 fcdf 	bl	8008fcc <__malloc_lock>
 800860e:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <_free_r+0x94>)
 8008610:	9801      	ldr	r0, [sp, #4]
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	b933      	cbnz	r3, 8008624 <_free_r+0x30>
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	6014      	str	r4, [r2, #0]
 800861a:	b003      	add	sp, #12
 800861c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008620:	f000 bcda 	b.w	8008fd8 <__malloc_unlock>
 8008624:	42a3      	cmp	r3, r4
 8008626:	d908      	bls.n	800863a <_free_r+0x46>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1961      	adds	r1, r4, r5
 800862c:	428b      	cmp	r3, r1
 800862e:	bf01      	itttt	eq
 8008630:	6819      	ldreq	r1, [r3, #0]
 8008632:	685b      	ldreq	r3, [r3, #4]
 8008634:	1949      	addeq	r1, r1, r5
 8008636:	6021      	streq	r1, [r4, #0]
 8008638:	e7ed      	b.n	8008616 <_free_r+0x22>
 800863a:	461a      	mov	r2, r3
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b10b      	cbz	r3, 8008644 <_free_r+0x50>
 8008640:	42a3      	cmp	r3, r4
 8008642:	d9fa      	bls.n	800863a <_free_r+0x46>
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	1855      	adds	r5, r2, r1
 8008648:	42a5      	cmp	r5, r4
 800864a:	d10b      	bne.n	8008664 <_free_r+0x70>
 800864c:	6824      	ldr	r4, [r4, #0]
 800864e:	4421      	add	r1, r4
 8008650:	1854      	adds	r4, r2, r1
 8008652:	42a3      	cmp	r3, r4
 8008654:	6011      	str	r1, [r2, #0]
 8008656:	d1e0      	bne.n	800861a <_free_r+0x26>
 8008658:	681c      	ldr	r4, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	6053      	str	r3, [r2, #4]
 800865e:	4421      	add	r1, r4
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	e7da      	b.n	800861a <_free_r+0x26>
 8008664:	d902      	bls.n	800866c <_free_r+0x78>
 8008666:	230c      	movs	r3, #12
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	e7d6      	b.n	800861a <_free_r+0x26>
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	1961      	adds	r1, r4, r5
 8008670:	428b      	cmp	r3, r1
 8008672:	bf04      	itt	eq
 8008674:	6819      	ldreq	r1, [r3, #0]
 8008676:	685b      	ldreq	r3, [r3, #4]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	bf04      	itt	eq
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	6054      	str	r4, [r2, #4]
 8008682:	e7ca      	b.n	800861a <_free_r+0x26>
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	200009d8 	.word	0x200009d8

0800868c <sbrk_aligned>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0e      	ldr	r6, [pc, #56]	; (80086c8 <sbrk_aligned+0x3c>)
 8008690:	460c      	mov	r4, r1
 8008692:	6831      	ldr	r1, [r6, #0]
 8008694:	4605      	mov	r5, r0
 8008696:	b911      	cbnz	r1, 800869e <sbrk_aligned+0x12>
 8008698:	f000 f9e6 	bl	8008a68 <_sbrk_r>
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f9e1 	bl	8008a68 <_sbrk_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <sbrk_aligned+0x34>
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d007      	beq.n	80086c4 <sbrk_aligned+0x38>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 f9d6 	bl	8008a68 <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d101      	bne.n	80086c4 <sbrk_aligned+0x38>
 80086c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	200009dc 	.word	0x200009dc

080086cc <_malloc_r>:
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	1ccd      	adds	r5, r1, #3
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	2d00      	cmp	r5, #0
 80086e0:	4607      	mov	r7, r0
 80086e2:	db01      	blt.n	80086e8 <_malloc_r+0x1c>
 80086e4:	42a9      	cmp	r1, r5
 80086e6:	d905      	bls.n	80086f4 <_malloc_r+0x28>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2600      	movs	r6, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f4:	4e2e      	ldr	r6, [pc, #184]	; (80087b0 <_malloc_r+0xe4>)
 80086f6:	f000 fc69 	bl	8008fcc <__malloc_lock>
 80086fa:	6833      	ldr	r3, [r6, #0]
 80086fc:	461c      	mov	r4, r3
 80086fe:	bb34      	cbnz	r4, 800874e <_malloc_r+0x82>
 8008700:	4629      	mov	r1, r5
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ffc2 	bl	800868c <sbrk_aligned>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	4604      	mov	r4, r0
 800870c:	d14d      	bne.n	80087aa <_malloc_r+0xde>
 800870e:	6834      	ldr	r4, [r6, #0]
 8008710:	4626      	mov	r6, r4
 8008712:	2e00      	cmp	r6, #0
 8008714:	d140      	bne.n	8008798 <_malloc_r+0xcc>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	4631      	mov	r1, r6
 800871a:	4638      	mov	r0, r7
 800871c:	eb04 0803 	add.w	r8, r4, r3
 8008720:	f000 f9a2 	bl	8008a68 <_sbrk_r>
 8008724:	4580      	cmp	r8, r0
 8008726:	d13a      	bne.n	800879e <_malloc_r+0xd2>
 8008728:	6821      	ldr	r1, [r4, #0]
 800872a:	3503      	adds	r5, #3
 800872c:	1a6d      	subs	r5, r5, r1
 800872e:	f025 0503 	bic.w	r5, r5, #3
 8008732:	3508      	adds	r5, #8
 8008734:	2d0c      	cmp	r5, #12
 8008736:	bf38      	it	cc
 8008738:	250c      	movcc	r5, #12
 800873a:	4629      	mov	r1, r5
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ffa5 	bl	800868c <sbrk_aligned>
 8008742:	3001      	adds	r0, #1
 8008744:	d02b      	beq.n	800879e <_malloc_r+0xd2>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	442b      	add	r3, r5
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	e00e      	b.n	800876c <_malloc_r+0xa0>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	1b52      	subs	r2, r2, r5
 8008752:	d41e      	bmi.n	8008792 <_malloc_r+0xc6>
 8008754:	2a0b      	cmp	r2, #11
 8008756:	d916      	bls.n	8008786 <_malloc_r+0xba>
 8008758:	1961      	adds	r1, r4, r5
 800875a:	42a3      	cmp	r3, r4
 800875c:	6025      	str	r5, [r4, #0]
 800875e:	bf18      	it	ne
 8008760:	6059      	strne	r1, [r3, #4]
 8008762:	6863      	ldr	r3, [r4, #4]
 8008764:	bf08      	it	eq
 8008766:	6031      	streq	r1, [r6, #0]
 8008768:	5162      	str	r2, [r4, r5]
 800876a:	604b      	str	r3, [r1, #4]
 800876c:	4638      	mov	r0, r7
 800876e:	f104 060b 	add.w	r6, r4, #11
 8008772:	f000 fc31 	bl	8008fd8 <__malloc_unlock>
 8008776:	f026 0607 	bic.w	r6, r6, #7
 800877a:	1d23      	adds	r3, r4, #4
 800877c:	1af2      	subs	r2, r6, r3
 800877e:	d0b6      	beq.n	80086ee <_malloc_r+0x22>
 8008780:	1b9b      	subs	r3, r3, r6
 8008782:	50a3      	str	r3, [r4, r2]
 8008784:	e7b3      	b.n	80086ee <_malloc_r+0x22>
 8008786:	6862      	ldr	r2, [r4, #4]
 8008788:	42a3      	cmp	r3, r4
 800878a:	bf0c      	ite	eq
 800878c:	6032      	streq	r2, [r6, #0]
 800878e:	605a      	strne	r2, [r3, #4]
 8008790:	e7ec      	b.n	800876c <_malloc_r+0xa0>
 8008792:	4623      	mov	r3, r4
 8008794:	6864      	ldr	r4, [r4, #4]
 8008796:	e7b2      	b.n	80086fe <_malloc_r+0x32>
 8008798:	4634      	mov	r4, r6
 800879a:	6876      	ldr	r6, [r6, #4]
 800879c:	e7b9      	b.n	8008712 <_malloc_r+0x46>
 800879e:	230c      	movs	r3, #12
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	4638      	mov	r0, r7
 80087a4:	f000 fc18 	bl	8008fd8 <__malloc_unlock>
 80087a8:	e7a1      	b.n	80086ee <_malloc_r+0x22>
 80087aa:	6025      	str	r5, [r4, #0]
 80087ac:	e7de      	b.n	800876c <_malloc_r+0xa0>
 80087ae:	bf00      	nop
 80087b0:	200009d8 	.word	0x200009d8

080087b4 <__sfputc_r>:
 80087b4:	6893      	ldr	r3, [r2, #8]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	b410      	push	{r4}
 80087bc:	6093      	str	r3, [r2, #8]
 80087be:	da08      	bge.n	80087d2 <__sfputc_r+0x1e>
 80087c0:	6994      	ldr	r4, [r2, #24]
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	db01      	blt.n	80087ca <__sfputc_r+0x16>
 80087c6:	290a      	cmp	r1, #10
 80087c8:	d103      	bne.n	80087d2 <__sfputc_r+0x1e>
 80087ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ce:	f000 b99f 	b.w	8008b10 <__swbuf_r>
 80087d2:	6813      	ldr	r3, [r2, #0]
 80087d4:	1c58      	adds	r0, r3, #1
 80087d6:	6010      	str	r0, [r2, #0]
 80087d8:	7019      	strb	r1, [r3, #0]
 80087da:	4608      	mov	r0, r1
 80087dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <__sfputs_r>:
 80087e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	18d5      	adds	r5, r2, r3
 80087ec:	42ac      	cmp	r4, r5
 80087ee:	d101      	bne.n	80087f4 <__sfputs_r+0x12>
 80087f0:	2000      	movs	r0, #0
 80087f2:	e007      	b.n	8008804 <__sfputs_r+0x22>
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	463a      	mov	r2, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ffda 	bl	80087b4 <__sfputc_r>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d1f3      	bne.n	80087ec <__sfputs_r+0xa>
 8008804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008808 <_vfiprintf_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	460d      	mov	r5, r1
 800880e:	b09d      	sub	sp, #116	; 0x74
 8008810:	4614      	mov	r4, r2
 8008812:	4698      	mov	r8, r3
 8008814:	4606      	mov	r6, r0
 8008816:	b118      	cbz	r0, 8008820 <_vfiprintf_r+0x18>
 8008818:	6983      	ldr	r3, [r0, #24]
 800881a:	b90b      	cbnz	r3, 8008820 <_vfiprintf_r+0x18>
 800881c:	f7ff faa2 	bl	8007d64 <__sinit>
 8008820:	4b89      	ldr	r3, [pc, #548]	; (8008a48 <_vfiprintf_r+0x240>)
 8008822:	429d      	cmp	r5, r3
 8008824:	d11b      	bne.n	800885e <_vfiprintf_r+0x56>
 8008826:	6875      	ldr	r5, [r6, #4]
 8008828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d405      	bmi.n	800883a <_vfiprintf_r+0x32>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	059a      	lsls	r2, r3, #22
 8008832:	d402      	bmi.n	800883a <_vfiprintf_r+0x32>
 8008834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008836:	f7ff fb38 	bl	8007eaa <__retarget_lock_acquire_recursive>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	071b      	lsls	r3, r3, #28
 800883e:	d501      	bpl.n	8008844 <_vfiprintf_r+0x3c>
 8008840:	692b      	ldr	r3, [r5, #16]
 8008842:	b9eb      	cbnz	r3, 8008880 <_vfiprintf_r+0x78>
 8008844:	4629      	mov	r1, r5
 8008846:	4630      	mov	r0, r6
 8008848:	f000 f9c6 	bl	8008bd8 <__swsetup_r>
 800884c:	b1c0      	cbz	r0, 8008880 <_vfiprintf_r+0x78>
 800884e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008850:	07dc      	lsls	r4, r3, #31
 8008852:	d50e      	bpl.n	8008872 <_vfiprintf_r+0x6a>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008858:	b01d      	add	sp, #116	; 0x74
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885e:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <_vfiprintf_r+0x244>)
 8008860:	429d      	cmp	r5, r3
 8008862:	d101      	bne.n	8008868 <_vfiprintf_r+0x60>
 8008864:	68b5      	ldr	r5, [r6, #8]
 8008866:	e7df      	b.n	8008828 <_vfiprintf_r+0x20>
 8008868:	4b79      	ldr	r3, [pc, #484]	; (8008a50 <_vfiprintf_r+0x248>)
 800886a:	429d      	cmp	r5, r3
 800886c:	bf08      	it	eq
 800886e:	68f5      	ldreq	r5, [r6, #12]
 8008870:	e7da      	b.n	8008828 <_vfiprintf_r+0x20>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	0598      	lsls	r0, r3, #22
 8008876:	d4ed      	bmi.n	8008854 <_vfiprintf_r+0x4c>
 8008878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800887a:	f7ff fb17 	bl	8007eac <__retarget_lock_release_recursive>
 800887e:	e7e9      	b.n	8008854 <_vfiprintf_r+0x4c>
 8008880:	2300      	movs	r3, #0
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	2320      	movs	r3, #32
 8008886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800888a:	f8cd 800c 	str.w	r8, [sp, #12]
 800888e:	2330      	movs	r3, #48	; 0x30
 8008890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a54 <_vfiprintf_r+0x24c>
 8008894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008898:	f04f 0901 	mov.w	r9, #1
 800889c:	4623      	mov	r3, r4
 800889e:	469a      	mov	sl, r3
 80088a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a4:	b10a      	cbz	r2, 80088aa <_vfiprintf_r+0xa2>
 80088a6:	2a25      	cmp	r2, #37	; 0x25
 80088a8:	d1f9      	bne.n	800889e <_vfiprintf_r+0x96>
 80088aa:	ebba 0b04 	subs.w	fp, sl, r4
 80088ae:	d00b      	beq.n	80088c8 <_vfiprintf_r+0xc0>
 80088b0:	465b      	mov	r3, fp
 80088b2:	4622      	mov	r2, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff93 	bl	80087e2 <__sfputs_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	f000 80aa 	beq.w	8008a16 <_vfiprintf_r+0x20e>
 80088c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c4:	445a      	add	r2, fp
 80088c6:	9209      	str	r2, [sp, #36]	; 0x24
 80088c8:	f89a 3000 	ldrb.w	r3, [sl]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80a2 	beq.w	8008a16 <_vfiprintf_r+0x20e>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088dc:	f10a 0a01 	add.w	sl, sl, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e8:	931a      	str	r3, [sp, #104]	; 0x68
 80088ea:	4654      	mov	r4, sl
 80088ec:	2205      	movs	r2, #5
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	4858      	ldr	r0, [pc, #352]	; (8008a54 <_vfiprintf_r+0x24c>)
 80088f4:	f7f7 fc74 	bl	80001e0 <memchr>
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	b9d8      	cbnz	r0, 8008934 <_vfiprintf_r+0x12c>
 80088fc:	06d1      	lsls	r1, r2, #27
 80088fe:	bf44      	itt	mi
 8008900:	2320      	movmi	r3, #32
 8008902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008906:	0713      	lsls	r3, r2, #28
 8008908:	bf44      	itt	mi
 800890a:	232b      	movmi	r3, #43	; 0x2b
 800890c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008910:	f89a 3000 	ldrb.w	r3, [sl]
 8008914:	2b2a      	cmp	r3, #42	; 0x2a
 8008916:	d015      	beq.n	8008944 <_vfiprintf_r+0x13c>
 8008918:	9a07      	ldr	r2, [sp, #28]
 800891a:	4654      	mov	r4, sl
 800891c:	2000      	movs	r0, #0
 800891e:	f04f 0c0a 	mov.w	ip, #10
 8008922:	4621      	mov	r1, r4
 8008924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008928:	3b30      	subs	r3, #48	; 0x30
 800892a:	2b09      	cmp	r3, #9
 800892c:	d94e      	bls.n	80089cc <_vfiprintf_r+0x1c4>
 800892e:	b1b0      	cbz	r0, 800895e <_vfiprintf_r+0x156>
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	e014      	b.n	800895e <_vfiprintf_r+0x156>
 8008934:	eba0 0308 	sub.w	r3, r0, r8
 8008938:	fa09 f303 	lsl.w	r3, r9, r3
 800893c:	4313      	orrs	r3, r2
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	46a2      	mov	sl, r4
 8008942:	e7d2      	b.n	80088ea <_vfiprintf_r+0xe2>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	1d19      	adds	r1, r3, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfbb      	ittet	lt
 8008950:	425b      	neglt	r3, r3
 8008952:	f042 0202 	orrlt.w	r2, r2, #2
 8008956:	9307      	strge	r3, [sp, #28]
 8008958:	9307      	strlt	r3, [sp, #28]
 800895a:	bfb8      	it	lt
 800895c:	9204      	strlt	r2, [sp, #16]
 800895e:	7823      	ldrb	r3, [r4, #0]
 8008960:	2b2e      	cmp	r3, #46	; 0x2e
 8008962:	d10c      	bne.n	800897e <_vfiprintf_r+0x176>
 8008964:	7863      	ldrb	r3, [r4, #1]
 8008966:	2b2a      	cmp	r3, #42	; 0x2a
 8008968:	d135      	bne.n	80089d6 <_vfiprintf_r+0x1ce>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9203      	str	r2, [sp, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	bfb8      	it	lt
 8008976:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800897a:	3402      	adds	r4, #2
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a64 <_vfiprintf_r+0x25c>
 8008982:	7821      	ldrb	r1, [r4, #0]
 8008984:	2203      	movs	r2, #3
 8008986:	4650      	mov	r0, sl
 8008988:	f7f7 fc2a 	bl	80001e0 <memchr>
 800898c:	b140      	cbz	r0, 80089a0 <_vfiprintf_r+0x198>
 800898e:	2340      	movs	r3, #64	; 0x40
 8008990:	eba0 000a 	sub.w	r0, r0, sl
 8008994:	fa03 f000 	lsl.w	r0, r3, r0
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	4303      	orrs	r3, r0
 800899c:	3401      	adds	r4, #1
 800899e:	9304      	str	r3, [sp, #16]
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	482c      	ldr	r0, [pc, #176]	; (8008a58 <_vfiprintf_r+0x250>)
 80089a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089aa:	2206      	movs	r2, #6
 80089ac:	f7f7 fc18 	bl	80001e0 <memchr>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d03f      	beq.n	8008a34 <_vfiprintf_r+0x22c>
 80089b4:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <_vfiprintf_r+0x254>)
 80089b6:	bb1b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x1f8>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	3307      	adds	r3, #7
 80089bc:	f023 0307 	bic.w	r3, r3, #7
 80089c0:	3308      	adds	r3, #8
 80089c2:	9303      	str	r3, [sp, #12]
 80089c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c6:	443b      	add	r3, r7
 80089c8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ca:	e767      	b.n	800889c <_vfiprintf_r+0x94>
 80089cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d0:	460c      	mov	r4, r1
 80089d2:	2001      	movs	r0, #1
 80089d4:	e7a5      	b.n	8008922 <_vfiprintf_r+0x11a>
 80089d6:	2300      	movs	r3, #0
 80089d8:	3401      	adds	r4, #1
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	4619      	mov	r1, r3
 80089de:	f04f 0c0a 	mov.w	ip, #10
 80089e2:	4620      	mov	r0, r4
 80089e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e8:	3a30      	subs	r2, #48	; 0x30
 80089ea:	2a09      	cmp	r2, #9
 80089ec:	d903      	bls.n	80089f6 <_vfiprintf_r+0x1ee>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0c5      	beq.n	800897e <_vfiprintf_r+0x176>
 80089f2:	9105      	str	r1, [sp, #20]
 80089f4:	e7c3      	b.n	800897e <_vfiprintf_r+0x176>
 80089f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089fa:	4604      	mov	r4, r0
 80089fc:	2301      	movs	r3, #1
 80089fe:	e7f0      	b.n	80089e2 <_vfiprintf_r+0x1da>
 8008a00:	ab03      	add	r3, sp, #12
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	462a      	mov	r2, r5
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <_vfiprintf_r+0x258>)
 8008a08:	a904      	add	r1, sp, #16
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7fd fef6 	bl	80067fc <_printf_float>
 8008a10:	4607      	mov	r7, r0
 8008a12:	1c78      	adds	r0, r7, #1
 8008a14:	d1d6      	bne.n	80089c4 <_vfiprintf_r+0x1bc>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a18:	07d9      	lsls	r1, r3, #31
 8008a1a:	d405      	bmi.n	8008a28 <_vfiprintf_r+0x220>
 8008a1c:	89ab      	ldrh	r3, [r5, #12]
 8008a1e:	059a      	lsls	r2, r3, #22
 8008a20:	d402      	bmi.n	8008a28 <_vfiprintf_r+0x220>
 8008a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a24:	f7ff fa42 	bl	8007eac <__retarget_lock_release_recursive>
 8008a28:	89ab      	ldrh	r3, [r5, #12]
 8008a2a:	065b      	lsls	r3, r3, #25
 8008a2c:	f53f af12 	bmi.w	8008854 <_vfiprintf_r+0x4c>
 8008a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a32:	e711      	b.n	8008858 <_vfiprintf_r+0x50>
 8008a34:	ab03      	add	r3, sp, #12
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <_vfiprintf_r+0x258>)
 8008a3c:	a904      	add	r1, sp, #16
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7fe f980 	bl	8006d44 <_printf_i>
 8008a44:	e7e4      	b.n	8008a10 <_vfiprintf_r+0x208>
 8008a46:	bf00      	nop
 8008a48:	08009260 	.word	0x08009260
 8008a4c:	08009280 	.word	0x08009280
 8008a50:	08009240 	.word	0x08009240
 8008a54:	080093fc 	.word	0x080093fc
 8008a58:	08009406 	.word	0x08009406
 8008a5c:	080067fd 	.word	0x080067fd
 8008a60:	080087e3 	.word	0x080087e3
 8008a64:	08009402 	.word	0x08009402

08008a68 <_sbrk_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d06      	ldr	r5, [pc, #24]	; (8008a84 <_sbrk_r+0x1c>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7f9 fbc0 	bl	80021f8 <_sbrk>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_sbrk_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_sbrk_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	200009e0 	.word	0x200009e0

08008a88 <__sread>:
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a90:	f000 faa8 	bl	8008fe4 <_read_r>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	bfab      	itete	ge
 8008a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a9c:	181b      	addge	r3, r3, r0
 8008a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aa2:	bfac      	ite	ge
 8008aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008aa6:	81a3      	strhlt	r3, [r4, #12]
 8008aa8:	bd10      	pop	{r4, pc}

08008aaa <__swrite>:
 8008aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aae:	461f      	mov	r7, r3
 8008ab0:	898b      	ldrh	r3, [r1, #12]
 8008ab2:	05db      	lsls	r3, r3, #23
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	4616      	mov	r6, r2
 8008aba:	d505      	bpl.n	8008ac8 <__swrite+0x1e>
 8008abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f000 f9f8 	bl	8008eb8 <_lseek_r>
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	f000 b869 	b.w	8008bb4 <_write_r>

08008ae2 <__sseek>:
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aea:	f000 f9e5 	bl	8008eb8 <_lseek_r>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	bf15      	itete	ne
 8008af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008afe:	81a3      	strheq	r3, [r4, #12]
 8008b00:	bf18      	it	ne
 8008b02:	81a3      	strhne	r3, [r4, #12]
 8008b04:	bd10      	pop	{r4, pc}

08008b06 <__sclose>:
 8008b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0a:	f000 b8f1 	b.w	8008cf0 <_close_r>
	...

08008b10 <__swbuf_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	460e      	mov	r6, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	4605      	mov	r5, r0
 8008b18:	b118      	cbz	r0, 8008b22 <__swbuf_r+0x12>
 8008b1a:	6983      	ldr	r3, [r0, #24]
 8008b1c:	b90b      	cbnz	r3, 8008b22 <__swbuf_r+0x12>
 8008b1e:	f7ff f921 	bl	8007d64 <__sinit>
 8008b22:	4b21      	ldr	r3, [pc, #132]	; (8008ba8 <__swbuf_r+0x98>)
 8008b24:	429c      	cmp	r4, r3
 8008b26:	d12b      	bne.n	8008b80 <__swbuf_r+0x70>
 8008b28:	686c      	ldr	r4, [r5, #4]
 8008b2a:	69a3      	ldr	r3, [r4, #24]
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	071a      	lsls	r2, r3, #28
 8008b32:	d52f      	bpl.n	8008b94 <__swbuf_r+0x84>
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	b36b      	cbz	r3, 8008b94 <__swbuf_r+0x84>
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	1ac0      	subs	r0, r0, r3
 8008b3e:	6963      	ldr	r3, [r4, #20]
 8008b40:	b2f6      	uxtb	r6, r6
 8008b42:	4283      	cmp	r3, r0
 8008b44:	4637      	mov	r7, r6
 8008b46:	dc04      	bgt.n	8008b52 <__swbuf_r+0x42>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f966 	bl	8008e1c <_fflush_r>
 8008b50:	bb30      	cbnz	r0, 8008ba0 <__swbuf_r+0x90>
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	60a3      	str	r3, [r4, #8]
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	6022      	str	r2, [r4, #0]
 8008b5e:	701e      	strb	r6, [r3, #0]
 8008b60:	6963      	ldr	r3, [r4, #20]
 8008b62:	3001      	adds	r0, #1
 8008b64:	4283      	cmp	r3, r0
 8008b66:	d004      	beq.n	8008b72 <__swbuf_r+0x62>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	07db      	lsls	r3, r3, #31
 8008b6c:	d506      	bpl.n	8008b7c <__swbuf_r+0x6c>
 8008b6e:	2e0a      	cmp	r6, #10
 8008b70:	d104      	bne.n	8008b7c <__swbuf_r+0x6c>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f951 	bl	8008e1c <_fflush_r>
 8008b7a:	b988      	cbnz	r0, 8008ba0 <__swbuf_r+0x90>
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <__swbuf_r+0x9c>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <__swbuf_r+0x7a>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7cf      	b.n	8008b2a <__swbuf_r+0x1a>
 8008b8a:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <__swbuf_r+0xa0>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	bf08      	it	eq
 8008b90:	68ec      	ldreq	r4, [r5, #12]
 8008b92:	e7ca      	b.n	8008b2a <__swbuf_r+0x1a>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 f81e 	bl	8008bd8 <__swsetup_r>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d0cb      	beq.n	8008b38 <__swbuf_r+0x28>
 8008ba0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ba4:	e7ea      	b.n	8008b7c <__swbuf_r+0x6c>
 8008ba6:	bf00      	nop
 8008ba8:	08009260 	.word	0x08009260
 8008bac:	08009280 	.word	0x08009280
 8008bb0:	08009240 	.word	0x08009240

08008bb4 <_write_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	; (8008bd4 <_write_r+0x20>)
 8008bb8:	4604      	mov	r4, r0
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f7f9 fac8 	bl	8002158 <_write>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_write_r+0x1e>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_write_r+0x1e>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	200009e0 	.word	0x200009e0

08008bd8 <__swsetup_r>:
 8008bd8:	4b32      	ldr	r3, [pc, #200]	; (8008ca4 <__swsetup_r+0xcc>)
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	681d      	ldr	r5, [r3, #0]
 8008bde:	4606      	mov	r6, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	b125      	cbz	r5, 8008bee <__swsetup_r+0x16>
 8008be4:	69ab      	ldr	r3, [r5, #24]
 8008be6:	b913      	cbnz	r3, 8008bee <__swsetup_r+0x16>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f7ff f8bb 	bl	8007d64 <__sinit>
 8008bee:	4b2e      	ldr	r3, [pc, #184]	; (8008ca8 <__swsetup_r+0xd0>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d10f      	bne.n	8008c14 <__swsetup_r+0x3c>
 8008bf4:	686c      	ldr	r4, [r5, #4]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bfc:	0719      	lsls	r1, r3, #28
 8008bfe:	d42c      	bmi.n	8008c5a <__swsetup_r+0x82>
 8008c00:	06dd      	lsls	r5, r3, #27
 8008c02:	d411      	bmi.n	8008c28 <__swsetup_r+0x50>
 8008c04:	2309      	movs	r3, #9
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c12:	e03e      	b.n	8008c92 <__swsetup_r+0xba>
 8008c14:	4b25      	ldr	r3, [pc, #148]	; (8008cac <__swsetup_r+0xd4>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d101      	bne.n	8008c1e <__swsetup_r+0x46>
 8008c1a:	68ac      	ldr	r4, [r5, #8]
 8008c1c:	e7eb      	b.n	8008bf6 <__swsetup_r+0x1e>
 8008c1e:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <__swsetup_r+0xd8>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	bf08      	it	eq
 8008c24:	68ec      	ldreq	r4, [r5, #12]
 8008c26:	e7e6      	b.n	8008bf6 <__swsetup_r+0x1e>
 8008c28:	0758      	lsls	r0, r3, #29
 8008c2a:	d512      	bpl.n	8008c52 <__swsetup_r+0x7a>
 8008c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c2e:	b141      	cbz	r1, 8008c42 <__swsetup_r+0x6a>
 8008c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <__swsetup_r+0x66>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff fcdb 	bl	80085f4 <_free_r>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6363      	str	r3, [r4, #52]	; 0x34
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f043 0308 	orr.w	r3, r3, #8
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	b94b      	cbnz	r3, 8008c72 <__swsetup_r+0x9a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c68:	d003      	beq.n	8008c72 <__swsetup_r+0x9a>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f000 f95b 	bl	8008f28 <__smakebuf_r>
 8008c72:	89a0      	ldrh	r0, [r4, #12]
 8008c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c78:	f010 0301 	ands.w	r3, r0, #1
 8008c7c:	d00a      	beq.n	8008c94 <__swsetup_r+0xbc>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60a3      	str	r3, [r4, #8]
 8008c82:	6963      	ldr	r3, [r4, #20]
 8008c84:	425b      	negs	r3, r3
 8008c86:	61a3      	str	r3, [r4, #24]
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	b943      	cbnz	r3, 8008c9e <__swsetup_r+0xc6>
 8008c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c90:	d1ba      	bne.n	8008c08 <__swsetup_r+0x30>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	0781      	lsls	r1, r0, #30
 8008c96:	bf58      	it	pl
 8008c98:	6963      	ldrpl	r3, [r4, #20]
 8008c9a:	60a3      	str	r3, [r4, #8]
 8008c9c:	e7f4      	b.n	8008c88 <__swsetup_r+0xb0>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7f7      	b.n	8008c92 <__swsetup_r+0xba>
 8008ca2:	bf00      	nop
 8008ca4:	20000018 	.word	0x20000018
 8008ca8:	08009260 	.word	0x08009260
 8008cac:	08009280 	.word	0x08009280
 8008cb0:	08009240 	.word	0x08009240

08008cb4 <__assert_func>:
 8008cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <__assert_func+0x2c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	68d8      	ldr	r0, [r3, #12]
 8008cc2:	b14c      	cbz	r4, 8008cd8 <__assert_func+0x24>
 8008cc4:	4b07      	ldr	r3, [pc, #28]	; (8008ce4 <__assert_func+0x30>)
 8008cc6:	9100      	str	r1, [sp, #0]
 8008cc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ccc:	4906      	ldr	r1, [pc, #24]	; (8008ce8 <__assert_func+0x34>)
 8008cce:	462b      	mov	r3, r5
 8008cd0:	f000 f8e0 	bl	8008e94 <fiprintf>
 8008cd4:	f000 f9a5 	bl	8009022 <abort>
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <__assert_func+0x38>)
 8008cda:	461c      	mov	r4, r3
 8008cdc:	e7f3      	b.n	8008cc6 <__assert_func+0x12>
 8008cde:	bf00      	nop
 8008ce0:	20000018 	.word	0x20000018
 8008ce4:	0800940d 	.word	0x0800940d
 8008ce8:	0800941a 	.word	0x0800941a
 8008cec:	08009448 	.word	0x08009448

08008cf0 <_close_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	; (8008d0c <_close_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7f9 fa48 	bl	8002190 <_close>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_close_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_close_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	200009e0 	.word	0x200009e0

08008d10 <__sflush_r>:
 8008d10:	898a      	ldrh	r2, [r1, #12]
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	4605      	mov	r5, r0
 8008d18:	0710      	lsls	r0, r2, #28
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	d458      	bmi.n	8008dd0 <__sflush_r+0xc0>
 8008d1e:	684b      	ldr	r3, [r1, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc05      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc02      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d0f9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d3c:	682f      	ldr	r7, [r5, #0]
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	d032      	beq.n	8008da8 <__sflush_r+0x98>
 8008d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	075a      	lsls	r2, r3, #29
 8008d48:	d505      	bpl.n	8008d56 <__sflush_r+0x46>
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d50:	b10b      	cbz	r3, 8008d56 <__sflush_r+0x46>
 8008d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d54:	1ac0      	subs	r0, r0, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	d106      	bne.n	8008d76 <__sflush_r+0x66>
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	291d      	cmp	r1, #29
 8008d6c:	d82c      	bhi.n	8008dc8 <__sflush_r+0xb8>
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <__sflush_r+0x108>)
 8008d70:	40ca      	lsrs	r2, r1
 8008d72:	07d6      	lsls	r6, r2, #31
 8008d74:	d528      	bpl.n	8008dc8 <__sflush_r+0xb8>
 8008d76:	2200      	movs	r2, #0
 8008d78:	6062      	str	r2, [r4, #4]
 8008d7a:	04d9      	lsls	r1, r3, #19
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	d504      	bpl.n	8008d8c <__sflush_r+0x7c>
 8008d82:	1c42      	adds	r2, r0, #1
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0x7a>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b903      	cbnz	r3, 8008d8c <__sflush_r+0x7c>
 8008d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d0ca      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__sflush_r+0x92>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f7ff fc29 	bl	80085f4 <_free_r>
 8008da2:	2000      	movs	r0, #0
 8008da4:	6360      	str	r0, [r4, #52]	; 0x34
 8008da6:	e7c1      	b.n	8008d2c <__sflush_r+0x1c>
 8008da8:	6a21      	ldr	r1, [r4, #32]
 8008daa:	2301      	movs	r3, #1
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b0      	blx	r6
 8008db0:	1c41      	adds	r1, r0, #1
 8008db2:	d1c7      	bne.n	8008d44 <__sflush_r+0x34>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0c4      	beq.n	8008d44 <__sflush_r+0x34>
 8008dba:	2b1d      	cmp	r3, #29
 8008dbc:	d001      	beq.n	8008dc2 <__sflush_r+0xb2>
 8008dbe:	2b16      	cmp	r3, #22
 8008dc0:	d101      	bne.n	8008dc6 <__sflush_r+0xb6>
 8008dc2:	602f      	str	r7, [r5, #0]
 8008dc4:	e7b1      	b.n	8008d2a <__sflush_r+0x1a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7ad      	b.n	8008d2c <__sflush_r+0x1c>
 8008dd0:	690f      	ldr	r7, [r1, #16]
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	d0a9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008dd6:	0793      	lsls	r3, r2, #30
 8008dd8:	680e      	ldr	r6, [r1, #0]
 8008dda:	bf08      	it	eq
 8008ddc:	694b      	ldreq	r3, [r1, #20]
 8008dde:	600f      	str	r7, [r1, #0]
 8008de0:	bf18      	it	ne
 8008de2:	2300      	movne	r3, #0
 8008de4:	eba6 0807 	sub.w	r8, r6, r7
 8008de8:	608b      	str	r3, [r1, #8]
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	dd9c      	ble.n	8008d2a <__sflush_r+0x1a>
 8008df0:	6a21      	ldr	r1, [r4, #32]
 8008df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df4:	4643      	mov	r3, r8
 8008df6:	463a      	mov	r2, r7
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b0      	blx	r6
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dc06      	bgt.n	8008e0e <__sflush_r+0xfe>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e0c:	e78e      	b.n	8008d2c <__sflush_r+0x1c>
 8008e0e:	4407      	add	r7, r0
 8008e10:	eba8 0800 	sub.w	r8, r8, r0
 8008e14:	e7e9      	b.n	8008dea <__sflush_r+0xda>
 8008e16:	bf00      	nop
 8008e18:	20400001 	.word	0x20400001

08008e1c <_fflush_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b913      	cbnz	r3, 8008e2c <_fflush_r+0x10>
 8008e26:	2500      	movs	r5, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	b118      	cbz	r0, 8008e36 <_fflush_r+0x1a>
 8008e2e:	6983      	ldr	r3, [r0, #24]
 8008e30:	b90b      	cbnz	r3, 8008e36 <_fflush_r+0x1a>
 8008e32:	f7fe ff97 	bl	8007d64 <__sinit>
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <_fflush_r+0x6c>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d11b      	bne.n	8008e74 <_fflush_r+0x58>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <_fflush_r+0xa>
 8008e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e48:	07d0      	lsls	r0, r2, #31
 8008e4a:	d404      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e4c:	0599      	lsls	r1, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f7ff f82a 	bl	8007eaa <__retarget_lock_acquire_recursive>
 8008e56:	4628      	mov	r0, r5
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f7ff ff59 	bl	8008d10 <__sflush_r>
 8008e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e60:	07da      	lsls	r2, r3, #31
 8008e62:	4605      	mov	r5, r0
 8008e64:	d4e0      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	059b      	lsls	r3, r3, #22
 8008e6a:	d4dd      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f7ff f81d 	bl	8007eac <__retarget_lock_release_recursive>
 8008e72:	e7d9      	b.n	8008e28 <_fflush_r+0xc>
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <_fflush_r+0x70>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <_fflush_r+0x62>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7df      	b.n	8008e3e <_fflush_r+0x22>
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <_fflush_r+0x74>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7da      	b.n	8008e3e <_fflush_r+0x22>
 8008e88:	08009260 	.word	0x08009260
 8008e8c:	08009280 	.word	0x08009280
 8008e90:	08009240 	.word	0x08009240

08008e94 <fiprintf>:
 8008e94:	b40e      	push	{r1, r2, r3}
 8008e96:	b503      	push	{r0, r1, lr}
 8008e98:	4601      	mov	r1, r0
 8008e9a:	ab03      	add	r3, sp, #12
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <fiprintf+0x20>)
 8008e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	f7ff fcaf 	bl	8008808 <_vfiprintf_r>
 8008eaa:	b002      	add	sp, #8
 8008eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb0:	b003      	add	sp, #12
 8008eb2:	4770      	bx	lr
 8008eb4:	20000018 	.word	0x20000018

08008eb8 <_lseek_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4d07      	ldr	r5, [pc, #28]	; (8008ed8 <_lseek_r+0x20>)
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	4608      	mov	r0, r1
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f9 f989 	bl	80021de <_lseek>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_lseek_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_lseek_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	200009e0 	.word	0x200009e0

08008edc <__swhatbuf_r>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	460e      	mov	r6, r1
 8008ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	b096      	sub	sp, #88	; 0x58
 8008ee8:	4614      	mov	r4, r2
 8008eea:	461d      	mov	r5, r3
 8008eec:	da08      	bge.n	8008f00 <__swhatbuf_r+0x24>
 8008eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	602a      	str	r2, [r5, #0]
 8008ef6:	061a      	lsls	r2, r3, #24
 8008ef8:	d410      	bmi.n	8008f1c <__swhatbuf_r+0x40>
 8008efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efe:	e00e      	b.n	8008f1e <__swhatbuf_r+0x42>
 8008f00:	466a      	mov	r2, sp
 8008f02:	f000 f895 	bl	8009030 <_fstat_r>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	dbf1      	blt.n	8008eee <__swhatbuf_r+0x12>
 8008f0a:	9a01      	ldr	r2, [sp, #4]
 8008f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f14:	425a      	negs	r2, r3
 8008f16:	415a      	adcs	r2, r3
 8008f18:	602a      	str	r2, [r5, #0]
 8008f1a:	e7ee      	b.n	8008efa <__swhatbuf_r+0x1e>
 8008f1c:	2340      	movs	r3, #64	; 0x40
 8008f1e:	2000      	movs	r0, #0
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	b016      	add	sp, #88	; 0x58
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f28 <__smakebuf_r>:
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f2c:	079d      	lsls	r5, r3, #30
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460c      	mov	r4, r1
 8008f32:	d507      	bpl.n	8008f44 <__smakebuf_r+0x1c>
 8008f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	6163      	str	r3, [r4, #20]
 8008f40:	b002      	add	sp, #8
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	ab01      	add	r3, sp, #4
 8008f46:	466a      	mov	r2, sp
 8008f48:	f7ff ffc8 	bl	8008edc <__swhatbuf_r>
 8008f4c:	9900      	ldr	r1, [sp, #0]
 8008f4e:	4605      	mov	r5, r0
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff fbbb 	bl	80086cc <_malloc_r>
 8008f56:	b948      	cbnz	r0, 8008f6c <__smakebuf_r+0x44>
 8008f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f5c:	059a      	lsls	r2, r3, #22
 8008f5e:	d4ef      	bmi.n	8008f40 <__smakebuf_r+0x18>
 8008f60:	f023 0303 	bic.w	r3, r3, #3
 8008f64:	f043 0302 	orr.w	r3, r3, #2
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	e7e3      	b.n	8008f34 <__smakebuf_r+0xc>
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <__smakebuf_r+0x7c>)
 8008f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	6020      	str	r0, [r4, #0]
 8008f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	9b00      	ldr	r3, [sp, #0]
 8008f7c:	6163      	str	r3, [r4, #20]
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	6120      	str	r0, [r4, #16]
 8008f82:	b15b      	cbz	r3, 8008f9c <__smakebuf_r+0x74>
 8008f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f000 f863 	bl	8009054 <_isatty_r>
 8008f8e:	b128      	cbz	r0, 8008f9c <__smakebuf_r+0x74>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f023 0303 	bic.w	r3, r3, #3
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	89a0      	ldrh	r0, [r4, #12]
 8008f9e:	4305      	orrs	r5, r0
 8008fa0:	81a5      	strh	r5, [r4, #12]
 8008fa2:	e7cd      	b.n	8008f40 <__smakebuf_r+0x18>
 8008fa4:	08007cfd 	.word	0x08007cfd

08008fa8 <__ascii_mbtowc>:
 8008fa8:	b082      	sub	sp, #8
 8008faa:	b901      	cbnz	r1, 8008fae <__ascii_mbtowc+0x6>
 8008fac:	a901      	add	r1, sp, #4
 8008fae:	b142      	cbz	r2, 8008fc2 <__ascii_mbtowc+0x1a>
 8008fb0:	b14b      	cbz	r3, 8008fc6 <__ascii_mbtowc+0x1e>
 8008fb2:	7813      	ldrb	r3, [r2, #0]
 8008fb4:	600b      	str	r3, [r1, #0]
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	1e10      	subs	r0, r2, #0
 8008fba:	bf18      	it	ne
 8008fbc:	2001      	movne	r0, #1
 8008fbe:	b002      	add	sp, #8
 8008fc0:	4770      	bx	lr
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	e7fb      	b.n	8008fbe <__ascii_mbtowc+0x16>
 8008fc6:	f06f 0001 	mvn.w	r0, #1
 8008fca:	e7f8      	b.n	8008fbe <__ascii_mbtowc+0x16>

08008fcc <__malloc_lock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <__malloc_lock+0x8>)
 8008fce:	f7fe bf6c 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	200009d4 	.word	0x200009d4

08008fd8 <__malloc_unlock>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	; (8008fe0 <__malloc_unlock+0x8>)
 8008fda:	f7fe bf67 	b.w	8007eac <__retarget_lock_release_recursive>
 8008fde:	bf00      	nop
 8008fe0:	200009d4 	.word	0x200009d4

08008fe4 <_read_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_read_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f9 f893 	bl	800211e <_read>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_read_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_read_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200009e0 	.word	0x200009e0

08009008 <__ascii_wctomb>:
 8009008:	b149      	cbz	r1, 800901e <__ascii_wctomb+0x16>
 800900a:	2aff      	cmp	r2, #255	; 0xff
 800900c:	bf85      	ittet	hi
 800900e:	238a      	movhi	r3, #138	; 0x8a
 8009010:	6003      	strhi	r3, [r0, #0]
 8009012:	700a      	strbls	r2, [r1, #0]
 8009014:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009018:	bf98      	it	ls
 800901a:	2001      	movls	r0, #1
 800901c:	4770      	bx	lr
 800901e:	4608      	mov	r0, r1
 8009020:	4770      	bx	lr

08009022 <abort>:
 8009022:	b508      	push	{r3, lr}
 8009024:	2006      	movs	r0, #6
 8009026:	f000 f84d 	bl	80090c4 <raise>
 800902a:	2001      	movs	r0, #1
 800902c:	f7f9 f86d 	bl	800210a <_exit>

08009030 <_fstat_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	; (8009050 <_fstat_r+0x20>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	f7f9 f8b3 	bl	80021a8 <_fstat>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d102      	bne.n	800904c <_fstat_r+0x1c>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	b103      	cbz	r3, 800904c <_fstat_r+0x1c>
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	bd38      	pop	{r3, r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	200009e0 	.word	0x200009e0

08009054 <_isatty_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d06      	ldr	r5, [pc, #24]	; (8009070 <_isatty_r+0x1c>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	f7f9 f8b2 	bl	80021c8 <_isatty>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_isatty_r+0x1a>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_isatty_r+0x1a>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	200009e0 	.word	0x200009e0

08009074 <_raise_r>:
 8009074:	291f      	cmp	r1, #31
 8009076:	b538      	push	{r3, r4, r5, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	d904      	bls.n	8009088 <_raise_r+0x14>
 800907e:	2316      	movs	r3, #22
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800908a:	b112      	cbz	r2, 8009092 <_raise_r+0x1e>
 800908c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009090:	b94b      	cbnz	r3, 80090a6 <_raise_r+0x32>
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f830 	bl	80090f8 <_getpid_r>
 8009098:	462a      	mov	r2, r5
 800909a:	4601      	mov	r1, r0
 800909c:	4620      	mov	r0, r4
 800909e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090a2:	f000 b817 	b.w	80090d4 <_kill_r>
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d00a      	beq.n	80090c0 <_raise_r+0x4c>
 80090aa:	1c59      	adds	r1, r3, #1
 80090ac:	d103      	bne.n	80090b6 <_raise_r+0x42>
 80090ae:	2316      	movs	r3, #22
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	2001      	movs	r0, #1
 80090b4:	e7e7      	b.n	8009086 <_raise_r+0x12>
 80090b6:	2400      	movs	r4, #0
 80090b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090bc:	4628      	mov	r0, r5
 80090be:	4798      	blx	r3
 80090c0:	2000      	movs	r0, #0
 80090c2:	e7e0      	b.n	8009086 <_raise_r+0x12>

080090c4 <raise>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <raise+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f7ff bfd3 	b.w	8009074 <_raise_r>
 80090ce:	bf00      	nop
 80090d0:	20000018 	.word	0x20000018

080090d4 <_kill_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	; (80090f4 <_kill_r+0x20>)
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	4611      	mov	r1, r2
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	f7f9 f802 	bl	80020ea <_kill>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	d102      	bne.n	80090f0 <_kill_r+0x1c>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	b103      	cbz	r3, 80090f0 <_kill_r+0x1c>
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	200009e0 	.word	0x200009e0

080090f8 <_getpid_r>:
 80090f8:	f7f8 bfef 	b.w	80020da <_getpid>

080090fc <_init>:
 80090fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fe:	bf00      	nop
 8009100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009102:	bc08      	pop	{r3}
 8009104:	469e      	mov	lr, r3
 8009106:	4770      	bx	lr

08009108 <_fini>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

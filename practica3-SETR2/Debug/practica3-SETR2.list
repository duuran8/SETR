
practica3-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008148  08008148  00018148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  200001dc  08008760  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08008760  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a33  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0d  00000000  00000000  00038c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289e7  00000000  00000000  0003e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019310  00000000  00000000  0006703f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4cad  00000000  00000000  0008034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174ffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f80  00000000  00000000  0017504c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008130 	.word	0x08008130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008130 	.word	0x08008130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__io_putchar>:
    set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif /* __GNUC__ */
	PUTCHAR_PROTOTYPE{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *) &ch,1,1000);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f003 fbd4 	bl	800470a <HAL_UART_Transmit>
		return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
		}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000032c 	.word	0x2000032c

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 ffc0 	bl	8001efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f83b 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 fa03 	bl	8001388 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f82:	f000 f899 	bl	80010b8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f86:	f000 f8cf 	bl	8001128 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f8a:	f000 f90b 	bl	80011a4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f8e:	f000 f92f 	bl	80011f0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f96b 	bl	800126c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f96:	f000 f999 	bl	80012cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f9a:	f000 f9c7 	bl	800132c <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i=0; i<1000;i++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	e01d      	b.n	8000fe0 <main+0x70>
		  float j= i +0.5;
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fabd 	bl	8000524 <__aeabi_i2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <main+0x7c>)
 8000fb0:	f7ff f96c 	bl	800028c <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fdf4 	bl	8000ba8 <__aeabi_d2f>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	603b      	str	r3, [r7, #0]
		  printf("%f\r\n",j);
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f7ff fabf 	bl	8000548 <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <main+0x80>)
 8000fd0:	f004 ffe8 	bl	8005fa4 <iprintf>
		  HAL_Delay(250);
 8000fd4:	20fa      	movs	r0, #250	; 0xfa
 8000fd6:	f001 f805 	bl	8001fe4 <HAL_Delay>
	  for (int i=0; i<1000;i++){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe6:	dbdd      	blt.n	8000fa4 <main+0x34>
 8000fe8:	e7d9      	b.n	8000f9e <main+0x2e>
 8000fea:	bf00      	nop
 8000fec:	3fe00000 	.word	0x3fe00000
 8000ff0:	08008148 	.word	0x08008148

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	; 0x58
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2244      	movs	r2, #68	; 0x44
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fb5c 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001016:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101a:	f001 fe97 	bl	8002d4c <HAL_PWREx_ControlVoltageScaling>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001024:	f000 fb62 	bl	80016ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001028:	f001 fe72 	bl	8002d10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SystemClock_Config+0xc0>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <SystemClock_Config+0xc0>)
 8001034:	f023 0318 	bic.w	r3, r3, #24
 8001038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800103c:	2314      	movs	r3, #20
 800103e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001054:	2301      	movs	r3, #1
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800105c:	2328      	movs	r3, #40	; 0x28
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001060:	2307      	movs	r3, #7
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f001 ff8d 	bl	8002f90 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800107c:	f000 fb36 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2303      	movs	r3, #3
 8001086:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	2104      	movs	r1, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fb55 	bl	8003748 <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010a4:	f000 fb22 	bl	80016ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010a8:	f003 f85c 	bl	8004164 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010ac:	bf00      	nop
 80010ae:	3758      	adds	r7, #88	; 0x58
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <MX_DFSDM1_Init+0x6c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_DFSDM1_Init+0x68>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_DFSDM1_Init+0x68>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_DFSDM1_Init+0x68>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_DFSDM1_Init+0x68>)
 800110e:	f001 f89f 	bl	8002250 <HAL_DFSDM_ChannelInit>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001118:	f000 fae8 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f8 	.word	0x200001f8
 8001124:	40016020 	.word	0x40016020

08001128 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_I2C2_Init+0x74>)
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <MX_I2C2_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_I2C2_Init+0x74>)
 8001134:	f640 6214 	movw	r2, #3604	; 0xe14
 8001138:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_I2C2_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_I2C2_Init+0x74>)
 8001142:	2201      	movs	r2, #1
 8001144:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_I2C2_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_I2C2_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_I2C2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_I2C2_Init+0x74>)
 8001166:	f001 fb64 	bl	8002832 <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 fabc 	bl	80016ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <MX_I2C2_Init+0x74>)
 8001178:	f001 fbea 	bl	8002950 <HAL_I2CEx_ConfigAnalogFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001182:	f000 fab3 	bl	80016ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_I2C2_Init+0x74>)
 800118a:	f001 fc2c 	bl	80029e6 <HAL_I2CEx_ConfigDigitalFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001194:	f000 faaa 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000230 	.word	0x20000230
 80011a0:	40005800 	.word	0x40005800

080011a4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <MX_QUADSPI_Init+0x48>)
 80011ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011bc:	2210      	movs	r2, #16
 80011be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011c2:	2217      	movs	r2, #23
 80011c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_QUADSPI_Init+0x44>)
 80011d4:	f001 fe20 	bl	8002e18 <HAL_QSPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011de:	f000 fa85 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000284 	.word	0x20000284
 80011ec:	a0001000 	.word	0xa0001000

080011f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_SPI3_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_SPI3_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_SPI3_Init+0x74>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SPI3_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI3_Init+0x74>)
 800120a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800120e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI3_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SPI3_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI3_Init+0x74>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI3_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI3_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI3_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_SPI3_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI3_Init+0x74>)
 800123e:	2207      	movs	r2, #7
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_SPI3_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI3_Init+0x74>)
 800124a:	2208      	movs	r2, #8
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_SPI3_Init+0x74>)
 8001250:	f003 f96a 	bl	8004528 <HAL_SPI_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 fa47 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002c8 	.word	0x200002c8
 8001268:	40003c00 	.word	0x40003c00

0800126c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_USART1_UART_Init+0x5c>)
 8001274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012b0:	f003 f9dd 	bl	800466e <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ba:	f000 fa17 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000032c 	.word	0x2000032c
 80012c8:	40013800 	.word	0x40013800

080012cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <MX_USART3_UART_Init+0x5c>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART3_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART3_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART3_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART3_UART_Init+0x58>)
 8001310:	f003 f9ad 	bl	800466e <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800131a:	f000 f9e7 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200003b0 	.word	0x200003b0
 8001328:	40004800 	.word	0x40004800

0800132c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2206      	movs	r2, #6
 800133c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2202      	movs	r2, #2
 8001342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2202      	movs	r2, #2
 8001348:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001370:	f001 fb85 	bl	8002a7e <HAL_PCD_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800137a:	f000 f9b7 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000434 	.word	0x20000434

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	4bbd      	ldr	r3, [pc, #756]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4abc      	ldr	r2, [pc, #752]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4bba      	ldr	r3, [pc, #744]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4bb7      	ldr	r3, [pc, #732]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4ab6      	ldr	r2, [pc, #728]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4bb4      	ldr	r3, [pc, #720]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4bb1      	ldr	r3, [pc, #708]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4ab0      	ldr	r2, [pc, #704]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4bae      	ldr	r3, [pc, #696]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4bab      	ldr	r3, [pc, #684]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4aaa      	ldr	r2, [pc, #680]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <MX_GPIO_Init+0x30c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4ba5      	ldr	r3, [pc, #660]	; (8001694 <MX_GPIO_Init+0x30c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4aa4      	ldr	r2, [pc, #656]	; (8001694 <MX_GPIO_Init+0x30c>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4ba2      	ldr	r3, [pc, #648]	; (8001694 <MX_GPIO_Init+0x30c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 718a 	mov.w	r1, #276	; 0x114
 800141c:	489e      	ldr	r0, [pc, #632]	; (8001698 <MX_GPIO_Init+0x310>)
 800141e:	f001 f9cd 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f248 1104 	movw	r1, #33028	; 0x8104
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f001 f9c6 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001430:	2200      	movs	r2, #0
 8001432:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001436:	4899      	ldr	r0, [pc, #612]	; (800169c <MX_GPIO_Init+0x314>)
 8001438:	f001 f9c0 	bl	80027bc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001442:	4897      	ldr	r0, [pc, #604]	; (80016a0 <MX_GPIO_Init+0x318>)
 8001444:	f001 f9ba 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144e:	4894      	ldr	r0, [pc, #592]	; (80016a0 <MX_GPIO_Init+0x318>)
 8001450:	f001 f9b4 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7110 	mov.w	r1, #576	; 0x240
 800145a:	4892      	ldr	r0, [pc, #584]	; (80016a4 <MX_GPIO_Init+0x31c>)
 800145c:	f001 f9ae 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2120      	movs	r1, #32
 8001464:	488d      	ldr	r0, [pc, #564]	; (800169c <MX_GPIO_Init+0x314>)
 8001466:	f001 f9a9 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2101      	movs	r1, #1
 800146e:	488a      	ldr	r0, [pc, #552]	; (8001698 <MX_GPIO_Init+0x310>)
 8001470:	f001 f9a4 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001474:	f240 1315 	movw	r3, #277	; 0x115
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4882      	ldr	r0, [pc, #520]	; (8001698 <MX_GPIO_Init+0x310>)
 800148e:	f000 ffeb 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001492:	236a      	movs	r3, #106	; 0x6a
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	487c      	ldr	r0, [pc, #496]	; (8001698 <MX_GPIO_Init+0x310>)
 80014a8:	f000 ffde 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4878      	ldr	r0, [pc, #480]	; (80016a4 <MX_GPIO_Init+0x31c>)
 80014c4:	f000 ffd0 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80014c8:	233f      	movs	r3, #63	; 0x3f
 80014ca:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014cc:	230b      	movs	r3, #11
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4872      	ldr	r0, [pc, #456]	; (80016a4 <MX_GPIO_Init+0x31c>)
 80014dc:	f000 ffc4 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014e0:	2303      	movs	r3, #3
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014f0:	2308      	movs	r3, #8
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f000 ffb3 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001502:	f248 1304 	movw	r3, #33028	; 0x8104
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 ffa3 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001522:	2308      	movs	r3, #8
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f000 ff92 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001544:	2310      	movs	r3, #16
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001548:	230b      	movs	r3, #11
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f000 ff85 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800155e:	23e0      	movs	r3, #224	; 0xe0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800156e:	2305      	movs	r3, #5
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f000 ff74 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001580:	2301      	movs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001584:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4841      	ldr	r0, [pc, #260]	; (800169c <MX_GPIO_Init+0x314>)
 8001596:	f000 ff67 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800159e:	230b      	movs	r3, #11
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	483b      	ldr	r0, [pc, #236]	; (800169c <MX_GPIO_Init+0x314>)
 80015ae:	f000 ff5b 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015b2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80015b6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4834      	ldr	r0, [pc, #208]	; (800169c <MX_GPIO_Init+0x314>)
 80015cc:	f000 ff4c 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80015d0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80015d4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <MX_GPIO_Init+0x318>)
 80015e8:	f000 ff3e 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015ec:	f243 0381 	movw	r3, #12417	; 0x3081
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4826      	ldr	r0, [pc, #152]	; (80016a0 <MX_GPIO_Init+0x318>)
 8001606:	f000 ff2f 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800160a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4820      	ldr	r0, [pc, #128]	; (80016a4 <MX_GPIO_Init+0x31c>)
 8001624:	f000 ff20 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001628:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4819      	ldr	r0, [pc, #100]	; (80016a4 <MX_GPIO_Init+0x31c>)
 8001640:	f000 ff12 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001644:	2302      	movs	r3, #2
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001654:	2305      	movs	r3, #5
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4810      	ldr	r0, [pc, #64]	; (80016a0 <MX_GPIO_Init+0x318>)
 8001660:	f000 ff02 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001664:	2378      	movs	r3, #120	; 0x78
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001674:	2307      	movs	r3, #7
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_GPIO_Init+0x318>)
 8001680:	f000 fef2 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001684:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	e00a      	b.n	80016a8 <MX_GPIO_Init+0x320>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	48001000 	.word	0x48001000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48000800 	.word	0x48000800
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ae:	2304      	movs	r3, #4
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <MX_GPIO_Init+0x360>)
 80016ba:	f000 fed5 	bl	8002468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2017      	movs	r0, #23
 80016c4:	f000 fd8d 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c8:	2017      	movs	r0, #23
 80016ca:	f000 fda6 	bl	800221a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f000 fd85 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d8:	2028      	movs	r0, #40	; 0x28
 80016da:	f000 fd9e 	bl	800221a <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	48000400 	.word	0x48000400

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <Error_Handler+0x8>
	...

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_MspInit+0x44>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_MspInit+0x44>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6613      	str	r3, [r2, #96]	; 0x60
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_MspInit+0x44>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_MspInit+0x44>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_MspInit+0x44>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x44>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ac      	sub	sp, #176	; 0xb0
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2288      	movs	r2, #136	; 0x88
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f003 ffad 	bl	80056c0 <memset>
  if(DFSDM1_Init == 0)
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d142      	bne.n	80017f4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800176e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fa06 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800178a:	f7ff ffaf 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80017be:	f44f 7320 	mov.w	r3, #640	; 0x280
 80017c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017d8:	2306      	movs	r3, #6
 80017da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80017e6:	f000 fe3f 	bl	8002468 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a02      	ldr	r2, [pc, #8]	; (80017fc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017f2:	6013      	str	r3, [r2, #0]
  }

}
 80017f4:	bf00      	nop
 80017f6:	37b0      	adds	r7, #176	; 0xb0
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000940 	.word	0x20000940
 8001800:	40021000 	.word	0x40021000
 8001804:	48001000 	.word	0x48001000

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0ac      	sub	sp, #176	; 0xb0
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2288      	movs	r2, #136	; 0x88
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f003 ff49 	bl	80056c0 <memset>
  if(hi2c->Instance==I2C2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_I2C_MspInit+0xb0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13b      	bne.n	80018b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4618      	mov	r0, r3
 8001846:	f002 f9a3 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff ff4c 	bl	80016ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800186c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001886:	2304      	movs	r3, #4
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <HAL_I2C_MspInit+0xb8>)
 8001894:	f000 fde8 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 800189e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_I2C_MspInit+0xb4>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	37b0      	adds	r7, #176	; 0xb0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005800 	.word	0x40005800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000400 	.word	0x48000400

080018c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_QSPI_MspInit+0x7c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d128      	bne.n	8001938 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6513      	str	r3, [r2, #80]	; 0x50
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 80018f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_QSPI_MspInit+0x80>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001916:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800191a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001928:	230a      	movs	r3, #10
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_QSPI_MspInit+0x84>)
 8001934:	f000 fd98 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	a0001000 	.word	0xa0001000
 8001944:	40021000 	.word	0x40021000
 8001948:	48001000 	.word	0x48001000

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <HAL_SPI_MspInit+0x7c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d128      	bne.n	80019c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_SPI_MspInit+0x80>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a16      	ldr	r2, [pc, #88]	; (80019cc <HAL_SPI_MspInit+0x80>)
 8001974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_SPI_MspInit+0x80>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_SPI_MspInit+0x80>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_SPI_MspInit+0x80>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_SPI_MspInit+0x80>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800199e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019b0:	2306      	movs	r3, #6
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <HAL_SPI_MspInit+0x84>)
 80019bc:	f000 fd54 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40003c00 	.word	0x40003c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	48000800 	.word	0x48000800

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ae      	sub	sp, #184	; 0xb8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2288      	movs	r2, #136	; 0x88
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fe63 	bl	80056c0 <memset>
  if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_UART_MspInit+0x134>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d13b      	bne.n	8001a7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 f8bd 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a1c:	f7ff fe66 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	4a39      	ldr	r2, [pc, #228]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4826      	ldr	r0, [pc, #152]	; (8001b10 <HAL_UART_MspInit+0x13c>)
 8001a76:	f000 fcf7 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a7a:	e040      	b.n	8001afe <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d13b      	bne.n	8001afe <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a86:	2304      	movs	r3, #4
 8001a88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 f87c 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001a9e:	f7ff fe25 	bl	80016ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aec:	2307      	movs	r3, #7
 8001aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <HAL_UART_MspInit+0x144>)
 8001afa:	f000 fcb5 	bl	8002468 <HAL_GPIO_Init>
}
 8001afe:	bf00      	nop
 8001b00:	37b8      	adds	r7, #184	; 0xb8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	40004800 	.word	0x40004800
 8001b18:	48000c00 	.word	0x48000c00

08001b1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ac      	sub	sp, #176	; 0xb0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2288      	movs	r2, #136	; 0x88
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fdbf 	bl	80056c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4a:	d17c      	bne.n	8001c46 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b62:	2318      	movs	r3, #24
 8001b64:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b66:	2307      	movs	r3, #7
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001b72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 f807 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001b88:	f7ff fdb0 	bl	80016ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f000 fc51 	bl	8002468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001bc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001be0:	230a      	movs	r3, #10
 8001be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf0:	f000 fc3a 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d114      	bne.n	8001c42 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001c30:	f001 f8e2 	bl	8002df8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_PCD_MspInit+0x134>)
 8001c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c40:	e001      	b.n	8001c46 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001c42:	f001 f8d9 	bl	8002df8 <HAL_PWREx_EnableVddUSB>
}
 8001c46:	bf00      	nop
 8001c48:	37b0      	adds	r7, #176	; 0xb0
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 f980 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001cac:	2020      	movs	r0, #32
 8001cae:	f000 fd9d 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001cb2:	2040      	movs	r0, #64	; 0x40
 8001cb4:	f000 fd9a 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001cb8:	2080      	movs	r0, #128	; 0x80
 8001cba:	f000 fd97 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001cbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cc2:	f000 fd93 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001cce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cd2:	f000 fd8b 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001cd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cda:	f000 fd87 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001cde:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ce2:	f000 fd83 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ce6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cea:	f000 fd7f 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001cee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cf2:	f000 fd7b 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  return 1;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_kill>:

int _kill(int pid, int sig)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d14:	f003 fcaa 	bl	800566c <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2216      	movs	r2, #22
 8001d1c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_exit>:

void _exit (int status)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffe7 	bl	8001d0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3c:	e7fe      	b.n	8001d3c <_exit+0x12>

08001d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e00a      	b.n	8001d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d50:	f3af 8000 	nop.w
 8001d54:	4601      	mov	r1, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60ba      	str	r2, [r7, #8]
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dbf0      	blt.n	8001d50 <_read+0x12>
  }

  return len;
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e009      	b.n	8001d9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f8da 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dbf1      	blt.n	8001d8a <_write+0x12>
  }
  return len;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_close>:

int _close(int file)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_isatty>:

int _isatty(int file)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f003 fc10 	bl	800566c <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20018000 	.word	0x20018000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000944 	.word	0x20000944
 8001e80:	20000980 	.word	0x20000980

08001e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eac:	f7ff ffea 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <LoopForever+0xe>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <LoopForever+0x16>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f003 fbcf 	bl	8005678 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eda:	f7ff f849 	bl	8000f70 <main>

08001ede <LoopForever>:

LoopForever:
    b LoopForever
 8001ede:	e7fe      	b.n	8001ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001eec:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 8001ef0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ef4:	20000980 	.word	0x20000980

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>

08001efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f961 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 f80e 	bl	8001f2c <HAL_InitTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	e001      	b.n	8001f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f1c:	f7ff fbec 	bl	80016f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HAL_InitTick+0x6c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d023      	beq.n	8001f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_InitTick+0x70>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_InitTick+0x6c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f96d 	bl	8002236 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d809      	bhi.n	8001f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	f000 f937 	bl	80021e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_InitTick+0x74>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e007      	b.n	8001f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e004      	b.n	8001f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e001      	b.n	8001f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000948 	.word	0x20000948

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000948 	.word	0x20000948

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0ac      	b.n	80023bc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f8b2 	bl	80023d0 <DFSDM_GetChannelFromInstance>
 800226c:	4603      	mov	r3, r0
 800226e:	4a55      	ldr	r2, [pc, #340]	; (80023c4 <HAL_DFSDM_ChannelInit+0x174>)
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e09f      	b.n	80023bc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fa5f 	bl	8001740 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_DFSDM_ChannelInit+0x178>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_DFSDM_ChannelInit+0x178>)
 800228a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800228c:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_DFSDM_ChannelInit+0x178>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d125      	bne.n	80022e0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002294:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 800229a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800229e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80022a0:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4948      	ldr	r1, [pc, #288]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a46      	ldr	r2, [pc, #280]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022b4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80022b8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	791b      	ldrb	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d108      	bne.n	80022d4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80022c2:	4b42      	ldr	r3, [pc, #264]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	493f      	ldr	r1, [pc, #252]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <HAL_DFSDM_ChannelInit+0x17c>)
 80022da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022de:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80022ee:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022fe:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002304:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 020f 	bic.w	r2, r2, #15
 800231c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6819      	ldr	r1, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002344:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 0207 	and.w	r2, r2, #7
 8002370:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800239c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f810 	bl	80023d0 <DFSDM_GetChannelFromInstance>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4904      	ldr	r1, [pc, #16]	; (80023c4 <HAL_DFSDM_ChannelInit+0x174>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000950 	.word	0x20000950
 80023c8:	2000094c 	.word	0x2000094c
 80023cc:	40016000 	.word	0x40016000

080023d0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <DFSDM_GetChannelFromInstance+0x7c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e02b      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <DFSDM_GetChannelFromInstance+0x80>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d102      	bne.n	80023f4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e024      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <DFSDM_GetChannelFromInstance+0x84>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e01d      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <DFSDM_GetChannelFromInstance+0x88>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d102      	bne.n	8002410 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800240a:	2304      	movs	r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e016      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <DFSDM_GetChannelFromInstance+0x8c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002418:	2305      	movs	r3, #5
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e00f      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <DFSDM_GetChannelFromInstance+0x90>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d102      	bne.n	800242c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002426:	2306      	movs	r3, #6
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	e008      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <DFSDM_GetChannelFromInstance+0x94>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d102      	bne.n	800243a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002434:	2307      	movs	r3, #7
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e001      	b.n	800243e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800243a:	2303      	movs	r3, #3
 800243c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40016000 	.word	0x40016000
 8002450:	40016020 	.word	0x40016020
 8002454:	40016040 	.word	0x40016040
 8002458:	40016080 	.word	0x40016080
 800245c:	400160a0 	.word	0x400160a0
 8002460:	400160c0 	.word	0x400160c0
 8002464:	400160e0 	.word	0x400160e0

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e17f      	b.n	8002778 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8171 	beq.w	8002772 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0201 	and.w	r2, r3, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b03      	cmp	r3, #3
 8002514:	d118      	bne.n	8002548 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80ac 	beq.w	8002772 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_GPIO_Init+0x330>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	4a5e      	ldr	r2, [pc, #376]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6613      	str	r3, [r2, #96]	; 0x60
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_GPIO_Init+0x334>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x242>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x338>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x23e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x33c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x340>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x236>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x344>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x232>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x348>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_GPIO_Init+0x34c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x22a>
 800268e:	2306      	movs	r3, #6
 8002690:	e00c      	b.n	80026ac <HAL_GPIO_Init+0x244>
 8002692:	2307      	movs	r3, #7
 8002694:	e00a      	b.n	80026ac <HAL_GPIO_Init+0x244>
 8002696:	2305      	movs	r3, #5
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x244>
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x244>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026aa:	2300      	movs	r3, #0
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026bc:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_GPIO_Init+0x334>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ee:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f4:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_GPIO_Init+0x350>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_GPIO_Init+0x350>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f ae78 	bne.w	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000
 80027a0:	48000400 	.word	0x48000400
 80027a4:	48000800 	.word	0x48000800
 80027a8:	48000c00 	.word	0x48000c00
 80027ac:	48001000 	.word	0x48001000
 80027b0:	48001400 	.word	0x48001400
 80027b4:	48001800 	.word	0x48001800
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f806 	bl	800281c <HAL_GPIO_EXTI_Callback>
  }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e081      	b.n	8002948 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fe ffd5 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2224      	movs	r2, #36	; 0x24
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002882:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002892:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d104      	bne.n	80028cc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69d9      	ldr	r1, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d138      	bne.n	80029d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002970:	2302      	movs	r3, #2
 8002972:	e032      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d139      	bne.n	8002a70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e033      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2224      	movs	r2, #36	; 0x24
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a80:	b08f      	sub	sp, #60	; 0x3c
 8002a82:	af0a      	add	r7, sp, #40	; 0x28
 8002a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e116      	b.n	8002cbe <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff f836 	bl	8001b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fb43 	bl	800515a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	687e      	ldr	r6, [r7, #4]
 8002adc:	466d      	mov	r5, sp
 8002ade:	f106 0410 	add.w	r4, r6, #16
 8002ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aee:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af2:	1d33      	adds	r3, r6, #4
 8002af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f002 fb03 	bl	8005102 <USB_CoreInit>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0d7      	b.n	8002cbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 fb31 	bl	800517c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e04a      	b.n	8002bb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333d      	adds	r3, #61	; 0x3d
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	333c      	adds	r3, #60	; 0x3c
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3344      	adds	r3, #68	; 0x44
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3340      	adds	r3, #64	; 0x40
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3348      	adds	r3, #72	; 0x48
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3354      	adds	r3, #84	; 0x54
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3af      	bcc.n	8002b20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e044      	b.n	8002c50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3b5      	bcc.n	8002bc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	687e      	ldr	r6, [r7, #4]
 8002c62:	466d      	mov	r5, sp
 8002c64:	f106 0410 	add.w	r4, r6, #16
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c78:	1d33      	adds	r3, r6, #4
 8002c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f002 fac9 	bl	8005214 <USB_DevInit>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e014      	b.n	8002cbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f80a 	bl	8002cc6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fc75 	bl	80055a6 <USB_DevDisconnect>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cc6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	f043 0303 	orr.w	r3, r3, #3
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40007000 	.word	0x40007000

08002d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5a:	d130      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d68:	d038      	beq.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2232      	movs	r2, #50	; 0x32
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0c9b      	lsrs	r3, r3, #18
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d90:	e002      	b.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da4:	d102      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x60>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f2      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d110      	bne.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e00f      	b.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dca:	d007      	beq.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007000 	.word	0x40007000
 8002df0:	20000000 	.word	0x20000000
 8002df4:	431bde83 	.word	0x431bde83

08002df8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e06:	6053      	str	r3, [r2, #4]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40007000 	.word	0x40007000

08002e18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff f8d4 	bl	8001fcc <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e063      	b.n	8002ef8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe fd3d 	bl	80018c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f858 	bl	8002f04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	021a      	lsls	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	2120      	movs	r1, #32
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f850 	bl	8002f20 <QSPI_WaitFlagStateUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d131      	bne.n	8002eee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e94:	f023 0310 	bic.w	r3, r3, #16
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6852      	ldr	r2, [r2, #4]
 8002e9c:	0611      	lsls	r1, r2, #24
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_QSPI_Init+0xe8>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6912      	ldr	r2, [r2, #16]
 8002eba:	0411      	lsls	r1, r2, #16
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6952      	ldr	r2, [r2, #20]
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6992      	ldr	r2, [r2, #24]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	ffe0f8fe 	.word	0xffe0f8fe

08002f04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f30:	e01a      	b.n	8002f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f38:	d016      	beq.n	8002f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7ff f847 	bl	8001fcc <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2204      	movs	r2, #4
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e00e      	b.n	8002f86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1d6      	bne.n	8002f32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e3ca      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa2:	4b97      	ldr	r3, [pc, #604]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fac:	4b94      	ldr	r3, [pc, #592]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80e4 	beq.w	800318c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_OscConfig+0x4a>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	f040 808b 	bne.w	80030e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	f040 8087 	bne.w	80030e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fda:	4b89      	ldr	r3, [pc, #548]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e3a2      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	4b82      	ldr	r3, [pc, #520]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_RCC_OscConfig+0x7c>
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	e005      	b.n	8003018 <HAL_RCC_OscConfig+0x88>
 800300c:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003018:	4293      	cmp	r3, r2
 800301a:	d223      	bcs.n	8003064 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fd55 	bl	8003ad0 <RCC_SetFlashLatencyFromMSIRange>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e383      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003030:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a72      	ldr	r2, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	496d      	ldr	r1, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	4968      	ldr	r1, [pc, #416]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
 8003062:	e025      	b.n	80030b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4960      	ldr	r1, [pc, #384]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003082:	4b5f      	ldr	r3, [pc, #380]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	495b      	ldr	r1, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fd15 	bl	8003ad0 <RCC_SetFlashLatencyFromMSIRange>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e343      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b0:	f000 fc4a 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b52      	ldr	r3, [pc, #328]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	4950      	ldr	r1, [pc, #320]	; (8003204 <HAL_RCC_OscConfig+0x274>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <HAL_RCC_OscConfig+0x278>)
 80030ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030d0:	4b4e      	ldr	r3, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe ff29 	bl	8001f2c <HAL_InitTick>
 80030da:	4603      	mov	r3, r0
 80030dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d052      	beq.n	800318a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	e327      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d032      	beq.n	8003156 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a42      	ldr	r2, [pc, #264]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fc:	f7fe ff66 	bl	8001fcc <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003104:	f7fe ff62 	bl	8001fcc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e310      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a36      	ldr	r2, [pc, #216]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4931      	ldr	r1, [pc, #196]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	492c      	ldr	r1, [pc, #176]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	e01a      	b.n	800318c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a29      	ldr	r2, [pc, #164]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003162:	f7fe ff33 	bl	8001fcc <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316a:	f7fe ff2f 	bl	8001fcc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e2dd      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f0      	bne.n	800316a <HAL_RCC_OscConfig+0x1da>
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800318a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d074      	beq.n	8003282 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x21a>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d10e      	bne.n	80031c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	4b15      	ldr	r3, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d064      	beq.n	8003280 <HAL_RCC_OscConfig+0x2f0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d160      	bne.n	8003280 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e2ba      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x24a>
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e026      	b.n	8003228 <HAL_RCC_OscConfig+0x298>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e2:	d115      	bne.n	8003210 <HAL_RCC_OscConfig+0x280>
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a02      	ldr	r2, [pc, #8]	; (8003200 <HAL_RCC_OscConfig+0x270>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x298>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	08008150 	.word	0x08008150
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004
 8003210:	4ba0      	ldr	r3, [pc, #640]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a9f      	ldr	r2, [pc, #636]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b9d      	ldr	r3, [pc, #628]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9c      	ldr	r2, [pc, #624]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fecc 	bl	8001fcc <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fec8 	bl	8001fcc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e276      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x2a8>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe feb8 	bl	8001fcc <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe feb4 	bl	8001fcc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e262      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x2d0>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d060      	beq.n	8003350 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x310>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d119      	bne.n	80032ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d116      	bne.n	80032ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_OscConfig+0x328>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e23f      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	4973      	ldr	r1, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	e040      	b.n	8003350 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d6:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fe fe73 	bl	8001fcc <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ea:	f7fe fe6f 	bl	8001fcc <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e21d      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fc:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	495f      	ldr	r1, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	e018      	b.n	8003350 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe fe4f 	bl	8001fcc <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fe4b 	bl	8001fcc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1f9      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003344:	4b53      	ldr	r3, [pc, #332]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01c      	beq.n	800339e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fe fe2a 	bl	8001fcc <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe fe26 	bl	8001fcc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1d4      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ef      	beq.n	800337c <HAL_RCC_OscConfig+0x3ec>
 800339c:	e01b      	b.n	80033d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fe fe0d 	bl	8001fcc <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fe09 	bl	8001fcc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1b7      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ef      	bne.n	80033b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d118      	bne.n	800344e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003428:	f7fe fdd0 	bl	8001fcc <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fe fdcc 	bl	8001fcc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e17a      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCC_OscConfig+0x508>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x4d8>
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003466:	e029      	b.n	80034bc <HAL_RCC_OscConfig+0x52c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d115      	bne.n	800349c <HAL_RCC_OscConfig+0x50c>
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_RCC_OscConfig+0x504>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x52c>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
 800349c:	4b9c      	ldr	r3, [pc, #624]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a9b      	ldr	r2, [pc, #620]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ac:	4b98      	ldr	r3, [pc, #608]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	4a97      	ldr	r2, [pc, #604]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fe fd82 	bl	8001fcc <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fe fd7e 	bl	8001fcc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e12a      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	4b8b      	ldr	r3, [pc, #556]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ed      	beq.n	80034cc <HAL_RCC_OscConfig+0x53c>
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fe fd6b 	bl	8001fcc <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe fd67 	bl	8001fcc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e113      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003510:	4b7f      	ldr	r3, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ed      	bne.n	80034fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	4a79      	ldr	r2, [pc, #484]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80fe 	beq.w	8003736 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	2b02      	cmp	r3, #2
 8003540:	f040 80d0 	bne.w	80036e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003544:	4b72      	ldr	r3, [pc, #456]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d130      	bne.n	80035ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d127      	bne.n	80035ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d11f      	bne.n	80035ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003584:	2a07      	cmp	r2, #7
 8003586:	bf14      	ite	ne
 8003588:	2201      	movne	r2, #1
 800358a:	2200      	moveq	r2, #0
 800358c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358e:	4293      	cmp	r3, r2
 8003590:	d113      	bne.n	80035ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d06e      	beq.n	8003698 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d069      	beq.n	8003694 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0ad      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e8:	f7fe fcf0 	bl	8001fcc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fcec 	bl	8001fcc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e09a      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	4b43      	ldr	r3, [pc, #268]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCC_OscConfig+0x784>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800361e:	3a01      	subs	r2, #1
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003628:	0212      	lsls	r2, r2, #8
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	3a01      	subs	r2, #1
 8003634:	0552      	lsls	r2, r2, #21
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0652      	lsls	r2, r2, #25
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003648:	0912      	lsrs	r2, r2, #4
 800364a:	0452      	lsls	r2, r2, #17
 800364c:	430a      	orrs	r2, r1
 800364e:	4930      	ldr	r1, [pc, #192]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003650:	4313      	orrs	r3, r2
 8003652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800366c:	f7fe fcae 	bl	8001fcc <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fcaa 	bl	8001fcc <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e058      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003692:	e050      	b.n	8003736 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04f      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d148      	bne.n	8003736 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a16      	ldr	r2, [pc, #88]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036bc:	f7fe fc86 	bl	8001fcc <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fc82 	bl	8001fcc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e030      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x734>
 80036e2:	e028      	b.n	8003736 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d023      	beq.n	8003732 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <HAL_RCC_OscConfig+0x780>)
 80036f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe fc69 	bl	8001fcc <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	e00c      	b.n	8003718 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fe fc65 	bl	8001fcc <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d905      	bls.n	8003718 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e013      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
 8003710:	40021000 	.word	0x40021000
 8003714:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x7b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ec      	bne.n	80036fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_OscConfig+0x7b0>)
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	4905      	ldr	r1, [pc, #20]	; (8003740 <HAL_RCC_OscConfig+0x7b0>)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_OscConfig+0x7b4>)
 800372c:	4013      	ands	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e001      	b.n	8003736 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	feeefffc 	.word	0xfeeefffc

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0e7      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b75      	ldr	r3, [pc, #468]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d910      	bls.n	800378c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 0207 	bic.w	r2, r3, #7
 8003772:	4970      	ldr	r1, [pc, #448]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0cf      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b63      	ldr	r3, [pc, #396]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4960      	ldr	r1, [pc, #384]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04c      	beq.n	8003860 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d121      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0a6      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d115      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e09a      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037fe:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e08e      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e086      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0203 	bic.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4943      	ldr	r1, [pc, #268]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fe fbcc 	bl	8001fcc <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fe fbc8 	bl	8001fcc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e06e      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 020c 	and.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	429a      	cmp	r2, r3
 800385e:	d1eb      	bne.n	8003838 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	429a      	cmp	r2, r3
 800387a:	d208      	bcs.n	800388e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	492b      	ldr	r1, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d210      	bcs.n	80038be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 0207 	bic.w	r2, r3, #7
 80038a4:	4923      	ldr	r1, [pc, #140]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_ClockConfig+0x1ec>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e036      	b.n	800392c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ca:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4918      	ldr	r1, [pc, #96]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4910      	ldr	r1, [pc, #64]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038fc:	f000 f824 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	490b      	ldr	r1, [pc, #44]	; (800393c <HAL_RCC_ClockConfig+0x1f4>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1f8>)
 800391a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1fc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fb03 	bl	8001f2c <HAL_InitTick>
 8003926:	4603      	mov	r3, r0
 8003928:	72fb      	strb	r3, [r7, #11]

  return status;
 800392a:	7afb      	ldrb	r3, [r7, #11]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08008150 	.word	0x08008150
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d121      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11e      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e004      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80039ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d134      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0xa6>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d003      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0xac>
 80039ec:	e005      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	e005      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80039f6:	617b      	str	r3, [r7, #20]
      break;
 80039f8:	e002      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	617b      	str	r3, [r7, #20]
      break;
 80039fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	fb03 f202 	mul.w	r2, r3, r2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	0e5b      	lsrs	r3, r3, #25
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	3301      	adds	r3, #1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a40:	69bb      	ldr	r3, [r7, #24]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	08008168 	.word	0x08008168
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08008160 	.word	0x08008160

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003aa8:	f7ff ffda 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0adb      	lsrs	r3, r3, #11
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4904      	ldr	r1, [pc, #16]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08008160 	.word	0x08008160

08003ad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ae8:	f7ff f922 	bl	8002d30 <HAL_PWREx_GetVoltageRange>
 8003aec:	6178      	str	r0, [r7, #20]
 8003aee:	e014      	b.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afa:	6593      	str	r3, [r2, #88]	; 0x58
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b08:	f7ff f912 	bl	8002d30 <HAL_PWREx_GetVoltageRange>
 8003b0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b20:	d10b      	bne.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d919      	bls.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b2c:	d902      	bls.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b2e:	2302      	movs	r3, #2
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e013      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b34:	2301      	movs	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	e010      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d902      	bls.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b40:	2303      	movs	r3, #3
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e00a      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d102      	bne.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e004      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b70      	cmp	r3, #112	; 0x70
 8003b56:	d101      	bne.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b58:	2301      	movs	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0207 	bic.w	r2, r3, #7
 8003b64:	4909      	ldr	r1, [pc, #36]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40022000 	.word	0x40022000

08003b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d041      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bb4:	d02a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bba:	d824      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc6:	d81e      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bd2:	e018      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd4:	4b86      	ldr	r3, [pc, #536]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a85      	ldr	r2, [pc, #532]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be0:	e015      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 facb 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf2:	e00c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fbb6 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	74fb      	strb	r3, [r7, #19]
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c14:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c22:	4973      	ldr	r1, [pc, #460]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d041      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c44:	d02a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c4a:	d824      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c56:	d81e      	bhi.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c60:	d010      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c62:	e018      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c64:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a61      	ldr	r2, [pc, #388]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c70:	e015      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fa83 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c82:	e00c      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3320      	adds	r3, #32
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb6e 	bl	800436c <RCCEx_PLLSAI2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c94:	e003      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	74fb      	strb	r3, [r7, #19]
      break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca4:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb2:	494f      	ldr	r1, [pc, #316]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cba:	e001      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a0 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a3a      	ldr	r2, [pc, #232]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d10:	f7fe f95c 	bl	8001fcc <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d16:	e009      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fe f958 	bl	8001fcc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	74fb      	strb	r3, [r7, #19]
        break;
 8003d2a:	e005      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d15c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01f      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d016      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fe f917 	bl	8001fcc <HAL_GetTick>
 8003d9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da0:	e00b      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fe f913 	bl	8001fcc <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d902      	bls.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	74fb      	strb	r3, [r7, #19]
            break;
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ec      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dde:	4904      	ldr	r1, [pc, #16]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003de6:	e009      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dfc:	7c7b      	ldrb	r3, [r7, #17]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d105      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e02:	4b9e      	ldr	r3, [pc, #632]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	4a9d      	ldr	r2, [pc, #628]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e1a:	4b98      	ldr	r3, [pc, #608]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 0203 	bic.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	4994      	ldr	r1, [pc, #592]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e3c:	4b8f      	ldr	r3, [pc, #572]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 020c 	bic.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	498c      	ldr	r1, [pc, #560]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e5e:	4b87      	ldr	r3, [pc, #540]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	4983      	ldr	r1, [pc, #524]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e80:	4b7e      	ldr	r3, [pc, #504]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	497b      	ldr	r1, [pc, #492]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	4972      	ldr	r1, [pc, #456]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec4:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	496a      	ldr	r1, [pc, #424]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	4961      	ldr	r1, [pc, #388]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f08:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	4959      	ldr	r1, [pc, #356]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	4950      	ldr	r1, [pc, #320]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	4948      	ldr	r1, [pc, #288]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6e:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	493f      	ldr	r1, [pc, #252]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d028      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f90:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	4937      	ldr	r1, [pc, #220]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a31      	ldr	r2, [pc, #196]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fba:	60d3      	str	r3, [r2, #12]
 8003fbc:	e011      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f8d8 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d028      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fee:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	491f      	ldr	r1, [pc, #124]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d106      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004018:	60d3      	str	r3, [r2, #12]
 800401a:	e011      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004024:	d10c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f8a9 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02b      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	4908      	ldr	r1, [pc, #32]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d109      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a02      	ldr	r2, [pc, #8]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	e014      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f877 	bl	8004184 <RCCEx_PLLSAI1_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040be:	4928      	ldr	r1, [pc, #160]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ce:	d10d      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f854 	bl	8004184 <RCCEx_PLLSAI1_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d014      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	74bb      	strb	r3, [r7, #18]
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3320      	adds	r3, #32
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f935 	bl	800436c <RCCEx_PLLSAI2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412a:	490d      	ldr	r1, [pc, #52]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004156:	7cbb      	ldrb	r3, [r7, #18]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000

08004164 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6013      	str	r3, [r2, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000

08004184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004192:	4b75      	ldr	r3, [pc, #468]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d018      	beq.n	80041d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800419e:	4b72      	ldr	r3, [pc, #456]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0203 	and.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10d      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
       ||
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041b6:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
       ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d047      	beq.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
 80041ce:	e044      	b.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d018      	beq.n	800420a <RCCEx_PLLSAI1_Config+0x86>
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d825      	bhi.n	8004228 <RCCEx_PLLSAI1_Config+0xa4>
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d002      	beq.n	80041e6 <RCCEx_PLLSAI1_Config+0x62>
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d009      	beq.n	80041f8 <RCCEx_PLLSAI1_Config+0x74>
 80041e4:	e020      	b.n	8004228 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e6:	4b60      	ldr	r3, [pc, #384]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f6:	e01a      	b.n	800422e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f8:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004208:	e013      	b.n	8004232 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800420a:	4b57      	ldr	r3, [pc, #348]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004216:	4b54      	ldr	r3, [pc, #336]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004226:	e006      	b.n	8004236 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e004      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004236:	bf00      	nop
    }

    if(status == HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800423e:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	3b01      	subs	r3, #1
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	430b      	orrs	r3, r1
 8004254:	4944      	ldr	r1, [pc, #272]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d17d      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426c:	f7fd feae 	bl	8001fcc <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004272:	e009      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004274:	f7fd feaa 	bl	8001fcc <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d902      	bls.n	8004288 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	73fb      	strb	r3, [r7, #15]
        break;
 8004286:	e005      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004288:	4b37      	ldr	r3, [pc, #220]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ef      	bne.n	8004274 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d160      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6892      	ldr	r2, [r2, #8]
 80042b0:	0211      	lsls	r1, r2, #8
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68d2      	ldr	r2, [r2, #12]
 80042b6:	0912      	lsrs	r2, r2, #4
 80042b8:	0452      	lsls	r2, r2, #17
 80042ba:	430a      	orrs	r2, r1
 80042bc:	492a      	ldr	r1, [pc, #168]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
 80042c2:	e027      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d112      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6892      	ldr	r2, [r2, #8]
 80042da:	0211      	lsls	r1, r2, #8
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6912      	ldr	r2, [r2, #16]
 80042e0:	0852      	lsrs	r2, r2, #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	0552      	lsls	r2, r2, #21
 80042e6:	430a      	orrs	r2, r1
 80042e8:	491f      	ldr	r1, [pc, #124]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
 80042ee:	e011      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6892      	ldr	r2, [r2, #8]
 8004300:	0211      	lsls	r1, r2, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6952      	ldr	r2, [r2, #20]
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	430a      	orrs	r2, r1
 800430e:	4916      	ldr	r1, [pc, #88]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a13      	ldr	r2, [pc, #76]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800431e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fd fe54 	bl	8001fcc <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004326:	e009      	b.n	800433c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004328:	f7fd fe50 	bl	8001fcc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d902      	bls.n	800433c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
          break;
 800433a:	e005      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ef      	beq.n	8004328 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	4904      	ldr	r1, [pc, #16]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437a:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d018      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004386:	4b67      	ldr	r3, [pc, #412]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d10d      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
       ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800439e:	4b61      	ldr	r3, [pc, #388]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
       ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d047      	beq.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e044      	b.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d018      	beq.n	80043f2 <RCCEx_PLLSAI2_Config+0x86>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d825      	bhi.n	8004410 <RCCEx_PLLSAI2_Config+0xa4>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d002      	beq.n	80043ce <RCCEx_PLLSAI2_Config+0x62>
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d009      	beq.n	80043e0 <RCCEx_PLLSAI2_Config+0x74>
 80043cc:	e020      	b.n	8004410 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ce:	4b55      	ldr	r3, [pc, #340]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11d      	bne.n	8004416 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043de:	e01a      	b.n	8004416 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e0:	4b50      	ldr	r3, [pc, #320]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f0:	e013      	b.n	800441a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043f2:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fe:	4b49      	ldr	r3, [pc, #292]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800440e:	e006      	b.n	800441e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e004      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800441e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	430b      	orrs	r3, r1
 800443c:	4939      	ldr	r1, [pc, #228]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d167      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a35      	ldr	r2, [pc, #212]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fd fdba 	bl	8001fcc <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445c:	f7fd fdb6 	bl	8001fcc <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
        break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004470:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ef      	bne.n	800445c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d14a      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d111      	bne.n	80044ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	0211      	lsls	r1, r2, #8
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	0912      	lsrs	r2, r2, #4
 80044a0:	0452      	lsls	r2, r2, #17
 80044a2:	430a      	orrs	r2, r1
 80044a4:	491f      	ldr	r1, [pc, #124]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	614b      	str	r3, [r1, #20]
 80044aa:	e011      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	0211      	lsls	r1, r2, #8
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6912      	ldr	r2, [r2, #16]
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	3a01      	subs	r2, #1
 80044c6:	0652      	lsls	r2, r2, #25
 80044c8:	430a      	orrs	r2, r1
 80044ca:	4916      	ldr	r1, [pc, #88]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd fd76 	bl	8001fcc <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e2:	e009      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044e4:	f7fd fd72 	bl	8001fcc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d902      	bls.n	80044f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	73fb      	strb	r3, [r7, #15]
          break;
 80044f6:	e005      	b.n	8004504 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f8:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e095      	b.n	8004666 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454a:	d009      	beq.n	8004560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	61da      	str	r2, [r3, #28]
 8004552:	e005      	b.n	8004560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd f9e6 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a0:	d902      	bls.n	80045a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e002      	b.n	80045ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Init+0xa0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	ea42 0103 	orr.w	r1, r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	0c1b      	lsrs	r3, r3, #16
 8004624:	f003 0204 	and.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004644:	ea42 0103 	orr.w	r1, r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e040      	b.n	8004702 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fd f99f 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2224      	movs	r2, #36	; 0x24
 800469a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8c1 	bl	8004834 <UART_SetConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e022      	b.n	8004702 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb6d 	bl	8004da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fbf4 	bl	8004ee8 <UART_CheckIdleState>
 8004700:	4603      	mov	r3, r0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b08a      	sub	sp, #40	; 0x28
 800470e:	af02      	add	r7, sp, #8
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	2b20      	cmp	r3, #32
 8004720:	f040 8082 	bne.w	8004828 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_Transmit+0x26>
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e07a      	b.n	800482a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UART_Transmit+0x38>
 800473e:	2302      	movs	r3, #2
 8004740:	e073      	b.n	800482a <HAL_UART_Transmit+0x120>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004758:	f7fd fc38 	bl	8001fcc <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d108      	bne.n	800478a <HAL_UART_Transmit+0x80>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e003      	b.n	8004792 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800479a:	e02d      	b.n	80047f8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fbe7 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e039      	b.n	800482a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	b292      	uxth	r2, r2
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	3302      	adds	r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e008      	b.n	80047e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b292      	uxth	r2, r2
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1cb      	bne.n	800479c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2200      	movs	r2, #0
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fbb3 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e005      	b.n	800482a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4ba4      	ldr	r3, [pc, #656]	; (8004af4 <UART_SetConfig+0x2c0>)
 8004864:	4013      	ands	r3, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a99      	ldr	r2, [pc, #612]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	4313      	orrs	r3, r2
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a90      	ldr	r2, [pc, #576]	; (8004afc <UART_SetConfig+0x2c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d126      	bne.n	800490c <UART_SetConfig+0xd8>
 80048be:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <UART_SetConfig+0x2cc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d81b      	bhi.n	8004904 <UART_SetConfig+0xd0>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0xa0>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048ed 	.word	0x080048ed
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ea:	e116      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e112      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e10e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e10a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e106      	b.n	8004b1a <UART_SetConfig+0x2e6>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <UART_SetConfig+0x2d0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d138      	bne.n	8004988 <UART_SetConfig+0x154>
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d82d      	bhi.n	8004980 <UART_SetConfig+0x14c>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0xf8>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004961 	.word	0x08004961
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004981 	.word	0x08004981
 800493c:	08004971 	.word	0x08004971
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
 800494c:	08004969 	.word	0x08004969
 8004950:	08004981 	.word	0x08004981
 8004954:	08004981 	.word	0x08004981
 8004958:	08004981 	.word	0x08004981
 800495c:	08004979 	.word	0x08004979
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e0d8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e0d4      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e0d0      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e0cc      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e0c8      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <UART_SetConfig+0x2d4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d125      	bne.n	80049de <UART_SetConfig+0x1aa>
 8004992:	4b5b      	ldr	r3, [pc, #364]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d016      	beq.n	80049ce <UART_SetConfig+0x19a>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d818      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d00a      	beq.n	80049be <UART_SetConfig+0x18a>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d814      	bhi.n	80049d6 <UART_SetConfig+0x1a2>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0x182>
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d008      	beq.n	80049c6 <UART_SetConfig+0x192>
 80049b4:	e00f      	b.n	80049d6 <UART_SetConfig+0x1a2>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e0ad      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049be:	2302      	movs	r3, #2
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c4:	e0a9      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049c6:	2304      	movs	r3, #4
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049cc:	e0a5      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049ce:	2308      	movs	r3, #8
 80049d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d4:	e0a1      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049d6:	2310      	movs	r3, #16
 80049d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049dc:	e09d      	b.n	8004b1a <UART_SetConfig+0x2e6>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <UART_SetConfig+0x2d8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d125      	bne.n	8004a34 <UART_SetConfig+0x200>
 80049e8:	4b45      	ldr	r3, [pc, #276]	; (8004b00 <UART_SetConfig+0x2cc>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d016      	beq.n	8004a24 <UART_SetConfig+0x1f0>
 80049f6:	2bc0      	cmp	r3, #192	; 0xc0
 80049f8:	d818      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d00a      	beq.n	8004a14 <UART_SetConfig+0x1e0>
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d814      	bhi.n	8004a2c <UART_SetConfig+0x1f8>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x1d8>
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d008      	beq.n	8004a1c <UART_SetConfig+0x1e8>
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x1f8>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e082      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e07e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e07a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e076      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e072      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a35      	ldr	r2, [pc, #212]	; (8004b10 <UART_SetConfig+0x2dc>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d12a      	bne.n	8004a94 <UART_SetConfig+0x260>
 8004a3e:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d01a      	beq.n	8004a84 <UART_SetConfig+0x250>
 8004a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a52:	d81b      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d00c      	beq.n	8004a74 <UART_SetConfig+0x240>
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5e:	d815      	bhi.n	8004a8c <UART_SetConfig+0x258>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <UART_SetConfig+0x238>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d008      	beq.n	8004a7c <UART_SetConfig+0x248>
 8004a6a:	e00f      	b.n	8004a8c <UART_SetConfig+0x258>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e052      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a74:	2302      	movs	r3, #2
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e04e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a82:	e04a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8a:	e046      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a92:	e042      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <UART_SetConfig+0x2c4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d13a      	bne.n	8004b14 <UART_SetConfig+0x2e0>
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <UART_SetConfig+0x2cc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aac:	d01a      	beq.n	8004ae4 <UART_SetConfig+0x2b0>
 8004aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab2:	d81b      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d00c      	beq.n	8004ad4 <UART_SetConfig+0x2a0>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d815      	bhi.n	8004aec <UART_SetConfig+0x2b8>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <UART_SetConfig+0x298>
 8004ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac8:	d008      	beq.n	8004adc <UART_SetConfig+0x2a8>
 8004aca:	e00f      	b.n	8004aec <UART_SetConfig+0x2b8>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e022      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e01e      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e01a      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e016      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e012      	b.n	8004b1a <UART_SetConfig+0x2e6>
 8004af4:	efff69f3 	.word	0xefff69f3
 8004af8:	40008000 	.word	0x40008000
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40004400 	.word	0x40004400
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	40004c00 	.word	0x40004c00
 8004b10:	40005000 	.word	0x40005000
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a9f      	ldr	r2, [pc, #636]	; (8004d9c <UART_SetConfig+0x568>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d17a      	bne.n	8004c1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d824      	bhi.n	8004b76 <UART_SetConfig+0x342>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x300>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b77 	.word	0x08004b77
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004b67 	.word	0x08004b67
 8004b48:	08004b77 	.word	0x08004b77
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b77 	.word	0x08004b77
 8004b54:	08004b6f 	.word	0x08004b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe ff8e 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <UART_SetConfig+0x56c>)
 8004b62:	61fb      	str	r3, [r7, #28]
        break;
 8004b64:	e00d      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fe feef 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8004b6a:	61f8      	str	r0, [r7, #28]
        break;
 8004b6c:	e009      	b.n	8004b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e005      	b.n	8004b82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80fb 	beq.w	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d305      	bcc.n	8004ba6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d903      	bls.n	8004bae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bac:	e0e8      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	022b      	lsls	r3, r5, #8
 8004bc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bc4:	0222      	lsls	r2, r4, #8
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6849      	ldr	r1, [r1, #4]
 8004bca:	0849      	lsrs	r1, r1, #1
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4688      	mov	r8, r1
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	eb12 0a08 	adds.w	sl, r2, r8
 8004bd6:	eb43 0b09 	adc.w	fp, r3, r9
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	4650      	mov	r0, sl
 8004bea:	4659      	mov	r1, fp
 8004bec:	f7fc f82c 	bl	8000c48 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d308      	bcc.n	8004c12 <UART_SetConfig+0x3de>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c06:	d204      	bcs.n	8004c12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e0b6      	b.n	8004d80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c18:	e0b2      	b.n	8004d80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d15e      	bne.n	8004ce2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x44a>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x400>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe ff0e 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fe ff20 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8004c64:	61f8      	str	r0, [r7, #28]
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <UART_SetConfig+0x56c>)
 8004c6a:	61fb      	str	r3, [r7, #28]
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fe fe6b 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8004c72:	61f8      	str	r0, [r7, #28]
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	61fb      	str	r3, [r7, #28]
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d077      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005a      	lsls	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b0f      	cmp	r3, #15
 8004caa:	d916      	bls.n	8004cda <UART_SetConfig+0x4a6>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb2:	d212      	bcs.n	8004cda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f023 030f 	bic.w	r3, r3, #15
 8004cbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	8afb      	ldrh	r3, [r7, #22]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	8afa      	ldrh	r2, [r7, #22]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	e052      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ce0:	e04e      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d827      	bhi.n	8004d3a <UART_SetConfig+0x506>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x4bc>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe feb0 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e014      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe fec2 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8004d20:	61f8      	str	r0, [r7, #28]
        break;
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <UART_SetConfig+0x56c>)
 8004d26:	61fb      	str	r3, [r7, #28]
        break;
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe fe0d 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61f8      	str	r0, [r7, #28]
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	61fb      	str	r3, [r7, #28]
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d44:	bf00      	nop
    }

    if (pclk != 0U)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d019      	beq.n	8004d80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085a      	lsrs	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	441a      	add	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d909      	bls.n	8004d7a <UART_SetConfig+0x546>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d205      	bcs.n	8004d7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e002      	b.n	8004d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3728      	adds	r7, #40	; 0x28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40008000 	.word	0x40008000
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d10a      	bne.n	8004eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fd f868 	bl	8001fcc <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d10e      	bne.n	8004f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f82d 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e023      	b.n	8004f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d10e      	bne.n	8004f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f817 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00d      	b.n	8004f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	e0a5      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f92:	f000 80a1 	beq.w	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd f819 	bl	8001fcc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d13e      	bne.n	800502a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e067      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04f      	beq.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d147      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005050:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
 8005072:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	613b      	str	r3, [r7, #16]
   return(result);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	66bb      	str	r3, [r7, #104]	; 0x68
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050a4:	623a      	str	r2, [r7, #32]
 80050a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	69f9      	ldr	r1, [r7, #28]
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e010      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	f43f af4a 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3770      	adds	r7, #112	; 0x70
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005102:	b084      	sub	sp, #16
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	f107 001c 	add.w	r0, r7, #28
 8005110:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa6f 	bl	8005604 <USB_CoreReset>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800512a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
 800513c:	e005      	b.n	800514a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005156:	b004      	add	sp, #16
 8005158:	4770      	bx	lr

0800515a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d115      	bne.n	80051ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051aa:	2001      	movs	r0, #1
 80051ac:	f7fc ff1a 	bl	8001fe4 <HAL_Delay>
      ms++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa16 	bl	80055e8 <USB_GetMode>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d01e      	beq.n	8005200 <USB_SetCurrentMode+0x84>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b31      	cmp	r3, #49	; 0x31
 80051c6:	d9f0      	bls.n	80051aa <USB_SetCurrentMode+0x2e>
 80051c8:	e01a      	b.n	8005200 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d115      	bne.n	80051fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051dc:	2001      	movs	r0, #1
 80051de:	f7fc ff01 	bl	8001fe4 <HAL_Delay>
      ms++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f9fd 	bl	80055e8 <USB_GetMode>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <USB_SetCurrentMode+0x84>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b31      	cmp	r3, #49	; 0x31
 80051f8:	d9f0      	bls.n	80051dc <USB_SetCurrentMode+0x60>
 80051fa:	e001      	b.n	8005200 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e005      	b.n	800520c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b32      	cmp	r3, #50	; 0x32
 8005204:	d101      	bne.n	800520a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e009      	b.n	8005248 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3340      	adds	r3, #64	; 0x40
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	2200      	movs	r2, #0
 8005240:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	3301      	adds	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0e      	cmp	r3, #14
 800524c:	d9f2      	bls.n	8005234 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800524e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11c      	bne.n	800528e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005262:	f043 0302 	orr.w	r3, r3, #2
 8005266:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e005      	b.n	800529a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	4619      	mov	r1, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	461a      	mov	r2, r3
 80052b6:	680b      	ldr	r3, [r1, #0]
 80052b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ba:	2103      	movs	r1, #3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f959 	bl	8005574 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052c2:	2110      	movs	r1, #16
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8f1 	bl	80054ac <USB_FlushTxFifo>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f91d 	bl	8005514 <USB_FlushRxFifo>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e043      	b.n	8005396 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005324:	d118      	bne.n	8005358 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e013      	b.n	800536a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	461a      	mov	r2, r3
 8005350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e008      	b.n	800536a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	461a      	mov	r2, r3
 800538a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800538e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3301      	adds	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d3b7      	bcc.n	800530e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e043      	b.n	800542c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ba:	d118      	bne.n	80053ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e013      	b.n	8005400 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e008      	b.n	8005400 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	461a      	mov	r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	461a      	mov	r2, r3
 8005420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3301      	adds	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d3b7      	bcc.n	80053a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005446:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005454:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f043 0210 	orr.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <USB_DevInit+0x294>)
 8005468:	4313      	orrs	r3, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f043 0208 	orr.w	r2, r3, #8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b004      	add	sp, #16
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	803c3800 	.word	0x803c3800

080054ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a13      	ldr	r2, [pc, #76]	; (8005510 <USB_FlushTxFifo+0x64>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e01b      	b.n	8005504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	daf2      	bge.n	80054ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	019b      	lsls	r3, r3, #6
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <USB_FlushTxFifo+0x64>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e006      	b.n	8005504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d0f0      	beq.n	80054e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	00030d40 	.word	0x00030d40

08005514 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a11      	ldr	r2, [pc, #68]	; (8005570 <USB_FlushRxFifo+0x5c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e018      	b.n	8005564 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	daf2      	bge.n	8005520 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2210      	movs	r2, #16
 8005542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <USB_FlushRxFifo+0x5c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e006      	b.n	8005564 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b10      	cmp	r3, #16
 8005560:	d0f0      	beq.n	8005544 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	00030d40 	.word	0x00030d40

08005574 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 0301 	and.w	r3, r3, #1
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <USB_CoreReset+0x64>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e01b      	b.n	800565a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	daf2      	bge.n	8005610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a09      	ldr	r2, [pc, #36]	; (8005668 <USB_CoreReset+0x64>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e006      	b.n	800565a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b01      	cmp	r3, #1
 8005656:	d0f0      	beq.n	800563a <USB_CoreReset+0x36>

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	00030d40 	.word	0x00030d40

0800566c <__errno>:
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <__errno+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000000c 	.word	0x2000000c

08005678 <__libc_init_array>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	4d0d      	ldr	r5, [pc, #52]	; (80056b0 <__libc_init_array+0x38>)
 800567c:	4c0d      	ldr	r4, [pc, #52]	; (80056b4 <__libc_init_array+0x3c>)
 800567e:	1b64      	subs	r4, r4, r5
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	2600      	movs	r6, #0
 8005684:	42a6      	cmp	r6, r4
 8005686:	d109      	bne.n	800569c <__libc_init_array+0x24>
 8005688:	4d0b      	ldr	r5, [pc, #44]	; (80056b8 <__libc_init_array+0x40>)
 800568a:	4c0c      	ldr	r4, [pc, #48]	; (80056bc <__libc_init_array+0x44>)
 800568c:	f002 fd50 	bl	8008130 <_init>
 8005690:	1b64      	subs	r4, r4, r5
 8005692:	10a4      	asrs	r4, r4, #2
 8005694:	2600      	movs	r6, #0
 8005696:	42a6      	cmp	r6, r4
 8005698:	d105      	bne.n	80056a6 <__libc_init_array+0x2e>
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a0:	4798      	blx	r3
 80056a2:	3601      	adds	r6, #1
 80056a4:	e7ee      	b.n	8005684 <__libc_init_array+0xc>
 80056a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056aa:	4798      	blx	r3
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7f2      	b.n	8005696 <__libc_init_array+0x1e>
 80056b0:	0800857c 	.word	0x0800857c
 80056b4:	0800857c 	.word	0x0800857c
 80056b8:	0800857c 	.word	0x0800857c
 80056bc:	08008580 	.word	0x08008580

080056c0 <memset>:
 80056c0:	4402      	add	r2, r0
 80056c2:	4603      	mov	r3, r0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	f803 1b01 	strb.w	r1, [r3], #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <__cvt>:
 80056d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	ec55 4b10 	vmov	r4, r5, d0
 80056d8:	2d00      	cmp	r5, #0
 80056da:	460e      	mov	r6, r1
 80056dc:	4619      	mov	r1, r3
 80056de:	462b      	mov	r3, r5
 80056e0:	bfbb      	ittet	lt
 80056e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056e6:	461d      	movlt	r5, r3
 80056e8:	2300      	movge	r3, #0
 80056ea:	232d      	movlt	r3, #45	; 0x2d
 80056ec:	700b      	strb	r3, [r1, #0]
 80056ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056f4:	4691      	mov	r9, r2
 80056f6:	f023 0820 	bic.w	r8, r3, #32
 80056fa:	bfbc      	itt	lt
 80056fc:	4622      	movlt	r2, r4
 80056fe:	4614      	movlt	r4, r2
 8005700:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005704:	d005      	beq.n	8005712 <__cvt+0x42>
 8005706:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800570a:	d100      	bne.n	800570e <__cvt+0x3e>
 800570c:	3601      	adds	r6, #1
 800570e:	2102      	movs	r1, #2
 8005710:	e000      	b.n	8005714 <__cvt+0x44>
 8005712:	2103      	movs	r1, #3
 8005714:	ab03      	add	r3, sp, #12
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	ab02      	add	r3, sp, #8
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	ec45 4b10 	vmov	d0, r4, r5
 8005720:	4653      	mov	r3, sl
 8005722:	4632      	mov	r2, r6
 8005724:	f000 fce4 	bl	80060f0 <_dtoa_r>
 8005728:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800572c:	4607      	mov	r7, r0
 800572e:	d102      	bne.n	8005736 <__cvt+0x66>
 8005730:	f019 0f01 	tst.w	r9, #1
 8005734:	d022      	beq.n	800577c <__cvt+0xac>
 8005736:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800573a:	eb07 0906 	add.w	r9, r7, r6
 800573e:	d110      	bne.n	8005762 <__cvt+0x92>
 8005740:	783b      	ldrb	r3, [r7, #0]
 8005742:	2b30      	cmp	r3, #48	; 0x30
 8005744:	d10a      	bne.n	800575c <__cvt+0x8c>
 8005746:	2200      	movs	r2, #0
 8005748:	2300      	movs	r3, #0
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fb f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005752:	b918      	cbnz	r0, 800575c <__cvt+0x8c>
 8005754:	f1c6 0601 	rsb	r6, r6, #1
 8005758:	f8ca 6000 	str.w	r6, [sl]
 800575c:	f8da 3000 	ldr.w	r3, [sl]
 8005760:	4499      	add	r9, r3
 8005762:	2200      	movs	r2, #0
 8005764:	2300      	movs	r3, #0
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fb f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800576e:	b108      	cbz	r0, 8005774 <__cvt+0xa4>
 8005770:	f8cd 900c 	str.w	r9, [sp, #12]
 8005774:	2230      	movs	r2, #48	; 0x30
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	454b      	cmp	r3, r9
 800577a:	d307      	bcc.n	800578c <__cvt+0xbc>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005780:	1bdb      	subs	r3, r3, r7
 8005782:	4638      	mov	r0, r7
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	b004      	add	sp, #16
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	1c59      	adds	r1, r3, #1
 800578e:	9103      	str	r1, [sp, #12]
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e7f0      	b.n	8005776 <__cvt+0xa6>

08005794 <__exponent>:
 8005794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005796:	4603      	mov	r3, r0
 8005798:	2900      	cmp	r1, #0
 800579a:	bfb8      	it	lt
 800579c:	4249      	neglt	r1, r1
 800579e:	f803 2b02 	strb.w	r2, [r3], #2
 80057a2:	bfb4      	ite	lt
 80057a4:	222d      	movlt	r2, #45	; 0x2d
 80057a6:	222b      	movge	r2, #43	; 0x2b
 80057a8:	2909      	cmp	r1, #9
 80057aa:	7042      	strb	r2, [r0, #1]
 80057ac:	dd2a      	ble.n	8005804 <__exponent+0x70>
 80057ae:	f10d 0407 	add.w	r4, sp, #7
 80057b2:	46a4      	mov	ip, r4
 80057b4:	270a      	movs	r7, #10
 80057b6:	46a6      	mov	lr, r4
 80057b8:	460a      	mov	r2, r1
 80057ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80057be:	fb07 1516 	mls	r5, r7, r6, r1
 80057c2:	3530      	adds	r5, #48	; 0x30
 80057c4:	2a63      	cmp	r2, #99	; 0x63
 80057c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80057ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057ce:	4631      	mov	r1, r6
 80057d0:	dcf1      	bgt.n	80057b6 <__exponent+0x22>
 80057d2:	3130      	adds	r1, #48	; 0x30
 80057d4:	f1ae 0502 	sub.w	r5, lr, #2
 80057d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057dc:	1c44      	adds	r4, r0, #1
 80057de:	4629      	mov	r1, r5
 80057e0:	4561      	cmp	r1, ip
 80057e2:	d30a      	bcc.n	80057fa <__exponent+0x66>
 80057e4:	f10d 0209 	add.w	r2, sp, #9
 80057e8:	eba2 020e 	sub.w	r2, r2, lr
 80057ec:	4565      	cmp	r5, ip
 80057ee:	bf88      	it	hi
 80057f0:	2200      	movhi	r2, #0
 80057f2:	4413      	add	r3, r2
 80057f4:	1a18      	subs	r0, r3, r0
 80057f6:	b003      	add	sp, #12
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005802:	e7ed      	b.n	80057e0 <__exponent+0x4c>
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	3130      	adds	r1, #48	; 0x30
 8005808:	7083      	strb	r3, [r0, #2]
 800580a:	70c1      	strb	r1, [r0, #3]
 800580c:	1d03      	adds	r3, r0, #4
 800580e:	e7f1      	b.n	80057f4 <__exponent+0x60>

08005810 <_printf_float>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	ed2d 8b02 	vpush	{d8}
 8005818:	b08d      	sub	sp, #52	; 0x34
 800581a:	460c      	mov	r4, r1
 800581c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005820:	4616      	mov	r6, r2
 8005822:	461f      	mov	r7, r3
 8005824:	4605      	mov	r5, r0
 8005826:	f001 fb47 	bl	8006eb8 <_localeconv_r>
 800582a:	f8d0 a000 	ldr.w	sl, [r0]
 800582e:	4650      	mov	r0, sl
 8005830:	f7fa fcce 	bl	80001d0 <strlen>
 8005834:	2300      	movs	r3, #0
 8005836:	930a      	str	r3, [sp, #40]	; 0x28
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	9305      	str	r3, [sp, #20]
 800583c:	f8d8 3000 	ldr.w	r3, [r8]
 8005840:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005844:	3307      	adds	r3, #7
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	f103 0208 	add.w	r2, r3, #8
 800584e:	f8c8 2000 	str.w	r2, [r8]
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800585a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800585e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005862:	9307      	str	r3, [sp, #28]
 8005864:	f8cd 8018 	str.w	r8, [sp, #24]
 8005868:	ee08 0a10 	vmov	s16, r0
 800586c:	4b9f      	ldr	r3, [pc, #636]	; (8005aec <_printf_float+0x2dc>)
 800586e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005876:	f7fb f959 	bl	8000b2c <__aeabi_dcmpun>
 800587a:	bb88      	cbnz	r0, 80058e0 <_printf_float+0xd0>
 800587c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005880:	4b9a      	ldr	r3, [pc, #616]	; (8005aec <_printf_float+0x2dc>)
 8005882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005886:	f7fb f933 	bl	8000af0 <__aeabi_dcmple>
 800588a:	bb48      	cbnz	r0, 80058e0 <_printf_float+0xd0>
 800588c:	2200      	movs	r2, #0
 800588e:	2300      	movs	r3, #0
 8005890:	4640      	mov	r0, r8
 8005892:	4649      	mov	r1, r9
 8005894:	f7fb f922 	bl	8000adc <__aeabi_dcmplt>
 8005898:	b110      	cbz	r0, 80058a0 <_printf_float+0x90>
 800589a:	232d      	movs	r3, #45	; 0x2d
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	4b93      	ldr	r3, [pc, #588]	; (8005af0 <_printf_float+0x2e0>)
 80058a2:	4894      	ldr	r0, [pc, #592]	; (8005af4 <_printf_float+0x2e4>)
 80058a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058a8:	bf94      	ite	ls
 80058aa:	4698      	movls	r8, r3
 80058ac:	4680      	movhi	r8, r0
 80058ae:	2303      	movs	r3, #3
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	9b05      	ldr	r3, [sp, #20]
 80058b4:	f023 0204 	bic.w	r2, r3, #4
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	f04f 0900 	mov.w	r9, #0
 80058be:	9700      	str	r7, [sp, #0]
 80058c0:	4633      	mov	r3, r6
 80058c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 f9d8 	bl	8005c7c <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	f040 8090 	bne.w	80059f2 <_printf_float+0x1e2>
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d6:	b00d      	add	sp, #52	; 0x34
 80058d8:	ecbd 8b02 	vpop	{d8}
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fb f920 	bl	8000b2c <__aeabi_dcmpun>
 80058ec:	b140      	cbz	r0, 8005900 <_printf_float+0xf0>
 80058ee:	464b      	mov	r3, r9
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfbc      	itt	lt
 80058f4:	232d      	movlt	r3, #45	; 0x2d
 80058f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058fa:	487f      	ldr	r0, [pc, #508]	; (8005af8 <_printf_float+0x2e8>)
 80058fc:	4b7f      	ldr	r3, [pc, #508]	; (8005afc <_printf_float+0x2ec>)
 80058fe:	e7d1      	b.n	80058a4 <_printf_float+0x94>
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005906:	9206      	str	r2, [sp, #24]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	d13f      	bne.n	800598c <_printf_float+0x17c>
 800590c:	2306      	movs	r3, #6
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	9b05      	ldr	r3, [sp, #20]
 8005912:	6861      	ldr	r1, [r4, #4]
 8005914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005918:	2300      	movs	r3, #0
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	ab0a      	add	r3, sp, #40	; 0x28
 800591e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005922:	ab09      	add	r3, sp, #36	; 0x24
 8005924:	ec49 8b10 	vmov	d0, r8, r9
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6022      	str	r2, [r4, #0]
 800592c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005930:	4628      	mov	r0, r5
 8005932:	f7ff fecd 	bl	80056d0 <__cvt>
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800593a:	2b47      	cmp	r3, #71	; 0x47
 800593c:	4680      	mov	r8, r0
 800593e:	d108      	bne.n	8005952 <_printf_float+0x142>
 8005940:	1cc8      	adds	r0, r1, #3
 8005942:	db02      	blt.n	800594a <_printf_float+0x13a>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	4299      	cmp	r1, r3
 8005948:	dd41      	ble.n	80059ce <_printf_float+0x1be>
 800594a:	f1ab 0b02 	sub.w	fp, fp, #2
 800594e:	fa5f fb8b 	uxtb.w	fp, fp
 8005952:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005956:	d820      	bhi.n	800599a <_printf_float+0x18a>
 8005958:	3901      	subs	r1, #1
 800595a:	465a      	mov	r2, fp
 800595c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005960:	9109      	str	r1, [sp, #36]	; 0x24
 8005962:	f7ff ff17 	bl	8005794 <__exponent>
 8005966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005968:	1813      	adds	r3, r2, r0
 800596a:	2a01      	cmp	r2, #1
 800596c:	4681      	mov	r9, r0
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	dc02      	bgt.n	8005978 <_printf_float+0x168>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	07d2      	lsls	r2, r2, #31
 8005976:	d501      	bpl.n	800597c <_printf_float+0x16c>
 8005978:	3301      	adds	r3, #1
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005980:	2b00      	cmp	r3, #0
 8005982:	d09c      	beq.n	80058be <_printf_float+0xae>
 8005984:	232d      	movs	r3, #45	; 0x2d
 8005986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800598a:	e798      	b.n	80058be <_printf_float+0xae>
 800598c:	9a06      	ldr	r2, [sp, #24]
 800598e:	2a47      	cmp	r2, #71	; 0x47
 8005990:	d1be      	bne.n	8005910 <_printf_float+0x100>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1bc      	bne.n	8005910 <_printf_float+0x100>
 8005996:	2301      	movs	r3, #1
 8005998:	e7b9      	b.n	800590e <_printf_float+0xfe>
 800599a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800599e:	d118      	bne.n	80059d2 <_printf_float+0x1c2>
 80059a0:	2900      	cmp	r1, #0
 80059a2:	6863      	ldr	r3, [r4, #4]
 80059a4:	dd0b      	ble.n	80059be <_printf_float+0x1ae>
 80059a6:	6121      	str	r1, [r4, #16]
 80059a8:	b913      	cbnz	r3, 80059b0 <_printf_float+0x1a0>
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	07d0      	lsls	r0, r2, #31
 80059ae:	d502      	bpl.n	80059b6 <_printf_float+0x1a6>
 80059b0:	3301      	adds	r3, #1
 80059b2:	440b      	add	r3, r1
 80059b4:	6123      	str	r3, [r4, #16]
 80059b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80059b8:	f04f 0900 	mov.w	r9, #0
 80059bc:	e7de      	b.n	800597c <_printf_float+0x16c>
 80059be:	b913      	cbnz	r3, 80059c6 <_printf_float+0x1b6>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	07d2      	lsls	r2, r2, #31
 80059c4:	d501      	bpl.n	80059ca <_printf_float+0x1ba>
 80059c6:	3302      	adds	r3, #2
 80059c8:	e7f4      	b.n	80059b4 <_printf_float+0x1a4>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e7f2      	b.n	80059b4 <_printf_float+0x1a4>
 80059ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	4299      	cmp	r1, r3
 80059d6:	db05      	blt.n	80059e4 <_printf_float+0x1d4>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	6121      	str	r1, [r4, #16]
 80059dc:	07d8      	lsls	r0, r3, #31
 80059de:	d5ea      	bpl.n	80059b6 <_printf_float+0x1a6>
 80059e0:	1c4b      	adds	r3, r1, #1
 80059e2:	e7e7      	b.n	80059b4 <_printf_float+0x1a4>
 80059e4:	2900      	cmp	r1, #0
 80059e6:	bfd4      	ite	le
 80059e8:	f1c1 0202 	rsble	r2, r1, #2
 80059ec:	2201      	movgt	r2, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	e7e0      	b.n	80059b4 <_printf_float+0x1a4>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	055a      	lsls	r2, r3, #21
 80059f6:	d407      	bmi.n	8005a08 <_printf_float+0x1f8>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	4642      	mov	r2, r8
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	d12c      	bne.n	8005a60 <_printf_float+0x250>
 8005a06:	e764      	b.n	80058d2 <_printf_float+0xc2>
 8005a08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a0c:	f240 80e0 	bls.w	8005bd0 <_printf_float+0x3c0>
 8005a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	f7fb f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d034      	beq.n	8005a8a <_printf_float+0x27a>
 8005a20:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <_printf_float+0x2f0>)
 8005a22:	2301      	movs	r3, #1
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f af51 	beq.w	80058d2 <_printf_float+0xc2>
 8005a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a34:	429a      	cmp	r2, r3
 8005a36:	db02      	blt.n	8005a3e <_printf_float+0x22e>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	07d8      	lsls	r0, r3, #31
 8005a3c:	d510      	bpl.n	8005a60 <_printf_float+0x250>
 8005a3e:	ee18 3a10 	vmov	r3, s16
 8005a42:	4652      	mov	r2, sl
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af41 	beq.w	80058d2 <_printf_float+0xc2>
 8005a50:	f04f 0800 	mov.w	r8, #0
 8005a54:	f104 091a 	add.w	r9, r4, #26
 8005a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4543      	cmp	r3, r8
 8005a5e:	dc09      	bgt.n	8005a74 <_printf_float+0x264>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	079b      	lsls	r3, r3, #30
 8005a64:	f100 8105 	bmi.w	8005c72 <_printf_float+0x462>
 8005a68:	68e0      	ldr	r0, [r4, #12]
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	4298      	cmp	r0, r3
 8005a6e:	bfb8      	it	lt
 8005a70:	4618      	movlt	r0, r3
 8005a72:	e730      	b.n	80058d6 <_printf_float+0xc6>
 8005a74:	2301      	movs	r3, #1
 8005a76:	464a      	mov	r2, r9
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af27 	beq.w	80058d2 <_printf_float+0xc2>
 8005a84:	f108 0801 	add.w	r8, r8, #1
 8005a88:	e7e6      	b.n	8005a58 <_printf_float+0x248>
 8005a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc39      	bgt.n	8005b04 <_printf_float+0x2f4>
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <_printf_float+0x2f0>)
 8005a92:	2301      	movs	r3, #1
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af19 	beq.w	80058d2 <_printf_float+0xc2>
 8005aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	d102      	bne.n	8005aae <_printf_float+0x29e>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d5d8      	bpl.n	8005a60 <_printf_float+0x250>
 8005aae:	ee18 3a10 	vmov	r3, s16
 8005ab2:	4652      	mov	r2, sl
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af09 	beq.w	80058d2 <_printf_float+0xc2>
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	f104 0a1a 	add.w	sl, r4, #26
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	425b      	negs	r3, r3
 8005acc:	454b      	cmp	r3, r9
 8005ace:	dc01      	bgt.n	8005ad4 <_printf_float+0x2c4>
 8005ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad2:	e792      	b.n	80059fa <_printf_float+0x1ea>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f aef7 	beq.w	80058d2 <_printf_float+0xc2>
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	e7ee      	b.n	8005ac8 <_printf_float+0x2b8>
 8005aea:	bf00      	nop
 8005aec:	7fefffff 	.word	0x7fefffff
 8005af0:	0800819c 	.word	0x0800819c
 8005af4:	080081a0 	.word	0x080081a0
 8005af8:	080081a8 	.word	0x080081a8
 8005afc:	080081a4 	.word	0x080081a4
 8005b00:	080081ac 	.word	0x080081ac
 8005b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bfa8      	it	ge
 8005b0c:	461a      	movge	r2, r3
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	4691      	mov	r9, r2
 8005b12:	dc37      	bgt.n	8005b84 <_printf_float+0x374>
 8005b14:	f04f 0b00 	mov.w	fp, #0
 8005b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1c:	f104 021a 	add.w	r2, r4, #26
 8005b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	eba3 0309 	sub.w	r3, r3, r9
 8005b28:	455b      	cmp	r3, fp
 8005b2a:	dc33      	bgt.n	8005b94 <_printf_float+0x384>
 8005b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b30:	429a      	cmp	r2, r3
 8005b32:	db3b      	blt.n	8005bac <_printf_float+0x39c>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07da      	lsls	r2, r3, #31
 8005b38:	d438      	bmi.n	8005bac <_printf_float+0x39c>
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	9a05      	ldr	r2, [sp, #20]
 8005b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b40:	1a9a      	subs	r2, r3, r2
 8005b42:	eba3 0901 	sub.w	r9, r3, r1
 8005b46:	4591      	cmp	r9, r2
 8005b48:	bfa8      	it	ge
 8005b4a:	4691      	movge	r9, r2
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dc35      	bgt.n	8005bbe <_printf_float+0x3ae>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b5a:	f104 0a1a 	add.w	sl, r4, #26
 8005b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	eba3 0309 	sub.w	r3, r3, r9
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	f77f af79 	ble.w	8005a60 <_printf_float+0x250>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4652      	mov	r2, sl
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f aeaa 	beq.w	80058d2 <_printf_float+0xc2>
 8005b7e:	f108 0801 	add.w	r8, r8, #1
 8005b82:	e7ec      	b.n	8005b5e <_printf_float+0x34e>
 8005b84:	4613      	mov	r3, r2
 8005b86:	4631      	mov	r1, r6
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c0      	bne.n	8005b14 <_printf_float+0x304>
 8005b92:	e69e      	b.n	80058d2 <_printf_float+0xc2>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	9205      	str	r2, [sp, #20]
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f ae97 	beq.w	80058d2 <_printf_float+0xc2>
 8005ba4:	9a05      	ldr	r2, [sp, #20]
 8005ba6:	f10b 0b01 	add.w	fp, fp, #1
 8005baa:	e7b9      	b.n	8005b20 <_printf_float+0x310>
 8005bac:	ee18 3a10 	vmov	r3, s16
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d1be      	bne.n	8005b3a <_printf_float+0x32a>
 8005bbc:	e689      	b.n	80058d2 <_printf_float+0xc2>
 8005bbe:	9a05      	ldr	r2, [sp, #20]
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	4442      	add	r2, r8
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	d1c1      	bne.n	8005b52 <_printf_float+0x342>
 8005bce:	e680      	b.n	80058d2 <_printf_float+0xc2>
 8005bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	dc01      	bgt.n	8005bda <_printf_float+0x3ca>
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d538      	bpl.n	8005c4c <_printf_float+0x43c>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4642      	mov	r2, r8
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae74 	beq.w	80058d2 <_printf_float+0xc2>
 8005bea:	ee18 3a10 	vmov	r3, s16
 8005bee:	4652      	mov	r2, sl
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f ae6b 	beq.w	80058d2 <_printf_float+0xc2>
 8005bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c00:	2200      	movs	r2, #0
 8005c02:	2300      	movs	r3, #0
 8005c04:	f7fa ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c08:	b9d8      	cbnz	r0, 8005c42 <_printf_float+0x432>
 8005c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0c:	f108 0201 	add.w	r2, r8, #1
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d10e      	bne.n	8005c3a <_printf_float+0x42a>
 8005c1c:	e659      	b.n	80058d2 <_printf_float+0xc2>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae52 	beq.w	80058d2 <_printf_float+0xc2>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4543      	cmp	r3, r8
 8005c38:	dcf1      	bgt.n	8005c1e <_printf_float+0x40e>
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c40:	e6dc      	b.n	80059fc <_printf_float+0x1ec>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	f104 0a1a 	add.w	sl, r4, #26
 8005c4a:	e7f2      	b.n	8005c32 <_printf_float+0x422>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4642      	mov	r2, r8
 8005c50:	e7df      	b.n	8005c12 <_printf_float+0x402>
 8005c52:	2301      	movs	r3, #1
 8005c54:	464a      	mov	r2, r9
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae38 	beq.w	80058d2 <_printf_float+0xc2>
 8005c62:	f108 0801 	add.w	r8, r8, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	4543      	cmp	r3, r8
 8005c6e:	dcf0      	bgt.n	8005c52 <_printf_float+0x442>
 8005c70:	e6fa      	b.n	8005a68 <_printf_float+0x258>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	f104 0919 	add.w	r9, r4, #25
 8005c7a:	e7f4      	b.n	8005c66 <_printf_float+0x456>

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	4649      	mov	r1, r9
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68e5      	ldr	r5, [r4, #12]
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	f003 0306 	and.w	r3, r3, #6
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	bf08      	it	eq
 8005cf0:	1aad      	subeq	r5, r5, r2
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d8 	beq.w	8005f2a <_printf_i+0x1d2>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80a3 	beq.w	8005ec6 <_printf_i+0x16e>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f11 	.word	0x08005f11
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005ef3 	.word	0x08005ef3
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f33 	.word	0x08005f33
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005efb 	.word	0x08005efb
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0a3      	b.n	8005f4c <_printf_i+0x1f4>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	f101 0304 	add.w	r3, r1, #4
 8005e0e:	d50a      	bpl.n	8005e26 <_printf_i+0xce>
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	2e00      	cmp	r6, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xc8>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	4276      	negs	r6, r6
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	485e      	ldr	r0, [pc, #376]	; (8005f9c <_printf_i+0x244>)
 8005e22:	230a      	movs	r3, #10
 8005e24:	e019      	b.n	8005e5a <_printf_i+0x102>
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2e:	bf18      	it	ne
 8005e30:	b236      	sxthne	r6, r6
 8005e32:	e7ef      	b.n	8005e14 <_printf_i+0xbc>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0601      	lsls	r1, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xec>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xf2>
 8005e44:	0646      	lsls	r6, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	4854      	ldr	r0, [pc, #336]	; (8005f9c <_printf_i+0x244>)
 8005e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4e:	bf0c      	ite	eq
 8005e50:	2308      	moveq	r3, #8
 8005e52:	230a      	movne	r3, #10
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	60a5      	str	r5, [r4, #8]
 8005e5e:	2d00      	cmp	r5, #0
 8005e60:	bfa2      	ittt	ge
 8005e62:	6821      	ldrge	r1, [r4, #0]
 8005e64:	f021 0104 	bicge.w	r1, r1, #4
 8005e68:	6021      	strge	r1, [r4, #0]
 8005e6a:	b90e      	cbnz	r6, 8005e70 <_printf_i+0x118>
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d04d      	beq.n	8005f0c <_printf_i+0x1b4>
 8005e70:	4615      	mov	r5, r2
 8005e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e76:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7a:	5dc7      	ldrb	r7, [r0, r7]
 8005e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e80:	4637      	mov	r7, r6
 8005e82:	42bb      	cmp	r3, r7
 8005e84:	460e      	mov	r6, r1
 8005e86:	d9f4      	bls.n	8005e72 <_printf_i+0x11a>
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d10b      	bne.n	8005ea4 <_printf_i+0x14c>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07de      	lsls	r6, r3, #31
 8005e90:	d508      	bpl.n	8005ea4 <_printf_i+0x14c>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6861      	ldr	r1, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	bfde      	ittt	le
 8005e9a:	2330      	movle	r3, #48	; 0x30
 8005e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ea4:	1b52      	subs	r2, r2, r5
 8005ea6:	6122      	str	r2, [r4, #16]
 8005ea8:	f8cd a000 	str.w	sl, [sp]
 8005eac:	464b      	mov	r3, r9
 8005eae:	aa03      	add	r2, sp, #12
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fee2 	bl	8005c7c <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d14c      	bne.n	8005f56 <_printf_i+0x1fe>
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec0:	b004      	add	sp, #16
 8005ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec6:	4835      	ldr	r0, [pc, #212]	; (8005f9c <_printf_i+0x244>)
 8005ec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ecc:	6829      	ldr	r1, [r5, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	061d      	lsls	r5, r3, #24
 8005ed8:	d514      	bpl.n	8005f04 <_printf_i+0x1ac>
 8005eda:	07df      	lsls	r7, r3, #31
 8005edc:	bf44      	itt	mi
 8005ede:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee2:	6023      	strmi	r3, [r4, #0]
 8005ee4:	b91e      	cbnz	r6, 8005eee <_printf_i+0x196>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f023 0320 	bic.w	r3, r3, #32
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7b0      	b.n	8005e54 <_printf_i+0xfc>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <_printf_i+0x248>)
 8005efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f02:	e7e3      	b.n	8005ecc <_printf_i+0x174>
 8005f04:	0659      	lsls	r1, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2b6      	uxthmi	r6, r6
 8005f0a:	e7e6      	b.n	8005eda <_printf_i+0x182>
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	e7bb      	b.n	8005e88 <_printf_i+0x130>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	6826      	ldr	r6, [r4, #0]
 8005f14:	6961      	ldr	r1, [r4, #20]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6028      	str	r0, [r5, #0]
 8005f1a:	0635      	lsls	r5, r6, #24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0x1cc>
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0x1d2>
 8005f24:	0670      	lsls	r0, r6, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0x1c8>
 8005f28:	8019      	strh	r1, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7ba      	b.n	8005ea8 <_printf_i+0x150>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	1d1a      	adds	r2, r3, #4
 8005f36:	602a      	str	r2, [r5, #0]
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f7fa f94e 	bl	80001e0 <memchr>
 8005f44:	b108      	cbz	r0, 8005f4a <_printf_i+0x1f2>
 8005f46:	1b40      	subs	r0, r0, r5
 8005f48:	6060      	str	r0, [r4, #4]
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f54:	e7a8      	b.n	8005ea8 <_printf_i+0x150>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	47d0      	blx	sl
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0ab      	beq.n	8005ebc <_printf_i+0x164>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	079b      	lsls	r3, r3, #30
 8005f68:	d413      	bmi.n	8005f92 <_printf_i+0x23a>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bfb8      	it	lt
 8005f72:	4618      	movlt	r0, r3
 8005f74:	e7a4      	b.n	8005ec0 <_printf_i+0x168>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4632      	mov	r2, r6
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	47d0      	blx	sl
 8005f80:	3001      	adds	r0, #1
 8005f82:	d09b      	beq.n	8005ebc <_printf_i+0x164>
 8005f84:	3501      	adds	r5, #1
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	9903      	ldr	r1, [sp, #12]
 8005f8a:	1a5b      	subs	r3, r3, r1
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dcf2      	bgt.n	8005f76 <_printf_i+0x21e>
 8005f90:	e7eb      	b.n	8005f6a <_printf_i+0x212>
 8005f92:	2500      	movs	r5, #0
 8005f94:	f104 0619 	add.w	r6, r4, #25
 8005f98:	e7f5      	b.n	8005f86 <_printf_i+0x22e>
 8005f9a:	bf00      	nop
 8005f9c:	080081ae 	.word	0x080081ae
 8005fa0:	080081bf 	.word	0x080081bf

08005fa4 <iprintf>:
 8005fa4:	b40f      	push	{r0, r1, r2, r3}
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <iprintf+0x2c>)
 8005fa8:	b513      	push	{r0, r1, r4, lr}
 8005faa:	681c      	ldr	r4, [r3, #0]
 8005fac:	b124      	cbz	r4, 8005fb8 <iprintf+0x14>
 8005fae:	69a3      	ldr	r3, [r4, #24]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <iprintf+0x14>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fee2 	bl	8006d7c <__sinit>
 8005fb8:	ab05      	add	r3, sp, #20
 8005fba:	9a04      	ldr	r2, [sp, #16]
 8005fbc:	68a1      	ldr	r1, [r4, #8]
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 fc3b 	bl	800783c <_vfiprintf_r>
 8005fc6:	b002      	add	sp, #8
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fcc:	b004      	add	sp, #16
 8005fce:	4770      	bx	lr
 8005fd0:	2000000c 	.word	0x2000000c

08005fd4 <quorem>:
 8005fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	6903      	ldr	r3, [r0, #16]
 8005fda:	690c      	ldr	r4, [r1, #16]
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	4607      	mov	r7, r0
 8005fe0:	f2c0 8081 	blt.w	80060e6 <quorem+0x112>
 8005fe4:	3c01      	subs	r4, #1
 8005fe6:	f101 0814 	add.w	r8, r1, #20
 8005fea:	f100 0514 	add.w	r5, r0, #20
 8005fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	429a      	cmp	r2, r3
 8006000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006008:	fbb2 f6f3 	udiv	r6, r2, r3
 800600c:	d331      	bcc.n	8006072 <quorem+0x9e>
 800600e:	f04f 0e00 	mov.w	lr, #0
 8006012:	4640      	mov	r0, r8
 8006014:	46ac      	mov	ip, r5
 8006016:	46f2      	mov	sl, lr
 8006018:	f850 2b04 	ldr.w	r2, [r0], #4
 800601c:	b293      	uxth	r3, r2
 800601e:	fb06 e303 	mla	r3, r6, r3, lr
 8006022:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006026:	b29b      	uxth	r3, r3
 8006028:	ebaa 0303 	sub.w	r3, sl, r3
 800602c:	f8dc a000 	ldr.w	sl, [ip]
 8006030:	0c12      	lsrs	r2, r2, #16
 8006032:	fa13 f38a 	uxtah	r3, r3, sl
 8006036:	fb06 e202 	mla	r2, r6, r2, lr
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006042:	b292      	uxth	r2, r2
 8006044:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800604c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006050:	4581      	cmp	r9, r0
 8006052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006056:	f84c 3b04 	str.w	r3, [ip], #4
 800605a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800605e:	d2db      	bcs.n	8006018 <quorem+0x44>
 8006060:	f855 300b 	ldr.w	r3, [r5, fp]
 8006064:	b92b      	cbnz	r3, 8006072 <quorem+0x9e>
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	3b04      	subs	r3, #4
 800606a:	429d      	cmp	r5, r3
 800606c:	461a      	mov	r2, r3
 800606e:	d32e      	bcc.n	80060ce <quorem+0xfa>
 8006070:	613c      	str	r4, [r7, #16]
 8006072:	4638      	mov	r0, r7
 8006074:	f001 f9c0 	bl	80073f8 <__mcmp>
 8006078:	2800      	cmp	r0, #0
 800607a:	db24      	blt.n	80060c6 <quorem+0xf2>
 800607c:	3601      	adds	r6, #1
 800607e:	4628      	mov	r0, r5
 8006080:	f04f 0c00 	mov.w	ip, #0
 8006084:	f858 2b04 	ldr.w	r2, [r8], #4
 8006088:	f8d0 e000 	ldr.w	lr, [r0]
 800608c:	b293      	uxth	r3, r2
 800608e:	ebac 0303 	sub.w	r3, ip, r3
 8006092:	0c12      	lsrs	r2, r2, #16
 8006094:	fa13 f38e 	uxtah	r3, r3, lr
 8006098:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800609c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a6:	45c1      	cmp	r9, r8
 80060a8:	f840 3b04 	str.w	r3, [r0], #4
 80060ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060b0:	d2e8      	bcs.n	8006084 <quorem+0xb0>
 80060b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ba:	b922      	cbnz	r2, 80060c6 <quorem+0xf2>
 80060bc:	3b04      	subs	r3, #4
 80060be:	429d      	cmp	r5, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	d30a      	bcc.n	80060da <quorem+0x106>
 80060c4:	613c      	str	r4, [r7, #16]
 80060c6:	4630      	mov	r0, r6
 80060c8:	b003      	add	sp, #12
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	d1cc      	bne.n	8006070 <quorem+0x9c>
 80060d6:	3c01      	subs	r4, #1
 80060d8:	e7c7      	b.n	800606a <quorem+0x96>
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	3b04      	subs	r3, #4
 80060de:	2a00      	cmp	r2, #0
 80060e0:	d1f0      	bne.n	80060c4 <quorem+0xf0>
 80060e2:	3c01      	subs	r4, #1
 80060e4:	e7eb      	b.n	80060be <quorem+0xea>
 80060e6:	2000      	movs	r0, #0
 80060e8:	e7ee      	b.n	80060c8 <quorem+0xf4>
 80060ea:	0000      	movs	r0, r0
 80060ec:	0000      	movs	r0, r0
	...

080060f0 <_dtoa_r>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	ed2d 8b04 	vpush	{d8-d9}
 80060f8:	ec57 6b10 	vmov	r6, r7, d0
 80060fc:	b093      	sub	sp, #76	; 0x4c
 80060fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006104:	9106      	str	r1, [sp, #24]
 8006106:	ee10 aa10 	vmov	sl, s0
 800610a:	4604      	mov	r4, r0
 800610c:	9209      	str	r2, [sp, #36]	; 0x24
 800610e:	930c      	str	r3, [sp, #48]	; 0x30
 8006110:	46bb      	mov	fp, r7
 8006112:	b975      	cbnz	r5, 8006132 <_dtoa_r+0x42>
 8006114:	2010      	movs	r0, #16
 8006116:	f000 fed7 	bl	8006ec8 <malloc>
 800611a:	4602      	mov	r2, r0
 800611c:	6260      	str	r0, [r4, #36]	; 0x24
 800611e:	b920      	cbnz	r0, 800612a <_dtoa_r+0x3a>
 8006120:	4ba7      	ldr	r3, [pc, #668]	; (80063c0 <_dtoa_r+0x2d0>)
 8006122:	21ea      	movs	r1, #234	; 0xea
 8006124:	48a7      	ldr	r0, [pc, #668]	; (80063c4 <_dtoa_r+0x2d4>)
 8006126:	f001 fddf 	bl	8007ce8 <__assert_func>
 800612a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800612e:	6005      	str	r5, [r0, #0]
 8006130:	60c5      	str	r5, [r0, #12]
 8006132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	b151      	cbz	r1, 800614e <_dtoa_r+0x5e>
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	604a      	str	r2, [r1, #4]
 800613c:	2301      	movs	r3, #1
 800613e:	4093      	lsls	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
 8006142:	4620      	mov	r0, r4
 8006144:	f000 ff16 	bl	8006f74 <_Bfree>
 8006148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	1e3b      	subs	r3, r7, #0
 8006150:	bfaa      	itet	ge
 8006152:	2300      	movge	r3, #0
 8006154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006158:	f8c8 3000 	strge.w	r3, [r8]
 800615c:	4b9a      	ldr	r3, [pc, #616]	; (80063c8 <_dtoa_r+0x2d8>)
 800615e:	bfbc      	itt	lt
 8006160:	2201      	movlt	r2, #1
 8006162:	f8c8 2000 	strlt.w	r2, [r8]
 8006166:	ea33 030b 	bics.w	r3, r3, fp
 800616a:	d11b      	bne.n	80061a4 <_dtoa_r+0xb4>
 800616c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800616e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006178:	4333      	orrs	r3, r6
 800617a:	f000 8592 	beq.w	8006ca2 <_dtoa_r+0xbb2>
 800617e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006180:	b963      	cbnz	r3, 800619c <_dtoa_r+0xac>
 8006182:	4b92      	ldr	r3, [pc, #584]	; (80063cc <_dtoa_r+0x2dc>)
 8006184:	e022      	b.n	80061cc <_dtoa_r+0xdc>
 8006186:	4b92      	ldr	r3, [pc, #584]	; (80063d0 <_dtoa_r+0x2e0>)
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	3308      	adds	r3, #8
 800618c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	9801      	ldr	r0, [sp, #4]
 8006192:	b013      	add	sp, #76	; 0x4c
 8006194:	ecbd 8b04 	vpop	{d8-d9}
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	4b8b      	ldr	r3, [pc, #556]	; (80063cc <_dtoa_r+0x2dc>)
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	3303      	adds	r3, #3
 80061a2:	e7f3      	b.n	800618c <_dtoa_r+0x9c>
 80061a4:	2200      	movs	r2, #0
 80061a6:	2300      	movs	r3, #0
 80061a8:	4650      	mov	r0, sl
 80061aa:	4659      	mov	r1, fp
 80061ac:	f7fa fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80061b0:	ec4b ab19 	vmov	d9, sl, fp
 80061b4:	4680      	mov	r8, r0
 80061b6:	b158      	cbz	r0, 80061d0 <_dtoa_r+0xe0>
 80061b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ba:	2301      	movs	r3, #1
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 856b 	beq.w	8006c9c <_dtoa_r+0xbac>
 80061c6:	4883      	ldr	r0, [pc, #524]	; (80063d4 <_dtoa_r+0x2e4>)
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	1e43      	subs	r3, r0, #1
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	e7df      	b.n	8006190 <_dtoa_r+0xa0>
 80061d0:	ec4b ab10 	vmov	d0, sl, fp
 80061d4:	aa10      	add	r2, sp, #64	; 0x40
 80061d6:	a911      	add	r1, sp, #68	; 0x44
 80061d8:	4620      	mov	r0, r4
 80061da:	f001 f9b3 	bl	8007544 <__d2b>
 80061de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80061e2:	ee08 0a10 	vmov	s16, r0
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	f000 8084 	beq.w	80062f4 <_dtoa_r+0x204>
 80061ec:	ee19 3a90 	vmov	r3, s19
 80061f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80061f8:	4656      	mov	r6, sl
 80061fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80061fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006206:	4b74      	ldr	r3, [pc, #464]	; (80063d8 <_dtoa_r+0x2e8>)
 8006208:	2200      	movs	r2, #0
 800620a:	4630      	mov	r0, r6
 800620c:	4639      	mov	r1, r7
 800620e:	f7fa f83b 	bl	8000288 <__aeabi_dsub>
 8006212:	a365      	add	r3, pc, #404	; (adr r3, 80063a8 <_dtoa_r+0x2b8>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f9ee 	bl	80005f8 <__aeabi_dmul>
 800621c:	a364      	add	r3, pc, #400	; (adr r3, 80063b0 <_dtoa_r+0x2c0>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa f833 	bl	800028c <__adddf3>
 8006226:	4606      	mov	r6, r0
 8006228:	4628      	mov	r0, r5
 800622a:	460f      	mov	r7, r1
 800622c:	f7fa f97a 	bl	8000524 <__aeabi_i2d>
 8006230:	a361      	add	r3, pc, #388	; (adr r3, 80063b8 <_dtoa_r+0x2c8>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa f823 	bl	800028c <__adddf3>
 8006246:	4606      	mov	r6, r0
 8006248:	460f      	mov	r7, r1
 800624a:	f7fa fc85 	bl	8000b58 <__aeabi_d2iz>
 800624e:	2200      	movs	r2, #0
 8006250:	9000      	str	r0, [sp, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fc40 	bl	8000adc <__aeabi_dcmplt>
 800625c:	b150      	cbz	r0, 8006274 <_dtoa_r+0x184>
 800625e:	9800      	ldr	r0, [sp, #0]
 8006260:	f7fa f960 	bl	8000524 <__aeabi_i2d>
 8006264:	4632      	mov	r2, r6
 8006266:	463b      	mov	r3, r7
 8006268:	f7fa fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800626c:	b910      	cbnz	r0, 8006274 <_dtoa_r+0x184>
 800626e:	9b00      	ldr	r3, [sp, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	2b16      	cmp	r3, #22
 8006278:	d85a      	bhi.n	8006330 <_dtoa_r+0x240>
 800627a:	9a00      	ldr	r2, [sp, #0]
 800627c:	4b57      	ldr	r3, [pc, #348]	; (80063dc <_dtoa_r+0x2ec>)
 800627e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	ec51 0b19 	vmov	r0, r1, d9
 800628a:	f7fa fc27 	bl	8000adc <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d050      	beq.n	8006334 <_dtoa_r+0x244>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	3b01      	subs	r3, #1
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	930b      	str	r3, [sp, #44]	; 0x2c
 800629c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800629e:	1b5d      	subs	r5, r3, r5
 80062a0:	1e6b      	subs	r3, r5, #1
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	bf45      	ittet	mi
 80062a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80062aa:	9304      	strmi	r3, [sp, #16]
 80062ac:	2300      	movpl	r3, #0
 80062ae:	2300      	movmi	r3, #0
 80062b0:	bf4c      	ite	mi
 80062b2:	9305      	strmi	r3, [sp, #20]
 80062b4:	9304      	strpl	r3, [sp, #16]
 80062b6:	9b00      	ldr	r3, [sp, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	db3d      	blt.n	8006338 <_dtoa_r+0x248>
 80062bc:	9b05      	ldr	r3, [sp, #20]
 80062be:	9a00      	ldr	r2, [sp, #0]
 80062c0:	920a      	str	r2, [sp, #40]	; 0x28
 80062c2:	4413      	add	r3, r2
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	f200 8089 	bhi.w	80063e4 <_dtoa_r+0x2f4>
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	bfc4      	itt	gt
 80062d6:	3b04      	subgt	r3, #4
 80062d8:	9306      	strgt	r3, [sp, #24]
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	f1a3 0302 	sub.w	r3, r3, #2
 80062e0:	bfcc      	ite	gt
 80062e2:	2500      	movgt	r5, #0
 80062e4:	2501      	movle	r5, #1
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	f200 8087 	bhi.w	80063fa <_dtoa_r+0x30a>
 80062ec:	e8df f003 	tbb	[pc, r3]
 80062f0:	59383a2d 	.word	0x59383a2d
 80062f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80062f8:	441d      	add	r5, r3
 80062fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80062fe:	2b20      	cmp	r3, #32
 8006300:	bfc1      	itttt	gt
 8006302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800630a:	fa0b f303 	lslgt.w	r3, fp, r3
 800630e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006312:	bfda      	itte	le
 8006314:	f1c3 0320 	rsble	r3, r3, #32
 8006318:	fa06 f003 	lslle.w	r0, r6, r3
 800631c:	4318      	orrgt	r0, r3
 800631e:	f7fa f8f1 	bl	8000504 <__aeabi_ui2d>
 8006322:	2301      	movs	r3, #1
 8006324:	4606      	mov	r6, r0
 8006326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800632a:	3d01      	subs	r5, #1
 800632c:	930e      	str	r3, [sp, #56]	; 0x38
 800632e:	e76a      	b.n	8006206 <_dtoa_r+0x116>
 8006330:	2301      	movs	r3, #1
 8006332:	e7b2      	b.n	800629a <_dtoa_r+0x1aa>
 8006334:	900b      	str	r0, [sp, #44]	; 0x2c
 8006336:	e7b1      	b.n	800629c <_dtoa_r+0x1ac>
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	9a00      	ldr	r2, [sp, #0]
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	4253      	negs	r3, r2
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	2300      	movs	r3, #0
 8006346:	930a      	str	r3, [sp, #40]	; 0x28
 8006348:	e7bf      	b.n	80062ca <_dtoa_r+0x1da>
 800634a:	2300      	movs	r3, #0
 800634c:	9308      	str	r3, [sp, #32]
 800634e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	dc55      	bgt.n	8006400 <_dtoa_r+0x310>
 8006354:	2301      	movs	r3, #1
 8006356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800635a:	461a      	mov	r2, r3
 800635c:	9209      	str	r2, [sp, #36]	; 0x24
 800635e:	e00c      	b.n	800637a <_dtoa_r+0x28a>
 8006360:	2301      	movs	r3, #1
 8006362:	e7f3      	b.n	800634c <_dtoa_r+0x25c>
 8006364:	2300      	movs	r3, #0
 8006366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006368:	9308      	str	r3, [sp, #32]
 800636a:	9b00      	ldr	r3, [sp, #0]
 800636c:	4413      	add	r3, r2
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	3301      	adds	r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	bfb8      	it	lt
 8006378:	2301      	movlt	r3, #1
 800637a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800637c:	2200      	movs	r2, #0
 800637e:	6042      	str	r2, [r0, #4]
 8006380:	2204      	movs	r2, #4
 8006382:	f102 0614 	add.w	r6, r2, #20
 8006386:	429e      	cmp	r6, r3
 8006388:	6841      	ldr	r1, [r0, #4]
 800638a:	d93d      	bls.n	8006408 <_dtoa_r+0x318>
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fdb1 	bl	8006ef4 <_Balloc>
 8006392:	9001      	str	r0, [sp, #4]
 8006394:	2800      	cmp	r0, #0
 8006396:	d13b      	bne.n	8006410 <_dtoa_r+0x320>
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <_dtoa_r+0x2f0>)
 800639a:	4602      	mov	r2, r0
 800639c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063a0:	e6c0      	b.n	8006124 <_dtoa_r+0x34>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e7df      	b.n	8006366 <_dtoa_r+0x276>
 80063a6:	bf00      	nop
 80063a8:	636f4361 	.word	0x636f4361
 80063ac:	3fd287a7 	.word	0x3fd287a7
 80063b0:	8b60c8b3 	.word	0x8b60c8b3
 80063b4:	3fc68a28 	.word	0x3fc68a28
 80063b8:	509f79fb 	.word	0x509f79fb
 80063bc:	3fd34413 	.word	0x3fd34413
 80063c0:	080081dd 	.word	0x080081dd
 80063c4:	080081f4 	.word	0x080081f4
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	080081d9 	.word	0x080081d9
 80063d0:	080081d0 	.word	0x080081d0
 80063d4:	080081ad 	.word	0x080081ad
 80063d8:	3ff80000 	.word	0x3ff80000
 80063dc:	08008348 	.word	0x08008348
 80063e0:	0800824f 	.word	0x0800824f
 80063e4:	2501      	movs	r5, #1
 80063e6:	2300      	movs	r3, #0
 80063e8:	9306      	str	r3, [sp, #24]
 80063ea:	9508      	str	r5, [sp, #32]
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2312      	movs	r3, #18
 80063f8:	e7b0      	b.n	800635c <_dtoa_r+0x26c>
 80063fa:	2301      	movs	r3, #1
 80063fc:	9308      	str	r3, [sp, #32]
 80063fe:	e7f5      	b.n	80063ec <_dtoa_r+0x2fc>
 8006400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006406:	e7b8      	b.n	800637a <_dtoa_r+0x28a>
 8006408:	3101      	adds	r1, #1
 800640a:	6041      	str	r1, [r0, #4]
 800640c:	0052      	lsls	r2, r2, #1
 800640e:	e7b8      	b.n	8006382 <_dtoa_r+0x292>
 8006410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006412:	9a01      	ldr	r2, [sp, #4]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	2b0e      	cmp	r3, #14
 800641a:	f200 809d 	bhi.w	8006558 <_dtoa_r+0x468>
 800641e:	2d00      	cmp	r5, #0
 8006420:	f000 809a 	beq.w	8006558 <_dtoa_r+0x468>
 8006424:	9b00      	ldr	r3, [sp, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd32      	ble.n	8006490 <_dtoa_r+0x3a0>
 800642a:	4ab7      	ldr	r2, [pc, #732]	; (8006708 <_dtoa_r+0x618>)
 800642c:	f003 030f 	and.w	r3, r3, #15
 8006430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006438:	9b00      	ldr	r3, [sp, #0]
 800643a:	05d8      	lsls	r0, r3, #23
 800643c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006440:	d516      	bpl.n	8006470 <_dtoa_r+0x380>
 8006442:	4bb2      	ldr	r3, [pc, #712]	; (800670c <_dtoa_r+0x61c>)
 8006444:	ec51 0b19 	vmov	r0, r1, d9
 8006448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800644c:	f7fa f9fe 	bl	800084c <__aeabi_ddiv>
 8006450:	f007 070f 	and.w	r7, r7, #15
 8006454:	4682      	mov	sl, r0
 8006456:	468b      	mov	fp, r1
 8006458:	2503      	movs	r5, #3
 800645a:	4eac      	ldr	r6, [pc, #688]	; (800670c <_dtoa_r+0x61c>)
 800645c:	b957      	cbnz	r7, 8006474 <_dtoa_r+0x384>
 800645e:	4642      	mov	r2, r8
 8006460:	464b      	mov	r3, r9
 8006462:	4650      	mov	r0, sl
 8006464:	4659      	mov	r1, fp
 8006466:	f7fa f9f1 	bl	800084c <__aeabi_ddiv>
 800646a:	4682      	mov	sl, r0
 800646c:	468b      	mov	fp, r1
 800646e:	e028      	b.n	80064c2 <_dtoa_r+0x3d2>
 8006470:	2502      	movs	r5, #2
 8006472:	e7f2      	b.n	800645a <_dtoa_r+0x36a>
 8006474:	07f9      	lsls	r1, r7, #31
 8006476:	d508      	bpl.n	800648a <_dtoa_r+0x39a>
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006480:	f7fa f8ba 	bl	80005f8 <__aeabi_dmul>
 8006484:	3501      	adds	r5, #1
 8006486:	4680      	mov	r8, r0
 8006488:	4689      	mov	r9, r1
 800648a:	107f      	asrs	r7, r7, #1
 800648c:	3608      	adds	r6, #8
 800648e:	e7e5      	b.n	800645c <_dtoa_r+0x36c>
 8006490:	f000 809b 	beq.w	80065ca <_dtoa_r+0x4da>
 8006494:	9b00      	ldr	r3, [sp, #0]
 8006496:	4f9d      	ldr	r7, [pc, #628]	; (800670c <_dtoa_r+0x61c>)
 8006498:	425e      	negs	r6, r3
 800649a:	4b9b      	ldr	r3, [pc, #620]	; (8006708 <_dtoa_r+0x618>)
 800649c:	f006 020f 	and.w	r2, r6, #15
 80064a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	ec51 0b19 	vmov	r0, r1, d9
 80064ac:	f7fa f8a4 	bl	80005f8 <__aeabi_dmul>
 80064b0:	1136      	asrs	r6, r6, #4
 80064b2:	4682      	mov	sl, r0
 80064b4:	468b      	mov	fp, r1
 80064b6:	2300      	movs	r3, #0
 80064b8:	2502      	movs	r5, #2
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d17a      	bne.n	80065b4 <_dtoa_r+0x4c4>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1d3      	bne.n	800646a <_dtoa_r+0x37a>
 80064c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8082 	beq.w	80065ce <_dtoa_r+0x4de>
 80064ca:	4b91      	ldr	r3, [pc, #580]	; (8006710 <_dtoa_r+0x620>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4650      	mov	r0, sl
 80064d0:	4659      	mov	r1, fp
 80064d2:	f7fa fb03 	bl	8000adc <__aeabi_dcmplt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d079      	beq.n	80065ce <_dtoa_r+0x4de>
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d076      	beq.n	80065ce <_dtoa_r+0x4de>
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dd36      	ble.n	8006554 <_dtoa_r+0x464>
 80064e6:	9b00      	ldr	r3, [sp, #0]
 80064e8:	4650      	mov	r0, sl
 80064ea:	4659      	mov	r1, fp
 80064ec:	1e5f      	subs	r7, r3, #1
 80064ee:	2200      	movs	r2, #0
 80064f0:	4b88      	ldr	r3, [pc, #544]	; (8006714 <_dtoa_r+0x624>)
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	9e02      	ldr	r6, [sp, #8]
 80064f8:	4682      	mov	sl, r0
 80064fa:	468b      	mov	fp, r1
 80064fc:	3501      	adds	r5, #1
 80064fe:	4628      	mov	r0, r5
 8006500:	f7fa f810 	bl	8000524 <__aeabi_i2d>
 8006504:	4652      	mov	r2, sl
 8006506:	465b      	mov	r3, fp
 8006508:	f7fa f876 	bl	80005f8 <__aeabi_dmul>
 800650c:	4b82      	ldr	r3, [pc, #520]	; (8006718 <_dtoa_r+0x628>)
 800650e:	2200      	movs	r2, #0
 8006510:	f7f9 febc 	bl	800028c <__adddf3>
 8006514:	46d0      	mov	r8, sl
 8006516:	46d9      	mov	r9, fp
 8006518:	4682      	mov	sl, r0
 800651a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800651e:	2e00      	cmp	r6, #0
 8006520:	d158      	bne.n	80065d4 <_dtoa_r+0x4e4>
 8006522:	4b7e      	ldr	r3, [pc, #504]	; (800671c <_dtoa_r+0x62c>)
 8006524:	2200      	movs	r2, #0
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fead 	bl	8000288 <__aeabi_dsub>
 800652e:	4652      	mov	r2, sl
 8006530:	465b      	mov	r3, fp
 8006532:	4680      	mov	r8, r0
 8006534:	4689      	mov	r9, r1
 8006536:	f7fa faef 	bl	8000b18 <__aeabi_dcmpgt>
 800653a:	2800      	cmp	r0, #0
 800653c:	f040 8295 	bne.w	8006a6a <_dtoa_r+0x97a>
 8006540:	4652      	mov	r2, sl
 8006542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7fa fac7 	bl	8000adc <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f040 8289 	bne.w	8006a66 <_dtoa_r+0x976>
 8006554:	ec5b ab19 	vmov	sl, fp, d9
 8006558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800655a:	2b00      	cmp	r3, #0
 800655c:	f2c0 8148 	blt.w	80067f0 <_dtoa_r+0x700>
 8006560:	9a00      	ldr	r2, [sp, #0]
 8006562:	2a0e      	cmp	r2, #14
 8006564:	f300 8144 	bgt.w	80067f0 <_dtoa_r+0x700>
 8006568:	4b67      	ldr	r3, [pc, #412]	; (8006708 <_dtoa_r+0x618>)
 800656a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800656e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	f280 80d5 	bge.w	8006724 <_dtoa_r+0x634>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f300 80d1 	bgt.w	8006724 <_dtoa_r+0x634>
 8006582:	f040 826f 	bne.w	8006a64 <_dtoa_r+0x974>
 8006586:	4b65      	ldr	r3, [pc, #404]	; (800671c <_dtoa_r+0x62c>)
 8006588:	2200      	movs	r2, #0
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	f7fa f833 	bl	80005f8 <__aeabi_dmul>
 8006592:	4652      	mov	r2, sl
 8006594:	465b      	mov	r3, fp
 8006596:	f7fa fab5 	bl	8000b04 <__aeabi_dcmpge>
 800659a:	9e03      	ldr	r6, [sp, #12]
 800659c:	4637      	mov	r7, r6
 800659e:	2800      	cmp	r0, #0
 80065a0:	f040 8245 	bne.w	8006a2e <_dtoa_r+0x93e>
 80065a4:	9d01      	ldr	r5, [sp, #4]
 80065a6:	2331      	movs	r3, #49	; 0x31
 80065a8:	f805 3b01 	strb.w	r3, [r5], #1
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	3301      	adds	r3, #1
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	e240      	b.n	8006a36 <_dtoa_r+0x946>
 80065b4:	07f2      	lsls	r2, r6, #31
 80065b6:	d505      	bpl.n	80065c4 <_dtoa_r+0x4d4>
 80065b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	3501      	adds	r5, #1
 80065c2:	2301      	movs	r3, #1
 80065c4:	1076      	asrs	r6, r6, #1
 80065c6:	3708      	adds	r7, #8
 80065c8:	e777      	b.n	80064ba <_dtoa_r+0x3ca>
 80065ca:	2502      	movs	r5, #2
 80065cc:	e779      	b.n	80064c2 <_dtoa_r+0x3d2>
 80065ce:	9f00      	ldr	r7, [sp, #0]
 80065d0:	9e03      	ldr	r6, [sp, #12]
 80065d2:	e794      	b.n	80064fe <_dtoa_r+0x40e>
 80065d4:	9901      	ldr	r1, [sp, #4]
 80065d6:	4b4c      	ldr	r3, [pc, #304]	; (8006708 <_dtoa_r+0x618>)
 80065d8:	4431      	add	r1, r6
 80065da:	910d      	str	r1, [sp, #52]	; 0x34
 80065dc:	9908      	ldr	r1, [sp, #32]
 80065de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d043      	beq.n	8006672 <_dtoa_r+0x582>
 80065ea:	494d      	ldr	r1, [pc, #308]	; (8006720 <_dtoa_r+0x630>)
 80065ec:	2000      	movs	r0, #0
 80065ee:	f7fa f92d 	bl	800084c <__aeabi_ddiv>
 80065f2:	4652      	mov	r2, sl
 80065f4:	465b      	mov	r3, fp
 80065f6:	f7f9 fe47 	bl	8000288 <__aeabi_dsub>
 80065fa:	9d01      	ldr	r5, [sp, #4]
 80065fc:	4682      	mov	sl, r0
 80065fe:	468b      	mov	fp, r1
 8006600:	4649      	mov	r1, r9
 8006602:	4640      	mov	r0, r8
 8006604:	f7fa faa8 	bl	8000b58 <__aeabi_d2iz>
 8006608:	4606      	mov	r6, r0
 800660a:	f7f9 ff8b 	bl	8000524 <__aeabi_i2d>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4640      	mov	r0, r8
 8006614:	4649      	mov	r1, r9
 8006616:	f7f9 fe37 	bl	8000288 <__aeabi_dsub>
 800661a:	3630      	adds	r6, #48	; 0x30
 800661c:	f805 6b01 	strb.w	r6, [r5], #1
 8006620:	4652      	mov	r2, sl
 8006622:	465b      	mov	r3, fp
 8006624:	4680      	mov	r8, r0
 8006626:	4689      	mov	r9, r1
 8006628:	f7fa fa58 	bl	8000adc <__aeabi_dcmplt>
 800662c:	2800      	cmp	r0, #0
 800662e:	d163      	bne.n	80066f8 <_dtoa_r+0x608>
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	4936      	ldr	r1, [pc, #216]	; (8006710 <_dtoa_r+0x620>)
 8006636:	2000      	movs	r0, #0
 8006638:	f7f9 fe26 	bl	8000288 <__aeabi_dsub>
 800663c:	4652      	mov	r2, sl
 800663e:	465b      	mov	r3, fp
 8006640:	f7fa fa4c 	bl	8000adc <__aeabi_dcmplt>
 8006644:	2800      	cmp	r0, #0
 8006646:	f040 80b5 	bne.w	80067b4 <_dtoa_r+0x6c4>
 800664a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800664c:	429d      	cmp	r5, r3
 800664e:	d081      	beq.n	8006554 <_dtoa_r+0x464>
 8006650:	4b30      	ldr	r3, [pc, #192]	; (8006714 <_dtoa_r+0x624>)
 8006652:	2200      	movs	r2, #0
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7f9 ffce 	bl	80005f8 <__aeabi_dmul>
 800665c:	4b2d      	ldr	r3, [pc, #180]	; (8006714 <_dtoa_r+0x624>)
 800665e:	4682      	mov	sl, r0
 8006660:	468b      	mov	fp, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	2200      	movs	r2, #0
 8006668:	f7f9 ffc6 	bl	80005f8 <__aeabi_dmul>
 800666c:	4680      	mov	r8, r0
 800666e:	4689      	mov	r9, r1
 8006670:	e7c6      	b.n	8006600 <_dtoa_r+0x510>
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	f7f9 ffbf 	bl	80005f8 <__aeabi_dmul>
 800667a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667c:	9d01      	ldr	r5, [sp, #4]
 800667e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006680:	4682      	mov	sl, r0
 8006682:	468b      	mov	fp, r1
 8006684:	4649      	mov	r1, r9
 8006686:	4640      	mov	r0, r8
 8006688:	f7fa fa66 	bl	8000b58 <__aeabi_d2iz>
 800668c:	4606      	mov	r6, r0
 800668e:	f7f9 ff49 	bl	8000524 <__aeabi_i2d>
 8006692:	3630      	adds	r6, #48	; 0x30
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4640      	mov	r0, r8
 800669a:	4649      	mov	r1, r9
 800669c:	f7f9 fdf4 	bl	8000288 <__aeabi_dsub>
 80066a0:	f805 6b01 	strb.w	r6, [r5], #1
 80066a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a6:	429d      	cmp	r5, r3
 80066a8:	4680      	mov	r8, r0
 80066aa:	4689      	mov	r9, r1
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	d124      	bne.n	80066fc <_dtoa_r+0x60c>
 80066b2:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <_dtoa_r+0x630>)
 80066b4:	4650      	mov	r0, sl
 80066b6:	4659      	mov	r1, fp
 80066b8:	f7f9 fde8 	bl	800028c <__adddf3>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7fa fa28 	bl	8000b18 <__aeabi_dcmpgt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d173      	bne.n	80067b4 <_dtoa_r+0x6c4>
 80066cc:	4652      	mov	r2, sl
 80066ce:	465b      	mov	r3, fp
 80066d0:	4913      	ldr	r1, [pc, #76]	; (8006720 <_dtoa_r+0x630>)
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7f9 fdd8 	bl	8000288 <__aeabi_dsub>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4640      	mov	r0, r8
 80066de:	4649      	mov	r1, r9
 80066e0:	f7fa f9fc 	bl	8000adc <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f43f af35 	beq.w	8006554 <_dtoa_r+0x464>
 80066ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066ec:	1e6b      	subs	r3, r5, #1
 80066ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80066f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066f4:	2b30      	cmp	r3, #48	; 0x30
 80066f6:	d0f8      	beq.n	80066ea <_dtoa_r+0x5fa>
 80066f8:	9700      	str	r7, [sp, #0]
 80066fa:	e049      	b.n	8006790 <_dtoa_r+0x6a0>
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <_dtoa_r+0x624>)
 80066fe:	f7f9 ff7b 	bl	80005f8 <__aeabi_dmul>
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	e7bd      	b.n	8006684 <_dtoa_r+0x594>
 8006708:	08008348 	.word	0x08008348
 800670c:	08008320 	.word	0x08008320
 8006710:	3ff00000 	.word	0x3ff00000
 8006714:	40240000 	.word	0x40240000
 8006718:	401c0000 	.word	0x401c0000
 800671c:	40140000 	.word	0x40140000
 8006720:	3fe00000 	.word	0x3fe00000
 8006724:	9d01      	ldr	r5, [sp, #4]
 8006726:	4656      	mov	r6, sl
 8006728:	465f      	mov	r7, fp
 800672a:	4642      	mov	r2, r8
 800672c:	464b      	mov	r3, r9
 800672e:	4630      	mov	r0, r6
 8006730:	4639      	mov	r1, r7
 8006732:	f7fa f88b 	bl	800084c <__aeabi_ddiv>
 8006736:	f7fa fa0f 	bl	8000b58 <__aeabi_d2iz>
 800673a:	4682      	mov	sl, r0
 800673c:	f7f9 fef2 	bl	8000524 <__aeabi_i2d>
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	f7f9 ff58 	bl	80005f8 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006754:	f7f9 fd98 	bl	8000288 <__aeabi_dsub>
 8006758:	f805 6b01 	strb.w	r6, [r5], #1
 800675c:	9e01      	ldr	r6, [sp, #4]
 800675e:	9f03      	ldr	r7, [sp, #12]
 8006760:	1bae      	subs	r6, r5, r6
 8006762:	42b7      	cmp	r7, r6
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	d135      	bne.n	80067d6 <_dtoa_r+0x6e6>
 800676a:	f7f9 fd8f 	bl	800028c <__adddf3>
 800676e:	4642      	mov	r2, r8
 8006770:	464b      	mov	r3, r9
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	f7fa f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800677a:	b9d0      	cbnz	r0, 80067b2 <_dtoa_r+0x6c2>
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	4630      	mov	r0, r6
 8006782:	4639      	mov	r1, r7
 8006784:	f7fa f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006788:	b110      	cbz	r0, 8006790 <_dtoa_r+0x6a0>
 800678a:	f01a 0f01 	tst.w	sl, #1
 800678e:	d110      	bne.n	80067b2 <_dtoa_r+0x6c2>
 8006790:	4620      	mov	r0, r4
 8006792:	ee18 1a10 	vmov	r1, s16
 8006796:	f000 fbed 	bl	8006f74 <_Bfree>
 800679a:	2300      	movs	r3, #0
 800679c:	9800      	ldr	r0, [sp, #0]
 800679e:	702b      	strb	r3, [r5, #0]
 80067a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067a2:	3001      	adds	r0, #1
 80067a4:	6018      	str	r0, [r3, #0]
 80067a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f43f acf1 	beq.w	8006190 <_dtoa_r+0xa0>
 80067ae:	601d      	str	r5, [r3, #0]
 80067b0:	e4ee      	b.n	8006190 <_dtoa_r+0xa0>
 80067b2:	9f00      	ldr	r7, [sp, #0]
 80067b4:	462b      	mov	r3, r5
 80067b6:	461d      	mov	r5, r3
 80067b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067bc:	2a39      	cmp	r2, #57	; 0x39
 80067be:	d106      	bne.n	80067ce <_dtoa_r+0x6de>
 80067c0:	9a01      	ldr	r2, [sp, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d1f7      	bne.n	80067b6 <_dtoa_r+0x6c6>
 80067c6:	9901      	ldr	r1, [sp, #4]
 80067c8:	2230      	movs	r2, #48	; 0x30
 80067ca:	3701      	adds	r7, #1
 80067cc:	700a      	strb	r2, [r1, #0]
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	3201      	adds	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	e790      	b.n	80066f8 <_dtoa_r+0x608>
 80067d6:	4ba6      	ldr	r3, [pc, #664]	; (8006a70 <_dtoa_r+0x980>)
 80067d8:	2200      	movs	r2, #0
 80067da:	f7f9 ff0d 	bl	80005f8 <__aeabi_dmul>
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	4606      	mov	r6, r0
 80067e4:	460f      	mov	r7, r1
 80067e6:	f7fa f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d09d      	beq.n	800672a <_dtoa_r+0x63a>
 80067ee:	e7cf      	b.n	8006790 <_dtoa_r+0x6a0>
 80067f0:	9a08      	ldr	r2, [sp, #32]
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	f000 80d7 	beq.w	80069a6 <_dtoa_r+0x8b6>
 80067f8:	9a06      	ldr	r2, [sp, #24]
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	f300 80ba 	bgt.w	8006974 <_dtoa_r+0x884>
 8006800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006802:	2a00      	cmp	r2, #0
 8006804:	f000 80b2 	beq.w	800696c <_dtoa_r+0x87c>
 8006808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800680c:	9e07      	ldr	r6, [sp, #28]
 800680e:	9d04      	ldr	r5, [sp, #16]
 8006810:	9a04      	ldr	r2, [sp, #16]
 8006812:	441a      	add	r2, r3
 8006814:	9204      	str	r2, [sp, #16]
 8006816:	9a05      	ldr	r2, [sp, #20]
 8006818:	2101      	movs	r1, #1
 800681a:	441a      	add	r2, r3
 800681c:	4620      	mov	r0, r4
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	f000 fc60 	bl	80070e4 <__i2b>
 8006824:	4607      	mov	r7, r0
 8006826:	2d00      	cmp	r5, #0
 8006828:	dd0c      	ble.n	8006844 <_dtoa_r+0x754>
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd09      	ble.n	8006844 <_dtoa_r+0x754>
 8006830:	42ab      	cmp	r3, r5
 8006832:	9a04      	ldr	r2, [sp, #16]
 8006834:	bfa8      	it	ge
 8006836:	462b      	movge	r3, r5
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	9204      	str	r2, [sp, #16]
 800683c:	9a05      	ldr	r2, [sp, #20]
 800683e:	1aed      	subs	r5, r5, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	9305      	str	r3, [sp, #20]
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	b31b      	cbz	r3, 8006890 <_dtoa_r+0x7a0>
 8006848:	9b08      	ldr	r3, [sp, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80af 	beq.w	80069ae <_dtoa_r+0x8be>
 8006850:	2e00      	cmp	r6, #0
 8006852:	dd13      	ble.n	800687c <_dtoa_r+0x78c>
 8006854:	4639      	mov	r1, r7
 8006856:	4632      	mov	r2, r6
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fd03 	bl	8007264 <__pow5mult>
 800685e:	ee18 2a10 	vmov	r2, s16
 8006862:	4601      	mov	r1, r0
 8006864:	4607      	mov	r7, r0
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fc52 	bl	8007110 <__multiply>
 800686c:	ee18 1a10 	vmov	r1, s16
 8006870:	4680      	mov	r8, r0
 8006872:	4620      	mov	r0, r4
 8006874:	f000 fb7e 	bl	8006f74 <_Bfree>
 8006878:	ee08 8a10 	vmov	s16, r8
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	1b9a      	subs	r2, r3, r6
 8006880:	d006      	beq.n	8006890 <_dtoa_r+0x7a0>
 8006882:	ee18 1a10 	vmov	r1, s16
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fcec 	bl	8007264 <__pow5mult>
 800688c:	ee08 0a10 	vmov	s16, r0
 8006890:	2101      	movs	r1, #1
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fc26 	bl	80070e4 <__i2b>
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	4606      	mov	r6, r0
 800689e:	f340 8088 	ble.w	80069b2 <_dtoa_r+0x8c2>
 80068a2:	461a      	mov	r2, r3
 80068a4:	4601      	mov	r1, r0
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fcdc 	bl	8007264 <__pow5mult>
 80068ac:	9b06      	ldr	r3, [sp, #24]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	4606      	mov	r6, r0
 80068b2:	f340 8081 	ble.w	80069b8 <_dtoa_r+0x8c8>
 80068b6:	f04f 0800 	mov.w	r8, #0
 80068ba:	6933      	ldr	r3, [r6, #16]
 80068bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068c0:	6918      	ldr	r0, [r3, #16]
 80068c2:	f000 fbbf 	bl	8007044 <__hi0bits>
 80068c6:	f1c0 0020 	rsb	r0, r0, #32
 80068ca:	9b05      	ldr	r3, [sp, #20]
 80068cc:	4418      	add	r0, r3
 80068ce:	f010 001f 	ands.w	r0, r0, #31
 80068d2:	f000 8092 	beq.w	80069fa <_dtoa_r+0x90a>
 80068d6:	f1c0 0320 	rsb	r3, r0, #32
 80068da:	2b04      	cmp	r3, #4
 80068dc:	f340 808a 	ble.w	80069f4 <_dtoa_r+0x904>
 80068e0:	f1c0 001c 	rsb	r0, r0, #28
 80068e4:	9b04      	ldr	r3, [sp, #16]
 80068e6:	4403      	add	r3, r0
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	4403      	add	r3, r0
 80068ee:	4405      	add	r5, r0
 80068f0:	9305      	str	r3, [sp, #20]
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dd07      	ble.n	8006908 <_dtoa_r+0x818>
 80068f8:	ee18 1a10 	vmov	r1, s16
 80068fc:	461a      	mov	r2, r3
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fd0a 	bl	8007318 <__lshift>
 8006904:	ee08 0a10 	vmov	s16, r0
 8006908:	9b05      	ldr	r3, [sp, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dd05      	ble.n	800691a <_dtoa_r+0x82a>
 800690e:	4631      	mov	r1, r6
 8006910:	461a      	mov	r2, r3
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fd00 	bl	8007318 <__lshift>
 8006918:	4606      	mov	r6, r0
 800691a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d06e      	beq.n	80069fe <_dtoa_r+0x90e>
 8006920:	ee18 0a10 	vmov	r0, s16
 8006924:	4631      	mov	r1, r6
 8006926:	f000 fd67 	bl	80073f8 <__mcmp>
 800692a:	2800      	cmp	r0, #0
 800692c:	da67      	bge.n	80069fe <_dtoa_r+0x90e>
 800692e:	9b00      	ldr	r3, [sp, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	ee18 1a10 	vmov	r1, s16
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	220a      	movs	r2, #10
 800693a:	2300      	movs	r3, #0
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fb3b 	bl	8006fb8 <__multadd>
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	ee08 0a10 	vmov	s16, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 81b1 	beq.w	8006cb0 <_dtoa_r+0xbc0>
 800694e:	2300      	movs	r3, #0
 8006950:	4639      	mov	r1, r7
 8006952:	220a      	movs	r2, #10
 8006954:	4620      	mov	r0, r4
 8006956:	f000 fb2f 	bl	8006fb8 <__multadd>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	4607      	mov	r7, r0
 8006960:	f300 808e 	bgt.w	8006a80 <_dtoa_r+0x990>
 8006964:	9b06      	ldr	r3, [sp, #24]
 8006966:	2b02      	cmp	r3, #2
 8006968:	dc51      	bgt.n	8006a0e <_dtoa_r+0x91e>
 800696a:	e089      	b.n	8006a80 <_dtoa_r+0x990>
 800696c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800696e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006972:	e74b      	b.n	800680c <_dtoa_r+0x71c>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1e5e      	subs	r6, r3, #1
 8006978:	9b07      	ldr	r3, [sp, #28]
 800697a:	42b3      	cmp	r3, r6
 800697c:	bfbf      	itttt	lt
 800697e:	9b07      	ldrlt	r3, [sp, #28]
 8006980:	9607      	strlt	r6, [sp, #28]
 8006982:	1af2      	sublt	r2, r6, r3
 8006984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006986:	bfb6      	itet	lt
 8006988:	189b      	addlt	r3, r3, r2
 800698a:	1b9e      	subge	r6, r3, r6
 800698c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	bfb8      	it	lt
 8006992:	2600      	movlt	r6, #0
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfb7      	itett	lt
 8006998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800699c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069a0:	1a9d      	sublt	r5, r3, r2
 80069a2:	2300      	movlt	r3, #0
 80069a4:	e734      	b.n	8006810 <_dtoa_r+0x720>
 80069a6:	9e07      	ldr	r6, [sp, #28]
 80069a8:	9d04      	ldr	r5, [sp, #16]
 80069aa:	9f08      	ldr	r7, [sp, #32]
 80069ac:	e73b      	b.n	8006826 <_dtoa_r+0x736>
 80069ae:	9a07      	ldr	r2, [sp, #28]
 80069b0:	e767      	b.n	8006882 <_dtoa_r+0x792>
 80069b2:	9b06      	ldr	r3, [sp, #24]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	dc18      	bgt.n	80069ea <_dtoa_r+0x8fa>
 80069b8:	f1ba 0f00 	cmp.w	sl, #0
 80069bc:	d115      	bne.n	80069ea <_dtoa_r+0x8fa>
 80069be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069c2:	b993      	cbnz	r3, 80069ea <_dtoa_r+0x8fa>
 80069c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	051b      	lsls	r3, r3, #20
 80069cc:	b183      	cbz	r3, 80069f0 <_dtoa_r+0x900>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	9b05      	ldr	r3, [sp, #20]
 80069d6:	3301      	adds	r3, #1
 80069d8:	9305      	str	r3, [sp, #20]
 80069da:	f04f 0801 	mov.w	r8, #1
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f47f af6a 	bne.w	80068ba <_dtoa_r+0x7ca>
 80069e6:	2001      	movs	r0, #1
 80069e8:	e76f      	b.n	80068ca <_dtoa_r+0x7da>
 80069ea:	f04f 0800 	mov.w	r8, #0
 80069ee:	e7f6      	b.n	80069de <_dtoa_r+0x8ee>
 80069f0:	4698      	mov	r8, r3
 80069f2:	e7f4      	b.n	80069de <_dtoa_r+0x8ee>
 80069f4:	f43f af7d 	beq.w	80068f2 <_dtoa_r+0x802>
 80069f8:	4618      	mov	r0, r3
 80069fa:	301c      	adds	r0, #28
 80069fc:	e772      	b.n	80068e4 <_dtoa_r+0x7f4>
 80069fe:	9b03      	ldr	r3, [sp, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dc37      	bgt.n	8006a74 <_dtoa_r+0x984>
 8006a04:	9b06      	ldr	r3, [sp, #24]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	dd34      	ble.n	8006a74 <_dtoa_r+0x984>
 8006a0a:	9b03      	ldr	r3, [sp, #12]
 8006a0c:	9302      	str	r3, [sp, #8]
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	b96b      	cbnz	r3, 8006a2e <_dtoa_r+0x93e>
 8006a12:	4631      	mov	r1, r6
 8006a14:	2205      	movs	r2, #5
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 face 	bl	8006fb8 <__multadd>
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	4606      	mov	r6, r0
 8006a20:	ee18 0a10 	vmov	r0, s16
 8006a24:	f000 fce8 	bl	80073f8 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f73f adbb 	bgt.w	80065a4 <_dtoa_r+0x4b4>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	9d01      	ldr	r5, [sp, #4]
 8006a32:	43db      	mvns	r3, r3
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	f04f 0800 	mov.w	r8, #0
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fa99 	bl	8006f74 <_Bfree>
 8006a42:	2f00      	cmp	r7, #0
 8006a44:	f43f aea4 	beq.w	8006790 <_dtoa_r+0x6a0>
 8006a48:	f1b8 0f00 	cmp.w	r8, #0
 8006a4c:	d005      	beq.n	8006a5a <_dtoa_r+0x96a>
 8006a4e:	45b8      	cmp	r8, r7
 8006a50:	d003      	beq.n	8006a5a <_dtoa_r+0x96a>
 8006a52:	4641      	mov	r1, r8
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fa8d 	bl	8006f74 <_Bfree>
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fa89 	bl	8006f74 <_Bfree>
 8006a62:	e695      	b.n	8006790 <_dtoa_r+0x6a0>
 8006a64:	2600      	movs	r6, #0
 8006a66:	4637      	mov	r7, r6
 8006a68:	e7e1      	b.n	8006a2e <_dtoa_r+0x93e>
 8006a6a:	9700      	str	r7, [sp, #0]
 8006a6c:	4637      	mov	r7, r6
 8006a6e:	e599      	b.n	80065a4 <_dtoa_r+0x4b4>
 8006a70:	40240000 	.word	0x40240000
 8006a74:	9b08      	ldr	r3, [sp, #32]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80ca 	beq.w	8006c10 <_dtoa_r+0xb20>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	dd05      	ble.n	8006a90 <_dtoa_r+0x9a0>
 8006a84:	4639      	mov	r1, r7
 8006a86:	462a      	mov	r2, r5
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fc45 	bl	8007318 <__lshift>
 8006a8e:	4607      	mov	r7, r0
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	d05b      	beq.n	8006b4e <_dtoa_r+0xa5e>
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fa2b 	bl	8006ef4 <_Balloc>
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <_dtoa_r+0x9be>
 8006aa2:	4b87      	ldr	r3, [pc, #540]	; (8006cc0 <_dtoa_r+0xbd0>)
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aaa:	f7ff bb3b 	b.w	8006124 <_dtoa_r+0x34>
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	3202      	adds	r2, #2
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	f107 010c 	add.w	r1, r7, #12
 8006ab8:	300c      	adds	r0, #12
 8006aba:	f000 fa0d 	bl	8006ed8 <memcpy>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fc28 	bl	8007318 <__lshift>
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	f103 0901 	add.w	r9, r3, #1
 8006ace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	f00a 0301 	and.w	r3, sl, #1
 8006ada:	46b8      	mov	r8, r7
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	4607      	mov	r7, r0
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	ee18 0a10 	vmov	r0, s16
 8006ae6:	f7ff fa75 	bl	8005fd4 <quorem>
 8006aea:	4641      	mov	r1, r8
 8006aec:	9002      	str	r0, [sp, #8]
 8006aee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006af2:	ee18 0a10 	vmov	r0, s16
 8006af6:	f000 fc7f 	bl	80073f8 <__mcmp>
 8006afa:	463a      	mov	r2, r7
 8006afc:	9003      	str	r0, [sp, #12]
 8006afe:	4631      	mov	r1, r6
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fc95 	bl	8007430 <__mdiff>
 8006b06:	68c2      	ldr	r2, [r0, #12]
 8006b08:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	bb02      	cbnz	r2, 8006b52 <_dtoa_r+0xa62>
 8006b10:	4601      	mov	r1, r0
 8006b12:	ee18 0a10 	vmov	r0, s16
 8006b16:	f000 fc6f 	bl	80073f8 <__mcmp>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4620      	mov	r0, r4
 8006b20:	9207      	str	r2, [sp, #28]
 8006b22:	f000 fa27 	bl	8006f74 <_Bfree>
 8006b26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b2a:	ea43 0102 	orr.w	r1, r3, r2
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	430b      	orrs	r3, r1
 8006b32:	464d      	mov	r5, r9
 8006b34:	d10f      	bne.n	8006b56 <_dtoa_r+0xa66>
 8006b36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b3a:	d02a      	beq.n	8006b92 <_dtoa_r+0xaa2>
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	dd02      	ble.n	8006b48 <_dtoa_r+0xa58>
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b48:	f88b a000 	strb.w	sl, [fp]
 8006b4c:	e775      	b.n	8006a3a <_dtoa_r+0x94a>
 8006b4e:	4638      	mov	r0, r7
 8006b50:	e7ba      	b.n	8006ac8 <_dtoa_r+0x9d8>
 8006b52:	2201      	movs	r2, #1
 8006b54:	e7e2      	b.n	8006b1c <_dtoa_r+0xa2c>
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	db04      	blt.n	8006b66 <_dtoa_r+0xa76>
 8006b5c:	9906      	ldr	r1, [sp, #24]
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	9904      	ldr	r1, [sp, #16]
 8006b62:	430b      	orrs	r3, r1
 8006b64:	d122      	bne.n	8006bac <_dtoa_r+0xabc>
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	ddee      	ble.n	8006b48 <_dtoa_r+0xa58>
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fbd1 	bl	8007318 <__lshift>
 8006b76:	4631      	mov	r1, r6
 8006b78:	ee08 0a10 	vmov	s16, r0
 8006b7c:	f000 fc3c 	bl	80073f8 <__mcmp>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	dc03      	bgt.n	8006b8c <_dtoa_r+0xa9c>
 8006b84:	d1e0      	bne.n	8006b48 <_dtoa_r+0xa58>
 8006b86:	f01a 0f01 	tst.w	sl, #1
 8006b8a:	d0dd      	beq.n	8006b48 <_dtoa_r+0xa58>
 8006b8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b90:	d1d7      	bne.n	8006b42 <_dtoa_r+0xa52>
 8006b92:	2339      	movs	r3, #57	; 0x39
 8006b94:	f88b 3000 	strb.w	r3, [fp]
 8006b98:	462b      	mov	r3, r5
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ba2:	2a39      	cmp	r2, #57	; 0x39
 8006ba4:	d071      	beq.n	8006c8a <_dtoa_r+0xb9a>
 8006ba6:	3201      	adds	r2, #1
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	e746      	b.n	8006a3a <_dtoa_r+0x94a>
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	dd07      	ble.n	8006bc0 <_dtoa_r+0xad0>
 8006bb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bb4:	d0ed      	beq.n	8006b92 <_dtoa_r+0xaa2>
 8006bb6:	f10a 0301 	add.w	r3, sl, #1
 8006bba:	f88b 3000 	strb.w	r3, [fp]
 8006bbe:	e73c      	b.n	8006a3a <_dtoa_r+0x94a>
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006bc6:	4599      	cmp	r9, r3
 8006bc8:	d047      	beq.n	8006c5a <_dtoa_r+0xb6a>
 8006bca:	ee18 1a10 	vmov	r1, s16
 8006bce:	2300      	movs	r3, #0
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f9f0 	bl	8006fb8 <__multadd>
 8006bd8:	45b8      	cmp	r8, r7
 8006bda:	ee08 0a10 	vmov	s16, r0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	f04f 020a 	mov.w	r2, #10
 8006be6:	4641      	mov	r1, r8
 8006be8:	4620      	mov	r0, r4
 8006bea:	d106      	bne.n	8006bfa <_dtoa_r+0xb0a>
 8006bec:	f000 f9e4 	bl	8006fb8 <__multadd>
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f109 0901 	add.w	r9, r9, #1
 8006bf8:	e772      	b.n	8006ae0 <_dtoa_r+0x9f0>
 8006bfa:	f000 f9dd 	bl	8006fb8 <__multadd>
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4680      	mov	r8, r0
 8006c02:	2300      	movs	r3, #0
 8006c04:	220a      	movs	r2, #10
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f9d6 	bl	8006fb8 <__multadd>
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	e7f1      	b.n	8006bf4 <_dtoa_r+0xb04>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	9302      	str	r3, [sp, #8]
 8006c14:	9d01      	ldr	r5, [sp, #4]
 8006c16:	ee18 0a10 	vmov	r0, s16
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	f7ff f9da 	bl	8005fd4 <quorem>
 8006c20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	f805 ab01 	strb.w	sl, [r5], #1
 8006c2a:	1aea      	subs	r2, r5, r3
 8006c2c:	9b02      	ldr	r3, [sp, #8]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	dd09      	ble.n	8006c46 <_dtoa_r+0xb56>
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	2300      	movs	r3, #0
 8006c38:	220a      	movs	r2, #10
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f9bc 	bl	8006fb8 <__multadd>
 8006c40:	ee08 0a10 	vmov	s16, r0
 8006c44:	e7e7      	b.n	8006c16 <_dtoa_r+0xb26>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfc8      	it	gt
 8006c4c:	461d      	movgt	r5, r3
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	bfd8      	it	le
 8006c52:	2501      	movle	r5, #1
 8006c54:	441d      	add	r5, r3
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	ee18 1a10 	vmov	r1, s16
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fb59 	bl	8007318 <__lshift>
 8006c66:	4631      	mov	r1, r6
 8006c68:	ee08 0a10 	vmov	s16, r0
 8006c6c:	f000 fbc4 	bl	80073f8 <__mcmp>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	dc91      	bgt.n	8006b98 <_dtoa_r+0xaa8>
 8006c74:	d102      	bne.n	8006c7c <_dtoa_r+0xb8c>
 8006c76:	f01a 0f01 	tst.w	sl, #1
 8006c7a:	d18d      	bne.n	8006b98 <_dtoa_r+0xaa8>
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	461d      	mov	r5, r3
 8006c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c84:	2a30      	cmp	r2, #48	; 0x30
 8006c86:	d0fa      	beq.n	8006c7e <_dtoa_r+0xb8e>
 8006c88:	e6d7      	b.n	8006a3a <_dtoa_r+0x94a>
 8006c8a:	9a01      	ldr	r2, [sp, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d184      	bne.n	8006b9a <_dtoa_r+0xaaa>
 8006c90:	9b00      	ldr	r3, [sp, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2331      	movs	r3, #49	; 0x31
 8006c98:	7013      	strb	r3, [r2, #0]
 8006c9a:	e6ce      	b.n	8006a3a <_dtoa_r+0x94a>
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <_dtoa_r+0xbd4>)
 8006c9e:	f7ff ba95 	b.w	80061cc <_dtoa_r+0xdc>
 8006ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f47f aa6e 	bne.w	8006186 <_dtoa_r+0x96>
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <_dtoa_r+0xbd8>)
 8006cac:	f7ff ba8e 	b.w	80061cc <_dtoa_r+0xdc>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dcae      	bgt.n	8006c14 <_dtoa_r+0xb24>
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	f73f aea8 	bgt.w	8006a0e <_dtoa_r+0x91e>
 8006cbe:	e7a9      	b.n	8006c14 <_dtoa_r+0xb24>
 8006cc0:	0800824f 	.word	0x0800824f
 8006cc4:	080081ac 	.word	0x080081ac
 8006cc8:	080081d0 	.word	0x080081d0

08006ccc <std>:
 8006ccc:	2300      	movs	r3, #0
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cda:	6083      	str	r3, [r0, #8]
 8006cdc:	8181      	strh	r1, [r0, #12]
 8006cde:	6643      	str	r3, [r0, #100]	; 0x64
 8006ce0:	81c2      	strh	r2, [r0, #14]
 8006ce2:	6183      	str	r3, [r0, #24]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	305c      	adds	r0, #92	; 0x5c
 8006cea:	f7fe fce9 	bl	80056c0 <memset>
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x38>)
 8006cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <std+0x3c>)
 8006cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <std+0x40>)
 8006cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <std+0x44>)
 8006cfc:	6224      	str	r4, [r4, #32]
 8006cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	bf00      	nop
 8006d04:	08007abd 	.word	0x08007abd
 8006d08:	08007adf 	.word	0x08007adf
 8006d0c:	08007b17 	.word	0x08007b17
 8006d10:	08007b3b 	.word	0x08007b3b

08006d14 <_cleanup_r>:
 8006d14:	4901      	ldr	r1, [pc, #4]	; (8006d1c <_cleanup_r+0x8>)
 8006d16:	f000 b8af 	b.w	8006e78 <_fwalk_reent>
 8006d1a:	bf00      	nop
 8006d1c:	08007e51 	.word	0x08007e51

08006d20 <__sfmoreglue>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	2268      	movs	r2, #104	; 0x68
 8006d24:	1e4d      	subs	r5, r1, #1
 8006d26:	4355      	muls	r5, r2
 8006d28:	460e      	mov	r6, r1
 8006d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d2e:	f000 fce7 	bl	8007700 <_malloc_r>
 8006d32:	4604      	mov	r4, r0
 8006d34:	b140      	cbz	r0, 8006d48 <__sfmoreglue+0x28>
 8006d36:	2100      	movs	r1, #0
 8006d38:	e9c0 1600 	strd	r1, r6, [r0]
 8006d3c:	300c      	adds	r0, #12
 8006d3e:	60a0      	str	r0, [r4, #8]
 8006d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d44:	f7fe fcbc 	bl	80056c0 <memset>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}

08006d4c <__sfp_lock_acquire>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <__sfp_lock_acquire+0x8>)
 8006d4e:	f000 b8b8 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8006d52:	bf00      	nop
 8006d54:	20000971 	.word	0x20000971

08006d58 <__sfp_lock_release>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sfp_lock_release+0x8>)
 8006d5a:	f000 b8b3 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8006d5e:	bf00      	nop
 8006d60:	20000971 	.word	0x20000971

08006d64 <__sinit_lock_acquire>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sinit_lock_acquire+0x8>)
 8006d66:	f000 b8ac 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20000972 	.word	0x20000972

08006d70 <__sinit_lock_release>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sinit_lock_release+0x8>)
 8006d72:	f000 b8a7 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	20000972 	.word	0x20000972

08006d7c <__sinit>:
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	4604      	mov	r4, r0
 8006d80:	f7ff fff0 	bl	8006d64 <__sinit_lock_acquire>
 8006d84:	69a3      	ldr	r3, [r4, #24]
 8006d86:	b11b      	cbz	r3, 8006d90 <__sinit+0x14>
 8006d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d8c:	f7ff bff0 	b.w	8006d70 <__sinit_lock_release>
 8006d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d94:	6523      	str	r3, [r4, #80]	; 0x50
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <__sinit+0x68>)
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <__sinit+0x6c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	bf04      	itt	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	61a3      	streq	r3, [r4, #24]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f820 	bl	8006dec <__sfp>
 8006dac:	6060      	str	r0, [r4, #4]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f81c 	bl	8006dec <__sfp>
 8006db4:	60a0      	str	r0, [r4, #8]
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f818 	bl	8006dec <__sfp>
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	60e0      	str	r0, [r4, #12]
 8006dc0:	2104      	movs	r1, #4
 8006dc2:	6860      	ldr	r0, [r4, #4]
 8006dc4:	f7ff ff82 	bl	8006ccc <std>
 8006dc8:	68a0      	ldr	r0, [r4, #8]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	2109      	movs	r1, #9
 8006dce:	f7ff ff7d 	bl	8006ccc <std>
 8006dd2:	68e0      	ldr	r0, [r4, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	2112      	movs	r1, #18
 8006dd8:	f7ff ff78 	bl	8006ccc <std>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	61a3      	str	r3, [r4, #24]
 8006de0:	e7d2      	b.n	8006d88 <__sinit+0xc>
 8006de2:	bf00      	nop
 8006de4:	08008198 	.word	0x08008198
 8006de8:	08006d15 	.word	0x08006d15

08006dec <__sfp>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	4607      	mov	r7, r0
 8006df0:	f7ff ffac 	bl	8006d4c <__sfp_lock_acquire>
 8006df4:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <__sfp+0x84>)
 8006df6:	681e      	ldr	r6, [r3, #0]
 8006df8:	69b3      	ldr	r3, [r6, #24]
 8006dfa:	b913      	cbnz	r3, 8006e02 <__sfp+0x16>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff ffbd 	bl	8006d7c <__sinit>
 8006e02:	3648      	adds	r6, #72	; 0x48
 8006e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	d503      	bpl.n	8006e14 <__sfp+0x28>
 8006e0c:	6833      	ldr	r3, [r6, #0]
 8006e0e:	b30b      	cbz	r3, 8006e54 <__sfp+0x68>
 8006e10:	6836      	ldr	r6, [r6, #0]
 8006e12:	e7f7      	b.n	8006e04 <__sfp+0x18>
 8006e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e18:	b9d5      	cbnz	r5, 8006e50 <__sfp+0x64>
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <__sfp+0x88>)
 8006e1c:	60e3      	str	r3, [r4, #12]
 8006e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e22:	6665      	str	r5, [r4, #100]	; 0x64
 8006e24:	f000 f84c 	bl	8006ec0 <__retarget_lock_init_recursive>
 8006e28:	f7ff ff96 	bl	8006d58 <__sfp_lock_release>
 8006e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e34:	6025      	str	r5, [r4, #0]
 8006e36:	61a5      	str	r5, [r4, #24]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e40:	f7fe fc3e 	bl	80056c0 <memset>
 8006e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e50:	3468      	adds	r4, #104	; 0x68
 8006e52:	e7d9      	b.n	8006e08 <__sfp+0x1c>
 8006e54:	2104      	movs	r1, #4
 8006e56:	4638      	mov	r0, r7
 8006e58:	f7ff ff62 	bl	8006d20 <__sfmoreglue>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	6030      	str	r0, [r6, #0]
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d1d5      	bne.n	8006e10 <__sfp+0x24>
 8006e64:	f7ff ff78 	bl	8006d58 <__sfp_lock_release>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	e7ee      	b.n	8006e4c <__sfp+0x60>
 8006e6e:	bf00      	nop
 8006e70:	08008198 	.word	0x08008198
 8006e74:	ffff0001 	.word	0xffff0001

08006e78 <_fwalk_reent>:
 8006e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	4688      	mov	r8, r1
 8006e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e84:	2700      	movs	r7, #0
 8006e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e8e:	d505      	bpl.n	8006e9c <_fwalk_reent+0x24>
 8006e90:	6824      	ldr	r4, [r4, #0]
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	d1f7      	bne.n	8006e86 <_fwalk_reent+0xe>
 8006e96:	4638      	mov	r0, r7
 8006e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e9c:	89ab      	ldrh	r3, [r5, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d907      	bls.n	8006eb2 <_fwalk_reent+0x3a>
 8006ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	d003      	beq.n	8006eb2 <_fwalk_reent+0x3a>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4630      	mov	r0, r6
 8006eae:	47c0      	blx	r8
 8006eb0:	4307      	orrs	r7, r0
 8006eb2:	3568      	adds	r5, #104	; 0x68
 8006eb4:	e7e9      	b.n	8006e8a <_fwalk_reent+0x12>
	...

08006eb8 <_localeconv_r>:
 8006eb8:	4800      	ldr	r0, [pc, #0]	; (8006ebc <_localeconv_r+0x4>)
 8006eba:	4770      	bx	lr
 8006ebc:	20000160 	.word	0x20000160

08006ec0 <__retarget_lock_init_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <__retarget_lock_acquire_recursive>:
 8006ec2:	4770      	bx	lr

08006ec4 <__retarget_lock_release_recursive>:
 8006ec4:	4770      	bx	lr
	...

08006ec8 <malloc>:
 8006ec8:	4b02      	ldr	r3, [pc, #8]	; (8006ed4 <malloc+0xc>)
 8006eca:	4601      	mov	r1, r0
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	f000 bc17 	b.w	8007700 <_malloc_r>
 8006ed2:	bf00      	nop
 8006ed4:	2000000c 	.word	0x2000000c

08006ed8 <memcpy>:
 8006ed8:	440a      	add	r2, r1
 8006eda:	4291      	cmp	r1, r2
 8006edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ee0:	d100      	bne.n	8006ee4 <memcpy+0xc>
 8006ee2:	4770      	bx	lr
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eee:	4291      	cmp	r1, r2
 8006ef0:	d1f9      	bne.n	8006ee6 <memcpy+0xe>
 8006ef2:	bd10      	pop	{r4, pc}

08006ef4 <_Balloc>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef8:	4604      	mov	r4, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	b976      	cbnz	r6, 8006f1c <_Balloc+0x28>
 8006efe:	2010      	movs	r0, #16
 8006f00:	f7ff ffe2 	bl	8006ec8 <malloc>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6260      	str	r0, [r4, #36]	; 0x24
 8006f08:	b920      	cbnz	r0, 8006f14 <_Balloc+0x20>
 8006f0a:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <_Balloc+0x78>)
 8006f0c:	4818      	ldr	r0, [pc, #96]	; (8006f70 <_Balloc+0x7c>)
 8006f0e:	2166      	movs	r1, #102	; 0x66
 8006f10:	f000 feea 	bl	8007ce8 <__assert_func>
 8006f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f18:	6006      	str	r6, [r0, #0]
 8006f1a:	60c6      	str	r6, [r0, #12]
 8006f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f1e:	68f3      	ldr	r3, [r6, #12]
 8006f20:	b183      	cbz	r3, 8006f44 <_Balloc+0x50>
 8006f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f2a:	b9b8      	cbnz	r0, 8006f5c <_Balloc+0x68>
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f32:	1d72      	adds	r2, r6, #5
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 fb60 	bl	80075fc <_calloc_r>
 8006f3c:	b160      	cbz	r0, 8006f58 <_Balloc+0x64>
 8006f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f42:	e00e      	b.n	8006f62 <_Balloc+0x6e>
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	2104      	movs	r1, #4
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fb57 	bl	80075fc <_calloc_r>
 8006f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f50:	60f0      	str	r0, [r6, #12]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e4      	bne.n	8006f22 <_Balloc+0x2e>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	6802      	ldr	r2, [r0, #0]
 8006f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f62:	2300      	movs	r3, #0
 8006f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f68:	e7f7      	b.n	8006f5a <_Balloc+0x66>
 8006f6a:	bf00      	nop
 8006f6c:	080081dd 	.word	0x080081dd
 8006f70:	080082c0 	.word	0x080082c0

08006f74 <_Bfree>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b976      	cbnz	r6, 8006f9c <_Bfree+0x28>
 8006f7e:	2010      	movs	r0, #16
 8006f80:	f7ff ffa2 	bl	8006ec8 <malloc>
 8006f84:	4602      	mov	r2, r0
 8006f86:	6268      	str	r0, [r5, #36]	; 0x24
 8006f88:	b920      	cbnz	r0, 8006f94 <_Bfree+0x20>
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <_Bfree+0x3c>)
 8006f8c:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <_Bfree+0x40>)
 8006f8e:	218a      	movs	r1, #138	; 0x8a
 8006f90:	f000 feaa 	bl	8007ce8 <__assert_func>
 8006f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f98:	6006      	str	r6, [r0, #0]
 8006f9a:	60c6      	str	r6, [r0, #12]
 8006f9c:	b13c      	cbz	r4, 8006fae <_Bfree+0x3a>
 8006f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa8:	6021      	str	r1, [r4, #0]
 8006faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	080081dd 	.word	0x080081dd
 8006fb4:	080082c0 	.word	0x080082c0

08006fb8 <__multadd>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	690d      	ldr	r5, [r1, #16]
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	461e      	mov	r6, r3
 8006fc4:	f101 0c14 	add.w	ip, r1, #20
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f8dc 3000 	ldr.w	r3, [ip]
 8006fce:	b299      	uxth	r1, r3
 8006fd0:	fb02 6101 	mla	r1, r2, r1, r6
 8006fd4:	0c1e      	lsrs	r6, r3, #16
 8006fd6:	0c0b      	lsrs	r3, r1, #16
 8006fd8:	fb02 3306 	mla	r3, r2, r6, r3
 8006fdc:	b289      	uxth	r1, r1
 8006fde:	3001      	adds	r0, #1
 8006fe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fe4:	4285      	cmp	r5, r0
 8006fe6:	f84c 1b04 	str.w	r1, [ip], #4
 8006fea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fee:	dcec      	bgt.n	8006fca <__multadd+0x12>
 8006ff0:	b30e      	cbz	r6, 8007036 <__multadd+0x7e>
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dc19      	bgt.n	800702c <__multadd+0x74>
 8006ff8:	6861      	ldr	r1, [r4, #4]
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	3101      	adds	r1, #1
 8006ffe:	f7ff ff79 	bl	8006ef4 <_Balloc>
 8007002:	4680      	mov	r8, r0
 8007004:	b928      	cbnz	r0, 8007012 <__multadd+0x5a>
 8007006:	4602      	mov	r2, r0
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <__multadd+0x84>)
 800700a:	480d      	ldr	r0, [pc, #52]	; (8007040 <__multadd+0x88>)
 800700c:	21b5      	movs	r1, #181	; 0xb5
 800700e:	f000 fe6b 	bl	8007ce8 <__assert_func>
 8007012:	6922      	ldr	r2, [r4, #16]
 8007014:	3202      	adds	r2, #2
 8007016:	f104 010c 	add.w	r1, r4, #12
 800701a:	0092      	lsls	r2, r2, #2
 800701c:	300c      	adds	r0, #12
 800701e:	f7ff ff5b 	bl	8006ed8 <memcpy>
 8007022:	4621      	mov	r1, r4
 8007024:	4638      	mov	r0, r7
 8007026:	f7ff ffa5 	bl	8006f74 <_Bfree>
 800702a:	4644      	mov	r4, r8
 800702c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007030:	3501      	adds	r5, #1
 8007032:	615e      	str	r6, [r3, #20]
 8007034:	6125      	str	r5, [r4, #16]
 8007036:	4620      	mov	r0, r4
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	0800824f 	.word	0x0800824f
 8007040:	080082c0 	.word	0x080082c0

08007044 <__hi0bits>:
 8007044:	0c03      	lsrs	r3, r0, #16
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	b9d3      	cbnz	r3, 8007080 <__hi0bits+0x3c>
 800704a:	0400      	lsls	r0, r0, #16
 800704c:	2310      	movs	r3, #16
 800704e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007052:	bf04      	itt	eq
 8007054:	0200      	lsleq	r0, r0, #8
 8007056:	3308      	addeq	r3, #8
 8007058:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800705c:	bf04      	itt	eq
 800705e:	0100      	lsleq	r0, r0, #4
 8007060:	3304      	addeq	r3, #4
 8007062:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007066:	bf04      	itt	eq
 8007068:	0080      	lsleq	r0, r0, #2
 800706a:	3302      	addeq	r3, #2
 800706c:	2800      	cmp	r0, #0
 800706e:	db05      	blt.n	800707c <__hi0bits+0x38>
 8007070:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007074:	f103 0301 	add.w	r3, r3, #1
 8007078:	bf08      	it	eq
 800707a:	2320      	moveq	r3, #32
 800707c:	4618      	mov	r0, r3
 800707e:	4770      	bx	lr
 8007080:	2300      	movs	r3, #0
 8007082:	e7e4      	b.n	800704e <__hi0bits+0xa>

08007084 <__lo0bits>:
 8007084:	6803      	ldr	r3, [r0, #0]
 8007086:	f013 0207 	ands.w	r2, r3, #7
 800708a:	4601      	mov	r1, r0
 800708c:	d00b      	beq.n	80070a6 <__lo0bits+0x22>
 800708e:	07da      	lsls	r2, r3, #31
 8007090:	d423      	bmi.n	80070da <__lo0bits+0x56>
 8007092:	0798      	lsls	r0, r3, #30
 8007094:	bf49      	itett	mi
 8007096:	085b      	lsrmi	r3, r3, #1
 8007098:	089b      	lsrpl	r3, r3, #2
 800709a:	2001      	movmi	r0, #1
 800709c:	600b      	strmi	r3, [r1, #0]
 800709e:	bf5c      	itt	pl
 80070a0:	600b      	strpl	r3, [r1, #0]
 80070a2:	2002      	movpl	r0, #2
 80070a4:	4770      	bx	lr
 80070a6:	b298      	uxth	r0, r3
 80070a8:	b9a8      	cbnz	r0, 80070d6 <__lo0bits+0x52>
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	2010      	movs	r0, #16
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	b90a      	cbnz	r2, 80070b6 <__lo0bits+0x32>
 80070b2:	3008      	adds	r0, #8
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	071a      	lsls	r2, r3, #28
 80070b8:	bf04      	itt	eq
 80070ba:	091b      	lsreq	r3, r3, #4
 80070bc:	3004      	addeq	r0, #4
 80070be:	079a      	lsls	r2, r3, #30
 80070c0:	bf04      	itt	eq
 80070c2:	089b      	lsreq	r3, r3, #2
 80070c4:	3002      	addeq	r0, #2
 80070c6:	07da      	lsls	r2, r3, #31
 80070c8:	d403      	bmi.n	80070d2 <__lo0bits+0x4e>
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	f100 0001 	add.w	r0, r0, #1
 80070d0:	d005      	beq.n	80070de <__lo0bits+0x5a>
 80070d2:	600b      	str	r3, [r1, #0]
 80070d4:	4770      	bx	lr
 80070d6:	4610      	mov	r0, r2
 80070d8:	e7e9      	b.n	80070ae <__lo0bits+0x2a>
 80070da:	2000      	movs	r0, #0
 80070dc:	4770      	bx	lr
 80070de:	2020      	movs	r0, #32
 80070e0:	4770      	bx	lr
	...

080070e4 <__i2b>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	2101      	movs	r1, #1
 80070ea:	f7ff ff03 	bl	8006ef4 <_Balloc>
 80070ee:	4602      	mov	r2, r0
 80070f0:	b928      	cbnz	r0, 80070fe <__i2b+0x1a>
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <__i2b+0x24>)
 80070f4:	4805      	ldr	r0, [pc, #20]	; (800710c <__i2b+0x28>)
 80070f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070fa:	f000 fdf5 	bl	8007ce8 <__assert_func>
 80070fe:	2301      	movs	r3, #1
 8007100:	6144      	str	r4, [r0, #20]
 8007102:	6103      	str	r3, [r0, #16]
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	0800824f 	.word	0x0800824f
 800710c:	080082c0 	.word	0x080082c0

08007110 <__multiply>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	4691      	mov	r9, r2
 8007116:	690a      	ldr	r2, [r1, #16]
 8007118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	bfb8      	it	lt
 8007120:	460b      	movlt	r3, r1
 8007122:	460c      	mov	r4, r1
 8007124:	bfbc      	itt	lt
 8007126:	464c      	movlt	r4, r9
 8007128:	4699      	movlt	r9, r3
 800712a:	6927      	ldr	r7, [r4, #16]
 800712c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007130:	68a3      	ldr	r3, [r4, #8]
 8007132:	6861      	ldr	r1, [r4, #4]
 8007134:	eb07 060a 	add.w	r6, r7, sl
 8007138:	42b3      	cmp	r3, r6
 800713a:	b085      	sub	sp, #20
 800713c:	bfb8      	it	lt
 800713e:	3101      	addlt	r1, #1
 8007140:	f7ff fed8 	bl	8006ef4 <_Balloc>
 8007144:	b930      	cbnz	r0, 8007154 <__multiply+0x44>
 8007146:	4602      	mov	r2, r0
 8007148:	4b44      	ldr	r3, [pc, #272]	; (800725c <__multiply+0x14c>)
 800714a:	4845      	ldr	r0, [pc, #276]	; (8007260 <__multiply+0x150>)
 800714c:	f240 115d 	movw	r1, #349	; 0x15d
 8007150:	f000 fdca 	bl	8007ce8 <__assert_func>
 8007154:	f100 0514 	add.w	r5, r0, #20
 8007158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800715c:	462b      	mov	r3, r5
 800715e:	2200      	movs	r2, #0
 8007160:	4543      	cmp	r3, r8
 8007162:	d321      	bcc.n	80071a8 <__multiply+0x98>
 8007164:	f104 0314 	add.w	r3, r4, #20
 8007168:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800716c:	f109 0314 	add.w	r3, r9, #20
 8007170:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007174:	9202      	str	r2, [sp, #8]
 8007176:	1b3a      	subs	r2, r7, r4
 8007178:	3a15      	subs	r2, #21
 800717a:	f022 0203 	bic.w	r2, r2, #3
 800717e:	3204      	adds	r2, #4
 8007180:	f104 0115 	add.w	r1, r4, #21
 8007184:	428f      	cmp	r7, r1
 8007186:	bf38      	it	cc
 8007188:	2204      	movcc	r2, #4
 800718a:	9201      	str	r2, [sp, #4]
 800718c:	9a02      	ldr	r2, [sp, #8]
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d80c      	bhi.n	80071ae <__multiply+0x9e>
 8007194:	2e00      	cmp	r6, #0
 8007196:	dd03      	ble.n	80071a0 <__multiply+0x90>
 8007198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800719c:	2b00      	cmp	r3, #0
 800719e:	d05a      	beq.n	8007256 <__multiply+0x146>
 80071a0:	6106      	str	r6, [r0, #16]
 80071a2:	b005      	add	sp, #20
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a8:	f843 2b04 	str.w	r2, [r3], #4
 80071ac:	e7d8      	b.n	8007160 <__multiply+0x50>
 80071ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80071b2:	f1ba 0f00 	cmp.w	sl, #0
 80071b6:	d024      	beq.n	8007202 <__multiply+0xf2>
 80071b8:	f104 0e14 	add.w	lr, r4, #20
 80071bc:	46a9      	mov	r9, r5
 80071be:	f04f 0c00 	mov.w	ip, #0
 80071c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071c6:	f8d9 1000 	ldr.w	r1, [r9]
 80071ca:	fa1f fb82 	uxth.w	fp, r2
 80071ce:	b289      	uxth	r1, r1
 80071d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80071d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071d8:	f8d9 2000 	ldr.w	r2, [r9]
 80071dc:	4461      	add	r1, ip
 80071de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80071e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071ea:	b289      	uxth	r1, r1
 80071ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071f0:	4577      	cmp	r7, lr
 80071f2:	f849 1b04 	str.w	r1, [r9], #4
 80071f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071fa:	d8e2      	bhi.n	80071c2 <__multiply+0xb2>
 80071fc:	9a01      	ldr	r2, [sp, #4]
 80071fe:	f845 c002 	str.w	ip, [r5, r2]
 8007202:	9a03      	ldr	r2, [sp, #12]
 8007204:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007208:	3304      	adds	r3, #4
 800720a:	f1b9 0f00 	cmp.w	r9, #0
 800720e:	d020      	beq.n	8007252 <__multiply+0x142>
 8007210:	6829      	ldr	r1, [r5, #0]
 8007212:	f104 0c14 	add.w	ip, r4, #20
 8007216:	46ae      	mov	lr, r5
 8007218:	f04f 0a00 	mov.w	sl, #0
 800721c:	f8bc b000 	ldrh.w	fp, [ip]
 8007220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007224:	fb09 220b 	mla	r2, r9, fp, r2
 8007228:	4492      	add	sl, r2
 800722a:	b289      	uxth	r1, r1
 800722c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007230:	f84e 1b04 	str.w	r1, [lr], #4
 8007234:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007238:	f8be 1000 	ldrh.w	r1, [lr]
 800723c:	0c12      	lsrs	r2, r2, #16
 800723e:	fb09 1102 	mla	r1, r9, r2, r1
 8007242:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007246:	4567      	cmp	r7, ip
 8007248:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800724c:	d8e6      	bhi.n	800721c <__multiply+0x10c>
 800724e:	9a01      	ldr	r2, [sp, #4]
 8007250:	50a9      	str	r1, [r5, r2]
 8007252:	3504      	adds	r5, #4
 8007254:	e79a      	b.n	800718c <__multiply+0x7c>
 8007256:	3e01      	subs	r6, #1
 8007258:	e79c      	b.n	8007194 <__multiply+0x84>
 800725a:	bf00      	nop
 800725c:	0800824f 	.word	0x0800824f
 8007260:	080082c0 	.word	0x080082c0

08007264 <__pow5mult>:
 8007264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007268:	4615      	mov	r5, r2
 800726a:	f012 0203 	ands.w	r2, r2, #3
 800726e:	4606      	mov	r6, r0
 8007270:	460f      	mov	r7, r1
 8007272:	d007      	beq.n	8007284 <__pow5mult+0x20>
 8007274:	4c25      	ldr	r4, [pc, #148]	; (800730c <__pow5mult+0xa8>)
 8007276:	3a01      	subs	r2, #1
 8007278:	2300      	movs	r3, #0
 800727a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800727e:	f7ff fe9b 	bl	8006fb8 <__multadd>
 8007282:	4607      	mov	r7, r0
 8007284:	10ad      	asrs	r5, r5, #2
 8007286:	d03d      	beq.n	8007304 <__pow5mult+0xa0>
 8007288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800728a:	b97c      	cbnz	r4, 80072ac <__pow5mult+0x48>
 800728c:	2010      	movs	r0, #16
 800728e:	f7ff fe1b 	bl	8006ec8 <malloc>
 8007292:	4602      	mov	r2, r0
 8007294:	6270      	str	r0, [r6, #36]	; 0x24
 8007296:	b928      	cbnz	r0, 80072a4 <__pow5mult+0x40>
 8007298:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <__pow5mult+0xac>)
 800729a:	481e      	ldr	r0, [pc, #120]	; (8007314 <__pow5mult+0xb0>)
 800729c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072a0:	f000 fd22 	bl	8007ce8 <__assert_func>
 80072a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072a8:	6004      	str	r4, [r0, #0]
 80072aa:	60c4      	str	r4, [r0, #12]
 80072ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072b4:	b94c      	cbnz	r4, 80072ca <__pow5mult+0x66>
 80072b6:	f240 2171 	movw	r1, #625	; 0x271
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ff12 	bl	80070e4 <__i2b>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80072c6:	4604      	mov	r4, r0
 80072c8:	6003      	str	r3, [r0, #0]
 80072ca:	f04f 0900 	mov.w	r9, #0
 80072ce:	07eb      	lsls	r3, r5, #31
 80072d0:	d50a      	bpl.n	80072e8 <__pow5mult+0x84>
 80072d2:	4639      	mov	r1, r7
 80072d4:	4622      	mov	r2, r4
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ff1a 	bl	8007110 <__multiply>
 80072dc:	4639      	mov	r1, r7
 80072de:	4680      	mov	r8, r0
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff fe47 	bl	8006f74 <_Bfree>
 80072e6:	4647      	mov	r7, r8
 80072e8:	106d      	asrs	r5, r5, #1
 80072ea:	d00b      	beq.n	8007304 <__pow5mult+0xa0>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	b938      	cbnz	r0, 8007300 <__pow5mult+0x9c>
 80072f0:	4622      	mov	r2, r4
 80072f2:	4621      	mov	r1, r4
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff ff0b 	bl	8007110 <__multiply>
 80072fa:	6020      	str	r0, [r4, #0]
 80072fc:	f8c0 9000 	str.w	r9, [r0]
 8007300:	4604      	mov	r4, r0
 8007302:	e7e4      	b.n	80072ce <__pow5mult+0x6a>
 8007304:	4638      	mov	r0, r7
 8007306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730a:	bf00      	nop
 800730c:	08008410 	.word	0x08008410
 8007310:	080081dd 	.word	0x080081dd
 8007314:	080082c0 	.word	0x080082c0

08007318 <__lshift>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	6849      	ldr	r1, [r1, #4]
 8007320:	6923      	ldr	r3, [r4, #16]
 8007322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007326:	68a3      	ldr	r3, [r4, #8]
 8007328:	4607      	mov	r7, r0
 800732a:	4691      	mov	r9, r2
 800732c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007330:	f108 0601 	add.w	r6, r8, #1
 8007334:	42b3      	cmp	r3, r6
 8007336:	db0b      	blt.n	8007350 <__lshift+0x38>
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff fddb 	bl	8006ef4 <_Balloc>
 800733e:	4605      	mov	r5, r0
 8007340:	b948      	cbnz	r0, 8007356 <__lshift+0x3e>
 8007342:	4602      	mov	r2, r0
 8007344:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <__lshift+0xd8>)
 8007346:	482b      	ldr	r0, [pc, #172]	; (80073f4 <__lshift+0xdc>)
 8007348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800734c:	f000 fccc 	bl	8007ce8 <__assert_func>
 8007350:	3101      	adds	r1, #1
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	e7ee      	b.n	8007334 <__lshift+0x1c>
 8007356:	2300      	movs	r3, #0
 8007358:	f100 0114 	add.w	r1, r0, #20
 800735c:	f100 0210 	add.w	r2, r0, #16
 8007360:	4618      	mov	r0, r3
 8007362:	4553      	cmp	r3, sl
 8007364:	db37      	blt.n	80073d6 <__lshift+0xbe>
 8007366:	6920      	ldr	r0, [r4, #16]
 8007368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800736c:	f104 0314 	add.w	r3, r4, #20
 8007370:	f019 091f 	ands.w	r9, r9, #31
 8007374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007378:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800737c:	d02f      	beq.n	80073de <__lshift+0xc6>
 800737e:	f1c9 0e20 	rsb	lr, r9, #32
 8007382:	468a      	mov	sl, r1
 8007384:	f04f 0c00 	mov.w	ip, #0
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	fa02 f209 	lsl.w	r2, r2, r9
 800738e:	ea42 020c 	orr.w	r2, r2, ip
 8007392:	f84a 2b04 	str.w	r2, [sl], #4
 8007396:	f853 2b04 	ldr.w	r2, [r3], #4
 800739a:	4298      	cmp	r0, r3
 800739c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073a0:	d8f2      	bhi.n	8007388 <__lshift+0x70>
 80073a2:	1b03      	subs	r3, r0, r4
 80073a4:	3b15      	subs	r3, #21
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	3304      	adds	r3, #4
 80073ac:	f104 0215 	add.w	r2, r4, #21
 80073b0:	4290      	cmp	r0, r2
 80073b2:	bf38      	it	cc
 80073b4:	2304      	movcc	r3, #4
 80073b6:	f841 c003 	str.w	ip, [r1, r3]
 80073ba:	f1bc 0f00 	cmp.w	ip, #0
 80073be:	d001      	beq.n	80073c4 <__lshift+0xac>
 80073c0:	f108 0602 	add.w	r6, r8, #2
 80073c4:	3e01      	subs	r6, #1
 80073c6:	4638      	mov	r0, r7
 80073c8:	612e      	str	r6, [r5, #16]
 80073ca:	4621      	mov	r1, r4
 80073cc:	f7ff fdd2 	bl	8006f74 <_Bfree>
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073da:	3301      	adds	r3, #1
 80073dc:	e7c1      	b.n	8007362 <__lshift+0x4a>
 80073de:	3904      	subs	r1, #4
 80073e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073e8:	4298      	cmp	r0, r3
 80073ea:	d8f9      	bhi.n	80073e0 <__lshift+0xc8>
 80073ec:	e7ea      	b.n	80073c4 <__lshift+0xac>
 80073ee:	bf00      	nop
 80073f0:	0800824f 	.word	0x0800824f
 80073f4:	080082c0 	.word	0x080082c0

080073f8 <__mcmp>:
 80073f8:	b530      	push	{r4, r5, lr}
 80073fa:	6902      	ldr	r2, [r0, #16]
 80073fc:	690c      	ldr	r4, [r1, #16]
 80073fe:	1b12      	subs	r2, r2, r4
 8007400:	d10e      	bne.n	8007420 <__mcmp+0x28>
 8007402:	f100 0314 	add.w	r3, r0, #20
 8007406:	3114      	adds	r1, #20
 8007408:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800740c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007410:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007414:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007418:	42a5      	cmp	r5, r4
 800741a:	d003      	beq.n	8007424 <__mcmp+0x2c>
 800741c:	d305      	bcc.n	800742a <__mcmp+0x32>
 800741e:	2201      	movs	r2, #1
 8007420:	4610      	mov	r0, r2
 8007422:	bd30      	pop	{r4, r5, pc}
 8007424:	4283      	cmp	r3, r0
 8007426:	d3f3      	bcc.n	8007410 <__mcmp+0x18>
 8007428:	e7fa      	b.n	8007420 <__mcmp+0x28>
 800742a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742e:	e7f7      	b.n	8007420 <__mcmp+0x28>

08007430 <__mdiff>:
 8007430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	460c      	mov	r4, r1
 8007436:	4606      	mov	r6, r0
 8007438:	4611      	mov	r1, r2
 800743a:	4620      	mov	r0, r4
 800743c:	4690      	mov	r8, r2
 800743e:	f7ff ffdb 	bl	80073f8 <__mcmp>
 8007442:	1e05      	subs	r5, r0, #0
 8007444:	d110      	bne.n	8007468 <__mdiff+0x38>
 8007446:	4629      	mov	r1, r5
 8007448:	4630      	mov	r0, r6
 800744a:	f7ff fd53 	bl	8006ef4 <_Balloc>
 800744e:	b930      	cbnz	r0, 800745e <__mdiff+0x2e>
 8007450:	4b3a      	ldr	r3, [pc, #232]	; (800753c <__mdiff+0x10c>)
 8007452:	4602      	mov	r2, r0
 8007454:	f240 2132 	movw	r1, #562	; 0x232
 8007458:	4839      	ldr	r0, [pc, #228]	; (8007540 <__mdiff+0x110>)
 800745a:	f000 fc45 	bl	8007ce8 <__assert_func>
 800745e:	2301      	movs	r3, #1
 8007460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007468:	bfa4      	itt	ge
 800746a:	4643      	movge	r3, r8
 800746c:	46a0      	movge	r8, r4
 800746e:	4630      	mov	r0, r6
 8007470:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007474:	bfa6      	itte	ge
 8007476:	461c      	movge	r4, r3
 8007478:	2500      	movge	r5, #0
 800747a:	2501      	movlt	r5, #1
 800747c:	f7ff fd3a 	bl	8006ef4 <_Balloc>
 8007480:	b920      	cbnz	r0, 800748c <__mdiff+0x5c>
 8007482:	4b2e      	ldr	r3, [pc, #184]	; (800753c <__mdiff+0x10c>)
 8007484:	4602      	mov	r2, r0
 8007486:	f44f 7110 	mov.w	r1, #576	; 0x240
 800748a:	e7e5      	b.n	8007458 <__mdiff+0x28>
 800748c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007490:	6926      	ldr	r6, [r4, #16]
 8007492:	60c5      	str	r5, [r0, #12]
 8007494:	f104 0914 	add.w	r9, r4, #20
 8007498:	f108 0514 	add.w	r5, r8, #20
 800749c:	f100 0e14 	add.w	lr, r0, #20
 80074a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074a8:	f108 0210 	add.w	r2, r8, #16
 80074ac:	46f2      	mov	sl, lr
 80074ae:	2100      	movs	r1, #0
 80074b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80074b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074b8:	fa1f f883 	uxth.w	r8, r3
 80074bc:	fa11 f18b 	uxtah	r1, r1, fp
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	eba1 0808 	sub.w	r8, r1, r8
 80074c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074ce:	fa1f f888 	uxth.w	r8, r8
 80074d2:	1419      	asrs	r1, r3, #16
 80074d4:	454e      	cmp	r6, r9
 80074d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074da:	f84a 3b04 	str.w	r3, [sl], #4
 80074de:	d8e7      	bhi.n	80074b0 <__mdiff+0x80>
 80074e0:	1b33      	subs	r3, r6, r4
 80074e2:	3b15      	subs	r3, #21
 80074e4:	f023 0303 	bic.w	r3, r3, #3
 80074e8:	3304      	adds	r3, #4
 80074ea:	3415      	adds	r4, #21
 80074ec:	42a6      	cmp	r6, r4
 80074ee:	bf38      	it	cc
 80074f0:	2304      	movcc	r3, #4
 80074f2:	441d      	add	r5, r3
 80074f4:	4473      	add	r3, lr
 80074f6:	469e      	mov	lr, r3
 80074f8:	462e      	mov	r6, r5
 80074fa:	4566      	cmp	r6, ip
 80074fc:	d30e      	bcc.n	800751c <__mdiff+0xec>
 80074fe:	f10c 0203 	add.w	r2, ip, #3
 8007502:	1b52      	subs	r2, r2, r5
 8007504:	f022 0203 	bic.w	r2, r2, #3
 8007508:	3d03      	subs	r5, #3
 800750a:	45ac      	cmp	ip, r5
 800750c:	bf38      	it	cc
 800750e:	2200      	movcc	r2, #0
 8007510:	441a      	add	r2, r3
 8007512:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007516:	b17b      	cbz	r3, 8007538 <__mdiff+0x108>
 8007518:	6107      	str	r7, [r0, #16]
 800751a:	e7a3      	b.n	8007464 <__mdiff+0x34>
 800751c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007520:	fa11 f288 	uxtah	r2, r1, r8
 8007524:	1414      	asrs	r4, r2, #16
 8007526:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800752a:	b292      	uxth	r2, r2
 800752c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007530:	f84e 2b04 	str.w	r2, [lr], #4
 8007534:	1421      	asrs	r1, r4, #16
 8007536:	e7e0      	b.n	80074fa <__mdiff+0xca>
 8007538:	3f01      	subs	r7, #1
 800753a:	e7ea      	b.n	8007512 <__mdiff+0xe2>
 800753c:	0800824f 	.word	0x0800824f
 8007540:	080082c0 	.word	0x080082c0

08007544 <__d2b>:
 8007544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007548:	4689      	mov	r9, r1
 800754a:	2101      	movs	r1, #1
 800754c:	ec57 6b10 	vmov	r6, r7, d0
 8007550:	4690      	mov	r8, r2
 8007552:	f7ff fccf 	bl	8006ef4 <_Balloc>
 8007556:	4604      	mov	r4, r0
 8007558:	b930      	cbnz	r0, 8007568 <__d2b+0x24>
 800755a:	4602      	mov	r2, r0
 800755c:	4b25      	ldr	r3, [pc, #148]	; (80075f4 <__d2b+0xb0>)
 800755e:	4826      	ldr	r0, [pc, #152]	; (80075f8 <__d2b+0xb4>)
 8007560:	f240 310a 	movw	r1, #778	; 0x30a
 8007564:	f000 fbc0 	bl	8007ce8 <__assert_func>
 8007568:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800756c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007570:	bb35      	cbnz	r5, 80075c0 <__d2b+0x7c>
 8007572:	2e00      	cmp	r6, #0
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	d028      	beq.n	80075ca <__d2b+0x86>
 8007578:	4668      	mov	r0, sp
 800757a:	9600      	str	r6, [sp, #0]
 800757c:	f7ff fd82 	bl	8007084 <__lo0bits>
 8007580:	9900      	ldr	r1, [sp, #0]
 8007582:	b300      	cbz	r0, 80075c6 <__d2b+0x82>
 8007584:	9a01      	ldr	r2, [sp, #4]
 8007586:	f1c0 0320 	rsb	r3, r0, #32
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	430b      	orrs	r3, r1
 8007590:	40c2      	lsrs	r2, r0
 8007592:	6163      	str	r3, [r4, #20]
 8007594:	9201      	str	r2, [sp, #4]
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	61a3      	str	r3, [r4, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	bf14      	ite	ne
 800759e:	2202      	movne	r2, #2
 80075a0:	2201      	moveq	r2, #1
 80075a2:	6122      	str	r2, [r4, #16]
 80075a4:	b1d5      	cbz	r5, 80075dc <__d2b+0x98>
 80075a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075aa:	4405      	add	r5, r0
 80075ac:	f8c9 5000 	str.w	r5, [r9]
 80075b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075b4:	f8c8 0000 	str.w	r0, [r8]
 80075b8:	4620      	mov	r0, r4
 80075ba:	b003      	add	sp, #12
 80075bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c4:	e7d5      	b.n	8007572 <__d2b+0x2e>
 80075c6:	6161      	str	r1, [r4, #20]
 80075c8:	e7e5      	b.n	8007596 <__d2b+0x52>
 80075ca:	a801      	add	r0, sp, #4
 80075cc:	f7ff fd5a 	bl	8007084 <__lo0bits>
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	2201      	movs	r2, #1
 80075d6:	6122      	str	r2, [r4, #16]
 80075d8:	3020      	adds	r0, #32
 80075da:	e7e3      	b.n	80075a4 <__d2b+0x60>
 80075dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075e4:	f8c9 0000 	str.w	r0, [r9]
 80075e8:	6918      	ldr	r0, [r3, #16]
 80075ea:	f7ff fd2b 	bl	8007044 <__hi0bits>
 80075ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075f2:	e7df      	b.n	80075b4 <__d2b+0x70>
 80075f4:	0800824f 	.word	0x0800824f
 80075f8:	080082c0 	.word	0x080082c0

080075fc <_calloc_r>:
 80075fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fe:	fba1 2402 	umull	r2, r4, r1, r2
 8007602:	b94c      	cbnz	r4, 8007618 <_calloc_r+0x1c>
 8007604:	4611      	mov	r1, r2
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	f000 f87a 	bl	8007700 <_malloc_r>
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	4605      	mov	r5, r0
 8007610:	b930      	cbnz	r0, 8007620 <_calloc_r+0x24>
 8007612:	4628      	mov	r0, r5
 8007614:	b003      	add	sp, #12
 8007616:	bd30      	pop	{r4, r5, pc}
 8007618:	220c      	movs	r2, #12
 800761a:	6002      	str	r2, [r0, #0]
 800761c:	2500      	movs	r5, #0
 800761e:	e7f8      	b.n	8007612 <_calloc_r+0x16>
 8007620:	4621      	mov	r1, r4
 8007622:	f7fe f84d 	bl	80056c0 <memset>
 8007626:	e7f4      	b.n	8007612 <_calloc_r+0x16>

08007628 <_free_r>:
 8007628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800762a:	2900      	cmp	r1, #0
 800762c:	d044      	beq.n	80076b8 <_free_r+0x90>
 800762e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007632:	9001      	str	r0, [sp, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f1a1 0404 	sub.w	r4, r1, #4
 800763a:	bfb8      	it	lt
 800763c:	18e4      	addlt	r4, r4, r3
 800763e:	f000 fcdf 	bl	8008000 <__malloc_lock>
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <_free_r+0x94>)
 8007644:	9801      	ldr	r0, [sp, #4]
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	b933      	cbnz	r3, 8007658 <_free_r+0x30>
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	6014      	str	r4, [r2, #0]
 800764e:	b003      	add	sp, #12
 8007650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007654:	f000 bcda 	b.w	800800c <__malloc_unlock>
 8007658:	42a3      	cmp	r3, r4
 800765a:	d908      	bls.n	800766e <_free_r+0x46>
 800765c:	6825      	ldr	r5, [r4, #0]
 800765e:	1961      	adds	r1, r4, r5
 8007660:	428b      	cmp	r3, r1
 8007662:	bf01      	itttt	eq
 8007664:	6819      	ldreq	r1, [r3, #0]
 8007666:	685b      	ldreq	r3, [r3, #4]
 8007668:	1949      	addeq	r1, r1, r5
 800766a:	6021      	streq	r1, [r4, #0]
 800766c:	e7ed      	b.n	800764a <_free_r+0x22>
 800766e:	461a      	mov	r2, r3
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	b10b      	cbz	r3, 8007678 <_free_r+0x50>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d9fa      	bls.n	800766e <_free_r+0x46>
 8007678:	6811      	ldr	r1, [r2, #0]
 800767a:	1855      	adds	r5, r2, r1
 800767c:	42a5      	cmp	r5, r4
 800767e:	d10b      	bne.n	8007698 <_free_r+0x70>
 8007680:	6824      	ldr	r4, [r4, #0]
 8007682:	4421      	add	r1, r4
 8007684:	1854      	adds	r4, r2, r1
 8007686:	42a3      	cmp	r3, r4
 8007688:	6011      	str	r1, [r2, #0]
 800768a:	d1e0      	bne.n	800764e <_free_r+0x26>
 800768c:	681c      	ldr	r4, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	6053      	str	r3, [r2, #4]
 8007692:	4421      	add	r1, r4
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	e7da      	b.n	800764e <_free_r+0x26>
 8007698:	d902      	bls.n	80076a0 <_free_r+0x78>
 800769a:	230c      	movs	r3, #12
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	e7d6      	b.n	800764e <_free_r+0x26>
 80076a0:	6825      	ldr	r5, [r4, #0]
 80076a2:	1961      	adds	r1, r4, r5
 80076a4:	428b      	cmp	r3, r1
 80076a6:	bf04      	itt	eq
 80076a8:	6819      	ldreq	r1, [r3, #0]
 80076aa:	685b      	ldreq	r3, [r3, #4]
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	bf04      	itt	eq
 80076b0:	1949      	addeq	r1, r1, r5
 80076b2:	6021      	streq	r1, [r4, #0]
 80076b4:	6054      	str	r4, [r2, #4]
 80076b6:	e7ca      	b.n	800764e <_free_r+0x26>
 80076b8:	b003      	add	sp, #12
 80076ba:	bd30      	pop	{r4, r5, pc}
 80076bc:	20000974 	.word	0x20000974

080076c0 <sbrk_aligned>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4e0e      	ldr	r6, [pc, #56]	; (80076fc <sbrk_aligned+0x3c>)
 80076c4:	460c      	mov	r4, r1
 80076c6:	6831      	ldr	r1, [r6, #0]
 80076c8:	4605      	mov	r5, r0
 80076ca:	b911      	cbnz	r1, 80076d2 <sbrk_aligned+0x12>
 80076cc:	f000 f9e6 	bl	8007a9c <_sbrk_r>
 80076d0:	6030      	str	r0, [r6, #0]
 80076d2:	4621      	mov	r1, r4
 80076d4:	4628      	mov	r0, r5
 80076d6:	f000 f9e1 	bl	8007a9c <_sbrk_r>
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	d00a      	beq.n	80076f4 <sbrk_aligned+0x34>
 80076de:	1cc4      	adds	r4, r0, #3
 80076e0:	f024 0403 	bic.w	r4, r4, #3
 80076e4:	42a0      	cmp	r0, r4
 80076e6:	d007      	beq.n	80076f8 <sbrk_aligned+0x38>
 80076e8:	1a21      	subs	r1, r4, r0
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f9d6 	bl	8007a9c <_sbrk_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d101      	bne.n	80076f8 <sbrk_aligned+0x38>
 80076f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076f8:	4620      	mov	r0, r4
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	20000978 	.word	0x20000978

08007700 <_malloc_r>:
 8007700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007704:	1ccd      	adds	r5, r1, #3
 8007706:	f025 0503 	bic.w	r5, r5, #3
 800770a:	3508      	adds	r5, #8
 800770c:	2d0c      	cmp	r5, #12
 800770e:	bf38      	it	cc
 8007710:	250c      	movcc	r5, #12
 8007712:	2d00      	cmp	r5, #0
 8007714:	4607      	mov	r7, r0
 8007716:	db01      	blt.n	800771c <_malloc_r+0x1c>
 8007718:	42a9      	cmp	r1, r5
 800771a:	d905      	bls.n	8007728 <_malloc_r+0x28>
 800771c:	230c      	movs	r3, #12
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	2600      	movs	r6, #0
 8007722:	4630      	mov	r0, r6
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	4e2e      	ldr	r6, [pc, #184]	; (80077e4 <_malloc_r+0xe4>)
 800772a:	f000 fc69 	bl	8008000 <__malloc_lock>
 800772e:	6833      	ldr	r3, [r6, #0]
 8007730:	461c      	mov	r4, r3
 8007732:	bb34      	cbnz	r4, 8007782 <_malloc_r+0x82>
 8007734:	4629      	mov	r1, r5
 8007736:	4638      	mov	r0, r7
 8007738:	f7ff ffc2 	bl	80076c0 <sbrk_aligned>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	4604      	mov	r4, r0
 8007740:	d14d      	bne.n	80077de <_malloc_r+0xde>
 8007742:	6834      	ldr	r4, [r6, #0]
 8007744:	4626      	mov	r6, r4
 8007746:	2e00      	cmp	r6, #0
 8007748:	d140      	bne.n	80077cc <_malloc_r+0xcc>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	4631      	mov	r1, r6
 800774e:	4638      	mov	r0, r7
 8007750:	eb04 0803 	add.w	r8, r4, r3
 8007754:	f000 f9a2 	bl	8007a9c <_sbrk_r>
 8007758:	4580      	cmp	r8, r0
 800775a:	d13a      	bne.n	80077d2 <_malloc_r+0xd2>
 800775c:	6821      	ldr	r1, [r4, #0]
 800775e:	3503      	adds	r5, #3
 8007760:	1a6d      	subs	r5, r5, r1
 8007762:	f025 0503 	bic.w	r5, r5, #3
 8007766:	3508      	adds	r5, #8
 8007768:	2d0c      	cmp	r5, #12
 800776a:	bf38      	it	cc
 800776c:	250c      	movcc	r5, #12
 800776e:	4629      	mov	r1, r5
 8007770:	4638      	mov	r0, r7
 8007772:	f7ff ffa5 	bl	80076c0 <sbrk_aligned>
 8007776:	3001      	adds	r0, #1
 8007778:	d02b      	beq.n	80077d2 <_malloc_r+0xd2>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	442b      	add	r3, r5
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	e00e      	b.n	80077a0 <_malloc_r+0xa0>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	1b52      	subs	r2, r2, r5
 8007786:	d41e      	bmi.n	80077c6 <_malloc_r+0xc6>
 8007788:	2a0b      	cmp	r2, #11
 800778a:	d916      	bls.n	80077ba <_malloc_r+0xba>
 800778c:	1961      	adds	r1, r4, r5
 800778e:	42a3      	cmp	r3, r4
 8007790:	6025      	str	r5, [r4, #0]
 8007792:	bf18      	it	ne
 8007794:	6059      	strne	r1, [r3, #4]
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	bf08      	it	eq
 800779a:	6031      	streq	r1, [r6, #0]
 800779c:	5162      	str	r2, [r4, r5]
 800779e:	604b      	str	r3, [r1, #4]
 80077a0:	4638      	mov	r0, r7
 80077a2:	f104 060b 	add.w	r6, r4, #11
 80077a6:	f000 fc31 	bl	800800c <__malloc_unlock>
 80077aa:	f026 0607 	bic.w	r6, r6, #7
 80077ae:	1d23      	adds	r3, r4, #4
 80077b0:	1af2      	subs	r2, r6, r3
 80077b2:	d0b6      	beq.n	8007722 <_malloc_r+0x22>
 80077b4:	1b9b      	subs	r3, r3, r6
 80077b6:	50a3      	str	r3, [r4, r2]
 80077b8:	e7b3      	b.n	8007722 <_malloc_r+0x22>
 80077ba:	6862      	ldr	r2, [r4, #4]
 80077bc:	42a3      	cmp	r3, r4
 80077be:	bf0c      	ite	eq
 80077c0:	6032      	streq	r2, [r6, #0]
 80077c2:	605a      	strne	r2, [r3, #4]
 80077c4:	e7ec      	b.n	80077a0 <_malloc_r+0xa0>
 80077c6:	4623      	mov	r3, r4
 80077c8:	6864      	ldr	r4, [r4, #4]
 80077ca:	e7b2      	b.n	8007732 <_malloc_r+0x32>
 80077cc:	4634      	mov	r4, r6
 80077ce:	6876      	ldr	r6, [r6, #4]
 80077d0:	e7b9      	b.n	8007746 <_malloc_r+0x46>
 80077d2:	230c      	movs	r3, #12
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4638      	mov	r0, r7
 80077d8:	f000 fc18 	bl	800800c <__malloc_unlock>
 80077dc:	e7a1      	b.n	8007722 <_malloc_r+0x22>
 80077de:	6025      	str	r5, [r4, #0]
 80077e0:	e7de      	b.n	80077a0 <_malloc_r+0xa0>
 80077e2:	bf00      	nop
 80077e4:	20000974 	.word	0x20000974

080077e8 <__sfputc_r>:
 80077e8:	6893      	ldr	r3, [r2, #8]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	b410      	push	{r4}
 80077f0:	6093      	str	r3, [r2, #8]
 80077f2:	da08      	bge.n	8007806 <__sfputc_r+0x1e>
 80077f4:	6994      	ldr	r4, [r2, #24]
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	db01      	blt.n	80077fe <__sfputc_r+0x16>
 80077fa:	290a      	cmp	r1, #10
 80077fc:	d103      	bne.n	8007806 <__sfputc_r+0x1e>
 80077fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007802:	f000 b99f 	b.w	8007b44 <__swbuf_r>
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	1c58      	adds	r0, r3, #1
 800780a:	6010      	str	r0, [r2, #0]
 800780c:	7019      	strb	r1, [r3, #0]
 800780e:	4608      	mov	r0, r1
 8007810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007814:	4770      	bx	lr

08007816 <__sfputs_r>:
 8007816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4614      	mov	r4, r2
 800781e:	18d5      	adds	r5, r2, r3
 8007820:	42ac      	cmp	r4, r5
 8007822:	d101      	bne.n	8007828 <__sfputs_r+0x12>
 8007824:	2000      	movs	r0, #0
 8007826:	e007      	b.n	8007838 <__sfputs_r+0x22>
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	463a      	mov	r2, r7
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ffda 	bl	80077e8 <__sfputc_r>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d1f3      	bne.n	8007820 <__sfputs_r+0xa>
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800783c <_vfiprintf_r>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	460d      	mov	r5, r1
 8007842:	b09d      	sub	sp, #116	; 0x74
 8007844:	4614      	mov	r4, r2
 8007846:	4698      	mov	r8, r3
 8007848:	4606      	mov	r6, r0
 800784a:	b118      	cbz	r0, 8007854 <_vfiprintf_r+0x18>
 800784c:	6983      	ldr	r3, [r0, #24]
 800784e:	b90b      	cbnz	r3, 8007854 <_vfiprintf_r+0x18>
 8007850:	f7ff fa94 	bl	8006d7c <__sinit>
 8007854:	4b89      	ldr	r3, [pc, #548]	; (8007a7c <_vfiprintf_r+0x240>)
 8007856:	429d      	cmp	r5, r3
 8007858:	d11b      	bne.n	8007892 <_vfiprintf_r+0x56>
 800785a:	6875      	ldr	r5, [r6, #4]
 800785c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800785e:	07d9      	lsls	r1, r3, #31
 8007860:	d405      	bmi.n	800786e <_vfiprintf_r+0x32>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	059a      	lsls	r2, r3, #22
 8007866:	d402      	bmi.n	800786e <_vfiprintf_r+0x32>
 8007868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800786a:	f7ff fb2a 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	071b      	lsls	r3, r3, #28
 8007872:	d501      	bpl.n	8007878 <_vfiprintf_r+0x3c>
 8007874:	692b      	ldr	r3, [r5, #16]
 8007876:	b9eb      	cbnz	r3, 80078b4 <_vfiprintf_r+0x78>
 8007878:	4629      	mov	r1, r5
 800787a:	4630      	mov	r0, r6
 800787c:	f000 f9c6 	bl	8007c0c <__swsetup_r>
 8007880:	b1c0      	cbz	r0, 80078b4 <_vfiprintf_r+0x78>
 8007882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007884:	07dc      	lsls	r4, r3, #31
 8007886:	d50e      	bpl.n	80078a6 <_vfiprintf_r+0x6a>
 8007888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788c:	b01d      	add	sp, #116	; 0x74
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	4b7b      	ldr	r3, [pc, #492]	; (8007a80 <_vfiprintf_r+0x244>)
 8007894:	429d      	cmp	r5, r3
 8007896:	d101      	bne.n	800789c <_vfiprintf_r+0x60>
 8007898:	68b5      	ldr	r5, [r6, #8]
 800789a:	e7df      	b.n	800785c <_vfiprintf_r+0x20>
 800789c:	4b79      	ldr	r3, [pc, #484]	; (8007a84 <_vfiprintf_r+0x248>)
 800789e:	429d      	cmp	r5, r3
 80078a0:	bf08      	it	eq
 80078a2:	68f5      	ldreq	r5, [r6, #12]
 80078a4:	e7da      	b.n	800785c <_vfiprintf_r+0x20>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	0598      	lsls	r0, r3, #22
 80078aa:	d4ed      	bmi.n	8007888 <_vfiprintf_r+0x4c>
 80078ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ae:	f7ff fb09 	bl	8006ec4 <__retarget_lock_release_recursive>
 80078b2:	e7e9      	b.n	8007888 <_vfiprintf_r+0x4c>
 80078b4:	2300      	movs	r3, #0
 80078b6:	9309      	str	r3, [sp, #36]	; 0x24
 80078b8:	2320      	movs	r3, #32
 80078ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078be:	f8cd 800c 	str.w	r8, [sp, #12]
 80078c2:	2330      	movs	r3, #48	; 0x30
 80078c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a88 <_vfiprintf_r+0x24c>
 80078c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078cc:	f04f 0901 	mov.w	r9, #1
 80078d0:	4623      	mov	r3, r4
 80078d2:	469a      	mov	sl, r3
 80078d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d8:	b10a      	cbz	r2, 80078de <_vfiprintf_r+0xa2>
 80078da:	2a25      	cmp	r2, #37	; 0x25
 80078dc:	d1f9      	bne.n	80078d2 <_vfiprintf_r+0x96>
 80078de:	ebba 0b04 	subs.w	fp, sl, r4
 80078e2:	d00b      	beq.n	80078fc <_vfiprintf_r+0xc0>
 80078e4:	465b      	mov	r3, fp
 80078e6:	4622      	mov	r2, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff93 	bl	8007816 <__sfputs_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	f000 80aa 	beq.w	8007a4a <_vfiprintf_r+0x20e>
 80078f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078f8:	445a      	add	r2, fp
 80078fa:	9209      	str	r2, [sp, #36]	; 0x24
 80078fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80a2 	beq.w	8007a4a <_vfiprintf_r+0x20e>
 8007906:	2300      	movs	r3, #0
 8007908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007910:	f10a 0a01 	add.w	sl, sl, #1
 8007914:	9304      	str	r3, [sp, #16]
 8007916:	9307      	str	r3, [sp, #28]
 8007918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791c:	931a      	str	r3, [sp, #104]	; 0x68
 800791e:	4654      	mov	r4, sl
 8007920:	2205      	movs	r2, #5
 8007922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007926:	4858      	ldr	r0, [pc, #352]	; (8007a88 <_vfiprintf_r+0x24c>)
 8007928:	f7f8 fc5a 	bl	80001e0 <memchr>
 800792c:	9a04      	ldr	r2, [sp, #16]
 800792e:	b9d8      	cbnz	r0, 8007968 <_vfiprintf_r+0x12c>
 8007930:	06d1      	lsls	r1, r2, #27
 8007932:	bf44      	itt	mi
 8007934:	2320      	movmi	r3, #32
 8007936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800793a:	0713      	lsls	r3, r2, #28
 800793c:	bf44      	itt	mi
 800793e:	232b      	movmi	r3, #43	; 0x2b
 8007940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007944:	f89a 3000 	ldrb.w	r3, [sl]
 8007948:	2b2a      	cmp	r3, #42	; 0x2a
 800794a:	d015      	beq.n	8007978 <_vfiprintf_r+0x13c>
 800794c:	9a07      	ldr	r2, [sp, #28]
 800794e:	4654      	mov	r4, sl
 8007950:	2000      	movs	r0, #0
 8007952:	f04f 0c0a 	mov.w	ip, #10
 8007956:	4621      	mov	r1, r4
 8007958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800795c:	3b30      	subs	r3, #48	; 0x30
 800795e:	2b09      	cmp	r3, #9
 8007960:	d94e      	bls.n	8007a00 <_vfiprintf_r+0x1c4>
 8007962:	b1b0      	cbz	r0, 8007992 <_vfiprintf_r+0x156>
 8007964:	9207      	str	r2, [sp, #28]
 8007966:	e014      	b.n	8007992 <_vfiprintf_r+0x156>
 8007968:	eba0 0308 	sub.w	r3, r0, r8
 800796c:	fa09 f303 	lsl.w	r3, r9, r3
 8007970:	4313      	orrs	r3, r2
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	46a2      	mov	sl, r4
 8007976:	e7d2      	b.n	800791e <_vfiprintf_r+0xe2>
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	1d19      	adds	r1, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9103      	str	r1, [sp, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfbb      	ittet	lt
 8007984:	425b      	neglt	r3, r3
 8007986:	f042 0202 	orrlt.w	r2, r2, #2
 800798a:	9307      	strge	r3, [sp, #28]
 800798c:	9307      	strlt	r3, [sp, #28]
 800798e:	bfb8      	it	lt
 8007990:	9204      	strlt	r2, [sp, #16]
 8007992:	7823      	ldrb	r3, [r4, #0]
 8007994:	2b2e      	cmp	r3, #46	; 0x2e
 8007996:	d10c      	bne.n	80079b2 <_vfiprintf_r+0x176>
 8007998:	7863      	ldrb	r3, [r4, #1]
 800799a:	2b2a      	cmp	r3, #42	; 0x2a
 800799c:	d135      	bne.n	8007a0a <_vfiprintf_r+0x1ce>
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	1d1a      	adds	r2, r3, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	9203      	str	r2, [sp, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079ae:	3402      	adds	r4, #2
 80079b0:	9305      	str	r3, [sp, #20]
 80079b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a98 <_vfiprintf_r+0x25c>
 80079b6:	7821      	ldrb	r1, [r4, #0]
 80079b8:	2203      	movs	r2, #3
 80079ba:	4650      	mov	r0, sl
 80079bc:	f7f8 fc10 	bl	80001e0 <memchr>
 80079c0:	b140      	cbz	r0, 80079d4 <_vfiprintf_r+0x198>
 80079c2:	2340      	movs	r3, #64	; 0x40
 80079c4:	eba0 000a 	sub.w	r0, r0, sl
 80079c8:	fa03 f000 	lsl.w	r0, r3, r0
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	4303      	orrs	r3, r0
 80079d0:	3401      	adds	r4, #1
 80079d2:	9304      	str	r3, [sp, #16]
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	482c      	ldr	r0, [pc, #176]	; (8007a8c <_vfiprintf_r+0x250>)
 80079da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079de:	2206      	movs	r2, #6
 80079e0:	f7f8 fbfe 	bl	80001e0 <memchr>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d03f      	beq.n	8007a68 <_vfiprintf_r+0x22c>
 80079e8:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <_vfiprintf_r+0x254>)
 80079ea:	bb1b      	cbnz	r3, 8007a34 <_vfiprintf_r+0x1f8>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	3307      	adds	r3, #7
 80079f0:	f023 0307 	bic.w	r3, r3, #7
 80079f4:	3308      	adds	r3, #8
 80079f6:	9303      	str	r3, [sp, #12]
 80079f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fa:	443b      	add	r3, r7
 80079fc:	9309      	str	r3, [sp, #36]	; 0x24
 80079fe:	e767      	b.n	80078d0 <_vfiprintf_r+0x94>
 8007a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a04:	460c      	mov	r4, r1
 8007a06:	2001      	movs	r0, #1
 8007a08:	e7a5      	b.n	8007956 <_vfiprintf_r+0x11a>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	4619      	mov	r1, r3
 8007a12:	f04f 0c0a 	mov.w	ip, #10
 8007a16:	4620      	mov	r0, r4
 8007a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a1c:	3a30      	subs	r2, #48	; 0x30
 8007a1e:	2a09      	cmp	r2, #9
 8007a20:	d903      	bls.n	8007a2a <_vfiprintf_r+0x1ee>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0c5      	beq.n	80079b2 <_vfiprintf_r+0x176>
 8007a26:	9105      	str	r1, [sp, #20]
 8007a28:	e7c3      	b.n	80079b2 <_vfiprintf_r+0x176>
 8007a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a2e:	4604      	mov	r4, r0
 8007a30:	2301      	movs	r3, #1
 8007a32:	e7f0      	b.n	8007a16 <_vfiprintf_r+0x1da>
 8007a34:	ab03      	add	r3, sp, #12
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <_vfiprintf_r+0x258>)
 8007a3c:	a904      	add	r1, sp, #16
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f7fd fee6 	bl	8005810 <_printf_float>
 8007a44:	4607      	mov	r7, r0
 8007a46:	1c78      	adds	r0, r7, #1
 8007a48:	d1d6      	bne.n	80079f8 <_vfiprintf_r+0x1bc>
 8007a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a4c:	07d9      	lsls	r1, r3, #31
 8007a4e:	d405      	bmi.n	8007a5c <_vfiprintf_r+0x220>
 8007a50:	89ab      	ldrh	r3, [r5, #12]
 8007a52:	059a      	lsls	r2, r3, #22
 8007a54:	d402      	bmi.n	8007a5c <_vfiprintf_r+0x220>
 8007a56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a58:	f7ff fa34 	bl	8006ec4 <__retarget_lock_release_recursive>
 8007a5c:	89ab      	ldrh	r3, [r5, #12]
 8007a5e:	065b      	lsls	r3, r3, #25
 8007a60:	f53f af12 	bmi.w	8007888 <_vfiprintf_r+0x4c>
 8007a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a66:	e711      	b.n	800788c <_vfiprintf_r+0x50>
 8007a68:	ab03      	add	r3, sp, #12
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <_vfiprintf_r+0x258>)
 8007a70:	a904      	add	r1, sp, #16
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7fe f970 	bl	8005d58 <_printf_i>
 8007a78:	e7e4      	b.n	8007a44 <_vfiprintf_r+0x208>
 8007a7a:	bf00      	nop
 8007a7c:	08008280 	.word	0x08008280
 8007a80:	080082a0 	.word	0x080082a0
 8007a84:	08008260 	.word	0x08008260
 8007a88:	0800841c 	.word	0x0800841c
 8007a8c:	08008426 	.word	0x08008426
 8007a90:	08005811 	.word	0x08005811
 8007a94:	08007817 	.word	0x08007817
 8007a98:	08008422 	.word	0x08008422

08007a9c <_sbrk_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d06      	ldr	r5, [pc, #24]	; (8007ab8 <_sbrk_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa f9b6 	bl	8001e18 <_sbrk>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_sbrk_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_sbrk_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	2000097c 	.word	0x2000097c

08007abc <__sread>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f000 faa8 	bl	8008018 <_read_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	bfab      	itete	ge
 8007acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ace:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad0:	181b      	addge	r3, r3, r0
 8007ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ad6:	bfac      	ite	ge
 8007ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ada:	81a3      	strhlt	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__swrite>:
 8007ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	461f      	mov	r7, r3
 8007ae4:	898b      	ldrh	r3, [r1, #12]
 8007ae6:	05db      	lsls	r3, r3, #23
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	4616      	mov	r6, r2
 8007aee:	d505      	bpl.n	8007afc <__swrite+0x1e>
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2302      	movs	r3, #2
 8007af6:	2200      	movs	r2, #0
 8007af8:	f000 f9f8 	bl	8007eec <_lseek_r>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	f000 b869 	b.w	8007be8 <_write_r>

08007b16 <__sseek>:
 8007b16:	b510      	push	{r4, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 f9e5 	bl	8007eec <_lseek_r>
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	bf15      	itete	ne
 8007b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b32:	81a3      	strheq	r3, [r4, #12]
 8007b34:	bf18      	it	ne
 8007b36:	81a3      	strhne	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__sclose>:
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 b8f1 	b.w	8007d24 <_close_r>
	...

08007b44 <__swbuf_r>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	b118      	cbz	r0, 8007b56 <__swbuf_r+0x12>
 8007b4e:	6983      	ldr	r3, [r0, #24]
 8007b50:	b90b      	cbnz	r3, 8007b56 <__swbuf_r+0x12>
 8007b52:	f7ff f913 	bl	8006d7c <__sinit>
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <__swbuf_r+0x98>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d12b      	bne.n	8007bb4 <__swbuf_r+0x70>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	69a3      	ldr	r3, [r4, #24]
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	071a      	lsls	r2, r3, #28
 8007b66:	d52f      	bpl.n	8007bc8 <__swbuf_r+0x84>
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	b36b      	cbz	r3, 8007bc8 <__swbuf_r+0x84>
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	1ac0      	subs	r0, r0, r3
 8007b72:	6963      	ldr	r3, [r4, #20]
 8007b74:	b2f6      	uxtb	r6, r6
 8007b76:	4283      	cmp	r3, r0
 8007b78:	4637      	mov	r7, r6
 8007b7a:	dc04      	bgt.n	8007b86 <__swbuf_r+0x42>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 f966 	bl	8007e50 <_fflush_r>
 8007b84:	bb30      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	701e      	strb	r6, [r3, #0]
 8007b94:	6963      	ldr	r3, [r4, #20]
 8007b96:	3001      	adds	r0, #1
 8007b98:	4283      	cmp	r3, r0
 8007b9a:	d004      	beq.n	8007ba6 <__swbuf_r+0x62>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d506      	bpl.n	8007bb0 <__swbuf_r+0x6c>
 8007ba2:	2e0a      	cmp	r6, #10
 8007ba4:	d104      	bne.n	8007bb0 <__swbuf_r+0x6c>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f951 	bl	8007e50 <_fflush_r>
 8007bae:	b988      	cbnz	r0, 8007bd4 <__swbuf_r+0x90>
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <__swbuf_r+0x9c>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d101      	bne.n	8007bbe <__swbuf_r+0x7a>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	e7cf      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <__swbuf_r+0xa0>)
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	bf08      	it	eq
 8007bc4:	68ec      	ldreq	r4, [r5, #12]
 8007bc6:	e7ca      	b.n	8007b5e <__swbuf_r+0x1a>
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f81e 	bl	8007c0c <__swsetup_r>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0cb      	beq.n	8007b6c <__swbuf_r+0x28>
 8007bd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bd8:	e7ea      	b.n	8007bb0 <__swbuf_r+0x6c>
 8007bda:	bf00      	nop
 8007bdc:	08008280 	.word	0x08008280
 8007be0:	080082a0 	.word	0x080082a0
 8007be4:	08008260 	.word	0x08008260

08007be8 <_write_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d07      	ldr	r5, [pc, #28]	; (8007c08 <_write_r+0x20>)
 8007bec:	4604      	mov	r4, r0
 8007bee:	4608      	mov	r0, r1
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f7fa f8be 	bl	8001d78 <_write>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_write_r+0x1e>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_write_r+0x1e>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	2000097c 	.word	0x2000097c

08007c0c <__swsetup_r>:
 8007c0c:	4b32      	ldr	r3, [pc, #200]	; (8007cd8 <__swsetup_r+0xcc>)
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	681d      	ldr	r5, [r3, #0]
 8007c12:	4606      	mov	r6, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	b125      	cbz	r5, 8007c22 <__swsetup_r+0x16>
 8007c18:	69ab      	ldr	r3, [r5, #24]
 8007c1a:	b913      	cbnz	r3, 8007c22 <__swsetup_r+0x16>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7ff f8ad 	bl	8006d7c <__sinit>
 8007c22:	4b2e      	ldr	r3, [pc, #184]	; (8007cdc <__swsetup_r+0xd0>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d10f      	bne.n	8007c48 <__swsetup_r+0x3c>
 8007c28:	686c      	ldr	r4, [r5, #4]
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c30:	0719      	lsls	r1, r3, #28
 8007c32:	d42c      	bmi.n	8007c8e <__swsetup_r+0x82>
 8007c34:	06dd      	lsls	r5, r3, #27
 8007c36:	d411      	bmi.n	8007c5c <__swsetup_r+0x50>
 8007c38:	2309      	movs	r3, #9
 8007c3a:	6033      	str	r3, [r6, #0]
 8007c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c46:	e03e      	b.n	8007cc6 <__swsetup_r+0xba>
 8007c48:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <__swsetup_r+0xd4>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	d101      	bne.n	8007c52 <__swsetup_r+0x46>
 8007c4e:	68ac      	ldr	r4, [r5, #8]
 8007c50:	e7eb      	b.n	8007c2a <__swsetup_r+0x1e>
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <__swsetup_r+0xd8>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	bf08      	it	eq
 8007c58:	68ec      	ldreq	r4, [r5, #12]
 8007c5a:	e7e6      	b.n	8007c2a <__swsetup_r+0x1e>
 8007c5c:	0758      	lsls	r0, r3, #29
 8007c5e:	d512      	bpl.n	8007c86 <__swsetup_r+0x7a>
 8007c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c62:	b141      	cbz	r1, 8007c76 <__swsetup_r+0x6a>
 8007c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c68:	4299      	cmp	r1, r3
 8007c6a:	d002      	beq.n	8007c72 <__swsetup_r+0x66>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff fcdb 	bl	8007628 <_free_r>
 8007c72:	2300      	movs	r3, #0
 8007c74:	6363      	str	r3, [r4, #52]	; 0x34
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6063      	str	r3, [r4, #4]
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0308 	orr.w	r3, r3, #8
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	b94b      	cbnz	r3, 8007ca6 <__swsetup_r+0x9a>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c9c:	d003      	beq.n	8007ca6 <__swsetup_r+0x9a>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f000 f95b 	bl	8007f5c <__smakebuf_r>
 8007ca6:	89a0      	ldrh	r0, [r4, #12]
 8007ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cac:	f010 0301 	ands.w	r3, r0, #1
 8007cb0:	d00a      	beq.n	8007cc8 <__swsetup_r+0xbc>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6963      	ldr	r3, [r4, #20]
 8007cb8:	425b      	negs	r3, r3
 8007cba:	61a3      	str	r3, [r4, #24]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b943      	cbnz	r3, 8007cd2 <__swsetup_r+0xc6>
 8007cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cc4:	d1ba      	bne.n	8007c3c <__swsetup_r+0x30>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	0781      	lsls	r1, r0, #30
 8007cca:	bf58      	it	pl
 8007ccc:	6963      	ldrpl	r3, [r4, #20]
 8007cce:	60a3      	str	r3, [r4, #8]
 8007cd0:	e7f4      	b.n	8007cbc <__swsetup_r+0xb0>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e7f7      	b.n	8007cc6 <__swsetup_r+0xba>
 8007cd6:	bf00      	nop
 8007cd8:	2000000c 	.word	0x2000000c
 8007cdc:	08008280 	.word	0x08008280
 8007ce0:	080082a0 	.word	0x080082a0
 8007ce4:	08008260 	.word	0x08008260

08007ce8 <__assert_func>:
 8007ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cea:	4614      	mov	r4, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <__assert_func+0x2c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	68d8      	ldr	r0, [r3, #12]
 8007cf6:	b14c      	cbz	r4, 8007d0c <__assert_func+0x24>
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <__assert_func+0x30>)
 8007cfa:	9100      	str	r1, [sp, #0]
 8007cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d00:	4906      	ldr	r1, [pc, #24]	; (8007d1c <__assert_func+0x34>)
 8007d02:	462b      	mov	r3, r5
 8007d04:	f000 f8e0 	bl	8007ec8 <fiprintf>
 8007d08:	f000 f9a5 	bl	8008056 <abort>
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <__assert_func+0x38>)
 8007d0e:	461c      	mov	r4, r3
 8007d10:	e7f3      	b.n	8007cfa <__assert_func+0x12>
 8007d12:	bf00      	nop
 8007d14:	2000000c 	.word	0x2000000c
 8007d18:	0800842d 	.word	0x0800842d
 8007d1c:	0800843a 	.word	0x0800843a
 8007d20:	08008468 	.word	0x08008468

08007d24 <_close_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d06      	ldr	r5, [pc, #24]	; (8007d40 <_close_r+0x1c>)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	f7fa f83e 	bl	8001db0 <_close>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_close_r+0x1a>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_close_r+0x1a>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	2000097c 	.word	0x2000097c

08007d44 <__sflush_r>:
 8007d44:	898a      	ldrh	r2, [r1, #12]
 8007d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	0710      	lsls	r0, r2, #28
 8007d4e:	460c      	mov	r4, r1
 8007d50:	d458      	bmi.n	8007e04 <__sflush_r+0xc0>
 8007d52:	684b      	ldr	r3, [r1, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	dc05      	bgt.n	8007d64 <__sflush_r+0x20>
 8007d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	dc02      	bgt.n	8007d64 <__sflush_r+0x20>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	d0f9      	beq.n	8007d5e <__sflush_r+0x1a>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d70:	682f      	ldr	r7, [r5, #0]
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	d032      	beq.n	8007ddc <__sflush_r+0x98>
 8007d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	075a      	lsls	r2, r3, #29
 8007d7c:	d505      	bpl.n	8007d8a <__sflush_r+0x46>
 8007d7e:	6863      	ldr	r3, [r4, #4]
 8007d80:	1ac0      	subs	r0, r0, r3
 8007d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d84:	b10b      	cbz	r3, 8007d8a <__sflush_r+0x46>
 8007d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d88:	1ac0      	subs	r0, r0, r3
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d90:	6a21      	ldr	r1, [r4, #32]
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b0      	blx	r6
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	d106      	bne.n	8007daa <__sflush_r+0x66>
 8007d9c:	6829      	ldr	r1, [r5, #0]
 8007d9e:	291d      	cmp	r1, #29
 8007da0:	d82c      	bhi.n	8007dfc <__sflush_r+0xb8>
 8007da2:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <__sflush_r+0x108>)
 8007da4:	40ca      	lsrs	r2, r1
 8007da6:	07d6      	lsls	r6, r2, #31
 8007da8:	d528      	bpl.n	8007dfc <__sflush_r+0xb8>
 8007daa:	2200      	movs	r2, #0
 8007dac:	6062      	str	r2, [r4, #4]
 8007dae:	04d9      	lsls	r1, r3, #19
 8007db0:	6922      	ldr	r2, [r4, #16]
 8007db2:	6022      	str	r2, [r4, #0]
 8007db4:	d504      	bpl.n	8007dc0 <__sflush_r+0x7c>
 8007db6:	1c42      	adds	r2, r0, #1
 8007db8:	d101      	bne.n	8007dbe <__sflush_r+0x7a>
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	b903      	cbnz	r3, 8007dc0 <__sflush_r+0x7c>
 8007dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8007dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc2:	602f      	str	r7, [r5, #0]
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d0ca      	beq.n	8007d5e <__sflush_r+0x1a>
 8007dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d002      	beq.n	8007dd6 <__sflush_r+0x92>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7ff fc29 	bl	8007628 <_free_r>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8007dda:	e7c1      	b.n	8007d60 <__sflush_r+0x1c>
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	2301      	movs	r3, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b0      	blx	r6
 8007de4:	1c41      	adds	r1, r0, #1
 8007de6:	d1c7      	bne.n	8007d78 <__sflush_r+0x34>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0c4      	beq.n	8007d78 <__sflush_r+0x34>
 8007dee:	2b1d      	cmp	r3, #29
 8007df0:	d001      	beq.n	8007df6 <__sflush_r+0xb2>
 8007df2:	2b16      	cmp	r3, #22
 8007df4:	d101      	bne.n	8007dfa <__sflush_r+0xb6>
 8007df6:	602f      	str	r7, [r5, #0]
 8007df8:	e7b1      	b.n	8007d5e <__sflush_r+0x1a>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	e7ad      	b.n	8007d60 <__sflush_r+0x1c>
 8007e04:	690f      	ldr	r7, [r1, #16]
 8007e06:	2f00      	cmp	r7, #0
 8007e08:	d0a9      	beq.n	8007d5e <__sflush_r+0x1a>
 8007e0a:	0793      	lsls	r3, r2, #30
 8007e0c:	680e      	ldr	r6, [r1, #0]
 8007e0e:	bf08      	it	eq
 8007e10:	694b      	ldreq	r3, [r1, #20]
 8007e12:	600f      	str	r7, [r1, #0]
 8007e14:	bf18      	it	ne
 8007e16:	2300      	movne	r3, #0
 8007e18:	eba6 0807 	sub.w	r8, r6, r7
 8007e1c:	608b      	str	r3, [r1, #8]
 8007e1e:	f1b8 0f00 	cmp.w	r8, #0
 8007e22:	dd9c      	ble.n	8007d5e <__sflush_r+0x1a>
 8007e24:	6a21      	ldr	r1, [r4, #32]
 8007e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e28:	4643      	mov	r3, r8
 8007e2a:	463a      	mov	r2, r7
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	2800      	cmp	r0, #0
 8007e32:	dc06      	bgt.n	8007e42 <__sflush_r+0xfe>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e40:	e78e      	b.n	8007d60 <__sflush_r+0x1c>
 8007e42:	4407      	add	r7, r0
 8007e44:	eba8 0800 	sub.w	r8, r8, r0
 8007e48:	e7e9      	b.n	8007e1e <__sflush_r+0xda>
 8007e4a:	bf00      	nop
 8007e4c:	20400001 	.word	0x20400001

08007e50 <_fflush_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	690b      	ldr	r3, [r1, #16]
 8007e54:	4605      	mov	r5, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	b913      	cbnz	r3, 8007e60 <_fflush_r+0x10>
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	b118      	cbz	r0, 8007e6a <_fflush_r+0x1a>
 8007e62:	6983      	ldr	r3, [r0, #24]
 8007e64:	b90b      	cbnz	r3, 8007e6a <_fflush_r+0x1a>
 8007e66:	f7fe ff89 	bl	8006d7c <__sinit>
 8007e6a:	4b14      	ldr	r3, [pc, #80]	; (8007ebc <_fflush_r+0x6c>)
 8007e6c:	429c      	cmp	r4, r3
 8007e6e:	d11b      	bne.n	8007ea8 <_fflush_r+0x58>
 8007e70:	686c      	ldr	r4, [r5, #4]
 8007e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0ef      	beq.n	8007e5a <_fflush_r+0xa>
 8007e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e7c:	07d0      	lsls	r0, r2, #31
 8007e7e:	d404      	bmi.n	8007e8a <_fflush_r+0x3a>
 8007e80:	0599      	lsls	r1, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_fflush_r+0x3a>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f7ff f81c 	bl	8006ec2 <__retarget_lock_acquire_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7ff ff59 	bl	8007d44 <__sflush_r>
 8007e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e94:	07da      	lsls	r2, r3, #31
 8007e96:	4605      	mov	r5, r0
 8007e98:	d4e0      	bmi.n	8007e5c <_fflush_r+0xc>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d4dd      	bmi.n	8007e5c <_fflush_r+0xc>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea2:	f7ff f80f 	bl	8006ec4 <__retarget_lock_release_recursive>
 8007ea6:	e7d9      	b.n	8007e5c <_fflush_r+0xc>
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <_fflush_r+0x70>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d101      	bne.n	8007eb2 <_fflush_r+0x62>
 8007eae:	68ac      	ldr	r4, [r5, #8]
 8007eb0:	e7df      	b.n	8007e72 <_fflush_r+0x22>
 8007eb2:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <_fflush_r+0x74>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	bf08      	it	eq
 8007eb8:	68ec      	ldreq	r4, [r5, #12]
 8007eba:	e7da      	b.n	8007e72 <_fflush_r+0x22>
 8007ebc:	08008280 	.word	0x08008280
 8007ec0:	080082a0 	.word	0x080082a0
 8007ec4:	08008260 	.word	0x08008260

08007ec8 <fiprintf>:
 8007ec8:	b40e      	push	{r1, r2, r3}
 8007eca:	b503      	push	{r0, r1, lr}
 8007ecc:	4601      	mov	r1, r0
 8007ece:	ab03      	add	r3, sp, #12
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <fiprintf+0x20>)
 8007ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed6:	6800      	ldr	r0, [r0, #0]
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	f7ff fcaf 	bl	800783c <_vfiprintf_r>
 8007ede:	b002      	add	sp, #8
 8007ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee4:	b003      	add	sp, #12
 8007ee6:	4770      	bx	lr
 8007ee8:	2000000c 	.word	0x2000000c

08007eec <_lseek_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d07      	ldr	r5, [pc, #28]	; (8007f0c <_lseek_r+0x20>)
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	4608      	mov	r0, r1
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	602a      	str	r2, [r5, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f7f9 ff7f 	bl	8001dfe <_lseek>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_lseek_r+0x1e>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_lseek_r+0x1e>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	2000097c 	.word	0x2000097c

08007f10 <__swhatbuf_r>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	460e      	mov	r6, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	b096      	sub	sp, #88	; 0x58
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	461d      	mov	r5, r3
 8007f20:	da08      	bge.n	8007f34 <__swhatbuf_r+0x24>
 8007f22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	061a      	lsls	r2, r3, #24
 8007f2c:	d410      	bmi.n	8007f50 <__swhatbuf_r+0x40>
 8007f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f32:	e00e      	b.n	8007f52 <__swhatbuf_r+0x42>
 8007f34:	466a      	mov	r2, sp
 8007f36:	f000 f895 	bl	8008064 <_fstat_r>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	dbf1      	blt.n	8007f22 <__swhatbuf_r+0x12>
 8007f3e:	9a01      	ldr	r2, [sp, #4]
 8007f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f48:	425a      	negs	r2, r3
 8007f4a:	415a      	adcs	r2, r3
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	e7ee      	b.n	8007f2e <__swhatbuf_r+0x1e>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	2000      	movs	r0, #0
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	b016      	add	sp, #88	; 0x58
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f5c <__smakebuf_r>:
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f60:	079d      	lsls	r5, r3, #30
 8007f62:	4606      	mov	r6, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	d507      	bpl.n	8007f78 <__smakebuf_r+0x1c>
 8007f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	2301      	movs	r3, #1
 8007f72:	6163      	str	r3, [r4, #20]
 8007f74:	b002      	add	sp, #8
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	ab01      	add	r3, sp, #4
 8007f7a:	466a      	mov	r2, sp
 8007f7c:	f7ff ffc8 	bl	8007f10 <__swhatbuf_r>
 8007f80:	9900      	ldr	r1, [sp, #0]
 8007f82:	4605      	mov	r5, r0
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff fbbb 	bl	8007700 <_malloc_r>
 8007f8a:	b948      	cbnz	r0, 8007fa0 <__smakebuf_r+0x44>
 8007f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f90:	059a      	lsls	r2, r3, #22
 8007f92:	d4ef      	bmi.n	8007f74 <__smakebuf_r+0x18>
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	f043 0302 	orr.w	r3, r3, #2
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	e7e3      	b.n	8007f68 <__smakebuf_r+0xc>
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <__smakebuf_r+0x7c>)
 8007fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	6020      	str	r0, [r4, #0]
 8007fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	6163      	str	r3, [r4, #20]
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	6120      	str	r0, [r4, #16]
 8007fb6:	b15b      	cbz	r3, 8007fd0 <__smakebuf_r+0x74>
 8007fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f863 	bl	8008088 <_isatty_r>
 8007fc2:	b128      	cbz	r0, 8007fd0 <__smakebuf_r+0x74>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	89a0      	ldrh	r0, [r4, #12]
 8007fd2:	4305      	orrs	r5, r0
 8007fd4:	81a5      	strh	r5, [r4, #12]
 8007fd6:	e7cd      	b.n	8007f74 <__smakebuf_r+0x18>
 8007fd8:	08006d15 	.word	0x08006d15

08007fdc <__ascii_mbtowc>:
 8007fdc:	b082      	sub	sp, #8
 8007fde:	b901      	cbnz	r1, 8007fe2 <__ascii_mbtowc+0x6>
 8007fe0:	a901      	add	r1, sp, #4
 8007fe2:	b142      	cbz	r2, 8007ff6 <__ascii_mbtowc+0x1a>
 8007fe4:	b14b      	cbz	r3, 8007ffa <__ascii_mbtowc+0x1e>
 8007fe6:	7813      	ldrb	r3, [r2, #0]
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	1e10      	subs	r0, r2, #0
 8007fee:	bf18      	it	ne
 8007ff0:	2001      	movne	r0, #1
 8007ff2:	b002      	add	sp, #8
 8007ff4:	4770      	bx	lr
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	e7fb      	b.n	8007ff2 <__ascii_mbtowc+0x16>
 8007ffa:	f06f 0001 	mvn.w	r0, #1
 8007ffe:	e7f8      	b.n	8007ff2 <__ascii_mbtowc+0x16>

08008000 <__malloc_lock>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__malloc_lock+0x8>)
 8008002:	f7fe bf5e 	b.w	8006ec2 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	20000970 	.word	0x20000970

0800800c <__malloc_unlock>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__malloc_unlock+0x8>)
 800800e:	f7fe bf59 	b.w	8006ec4 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	20000970 	.word	0x20000970

08008018 <_read_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	; (8008038 <_read_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fe89 	bl	8001d3e <_read>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_read_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_read_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	2000097c 	.word	0x2000097c

0800803c <__ascii_wctomb>:
 800803c:	b149      	cbz	r1, 8008052 <__ascii_wctomb+0x16>
 800803e:	2aff      	cmp	r2, #255	; 0xff
 8008040:	bf85      	ittet	hi
 8008042:	238a      	movhi	r3, #138	; 0x8a
 8008044:	6003      	strhi	r3, [r0, #0]
 8008046:	700a      	strbls	r2, [r1, #0]
 8008048:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800804c:	bf98      	it	ls
 800804e:	2001      	movls	r0, #1
 8008050:	4770      	bx	lr
 8008052:	4608      	mov	r0, r1
 8008054:	4770      	bx	lr

08008056 <abort>:
 8008056:	b508      	push	{r3, lr}
 8008058:	2006      	movs	r0, #6
 800805a:	f000 f84d 	bl	80080f8 <raise>
 800805e:	2001      	movs	r0, #1
 8008060:	f7f9 fe63 	bl	8001d2a <_exit>

08008064 <_fstat_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_fstat_r+0x20>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7f9 fea9 	bl	8001dc8 <_fstat>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_fstat_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_fstat_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	2000097c 	.word	0x2000097c

08008088 <_isatty_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_isatty_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7f9 fea8 	bl	8001de8 <_isatty>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_isatty_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_isatty_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	2000097c 	.word	0x2000097c

080080a8 <_raise_r>:
 80080a8:	291f      	cmp	r1, #31
 80080aa:	b538      	push	{r3, r4, r5, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	d904      	bls.n	80080bc <_raise_r+0x14>
 80080b2:	2316      	movs	r3, #22
 80080b4:	6003      	str	r3, [r0, #0]
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080be:	b112      	cbz	r2, 80080c6 <_raise_r+0x1e>
 80080c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c4:	b94b      	cbnz	r3, 80080da <_raise_r+0x32>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f830 	bl	800812c <_getpid_r>
 80080cc:	462a      	mov	r2, r5
 80080ce:	4601      	mov	r1, r0
 80080d0:	4620      	mov	r0, r4
 80080d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d6:	f000 b817 	b.w	8008108 <_kill_r>
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d00a      	beq.n	80080f4 <_raise_r+0x4c>
 80080de:	1c59      	adds	r1, r3, #1
 80080e0:	d103      	bne.n	80080ea <_raise_r+0x42>
 80080e2:	2316      	movs	r3, #22
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	2001      	movs	r0, #1
 80080e8:	e7e7      	b.n	80080ba <_raise_r+0x12>
 80080ea:	2400      	movs	r4, #0
 80080ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080f0:	4628      	mov	r0, r5
 80080f2:	4798      	blx	r3
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7e0      	b.n	80080ba <_raise_r+0x12>

080080f8 <raise>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <raise+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff bfd3 	b.w	80080a8 <_raise_r>
 8008102:	bf00      	nop
 8008104:	2000000c 	.word	0x2000000c

08008108 <_kill_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_kill_r+0x20>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f9 fdf8 	bl	8001d0a <_kill>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_kill_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_kill_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	2000097c 	.word	0x2000097c

0800812c <_getpid_r>:
 800812c:	f7f9 bde5 	b.w	8001cfa <_getpid>

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr

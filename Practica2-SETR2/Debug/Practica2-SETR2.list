
Practica2-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08007e2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08007e2c  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002857f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b19  00000000  00000000  000485bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  0004d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002188  00000000  00000000  0004f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000504e  00000000  00000000  000515c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e1e  00000000  00000000  0005660e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b27  00000000  00000000  0007e42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009874  00000000  00000000  00185fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d30 	.word	0x08007d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007d30 	.word	0x08007d30

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <led_toggle>:
 *      Author: julianduran
 */
#include "led_toggle.h"


void led_toggle(uint8_t led) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	switch (led) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d850      	bhi.n	8000586 <led_toggle+0xb2>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <led_toggle+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	08000541 	.word	0x08000541
 80004f8:	08000565 	.word	0x08000565
		case 0:
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4823      	ldr	r0, [pc, #140]	; (8000590 <led_toggle+0xbc>)
 8000502:	f001 fc0b 	bl	8001d1c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <led_toggle+0xc0>)
 800050c:	f001 fc06 	bl	8001d1c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fc01 	bl	8001d1c <HAL_GPIO_TogglePin>
		}	break;
 800051a:	e035      	b.n	8000588 <led_toggle+0xb4>
		case 1:
			HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <led_toggle+0xc0>)
 8000524:	f001 fbe2 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_3_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 fbdc 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <led_toggle+0xbc>)
 800053a:	f001 fbef 	bl	8001d1c <HAL_GPIO_TogglePin>
			break;
 800053e:	e023      	b.n	8000588 <led_toggle+0xb4>
		case 2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <led_toggle+0xbc>)
 8000548:	f001 fbd0 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_3_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f001 fbca 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <led_toggle+0xc0>)
 800055e:	f001 fbdd 	bl	8001d1c <HAL_GPIO_TogglePin>
			break;
 8000562:	e011      	b.n	8000588 <led_toggle+0xb4>
		case 3:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <led_toggle+0xbc>)
 800056c:	f001 fbbe 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <led_toggle+0xc0>)
 8000578:	f001 fbb8 	bl	8001cec <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f001 fbcb 	bl	8001d1c <HAL_GPIO_TogglePin>
		default:
			break;
 8000586:	bf00      	nop
		}
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400
 8000594:	48000800 	.word	0x48000800

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 ffb0 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f829 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f9f1 	bl	800098c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005aa:	f000 f887 	bl	80006bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005ae:	f000 f8bd 	bl	800072c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005b2:	f000 f8f9 	bl	80007a8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005b6:	f000 f91d 	bl	80007f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f959 	bl	8000870 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005be:	f000 f987 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c2:	f000 f9b5 	bl	8000930 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c6:	f004 fdb5 	bl	8005134 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <main+0x54>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x58>)
 80005d0:	f004 fdfa 	bl	80051c8 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <main+0x5c>)
 80005d8:	6013      	str	r3, [r2, #0]
  //CreateLedTask();
  int param=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
  CreateLedTaskChain(param);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 ff22 	bl	8001428 <CreateLedTaskChain>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f004 fdca 	bl	800517c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x50>
 80005ea:	bf00      	nop
 80005ec:	08007da0 	.word	0x08007da0
 80005f0:	08000cf1 	.word	0x08000cf1
 80005f4:	20000774 	.word	0x20000774

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fb8a 	bl	8007d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f001 fe47 	bl	80022b0 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fb7c 	bl	8000d24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f001 fe22 	bl	8002274 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	; 0x28
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ff3d 	bl	80024f4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 fb50 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fb05 	bl	8002cac <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 fb3c 	bl	8000d24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f003 f83e 	bl	800372c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	; 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006c2:	4a19      	ldr	r2, [pc, #100]	; (8000728 <MX_DFSDM1_Init+0x6c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_DFSDM1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_DFSDM1_Init+0x68>)
 8000700:	2201      	movs	r2, #1
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_DFSDM1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_DFSDM1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_DFSDM1_Init+0x68>)
 8000712:	f001 f835 	bl	8001780 <HAL_DFSDM_ChannelInit>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 fb02 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000002c 	.word	0x2000002c
 8000728:	40016020 	.word	0x40016020

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	f640 6214 	movw	r2, #3604	; 0xe14
 800073c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000746:	2201      	movs	r2, #1
 8000748:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C2_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_I2C2_Init+0x74>)
 800076a:	f001 fb14 	bl	8001d96 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fad6 	bl	8000d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C2_Init+0x74>)
 800077c:	f001 fb9a 	bl	8001eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 facd 	bl	8000d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_I2C2_Init+0x74>)
 800078e:	f001 fbdc 	bl	8001f4a <HAL_I2CEx_ConfigDigitalFilter>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 fac4 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000064 	.word	0x20000064
 80007a4:	40005800 	.word	0x40005800

080007a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <MX_QUADSPI_Init+0x48>)
 80007b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007c0:	2210      	movs	r2, #16
 80007c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007c6:	2217      	movs	r2, #23
 80007c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_QUADSPI_Init+0x44>)
 80007d8:	f001 fdd0 	bl	800237c <HAL_QSPI_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007e2:	f000 fa9f 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b8 	.word	0x200000b8
 80007f0:	a0001000 	.word	0xa0001000

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_SPI3_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_SPI3_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_SPI3_Init+0x74>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI3_Init+0x74>)
 800080e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000812:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI3_Init+0x74>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI3_Init+0x74>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI3_Init+0x74>)
 800084e:	2208      	movs	r2, #8
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_SPI3_Init+0x74>)
 8000854:	f003 f94c 	bl	8003af0 <HAL_SPI_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fa61 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000fc 	.word	0x200000fc
 800086c:	40003c00 	.word	0x40003c00

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART1_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x58>)
 80008b4:	f003 fc90 	bl	80041d8 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 fa31 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000160 	.word	0x20000160
 80008cc:	40013800 	.word	0x40013800

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f003 fc60 	bl	80041d8 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 fa01 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001e4 	.word	0x200001e4
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2206      	movs	r2, #6
 8000940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	f001 fb35 	bl	8001fe2 <HAL_PCD_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f9d1 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000268 	.word	0x20000268

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4bbd      	ldr	r3, [pc, #756]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4abc      	ldr	r2, [pc, #752]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4bba      	ldr	r3, [pc, #744]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4bb7      	ldr	r3, [pc, #732]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4ab6      	ldr	r2, [pc, #728]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4bb4      	ldr	r3, [pc, #720]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4bb1      	ldr	r3, [pc, #708]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4ab0      	ldr	r2, [pc, #704]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4bae      	ldr	r3, [pc, #696]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4bab      	ldr	r3, [pc, #684]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4aaa      	ldr	r2, [pc, #680]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4ba8      	ldr	r3, [pc, #672]	; (8000c98 <MX_GPIO_Init+0x30c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4ba5      	ldr	r3, [pc, #660]	; (8000c98 <MX_GPIO_Init+0x30c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4aa4      	ldr	r2, [pc, #656]	; (8000c98 <MX_GPIO_Init+0x30c>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4ba2      	ldr	r3, [pc, #648]	; (8000c98 <MX_GPIO_Init+0x30c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a20:	489e      	ldr	r0, [pc, #632]	; (8000c9c <MX_GPIO_Init+0x310>)
 8000a22:	f001 f963 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f248 1124 	movw	r1, #33060	; 0x8124
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f001 f95c 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a34:	2200      	movs	r2, #0
 8000a36:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a3a:	4899      	ldr	r0, [pc, #612]	; (8000ca0 <MX_GPIO_Init+0x314>)
 8000a3c:	f001 f956 	bl	8001cec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a46:	4897      	ldr	r0, [pc, #604]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000a48:	f001 f950 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	4894      	ldr	r0, [pc, #592]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000a54:	f001 f94a 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a5e:	4892      	ldr	r0, [pc, #584]	; (8000ca8 <MX_GPIO_Init+0x31c>)
 8000a60:	f001 f944 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2120      	movs	r1, #32
 8000a68:	488d      	ldr	r0, [pc, #564]	; (8000ca0 <MX_GPIO_Init+0x314>)
 8000a6a:	f001 f93f 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2101      	movs	r1, #1
 8000a72:	488a      	ldr	r0, [pc, #552]	; (8000c9c <MX_GPIO_Init+0x310>)
 8000a74:	f001 f93a 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a78:	f240 1315 	movw	r3, #277	; 0x115
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4882      	ldr	r0, [pc, #520]	; (8000c9c <MX_GPIO_Init+0x310>)
 8000a92:	f000 ff81 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a96:	236a      	movs	r3, #106	; 0x6a
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	487c      	ldr	r0, [pc, #496]	; (8000c9c <MX_GPIO_Init+0x310>)
 8000aac:	f000 ff74 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4878      	ldr	r0, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x31c>)
 8000ac8:	f000 ff66 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000acc:	233f      	movs	r3, #63	; 0x3f
 8000ace:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4872      	ldr	r0, [pc, #456]	; (8000ca8 <MX_GPIO_Init+0x31c>)
 8000ae0:	f000 ff5a 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000af4:	2308      	movs	r3, #8
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 ff49 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_3_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b06:	f248 1324 	movw	r3, #33060	; 0x8124
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 ff39 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b26:	2308      	movs	r3, #8
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 ff28 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 ff1b 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b62:	23c0      	movs	r3, #192	; 0xc0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f000 ff0a 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4841      	ldr	r0, [pc, #260]	; (8000ca0 <MX_GPIO_Init+0x314>)
 8000b9a:	f000 fefd 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483b      	ldr	r0, [pc, #236]	; (8000ca0 <MX_GPIO_Init+0x314>)
 8000bb2:	f000 fef1 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bb6:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bba:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x314>)
 8000bd0:	f000 fee2 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bd4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bd8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000bec:	f000 fed4 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bf0:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000c0a:	f000 fec5 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0x31c>)
 8000c28:	f000 feb6 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0x31c>)
 8000c44:	f000 fea8 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000c64:	f000 fe98 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c68:	2378      	movs	r3, #120	; 0x78
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_GPIO_Init+0x318>)
 8000c84:	f000 fe88 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e00a      	b.n	8000cac <MX_GPIO_Init+0x320>
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48001000 	.word	0x48001000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000c00 	.word	0x48000c00
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <MX_GPIO_Init+0x360>)
 8000cbe:	f000 fe6b 	bl	8001998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2017      	movs	r0, #23
 8000cc8:	f000 fd30 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f000 fd49 	bl	8001764 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2028      	movs	r0, #40	; 0x28
 8000cd8:	f000 fd28 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f000 fd41 	bl	8001764 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48000400 	.word	0x48000400

08000cf0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f004 faf7 	bl	80052ec <osDelay>
 8000cfe:	e7fb      	b.n	8000cf8 <StartDefaultTask+0x8>

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f000 fc0f 	bl	8001534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40014800 	.word	0x40014800

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	; 0x60
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f06f 0001 	mvn.w	r0, #1
 8000d6e:	f000 fcdd 	bl	800172c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ac      	sub	sp, #176	; 0xb0
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2288      	movs	r2, #136	; 0x88
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 ffbd 	bl	8007d20 <memset>
  if(DFSDM1_Init == 0)
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d142      	bne.n	8000e34 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 f9ca 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f7ff ffab 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dfe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e26:	f000 fdb7 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a02      	ldr	r2, [pc, #8]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e32:	6013      	str	r3, [r2, #0]
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b0      	adds	r7, #176	; 0xb0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000778 	.word	0x20000778
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48001000 	.word	0x48001000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ac      	sub	sp, #176	; 0xb0
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2288      	movs	r2, #136	; 0x88
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 ff59 	bl	8007d20 <memset>
  if(hi2c->Instance==I2C2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_I2C_MspInit+0xb0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d13b      	bne.n	8000ef0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f967 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e90:	f7ff ff48 	bl	8000d24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HAL_I2C_MspInit+0xb8>)
 8000ed4:	f000 fd60 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	37b0      	adds	r7, #176	; 0xb0
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400

08000f04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_QSPI_MspInit+0x7c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d128      	bne.n	8000f78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6513      	str	r3, [r2, #80]	; 0x50
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_QSPI_MspInit+0x80>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f68:	230a      	movs	r3, #10
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_QSPI_MspInit+0x84>)
 8000f74:	f000 fd10 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	a0001000 	.word	0xa0001000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48001000 	.word	0x48001000

08000f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_SPI_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d128      	bne.n	8001000 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_SPI_MspInit+0x80>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_SPI_MspInit+0x84>)
 8000ffc:	f000 fccc 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40003c00 	.word	0x40003c00
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0ae      	sub	sp, #184	; 0xb8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2288      	movs	r2, #136	; 0x88
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fe73 	bl	8007d20 <memset>
  if(huart->Instance==USART1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a42      	ldr	r2, [pc, #264]	; (8001148 <HAL_UART_MspInit+0x134>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d13b      	bne.n	80010bc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001048:	2300      	movs	r3, #0
 800104a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4618      	mov	r0, r3
 8001052:	f002 f881 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800105c:	f7ff fe62 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <HAL_UART_MspInit+0x138>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	4a39      	ldr	r2, [pc, #228]	; (800114c <HAL_UART_MspInit+0x138>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6613      	str	r3, [r2, #96]	; 0x60
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_UART_MspInit+0x138>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <HAL_UART_MspInit+0x138>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a33      	ldr	r2, [pc, #204]	; (800114c <HAL_UART_MspInit+0x138>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <HAL_UART_MspInit+0x138>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001090:	23c0      	movs	r3, #192	; 0xc0
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a8:	2307      	movs	r3, #7
 80010aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4826      	ldr	r0, [pc, #152]	; (8001150 <HAL_UART_MspInit+0x13c>)
 80010b6:	f000 fc6f 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ba:	e040      	b.n	800113e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <HAL_UART_MspInit+0x140>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d13b      	bne.n	800113e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c6:	2304      	movs	r3, #4
 80010c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 f840 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010de:	f7ff fe21 	bl	8000d24 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_UART_MspInit+0x138>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_UART_MspInit+0x138>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0x138>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_UART_MspInit+0x138>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_UART_MspInit+0x138>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x138>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001112:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <HAL_UART_MspInit+0x144>)
 800113a:	f000 fc2d 	bl	8001998 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	37b8      	adds	r7, #184	; 0xb8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40013800 	.word	0x40013800
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400
 8001154:	40004800 	.word	0x40004800
 8001158:	48000c00 	.word	0x48000c00

0800115c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ac      	sub	sp, #176	; 0xb0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2288      	movs	r2, #136	; 0x88
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fdcf 	bl	8007d20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118a:	d17c      	bne.n	8001286 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011a2:	2318      	movs	r3, #24
 80011a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 ffcb 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011c8:	f7ff fdac 	bl	8000d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_PCD_MspInit+0x134>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <HAL_PCD_MspInit+0x134>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_PCD_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f000 fbc9 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001206:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800120a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001220:	230a      	movs	r3, #10
 8001222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f000 fbb2 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_PCD_MspInit+0x134>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_PCD_MspInit+0x134>)
 800123a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_PCD_MspInit+0x134>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_PCD_MspInit+0x134>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d114      	bne.n	8001282 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_PCD_MspInit+0x134>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_PCD_MspInit+0x134>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6593      	str	r3, [r2, #88]	; 0x58
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_PCD_MspInit+0x134>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001270:	f001 f874 	bl	800235c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_PCD_MspInit+0x134>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_PCD_MspInit+0x134>)
 800127a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001280:	e001      	b.n	8001286 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001282:	f001 f86b 	bl	800235c <HAL_PWREx_EnableVddUSB>
}
 8001286:	bf00      	nop
 8001288:	37b0      	adds	r7, #176	; 0xb0
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	; 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_InitTick+0xc8>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	4a2d      	ldr	r2, [pc, #180]	; (800135c <HAL_InitTick+0xc8>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6613      	str	r3, [r2, #96]	; 0x60
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_InitTick+0xc8>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 feb5 	bl	8003034 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012ca:	f001 fe9d 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80012ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_InitTick+0xcc>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	3b01      	subs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_InitTick+0xd0>)
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_InitTick+0xd4>)
 80012e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_InitTick+0xd0>)
 80012e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ea:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_InitTick+0xd0>)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_InitTick+0xd0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_InitTick+0xd0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_InitTick+0xd0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <HAL_InitTick+0xd0>)
 8001306:	f002 fc96 	bl	8003c36 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001314:	2b00      	cmp	r3, #0
 8001316:	d11b      	bne.n	8001350 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <HAL_InitTick+0xd0>)
 800131a:	f002 fced 	bl	8003cf8 <HAL_TIM_Base_Start_IT>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001328:	2b00      	cmp	r3, #0
 800132a:	d111      	bne.n	8001350 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800132c:	201a      	movs	r0, #26
 800132e:	f000 fa19 	bl	8001764 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d808      	bhi.n	800134a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	201a      	movs	r0, #26
 800133e:	f000 f9f5 	bl	800172c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_InitTick+0xd8>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e002      	b.n	8001350 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001354:	4618      	mov	r0, r3
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	431bde83 	.word	0x431bde83
 8001364:	2000077c 	.word	0x2000077c
 8001368:	40014800 	.word	0x40014800
 800136c:	20000004 	.word	0x20000004

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013a0:	2020      	movs	r0, #32
 80013a2:	f000 fcd5 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013a6:	2040      	movs	r0, #64	; 0x40
 80013a8:	f000 fcd2 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013ac:	2080      	movs	r0, #128	; 0x80
 80013ae:	f000 fccf 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013b6:	f000 fccb 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80013c6:	f002 fd07 	bl	8003dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000077c 	.word	0x2000077c

080013d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013dc:	f000 fcb8 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013e4:	f000 fcb4 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013ec:	f000 fcb0 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013f4:	f000 fcac 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013fc:	f000 fca8 	bl	8001d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <CreateLedTaskChain>:
		led_toggle(p);
		vTaskDelay(1000);
	}
}

void CreateLedTaskChain(int param){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
	xTaskCreate(LedTaskChain, "LedTaskChain", 128, param, 1, NULL);
 8001430:	2300      	movs	r3, #0
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	2301      	movs	r3, #1
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	4903      	ldr	r1, [pc, #12]	; (800144c <CreateLedTaskChain+0x24>)
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <CreateLedTaskChain+0x28>)
 8001440:	f004 fda1 	bl	8005f86 <xTaskCreate>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	08007d78 	.word	0x08007d78
 8001450:	08001455 	.word	0x08001455

08001454 <LedTaskChain>:

void LedTaskChain(void *pArg){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	int p = (int *) pArg;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<5;i++){
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e00b      	b.n	800147e <LedTaskChain+0x2a>
			led_toggle(p);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f832 	bl	80004d4 <led_toggle>
			vTaskDelay(1000);
 8001470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001474:	f004 ff3e 	bl	80062f4 <vTaskDelay>
	for(int i=0;i<5;i++){
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b04      	cmp	r3, #4
 8001482:	ddf0      	ble.n	8001466 <LedTaskChain+0x12>
		}
	CreateLedTaskChain((p=p+1)%4);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3301      	adds	r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	425a      	negs	r2, r3
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	bf58      	it	pl
 8001498:	4253      	negpl	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffc4 	bl	8001428 <CreateLedTaskChain>
	vTaskDelete(NULL);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f004 feb5 	bl	8006210 <vTaskDelete>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff ffa6 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	; (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f006 fbed 	bl	8007cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e2:	f7ff f859 	bl	8000598 <main>

080014e6 <LoopForever>:

LoopForever:
    b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014f4:	08007e1c 	.word	0x08007e1c
  ldr r2, =_sbss
 80014f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014fc:	200020f8 	.word	0x200020f8

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>

08001502 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f902 	bl	8001716 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	200f      	movs	r0, #15
 8001514:	f7ff febe 	bl	8001294 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e001      	b.n	8001528 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001524:	f7ff fc04 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001528:	79fb      	ldrb	r3, [r7, #7]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	200007c8 	.word	0x200007c8

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200007c8 	.word	0x200007c8

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4c 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173e:	f7ff ff61 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001742:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	6978      	ldr	r0, [r7, #20]
 800174a:	f7ff ffb1 	bl	80016b0 <NVIC_EncodePriority>
 800174e:	4602      	mov	r2, r0
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff80 	bl	800165c <__NVIC_SetPriority>
}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff54 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ac      	b.n	80018ec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f8b2 	bl	8001900 <DFSDM_GetChannelFromInstance>
 800179c:	4603      	mov	r3, r0
 800179e:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <HAL_DFSDM_ChannelInit+0x174>)
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e09f      	b.n	80018ec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fae7 	bl	8000d80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_DFSDM_ChannelInit+0x178>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_DFSDM_ChannelInit+0x178>)
 80017ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017bc:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <HAL_DFSDM_ChannelInit+0x178>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d125      	bne.n	8001810 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80017ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4948      	ldr	r1, [pc, #288]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a46      	ldr	r2, [pc, #280]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017e4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80017e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	493f      	ldr	r1, [pc, #252]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <HAL_DFSDM_ChannelInit+0x17c>)
 800180a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800180e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800181e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800182e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001834:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 020f 	bic.w	r2, r2, #15
 800184c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001874:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f002 0207 	and.w	r2, r2, #7
 80018a0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f810 	bl	8001900 <DFSDM_GetChannelFromInstance>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4904      	ldr	r1, [pc, #16]	; (80018f4 <HAL_DFSDM_ChannelInit+0x174>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200007d0 	.word	0x200007d0
 80018f8:	200007cc 	.word	0x200007cc
 80018fc:	40016000 	.word	0x40016000

08001900 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a1c      	ldr	r2, [pc, #112]	; (800197c <DFSDM_GetChannelFromInstance+0x7c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d102      	bne.n	8001916 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e02b      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <DFSDM_GetChannelFromInstance+0x80>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d102      	bne.n	8001924 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800191e:	2301      	movs	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e024      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <DFSDM_GetChannelFromInstance+0x84>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d102      	bne.n	8001932 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e01d      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <DFSDM_GetChannelFromInstance+0x88>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d102      	bne.n	8001940 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800193a:	2304      	movs	r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e016      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <DFSDM_GetChannelFromInstance+0x8c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d102      	bne.n	800194e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001948:	2305      	movs	r3, #5
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e00f      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <DFSDM_GetChannelFromInstance+0x90>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d102      	bne.n	800195c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001956:	2306      	movs	r3, #6
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e008      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <DFSDM_GetChannelFromInstance+0x94>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001964:	2307      	movs	r3, #7
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e001      	b.n	800196e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800196a:	2303      	movs	r3, #3
 800196c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40016000 	.word	0x40016000
 8001980:	40016020 	.word	0x40016020
 8001984:	40016040 	.word	0x40016040
 8001988:	40016080 	.word	0x40016080
 800198c:	400160a0 	.word	0x400160a0
 8001990:	400160c0 	.word	0x400160c0
 8001994:	400160e0 	.word	0x400160e0

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e17f      	b.n	8001ca8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8171 	beq.w	8001ca2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d005      	beq.n	80019d8 <HAL_GPIO_Init+0x40>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d130      	bne.n	8001a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0201 	and.w	r2, r3, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d118      	bne.n	8001a78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d017      	beq.n	8001ab4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	6939      	ldr	r1, [r7, #16]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80ac 	beq.w	8001ca2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	4a5e      	ldr	r2, [pc, #376]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6613      	str	r3, [r2, #96]	; 0x60
 8001b56:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b62:	4a5a      	ldr	r2, [pc, #360]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x242>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x338>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x23e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <HAL_GPIO_Init+0x33c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x23a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x340>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x236>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_GPIO_Init+0x344>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x232>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_GPIO_Init+0x348>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x22e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_GPIO_Init+0x34c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x22a>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x244>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bec:	4937      	ldr	r1, [pc, #220]	; (8001ccc <HAL_GPIO_Init+0x334>)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c1e:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_GPIO_Init+0x350>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae78 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	48000c00 	.word	0x48000c00
 8001cdc:	48001000 	.word	0x48001000
 8001ce0:	48001400 	.word	0x48001400
 8001ce4:	48001800 	.word	0x48001800
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43d9      	mvns	r1, r3
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f806 	bl	8001d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e081      	b.n	8001eac <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff f843 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2224      	movs	r2, #36	; 0x24
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e006      	b.n	8001e1e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d104      	bne.n	8001e30 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69d9      	ldr	r1, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1a      	ldr	r2, [r3, #32]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d138      	bne.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e032      	b.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d139      	bne.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e033      	b.n	8001fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2224      	movs	r2, #36	; 0x24
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe4:	b08f      	sub	sp, #60	; 0x3c
 8001fe6:	af0a      	add	r7, sp, #40	; 0x28
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e116      	b.n	8002222 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff f8a4 	bl	800115c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fdb1 	bl	8004b9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	687e      	ldr	r6, [r7, #4]
 8002040:	466d      	mov	r5, sp
 8002042:	f106 0410 	add.w	r4, r6, #16
 8002046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002052:	e885 0003 	stmia.w	r5, {r0, r1}
 8002056:	1d33      	adds	r3, r6, #4
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	f002 fd71 	bl	8004b42 <USB_CoreInit>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0d7      	b.n	8002222 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fd9f 	bl	8004bbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e04a      	b.n	800211a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	333d      	adds	r3, #61	; 0x3d
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	333c      	adds	r3, #60	; 0x3c
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	b298      	uxth	r0, r3
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3344      	adds	r3, #68	; 0x44
 80020c0:	4602      	mov	r2, r0
 80020c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3340      	adds	r3, #64	; 0x40
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3348      	adds	r3, #72	; 0x48
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	334c      	adds	r3, #76	; 0x4c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3354      	adds	r3, #84	; 0x54
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d3af      	bcc.n	8002084 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e044      	b.n	80021b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	3301      	adds	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3b5      	bcc.n	800212a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	687e      	ldr	r6, [r7, #4]
 80021c6:	466d      	mov	r5, sp
 80021c8:	f106 0410 	add.w	r4, r6, #16
 80021cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021dc:	1d33      	adds	r3, r6, #4
 80021de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e0:	6838      	ldr	r0, [r7, #0]
 80021e2:	f002 fd37 	bl	8004c54 <USB_DevInit>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e014      	b.n	8002222 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b01      	cmp	r3, #1
 800220e:	d102      	bne.n	8002216 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f80a 	bl	800222a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fee3 	bl	8004fe6 <USB_DevDisconnect>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800222a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	f043 0303 	orr.w	r3, r3, #3
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_PWREx_GetVoltageRange+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d130      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d038      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2232      	movs	r2, #50	; 0x32
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f4:	e002      	b.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d102      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f2      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d110      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e00f      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d007      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83

0800235c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6053      	str	r3, [r2, #4]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff f8ea 	bl	800155c <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e063      	b.n	800245c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fe fdab 	bl	8000f04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f858 	bl	8002468 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	2120      	movs	r1, #32
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f850 	bl	8002484 <QSPI_WaitFlagStateUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d131      	bne.n	8002452 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023f8:	f023 0310 	bic.w	r3, r3, #16
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6852      	ldr	r2, [r2, #4]
 8002400:	0611      	lsls	r1, r2, #24
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	4311      	orrs	r1, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_QSPI_Init+0xe8>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6912      	ldr	r2, [r2, #16]
 800241e:	0411      	lsls	r1, r2, #16
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6952      	ldr	r2, [r2, #20]
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6992      	ldr	r2, [r2, #24]
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800245a:	7afb      	ldrb	r3, [r7, #11]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	ffe0f8fe 	.word	0xffe0f8fe

08002468 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002494:	e01a      	b.n	80024cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249c:	d016      	beq.n	80024cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff f85d 	bl	800155c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2204      	movs	r2, #4
 80024b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e00e      	b.n	80024ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf14      	ite	ne
 80024da:	2301      	movne	r3, #1
 80024dc:	2300      	moveq	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1d6      	bne.n	8002496 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3ca      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80e4 	beq.w	80026f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_RCC_OscConfig+0x4a>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	f040 808b 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 8087 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3a2      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_RCC_OscConfig+0x7c>
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256e:	e005      	b.n	800257c <HAL_RCC_OscConfig+0x88>
 8002570:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4293      	cmp	r3, r2
 800257e:	d223      	bcs.n	80025c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd87 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e383      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002594:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b70      	ldr	r3, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	496d      	ldr	r1, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4968      	ldr	r1, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	e025      	b.n	8002614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	495b      	ldr	r1, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd47 	bl	8003098 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e343      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002614:	f000 fc4a 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4950      	ldr	r1, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_RCC_OscConfig+0x278>)
 8002632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002634:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <HAL_RCC_OscConfig+0x27c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fe2b 	bl	8001294 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d052      	beq.n	80026ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	e327      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d032      	beq.n	80026ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe ff7c 	bl	800155c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe ff78 	bl	800155c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e310      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4931      	ldr	r1, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	492c      	ldr	r1, [pc, #176]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e01a      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c6:	f7fe ff49 	bl	800155c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ce:	f7fe ff45 	bl	800155c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2dd      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x1da>
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d074      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x21a>
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d064      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d160      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e2ba      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x24a>
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e026      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x280>
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	08007dc4 	.word	0x08007dc4
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004
 8002774:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9f      	ldr	r2, [pc, #636]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9c      	ldr	r2, [pc, #624]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fee2 	bl	800155c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fede 	bl	800155c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e276      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2a8>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fece 	bl	800155c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe feca 	bl	800155c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e262      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2d0>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d060      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x310>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d116      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x328>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e23f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4973      	ldr	r1, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	e040      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283a:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6e      	ldr	r2, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fe89 	bl	800155c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fe85 	bl	800155c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e21d      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	495f      	ldr	r1, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fe65 	bl	800155c <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fe61 	bl	800155c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1f9      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03c      	beq.n	800293a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fe40 	bl	800155c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fe3c 	bl	800155c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1d4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 8002900:	e01b      	b.n	800293a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	4a3b      	ldr	r2, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe fe23 	bl	800155c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7fe fe1f 	bl	800155c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1b7      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ef      	bne.n	800291a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80a6 	beq.w	8002a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe fde6 	bl	800155c <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fde2 	bl	800155c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e17a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d8>
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ca:	e029      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_OscConfig+0x50c>
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	4b9c      	ldr	r3, [pc, #624]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a9b      	ldr	r2, [pc, #620]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a10:	4b98      	ldr	r3, [pc, #608]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a97      	ldr	r2, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fd98 	bl	800155c <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe fd94 	bl	800155c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e12a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ed      	beq.n	8002a30 <HAL_RCC_OscConfig+0x53c>
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fd81 	bl	800155c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fd7d 	bl	800155c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e113      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a74:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ed      	bne.n	8002a5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80fe 	beq.w	8002c9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80d0 	bne.w	8002c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d130      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d127      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d11f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	2a07      	cmp	r2, #7
 8002aea:	bf14      	ite	ne
 8002aec:	2201      	movne	r2, #1
 8002aee:	2200      	moveq	r2, #0
 8002af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d06e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d069      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ad      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b4c:	f7fe fd06 	bl	800155c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fd02 	bl	800155c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x784>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8c:	0212      	lsls	r2, r2, #8
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	0912      	lsrs	r2, r2, #4
 8002bae:	0452      	lsls	r2, r2, #17
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	4930      	ldr	r1, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd0:	f7fe fcc4 	bl	800155c <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fcc0 	bl	800155c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf6:	e050      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d148      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c20:	f7fe fc9c 	bl	800155c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fc98 	bl	800155c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e030      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x734>
 8002c46:	e028      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d023      	beq.n	8002c96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc7f 	bl	800155c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe fc7b 	bl	800155c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d905      	bls.n	8002c7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ec      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x7b4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
 8002c94:	e001      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	feeefffc 	.word	0xfeeefffc

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0e7      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4970      	ldr	r1, [pc, #448]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cf      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4960      	ldr	r1, [pc, #384]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04c      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0a6      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e09a      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d62:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e08e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e086      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4943      	ldr	r1, [pc, #268]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fbe2 	bl	800155c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe fbde 	bl	800155c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e06e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	492b      	ldr	r1, [pc, #172]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d210      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4923      	ldr	r1, [pc, #140]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e036      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4910      	ldr	r1, [pc, #64]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e60:	f000 f824 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fa05 	bl	8001294 <HAL_InitTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08007dc4 	.word	0x08007dc4
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e004      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d134      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xac>
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0e5b      	lsrs	r3, r3, #25
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08007ddc 	.word	0x08007ddc
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000000 	.word	0x20000000

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	08007dd4 	.word	0x08007dd4

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800300c:	f7ff ffda 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	08007dd4 	.word	0x08007dd4

08003034 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	220f      	movs	r2, #15
 8003042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_RCC_GetClockConfig+0x60>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40022000 	.word	0x40022000

08003098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030b0:	f7ff f8f0 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 80030b4:	6178      	str	r0, [r7, #20]
 80030b6:	e014      	b.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	; 0x58
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030d0:	f7ff f8e0 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 80030d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d10b      	bne.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	d919      	bls.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2ba0      	cmp	r3, #160	; 0xa0
 80030f4:	d902      	bls.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f6:	2302      	movs	r3, #2
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e013      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030fc:	2301      	movs	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e010      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d902      	bls.n	800310e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003108:	2303      	movs	r3, #3
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e00a      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d102      	bne.n	800311a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003114:	2302      	movs	r3, #2
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e004      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b70      	cmp	r3, #112	; 0x70
 800311e:	d101      	bne.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003120:	2301      	movs	r3, #1
 8003122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 0207 	bic.w	r2, r3, #7
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	40022000 	.word	0x40022000

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003160:	2300      	movs	r3, #0
 8003162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003164:	2300      	movs	r3, #0
 8003166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003170:	2b00      	cmp	r3, #0
 8003172:	d041      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003178:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800317c:	d02a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800317e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003182:	d824      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800318a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318e:	d81e      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003198:	d010      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800319a:	e018      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319c:	4b86      	ldr	r3, [pc, #536]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a85      	ldr	r2, [pc, #532]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 facb 	bl	800374c <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031ba:	e00c      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fbb6 	bl	8003934 <RCCEx_PLLSAI2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	74fb      	strb	r3, [r7, #19]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031dc:	4b76      	ldr	r3, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ea:	4973      	ldr	r1, [pc, #460]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d041      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800320c:	d02a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800320e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003212:	d824      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003218:	d008      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800321a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321e:	d81e      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d010      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800322a:	e018      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800322c:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a61      	ldr	r2, [pc, #388]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003238:	e015      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fa83 	bl	800374c <RCCEx_PLLSAI1_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800324a:	e00c      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3320      	adds	r3, #32
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fb6e 	bl	8003934 <RCCEx_PLLSAI2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	74fb      	strb	r3, [r7, #19]
      break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800326c:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327a:	494f      	ldr	r1, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a0 	beq.w	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6593      	str	r3, [r2, #88]	; 0x58
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c8:	2301      	movs	r3, #1
 80032ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032cc:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3a      	ldr	r2, [pc, #232]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d8:	f7fe f940 	bl	800155c <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032de:	e009      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fe f93c 	bl	800155c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	74fb      	strb	r3, [r7, #19]
        break;
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ef      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d15c      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01f      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	429a      	cmp	r2, r3
 8003322:	d019      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe f8fb 	bl	800155c <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003368:	e00b      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fe f8f7 	bl	800155c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d902      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	74fb      	strb	r3, [r7, #19]
            break;
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ec      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	4904      	ldr	r1, [pc, #16]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033ae:	e009      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
 80033b4:	e006      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c4:	7c7b      	ldrb	r3, [r7, #17]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b9e      	ldr	r3, [pc, #632]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	4a9d      	ldr	r2, [pc, #628]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e2:	4b98      	ldr	r3, [pc, #608]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f023 0203 	bic.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	4994      	ldr	r1, [pc, #592]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003404:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 020c 	bic.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	498c      	ldr	r1, [pc, #560]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003426:	4b87      	ldr	r3, [pc, #540]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	4983      	ldr	r1, [pc, #524]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	497b      	ldr	r1, [pc, #492]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	4972      	ldr	r1, [pc, #456]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800348c:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	496a      	ldr	r1, [pc, #424]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	4961      	ldr	r1, [pc, #388]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034d0:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	4959      	ldr	r1, [pc, #356]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	4950      	ldr	r1, [pc, #320]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	4948      	ldr	r1, [pc, #288]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	493f      	ldr	r1, [pc, #252]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003558:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	4937      	ldr	r1, [pc, #220]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b32      	ldr	r3, [pc, #200]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a31      	ldr	r2, [pc, #196]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e011      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f8d8 	bl	800374c <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b6:	4b23      	ldr	r3, [pc, #140]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	491f      	ldr	r1, [pc, #124]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a1a      	ldr	r2, [pc, #104]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e0:	60d3      	str	r3, [r2, #12]
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f8a9 	bl	800374c <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02b      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4908      	ldr	r1, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003632:	d109      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a02      	ldr	r2, [pc, #8]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363e:	60d3      	str	r3, [r2, #12]
 8003640:	e014      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f877 	bl	800374c <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02f      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	4928      	ldr	r1, [pc, #160]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003696:	d10d      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2102      	movs	r1, #2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f854 	bl	800374c <RCCEx_PLLSAI1_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d014      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	74bb      	strb	r3, [r7, #18]
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3320      	adds	r3, #32
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f935 	bl	8003934 <RCCEx_PLLSAI2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003716:	4904      	ldr	r1, [pc, #16]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800371e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375a:	4b75      	ldr	r3, [pc, #468]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003766:	4b72      	ldr	r3, [pc, #456]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d10d      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
       ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
       ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d047      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	e044      	b.n	8003822 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d018      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0x86>
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d825      	bhi.n	80037f0 <RCCEx_PLLSAI1_Config+0xa4>
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d002      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0x62>
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d009      	beq.n	80037c0 <RCCEx_PLLSAI1_Config+0x74>
 80037ac:	e020      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ae:	4b60      	ldr	r3, [pc, #384]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d11d      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037be:	e01a      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c0:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d0:	e013      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d2:	4b57      	ldr	r3, [pc, #348]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037de:	4b54      	ldr	r3, [pc, #336]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ee:	e006      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e004      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003806:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	430b      	orrs	r3, r1
 800381c:	4944      	ldr	r1, [pc, #272]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d17d      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a40      	ldr	r2, [pc, #256]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003834:	f7fd fe92 	bl	800155c <HAL_GetTick>
 8003838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800383a:	e009      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800383c:	f7fd fe8e 	bl	800155c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d902      	bls.n	8003850 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	73fb      	strb	r3, [r7, #15]
        break;
 800384e:	e005      	b.n	800385c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ef      	bne.n	800383c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d160      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d111      	bne.n	800388c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	0912      	lsrs	r2, r2, #4
 8003880:	0452      	lsls	r2, r2, #17
 8003882:	430a      	orrs	r2, r1
 8003884:	492a      	ldr	r1, [pc, #168]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	610b      	str	r3, [r1, #16]
 800388a:	e027      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d112      	bne.n	80038b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800389a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6892      	ldr	r2, [r2, #8]
 80038a2:	0211      	lsls	r1, r2, #8
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6912      	ldr	r2, [r2, #16]
 80038a8:	0852      	lsrs	r2, r2, #1
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0552      	lsls	r2, r2, #21
 80038ae:	430a      	orrs	r2, r1
 80038b0:	491f      	ldr	r1, [pc, #124]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	610b      	str	r3, [r1, #16]
 80038b6:	e011      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	0211      	lsls	r1, r2, #8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6952      	ldr	r2, [r2, #20]
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0652      	lsls	r2, r2, #25
 80038d4:	430a      	orrs	r2, r1
 80038d6:	4916      	ldr	r1, [pc, #88]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fd fe38 	bl	800155c <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ee:	e009      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f0:	f7fd fe34 	bl	800155c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d902      	bls.n	8003904 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	73fb      	strb	r3, [r7, #15]
          break;
 8003902:	e005      	b.n	8003910 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ef      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4904      	ldr	r1, [pc, #16]	; (8003930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000

08003934 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d018      	beq.n	8003980 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800394e:	4b67      	ldr	r3, [pc, #412]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0203 	and.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
       ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003966:	4b61      	ldr	r3, [pc, #388]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
       ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d047      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e044      	b.n	8003a0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d018      	beq.n	80039ba <RCCEx_PLLSAI2_Config+0x86>
 8003988:	2b03      	cmp	r3, #3
 800398a:	d825      	bhi.n	80039d8 <RCCEx_PLLSAI2_Config+0xa4>
 800398c:	2b01      	cmp	r3, #1
 800398e:	d002      	beq.n	8003996 <RCCEx_PLLSAI2_Config+0x62>
 8003990:	2b02      	cmp	r3, #2
 8003992:	d009      	beq.n	80039a8 <RCCEx_PLLSAI2_Config+0x74>
 8003994:	e020      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003996:	4b55      	ldr	r3, [pc, #340]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11d      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a6:	e01a      	b.n	80039de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b8:	e013      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ba:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d6:	e006      	b.n	80039e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e004      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	430b      	orrs	r3, r1
 8003a04:	4939      	ldr	r1, [pc, #228]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d167      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a35      	ldr	r2, [pc, #212]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fd9e 	bl	800155c <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a22:	e009      	b.n	8003a38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a24:	f7fd fd9a 	bl	800155c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	73fb      	strb	r3, [r7, #15]
        break;
 8003a36:	e005      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ef      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d14a      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d111      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	0211      	lsls	r1, r2, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	0912      	lsrs	r2, r2, #4
 8003a68:	0452      	lsls	r2, r2, #17
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	491f      	ldr	r1, [pc, #124]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	614b      	str	r3, [r1, #20]
 8003a72:	e011      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6912      	ldr	r2, [r2, #16]
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4916      	ldr	r1, [pc, #88]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fd5a 	bl	800155c <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aaa:	e009      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aac:	f7fd fd56 	bl	800155c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d902      	bls.n	8003ac0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	73fb      	strb	r3, [r7, #15]
          break;
 8003abe:	e005      	b.n	8003acc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ef      	beq.n	8003aac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e095      	b.n	8003c2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d009      	beq.n	8003b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	61da      	str	r2, [r3, #28]
 8003b1a:	e005      	b.n	8003b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fa22 	bl	8000f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b68:	d902      	bls.n	8003b70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e002      	b.n	8003b76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b7e:	d007      	beq.n	8003b90 <HAL_SPI_Init+0xa0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	ea42 0103 	orr.w	r1, r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	f003 0204 	and.w	r2, r3, #4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e049      	b.n	8003cdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f841 	bl	8003ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f000 f9f7 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d001      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e04f      	b.n	8003db0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <HAL_TIM_Base_Start_IT+0xc4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d018      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_TIM_Base_Start_IT+0xd4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIM_Base_Start_IT+0x76>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d115      	bne.n	8003d9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d015      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0xb4>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d011      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	e008      	b.n	8003dac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e000      	b.n	8003dae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	00010007 	.word	0x00010007

08003dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0202 	mvn.w	r2, #2
 8003e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f905 	bl	800402a <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8f7 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f908 	bl	800403e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0204 	mvn.w	r2, #4
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8db 	bl	800402a <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8cd 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f8de 	bl	800403e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0208 	mvn.w	r2, #8
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8b1 	bl	800402a <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8a3 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8b4 	bl	800403e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0210 	mvn.w	r2, #16
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f887 	bl	800402a <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f879 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f88a 	bl	800403e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0201 	mvn.w	r2, #1
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fed2 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d10e      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	d107      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f914 	bl	80041b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f907 	bl	80041c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f838 	bl	8004052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d10e      	bne.n	800400e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0220 	mvn.w	r2, #32
 8004006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8c7 	bl	800419c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a40      	ldr	r2, [pc, #256]	; (800417c <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d00f      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <TIM_Base_SetConfig+0x118>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <TIM_Base_SetConfig+0x120>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3a      	ldr	r2, [pc, #232]	; (800418c <TIM_Base_SetConfig+0x124>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d108      	bne.n	80040ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <TIM_Base_SetConfig+0x114>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2c      	ldr	r2, [pc, #176]	; (8004180 <TIM_Base_SetConfig+0x118>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2b      	ldr	r2, [pc, #172]	; (8004184 <TIM_Base_SetConfig+0x11c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <TIM_Base_SetConfig+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a29      	ldr	r2, [pc, #164]	; (800418c <TIM_Base_SetConfig+0x124>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a28      	ldr	r2, [pc, #160]	; (8004190 <TIM_Base_SetConfig+0x128>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <TIM_Base_SetConfig+0x130>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <TIM_Base_SetConfig+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <TIM_Base_SetConfig+0x12c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0xf8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <TIM_Base_SetConfig+0x130>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d103      	bne.n	8004168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	615a      	str	r2, [r3, #20]
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40013400 	.word	0x40013400
 8004190:	40014000 	.word	0x40014000
 8004194:	40014400 	.word	0x40014400
 8004198:	40014800 	.word	0x40014800

0800419c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e040      	b.n	800426c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc ff0a 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f82c 	bl	8004274 <UART_SetConfig>
 800421c:	4603      	mov	r3, r0
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e022      	b.n	800426c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fad8 	bl	80047e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004242:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004252:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fb5f 	bl	8004928 <UART_CheckIdleState>
 800426a:	4603      	mov	r3, r0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b08a      	sub	sp, #40	; 0x28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	431a      	orrs	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4313      	orrs	r3, r2
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4ba4      	ldr	r3, [pc, #656]	; (8004534 <UART_SetConfig+0x2c0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a99      	ldr	r2, [pc, #612]	; (8004538 <UART_SetConfig+0x2c4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	4313      	orrs	r3, r2
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a90      	ldr	r2, [pc, #576]	; (800453c <UART_SetConfig+0x2c8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d126      	bne.n	800434c <UART_SetConfig+0xd8>
 80042fe:	4b90      	ldr	r3, [pc, #576]	; (8004540 <UART_SetConfig+0x2cc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b03      	cmp	r3, #3
 800430a:	d81b      	bhi.n	8004344 <UART_SetConfig+0xd0>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0xa0>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004325 	.word	0x08004325
 8004318:	08004335 	.word	0x08004335
 800431c:	0800432d 	.word	0x0800432d
 8004320:	0800433d 	.word	0x0800433d
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e116      	b.n	800455a <UART_SetConfig+0x2e6>
 800432c:	2302      	movs	r3, #2
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e112      	b.n	800455a <UART_SetConfig+0x2e6>
 8004334:	2304      	movs	r3, #4
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e10e      	b.n	800455a <UART_SetConfig+0x2e6>
 800433c:	2308      	movs	r3, #8
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e10a      	b.n	800455a <UART_SetConfig+0x2e6>
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e106      	b.n	800455a <UART_SetConfig+0x2e6>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <UART_SetConfig+0x2d0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d138      	bne.n	80043c8 <UART_SetConfig+0x154>
 8004356:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <UART_SetConfig+0x2cc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d82d      	bhi.n	80043c0 <UART_SetConfig+0x14c>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0xf8>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	080043a1 	.word	0x080043a1
 8004370:	080043c1 	.word	0x080043c1
 8004374:	080043c1 	.word	0x080043c1
 8004378:	080043c1 	.word	0x080043c1
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043a9 	.word	0x080043a9
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043b9 	.word	0x080043b9
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e0d8      	b.n	800455a <UART_SetConfig+0x2e6>
 80043a8:	2302      	movs	r3, #2
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ae:	e0d4      	b.n	800455a <UART_SetConfig+0x2e6>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b6:	e0d0      	b.n	800455a <UART_SetConfig+0x2e6>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043be:	e0cc      	b.n	800455a <UART_SetConfig+0x2e6>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c6:	e0c8      	b.n	800455a <UART_SetConfig+0x2e6>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <UART_SetConfig+0x2d4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d125      	bne.n	800441e <UART_SetConfig+0x1aa>
 80043d2:	4b5b      	ldr	r3, [pc, #364]	; (8004540 <UART_SetConfig+0x2cc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043dc:	2b30      	cmp	r3, #48	; 0x30
 80043de:	d016      	beq.n	800440e <UART_SetConfig+0x19a>
 80043e0:	2b30      	cmp	r3, #48	; 0x30
 80043e2:	d818      	bhi.n	8004416 <UART_SetConfig+0x1a2>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d00a      	beq.n	80043fe <UART_SetConfig+0x18a>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d814      	bhi.n	8004416 <UART_SetConfig+0x1a2>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <UART_SetConfig+0x182>
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d008      	beq.n	8004406 <UART_SetConfig+0x192>
 80043f4:	e00f      	b.n	8004416 <UART_SetConfig+0x1a2>
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fc:	e0ad      	b.n	800455a <UART_SetConfig+0x2e6>
 80043fe:	2302      	movs	r3, #2
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004404:	e0a9      	b.n	800455a <UART_SetConfig+0x2e6>
 8004406:	2304      	movs	r3, #4
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440c:	e0a5      	b.n	800455a <UART_SetConfig+0x2e6>
 800440e:	2308      	movs	r3, #8
 8004410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004414:	e0a1      	b.n	800455a <UART_SetConfig+0x2e6>
 8004416:	2310      	movs	r3, #16
 8004418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441c:	e09d      	b.n	800455a <UART_SetConfig+0x2e6>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4a      	ldr	r2, [pc, #296]	; (800454c <UART_SetConfig+0x2d8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d125      	bne.n	8004474 <UART_SetConfig+0x200>
 8004428:	4b45      	ldr	r3, [pc, #276]	; (8004540 <UART_SetConfig+0x2cc>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004432:	2bc0      	cmp	r3, #192	; 0xc0
 8004434:	d016      	beq.n	8004464 <UART_SetConfig+0x1f0>
 8004436:	2bc0      	cmp	r3, #192	; 0xc0
 8004438:	d818      	bhi.n	800446c <UART_SetConfig+0x1f8>
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d00a      	beq.n	8004454 <UART_SetConfig+0x1e0>
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d814      	bhi.n	800446c <UART_SetConfig+0x1f8>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <UART_SetConfig+0x1d8>
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d008      	beq.n	800445c <UART_SetConfig+0x1e8>
 800444a:	e00f      	b.n	800446c <UART_SetConfig+0x1f8>
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004452:	e082      	b.n	800455a <UART_SetConfig+0x2e6>
 8004454:	2302      	movs	r3, #2
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445a:	e07e      	b.n	800455a <UART_SetConfig+0x2e6>
 800445c:	2304      	movs	r3, #4
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e07a      	b.n	800455a <UART_SetConfig+0x2e6>
 8004464:	2308      	movs	r3, #8
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e076      	b.n	800455a <UART_SetConfig+0x2e6>
 800446c:	2310      	movs	r3, #16
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e072      	b.n	800455a <UART_SetConfig+0x2e6>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a35      	ldr	r2, [pc, #212]	; (8004550 <UART_SetConfig+0x2dc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d12a      	bne.n	80044d4 <UART_SetConfig+0x260>
 800447e:	4b30      	ldr	r3, [pc, #192]	; (8004540 <UART_SetConfig+0x2cc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448c:	d01a      	beq.n	80044c4 <UART_SetConfig+0x250>
 800448e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004492:	d81b      	bhi.n	80044cc <UART_SetConfig+0x258>
 8004494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004498:	d00c      	beq.n	80044b4 <UART_SetConfig+0x240>
 800449a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449e:	d815      	bhi.n	80044cc <UART_SetConfig+0x258>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <UART_SetConfig+0x238>
 80044a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a8:	d008      	beq.n	80044bc <UART_SetConfig+0x248>
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x258>
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e052      	b.n	800455a <UART_SetConfig+0x2e6>
 80044b4:	2302      	movs	r3, #2
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e04e      	b.n	800455a <UART_SetConfig+0x2e6>
 80044bc:	2304      	movs	r3, #4
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e04a      	b.n	800455a <UART_SetConfig+0x2e6>
 80044c4:	2308      	movs	r3, #8
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e046      	b.n	800455a <UART_SetConfig+0x2e6>
 80044cc:	2310      	movs	r3, #16
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e042      	b.n	800455a <UART_SetConfig+0x2e6>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <UART_SetConfig+0x2c4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d13a      	bne.n	8004554 <UART_SetConfig+0x2e0>
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <UART_SetConfig+0x2cc>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ec:	d01a      	beq.n	8004524 <UART_SetConfig+0x2b0>
 80044ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0x2b8>
 80044f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f8:	d00c      	beq.n	8004514 <UART_SetConfig+0x2a0>
 80044fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fe:	d815      	bhi.n	800452c <UART_SetConfig+0x2b8>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <UART_SetConfig+0x298>
 8004504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004508:	d008      	beq.n	800451c <UART_SetConfig+0x2a8>
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x2b8>
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e022      	b.n	800455a <UART_SetConfig+0x2e6>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e01e      	b.n	800455a <UART_SetConfig+0x2e6>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e01a      	b.n	800455a <UART_SetConfig+0x2e6>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e016      	b.n	800455a <UART_SetConfig+0x2e6>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e012      	b.n	800455a <UART_SetConfig+0x2e6>
 8004534:	efff69f3 	.word	0xefff69f3
 8004538:	40008000 	.word	0x40008000
 800453c:	40013800 	.word	0x40013800
 8004540:	40021000 	.word	0x40021000
 8004544:	40004400 	.word	0x40004400
 8004548:	40004800 	.word	0x40004800
 800454c:	40004c00 	.word	0x40004c00
 8004550:	40005000 	.word	0x40005000
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a9f      	ldr	r2, [pc, #636]	; (80047dc <UART_SetConfig+0x568>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d17a      	bne.n	800465a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004568:	2b08      	cmp	r3, #8
 800456a:	d824      	bhi.n	80045b6 <UART_SetConfig+0x342>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0x300>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004599 	.word	0x08004599
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045a7 	.word	0x080045a7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045b7 	.word	0x080045b7
 8004590:	080045b7 	.word	0x080045b7
 8004594:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7fe fd20 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800459c:	61f8      	str	r0, [r7, #28]
        break;
 800459e:	e010      	b.n	80045c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <UART_SetConfig+0x56c>)
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e00d      	b.n	80045c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe fc81 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80045aa:	61f8      	str	r0, [r7, #28]
        break;
 80045ac:	e009      	b.n	80045c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	61fb      	str	r3, [r7, #28]
        break;
 80045b4:	e005      	b.n	80045c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80fb 	beq.w	80047c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d305      	bcc.n	80045e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d903      	bls.n	80045ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045ec:	e0e8      	b.n	80047c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2200      	movs	r2, #0
 80045f2:	461c      	mov	r4, r3
 80045f4:	4615      	mov	r5, r2
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	022b      	lsls	r3, r5, #8
 8004600:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004604:	0222      	lsls	r2, r4, #8
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6849      	ldr	r1, [r1, #4]
 800460a:	0849      	lsrs	r1, r1, #1
 800460c:	2000      	movs	r0, #0
 800460e:	4688      	mov	r8, r1
 8004610:	4681      	mov	r9, r0
 8004612:	eb12 0a08 	adds.w	sl, r2, r8
 8004616:	eb43 0b09 	adc.w	fp, r3, r9
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004628:	4650      	mov	r0, sl
 800462a:	4659      	mov	r1, fp
 800462c:	f7fb fdd0 	bl	80001d0 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463e:	d308      	bcc.n	8004652 <UART_SetConfig+0x3de>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004646:	d204      	bcs.n	8004652 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e0b6      	b.n	80047c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004658:	e0b2      	b.n	80047c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	d15e      	bne.n	8004722 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004668:	2b08      	cmp	r3, #8
 800466a:	d828      	bhi.n	80046be <UART_SetConfig+0x44a>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x400>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046bf 	.word	0x080046bf
 8004684:	080046af 	.word	0x080046af
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046bf 	.word	0x080046bf
 8004694:	080046b7 	.word	0x080046b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fe fca0 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800469c:	61f8      	str	r0, [r7, #28]
        break;
 800469e:	e014      	b.n	80046ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe fcb2 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80046a4:	61f8      	str	r0, [r7, #28]
        break;
 80046a6:	e010      	b.n	80046ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a8:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <UART_SetConfig+0x56c>)
 80046aa:	61fb      	str	r3, [r7, #28]
        break;
 80046ac:	e00d      	b.n	80046ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ae:	f7fe fbfd 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80046b2:	61f8      	str	r0, [r7, #28]
        break;
 80046b4:	e009      	b.n	80046ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ba:	61fb      	str	r3, [r7, #28]
        break;
 80046bc:	e005      	b.n	80046ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d077      	beq.n	80047c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005a      	lsls	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b0f      	cmp	r3, #15
 80046ea:	d916      	bls.n	800471a <UART_SetConfig+0x4a6>
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f2:	d212      	bcs.n	800471a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f023 030f 	bic.w	r3, r3, #15
 80046fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	b29a      	uxth	r2, r3
 800470a:	8afb      	ldrh	r3, [r7, #22]
 800470c:	4313      	orrs	r3, r2
 800470e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	8afa      	ldrh	r2, [r7, #22]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e052      	b.n	80047c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004720:	e04e      	b.n	80047c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004726:	2b08      	cmp	r3, #8
 8004728:	d827      	bhi.n	800477a <UART_SetConfig+0x506>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x4bc>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	0800477b 	.word	0x0800477b
 8004740:	0800476b 	.word	0x0800476b
 8004744:	0800477b 	.word	0x0800477b
 8004748:	0800477b 	.word	0x0800477b
 800474c:	0800477b 	.word	0x0800477b
 8004750:	08004773 	.word	0x08004773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fc42 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8004758:	61f8      	str	r0, [r7, #28]
        break;
 800475a:	e014      	b.n	8004786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe fc54 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8004760:	61f8      	str	r0, [r7, #28]
        break;
 8004762:	e010      	b.n	8004786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <UART_SetConfig+0x56c>)
 8004766:	61fb      	str	r3, [r7, #28]
        break;
 8004768:	e00d      	b.n	8004786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7fe fb9f 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 800476e:	61f8      	str	r0, [r7, #28]
        break;
 8004770:	e009      	b.n	8004786 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	61fb      	str	r3, [r7, #28]
        break;
 8004778:	e005      	b.n	8004786 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004784:	bf00      	nop
    }

    if (pclk != 0U)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	085a      	lsrs	r2, r3, #1
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	441a      	add	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d909      	bls.n	80047ba <UART_SetConfig+0x546>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d205      	bcs.n	80047ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e002      	b.n	80047c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047da:	bf00      	nop
 80047dc:	40008000 	.word	0x40008000
 80047e0:	00f42400 	.word	0x00f42400

080047e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01a      	beq.n	80048fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e2:	d10a      	bne.n	80048fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af02      	add	r7, sp, #8
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004938:	f7fc fe10 	bl	800155c <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d10e      	bne.n	800496a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f82d 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e023      	b.n	80049b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d10e      	bne.n	8004996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f817 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e00d      	b.n	80049b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b09c      	sub	sp, #112	; 0x70
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	e0a5      	b.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d2:	f000 80a1 	beq.w	8004b18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fc fdc1 	bl	800155c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <UART_WaitOnFlagUntilTimeout+0x32>
 80049e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d13e      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a00:	667b      	str	r3, [r7, #100]	; 0x64
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e067      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d04f      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d147      	bne.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ae4:	623a      	str	r2, [r7, #32]
 8004ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e010      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	f43f af4a 	beq.w	80049cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3770      	adds	r7, #112	; 0x70
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b42:	b084      	sub	sp, #16
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	f107 001c 	add.w	r0, r7, #28
 8004b50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa6f 	bl	8005044 <USB_CoreReset>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b7c:	e005      	b.n	8004b8a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b96:	b004      	add	sp, #16
 8004b98:	4770      	bx	lr

08004b9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d115      	bne.n	8004c0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f7fc fcc2 	bl	8001574 <HAL_Delay>
      ms++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa16 	bl	8005028 <USB_GetMode>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d01e      	beq.n	8004c40 <USB_SetCurrentMode+0x84>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b31      	cmp	r3, #49	; 0x31
 8004c06:	d9f0      	bls.n	8004bea <USB_SetCurrentMode+0x2e>
 8004c08:	e01a      	b.n	8004c40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d115      	bne.n	8004c3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7fc fca9 	bl	8001574 <HAL_Delay>
      ms++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f9fd 	bl	8005028 <USB_GetMode>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <USB_SetCurrentMode+0x84>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b31      	cmp	r3, #49	; 0x31
 8004c38:	d9f0      	bls.n	8004c1c <USB_SetCurrentMode+0x60>
 8004c3a:	e001      	b.n	8004c40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e005      	b.n	8004c4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b32      	cmp	r3, #50	; 0x32
 8004c44:	d101      	bne.n	8004c4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c54:	b084      	sub	sp, #16
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e009      	b.n	8004c88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3340      	adds	r3, #64	; 0x40
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	2200      	movs	r2, #0
 8004c80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3301      	adds	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b0e      	cmp	r3, #14
 8004c8c:	d9f2      	bls.n	8004c74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11c      	bne.n	8004cce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca2:	f043 0302 	orr.w	r3, r3, #2
 8004ca6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e005      	b.n	8004cda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	4619      	mov	r1, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	680b      	ldr	r3, [r1, #0]
 8004cf8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cfa:	2103      	movs	r1, #3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f959 	bl	8004fb4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d02:	2110      	movs	r1, #16
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8f1 	bl	8004eec <USB_FlushTxFifo>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f91d 	bl	8004f54 <USB_FlushRxFifo>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e043      	b.n	8004dd6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d64:	d118      	bne.n	8004d98 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e013      	b.n	8004daa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e008      	b.n	8004daa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	461a      	mov	r2, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	461a      	mov	r2, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3b7      	bcc.n	8004d4e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e043      	b.n	8004e6c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfa:	d118      	bne.n	8004e2e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e013      	b.n	8004e40 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e24:	461a      	mov	r2, r3
 8004e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e008      	b.n	8004e40 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3b7      	bcc.n	8004de4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f043 0210 	orr.w	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <USB_DevInit+0x294>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f043 0208 	orr.w	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ece:	f043 0304 	orr.w	r3, r3, #4
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee2:	b004      	add	sp, #16
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	803c3800 	.word	0x803c3800

08004eec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <USB_FlushTxFifo+0x64>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e01b      	b.n	8004f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	daf2      	bge.n	8004efa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	019b      	lsls	r3, r3, #6
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <USB_FlushTxFifo+0x64>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e006      	b.n	8004f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d0f0      	beq.n	8004f24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	00030d40 	.word	0x00030d40

08004f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a11      	ldr	r2, [pc, #68]	; (8004fb0 <USB_FlushRxFifo+0x5c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e018      	b.n	8004fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	daf2      	bge.n	8004f60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2210      	movs	r2, #16
 8004f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <USB_FlushRxFifo+0x5c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e006      	b.n	8004fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d0f0      	beq.n	8004f84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	00030d40 	.word	0x00030d40

08004fb4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005000:	f023 0303 	bic.w	r3, r3, #3
 8005004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0301 	and.w	r3, r3, #1
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <USB_CoreReset+0x64>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e01b      	b.n	800509a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	daf2      	bge.n	8005050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <USB_CoreReset+0x64>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e006      	b.n	800509a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d0f0      	beq.n	800507a <USB_CoreReset+0x36>

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	00030d40 	.word	0x00030d40

080050ac <__NVIC_SetPriority>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	; (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <SysTick_Handler+0x1c>)
 8005106:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005108:	f001 fd70 	bl	8006bec <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005112:	f002 fb59 	bl	80077c8 <xPortSysTickHandler>
  }
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	e000e010 	.word	0xe000e010

08005120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005124:	2100      	movs	r1, #0
 8005126:	f06f 0004 	mvn.w	r0, #4
 800512a:	f7ff ffbf 	bl	80050ac <__NVIC_SetPriority>
#endif
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513a:	f3ef 8305 	mrs	r3, IPSR
 800513e:	603b      	str	r3, [r7, #0]
  return(result);
 8005140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005146:	f06f 0305 	mvn.w	r3, #5
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	e00c      	b.n	8005168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <osKernelInitialize+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <osKernelInitialize+0x44>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800515c:	2300      	movs	r3, #0
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	e002      	b.n	8005168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005168:	687b      	ldr	r3, [r7, #4]
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200007f0 	.word	0x200007f0

0800517c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005182:	f3ef 8305 	mrs	r3, IPSR
 8005186:	603b      	str	r3, [r7, #0]
  return(result);
 8005188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800518e:	f06f 0305 	mvn.w	r3, #5
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e010      	b.n	80051b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <osKernelStart+0x48>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d109      	bne.n	80051b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800519e:	f7ff ffbf 	bl	8005120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <osKernelStart+0x48>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051a8:	f001 f8d8 	bl	800635c <vTaskStartScheduler>
      stat = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	e002      	b.n	80051b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051b8:	687b      	ldr	r3, [r7, #4]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200007f0 	.word	0x200007f0

080051c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	617b      	str	r3, [r7, #20]
  return(result);
 80051de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d17e      	bne.n	80052e2 <osThreadNew+0x11a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d07b      	beq.n	80052e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051ee:	2318      	movs	r3, #24
 80051f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d045      	beq.n	800528e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osThreadNew+0x48>
        name = attr->name;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <osThreadNew+0x6e>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b38      	cmp	r3, #56	; 0x38
 8005228:	d805      	bhi.n	8005236 <osThreadNew+0x6e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <osThreadNew+0x72>
        return (NULL);
 8005236:	2300      	movs	r3, #0
 8005238:	e054      	b.n	80052e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <osThreadNew+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b5b      	cmp	r3, #91	; 0x5b
 8005258:	d90a      	bls.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <osThreadNew+0xa8>
        mem = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e010      	b.n	8005292 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10c      	bne.n	8005292 <osThreadNew+0xca>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <osThreadNew+0xca>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <osThreadNew+0xca>
          mem = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e001      	b.n	8005292 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d110      	bne.n	80052ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052a0:	9202      	str	r2, [sp, #8]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fe0c 	bl	8005ecc <xTaskCreateStatic>
 80052b4:	4603      	mov	r3, r0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e013      	b.n	80052e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d110      	bne.n	80052e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fe57 	bl	8005f86 <xTaskCreate>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <osThreadNew+0x11a>
            hTask = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052e2:	693b      	ldr	r3, [r7, #16]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	; 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f4:	f3ef 8305 	mrs	r3, IPSR
 80052f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <osDelay+0x1c>
    stat = osErrorISR;
 8005300:	f06f 0305 	mvn.w	r3, #5
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e007      	b.n	8005318 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ffee 	bl	80062f4 <vTaskDelay>
    }
  }

  return (stat);
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <vApplicationGetIdleTaskMemory+0x2c>)
 8005334:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a06      	ldr	r2, [pc, #24]	; (8005354 <vApplicationGetIdleTaskMemory+0x30>)
 800533a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200007f4 	.word	0x200007f4
 8005354:	20000850 	.word	0x20000850

08005358 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <vApplicationGetTimerTaskMemory+0x2c>)
 8005368:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a06      	ldr	r2, [pc, #24]	; (8005388 <vApplicationGetTimerTaskMemory+0x30>)
 800536e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000a50 	.word	0x20000a50
 8005388:	20000aac 	.word	0x20000aac

0800538c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f103 0208 	add.w	r2, r3, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f103 0208 	add.w	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0208 	add.w	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005444:	d103      	bne.n	800544e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	e00c      	b.n	8005468 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3308      	adds	r3, #8
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e002      	b.n	800545c <vListInsert+0x2e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	d2f6      	bcs.n	8005456 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6852      	ldr	r2, [r2, #4]
 80054c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d103      	bne.n	80054d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1e5a      	subs	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800551e:	f002 f8c1 	bl	80076a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	441a      	add	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	3b01      	subs	r3, #1
 8005550:	68f9      	ldr	r1, [r7, #12]
 8005552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	441a      	add	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	22ff      	movs	r2, #255	; 0xff
 8005562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	22ff      	movs	r2, #255	; 0xff
 800556a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d114      	bne.n	800559e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01a      	beq.n	80055b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3310      	adds	r3, #16
 8005580:	4618      	mov	r0, r3
 8005582:	f001 f975 	bl	8006870 <xTaskRemoveFromEventList>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <xQueueGenericReset+0xcc>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	e009      	b.n	80055b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3310      	adds	r3, #16
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fef2 	bl	800538c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3324      	adds	r3, #36	; 0x24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff feed 	bl	800538c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055b2:	f002 f8a7 	bl	8007704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055b6:	2301      	movs	r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08e      	sub	sp, #56	; 0x38
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <xQueueGenericCreateStatic+0x52>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <xQueueGenericCreateStatic+0x56>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericCreateStatic+0x58>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	623b      	str	r3, [r7, #32]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <xQueueGenericCreateStatic+0x7e>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <xQueueGenericCreateStatic+0x82>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueGenericCreateStatic+0x84>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	61fb      	str	r3, [r7, #28]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005662:	2350      	movs	r3, #80	; 0x50
 8005664:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b50      	cmp	r3, #80	; 0x50
 800566a:	d00a      	beq.n	8005682 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	61bb      	str	r3, [r7, #24]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005682:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005696:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4613      	mov	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f805 	bl	80056b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3730      	adds	r7, #48	; 0x30
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056e2:	2101      	movs	r1, #1
 80056e4:	69b8      	ldr	r0, [r7, #24]
 80056e6:	f7ff ff05 	bl	80054f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	; 0x38
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSend+0x32>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <xQueueGenericSend+0x40>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <xQueueGenericSend+0x44>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <xQueueGenericSend+0x46>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xQueueGenericSend+0x60>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x6e>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <xQueueGenericSend+0x72>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueGenericSend+0x74>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueGenericSend+0x8e>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	623b      	str	r3, [r7, #32]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578a:	f001 fa2f 	bl	8006bec <xTaskGetSchedulerState>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xQueueGenericSend+0x9e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueGenericSend+0xa2>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericSend+0xa4>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericSend+0xbe>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61fb      	str	r3, [r7, #28]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ba:	f001 ff73 	bl	80076a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <xQueueGenericSend+0xd4>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d129      	bne.n	8005824 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fa0b 	bl	8005bf0 <prvCopyDataToQueue>
 80057da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	3324      	adds	r3, #36	; 0x24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f841 	bl	8006870 <xTaskRemoveFromEventList>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <xQueueGenericSend+0x1f8>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	e00a      	b.n	800581c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800580c:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <xQueueGenericSend+0x1f8>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800581c:	f001 ff72 	bl	8007704 <vPortExitCritical>
				return pdPASS;
 8005820:	2301      	movs	r3, #1
 8005822:	e063      	b.n	80058ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800582a:	f001 ff6b 	bl	8007704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800582e:	2300      	movs	r3, #0
 8005830:	e05c      	b.n	80058ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f87b 	bl	8006938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005842:	2301      	movs	r3, #1
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005846:	f001 ff5d 	bl	8007704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800584a:	f000 fded 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800584e:	f001 ff29 	bl	80076a4 <vPortEnterCritical>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005858:	b25b      	sxtb	r3, r3
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585e:	d103      	bne.n	8005868 <xQueueGenericSend+0x16c>
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005874:	d103      	bne.n	800587e <xQueueGenericSend+0x182>
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800587e:	f001 ff41 	bl	8007704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005882:	1d3a      	adds	r2, r7, #4
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f86a 	bl	8006964 <xTaskCheckForTimeOut>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d124      	bne.n	80058e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005898:	f000 faa2 	bl	8005de0 <prvIsQueueFull>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	3310      	adds	r3, #16
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 ff90 	bl	80067d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 fa2d 	bl	8005d10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058b6:	f000 fdc5 	bl	8006444 <xTaskResumeAll>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f af7c 	bne.w	80057ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058c2:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <xQueueGenericSend+0x1f8>)
 80058c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	e772      	b.n	80057ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d6:	f000 fa1b 	bl	8005d10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058da:	f000 fdb3 	bl	8006444 <xTaskResumeAll>
 80058de:	e76c      	b.n	80057ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058e2:	f000 fa15 	bl	8005d10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058e6:	f000 fdad 	bl	8006444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3738      	adds	r7, #56	; 0x38
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <xQueueGenericSendFromISR+0x3c>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <xQueueGenericSendFromISR+0x40>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <xQueueGenericSendFromISR+0x42>
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d103      	bne.n	8005962 <xQueueGenericSendFromISR+0x6a>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <xQueueGenericSendFromISR+0x6e>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueGenericSendFromISR+0x70>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	623b      	str	r3, [r7, #32]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005982:	f001 ff71 	bl	8007868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005986:	f3ef 8211 	mrs	r2, BASEPRI
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61fa      	str	r2, [r7, #28]
 800599c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800599e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSendFromISR+0xbc>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d12f      	bne.n	8005a14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059ca:	f000 f911 	bl	8005bf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d6:	d112      	bne.n	80059fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d016      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 ff43 	bl	8006870 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e007      	b.n	8005a0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a02:	3301      	adds	r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	b25a      	sxtb	r2, r3
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a12:	e001      	b.n	8005a18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3740      	adds	r7, #64	; 0x40
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <xQueueReceive+0x30>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	623b      	str	r3, [r7, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <xQueueReceive+0x3e>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <xQueueReceive+0x42>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <xQueueReceive+0x44>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueReceive+0x5e>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61fb      	str	r3, [r7, #28]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8e:	f001 f8ad 	bl	8006bec <xTaskGetSchedulerState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xQueueReceive+0x6e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueReceive+0x72>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueReceive+0x74>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueReceive+0x8e>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61bb      	str	r3, [r7, #24]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abe:	f001 fdf1 	bl	80076a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01f      	beq.n	8005b0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad2:	f000 f8f7 	bl	8005cc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	1e5a      	subs	r2, r3, #1
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	3310      	adds	r3, #16
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fec0 	bl	8006870 <xTaskRemoveFromEventList>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005af6:	4b3d      	ldr	r3, [pc, #244]	; (8005bec <xQueueReceive+0x1bc>)
 8005af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b06:	f001 fdfd 	bl	8007704 <vPortExitCritical>
				return pdPASS;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e069      	b.n	8005be2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b14:	f001 fdf6 	bl	8007704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e062      	b.n	8005be2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 ff06 	bl	8006938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b30:	f001 fde8 	bl	8007704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b34:	f000 fc78 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b38:	f001 fdb4 	bl	80076a4 <vPortEnterCritical>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b48:	d103      	bne.n	8005b52 <xQueueReceive+0x122>
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5e:	d103      	bne.n	8005b68 <xQueueReceive+0x138>
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	f001 fdcc 	bl	8007704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b6c:	1d3a      	adds	r2, r7, #4
 8005b6e:	f107 0310 	add.w	r3, r7, #16
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fef5 	bl	8006964 <xTaskCheckForTimeOut>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d123      	bne.n	8005bc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b82:	f000 f917 	bl	8005db4 <prvIsQueueEmpty>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fe1b 	bl	80067d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9c:	f000 f8b8 	bl	8005d10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ba0:	f000 fc50 	bl	8006444 <xTaskResumeAll>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d189      	bne.n	8005abe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <xQueueReceive+0x1bc>)
 8005bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	e780      	b.n	8005abe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbe:	f000 f8a7 	bl	8005d10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bc2:	f000 fc3f 	bl	8006444 <xTaskResumeAll>
 8005bc6:	e77a      	b.n	8005abe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bca:	f000 f8a1 	bl	8005d10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bce:	f000 fc39 	bl	8006444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd4:	f000 f8ee 	bl	8005db4 <prvIsQueueEmpty>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f43f af6f 	beq.w	8005abe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005be0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3730      	adds	r7, #48	; 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d14d      	bne.n	8005cb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 f804 	bl	8006c28 <xTaskPriorityDisinherit>
 8005c20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	e043      	b.n	8005cb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d119      	bne.n	8005c64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6858      	ldr	r0, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	f002 f862 	bl	8007d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	441a      	add	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d32b      	bcc.n	8005cb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	e026      	b.n	8005cb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68d8      	ldr	r0, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	f002 f848 	bl	8007d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	425b      	negs	r3, r3
 8005c7e:	441a      	add	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d207      	bcs.n	8005ca0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	425b      	negs	r3, r3
 8005c9a:	441a      	add	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d105      	bne.n	8005cb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cba:	697b      	ldr	r3, [r7, #20]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d303      	bcc.n	8005cf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68d9      	ldr	r1, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	461a      	mov	r2, r3
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f001 fffe 	bl	8007d04 <memcpy>
	}
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d18:	f001 fcc4 	bl	80076a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d24:	e011      	b.n	8005d4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d012      	beq.n	8005d54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fd9c 	bl	8006870 <xTaskRemoveFromEventList>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d3e:	f000 fe73 	bl	8006a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dce9      	bgt.n	8005d26 <prvUnlockQueue+0x16>
 8005d52:	e000      	b.n	8005d56 <prvUnlockQueue+0x46>
					break;
 8005d54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d5e:	f001 fcd1 	bl	8007704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d62:	f001 fc9f 	bl	80076a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d6e:	e011      	b.n	8005d94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d012      	beq.n	8005d9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3310      	adds	r3, #16
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fd77 	bl	8006870 <xTaskRemoveFromEventList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d88:	f000 fe4e 	bl	8006a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	dce9      	bgt.n	8005d70 <prvUnlockQueue+0x60>
 8005d9c:	e000      	b.n	8005da0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	22ff      	movs	r2, #255	; 0xff
 8005da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005da8:	f001 fcac 	bl	8007704 <vPortExitCritical>
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dbc:	f001 fc72 	bl	80076a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d102      	bne.n	8005dce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e001      	b.n	8005dd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f001 fc97 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005de8:	f001 fc5c 	bl	80076a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d102      	bne.n	8005dfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e001      	b.n	8005e02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e02:	f001 fc7f 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8005e06:	68fb      	ldr	r3, [r7, #12]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e014      	b.n	8005e4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e20:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <vQueueAddToRegistry+0x50>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e2c:	490c      	ldr	r1, [pc, #48]	; (8005e60 <vQueueAddToRegistry+0x50>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <vQueueAddToRegistry+0x50>)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e42:	e006      	b.n	8005e52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b07      	cmp	r3, #7
 8005e4e:	d9e7      	bls.n	8005e20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000eac 	.word	0x20000eac

08005e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e74:	f001 fc16 	bl	80076a4 <vPortEnterCritical>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e84:	d103      	bne.n	8005e8e <vQueueWaitForMessageRestricted+0x2a>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e9a:	d103      	bne.n	8005ea4 <vQueueWaitForMessageRestricted+0x40>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea4:	f001 fc2e 	bl	8007704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d106      	bne.n	8005ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	3324      	adds	r3, #36	; 0x24
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fcad 	bl	8006818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ebe:	6978      	ldr	r0, [r7, #20]
 8005ec0:	f7ff ff26 	bl	8005d10 <prvUnlockQueue>
	}
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	; 0x38
 8005ed0:	af04      	add	r7, sp, #16
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	623b      	str	r3, [r7, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xTaskCreateStatic+0x46>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61fb      	str	r3, [r7, #28]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f12:	235c      	movs	r3, #92	; 0x5c
 8005f14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b5c      	cmp	r3, #92	; 0x5c
 8005f1a:	d00a      	beq.n	8005f32 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	61bb      	str	r3, [r7, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01e      	beq.n	8005f78 <xTaskCreateStatic+0xac>
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f52:	2300      	movs	r3, #0
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	9302      	str	r3, [sp, #8]
 8005f5a:	f107 0314 	add.w	r3, r7, #20
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f850 	bl	8006010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f72:	f000 f8dd 	bl	8006130 <prvAddNewTaskToReadyList>
 8005f76:	e001      	b.n	8005f7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f7c:	697b      	ldr	r3, [r7, #20]
	}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3728      	adds	r7, #40	; 0x28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08c      	sub	sp, #48	; 0x30
 8005f8a:	af04      	add	r7, sp, #16
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fca4 	bl	80078e8 <pvPortMalloc>
 8005fa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fa8:	205c      	movs	r0, #92	; 0x5c
 8005faa:	f001 fc9d 	bl	80078e8 <pvPortMalloc>
 8005fae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
 8005fbc:	e005      	b.n	8005fca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fbe:	6978      	ldr	r0, [r7, #20]
 8005fc0:	f001 fd5e 	bl	8007a80 <vPortFree>
 8005fc4:	e001      	b.n	8005fca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d017      	beq.n	8006000 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9303      	str	r3, [sp, #12]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	9302      	str	r3, [sp, #8]
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f80e 	bl	8006010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ff4:	69f8      	ldr	r0, [r7, #28]
 8005ff6:	f000 f89b 	bl	8006130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e002      	b.n	8006006 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006004:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006006:	69bb      	ldr	r3, [r7, #24]
	}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	461a      	mov	r2, r3
 8006028:	21a5      	movs	r1, #165	; 0xa5
 800602a:	f001 fe79 	bl	8007d20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006038:	3b01      	subs	r3, #1
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	617b      	str	r3, [r7, #20]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01f      	beq.n	80060ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e012      	b.n	800609a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	7819      	ldrb	r1, [r3, #0]
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	3334      	adds	r3, #52	; 0x34
 8006084:	460a      	mov	r2, r1
 8006086:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b0f      	cmp	r3, #15
 800609e:	d9e9      	bls.n	8006074 <prvInitialiseNewTask+0x64>
 80060a0:	e000      	b.n	80060a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80060a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ac:	e003      	b.n	80060b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	2b37      	cmp	r3, #55	; 0x37
 80060ba:	d901      	bls.n	80060c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060bc:	2337      	movs	r3, #55	; 0x37
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	2200      	movs	r2, #0
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff f978 	bl	80053cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	3318      	adds	r3, #24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff f973 	bl	80053cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2200      	movs	r2, #0
 8006100:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68f9      	ldr	r1, [r7, #12]
 800610e:	69b8      	ldr	r0, [r7, #24]
 8006110:	f001 f99a 	bl	8007448 <pxPortInitialiseStack>
 8006114:	4602      	mov	r2, r0
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006138:	f001 fab4 	bl	80076a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800613c:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <prvAddNewTaskToReadyList+0xc4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	4a2c      	ldr	r2, [pc, #176]	; (80061f4 <prvAddNewTaskToReadyList+0xc4>)
 8006144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006146:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800614e:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <prvAddNewTaskToReadyList+0xc8>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006154:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <prvAddNewTaskToReadyList+0xc4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d110      	bne.n	800617e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800615c:	f000 fc88 	bl	8006a70 <prvInitialiseTaskLists>
 8006160:	e00d      	b.n	800617e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006162:	4b26      	ldr	r3, [pc, #152]	; (80061fc <prvAddNewTaskToReadyList+0xcc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800616a:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <prvAddNewTaskToReadyList+0xc8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	429a      	cmp	r2, r3
 8006176:	d802      	bhi.n	800617e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006178:	4a1f      	ldr	r2, [pc, #124]	; (80061f8 <prvAddNewTaskToReadyList+0xc8>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <prvAddNewTaskToReadyList+0xd0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a1e      	ldr	r2, [pc, #120]	; (8006200 <prvAddNewTaskToReadyList+0xd0>)
 8006186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006188:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <prvAddNewTaskToReadyList+0xd0>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <prvAddNewTaskToReadyList+0xd4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d903      	bls.n	80061a4 <prvAddNewTaskToReadyList+0x74>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <prvAddNewTaskToReadyList+0xd4>)
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <prvAddNewTaskToReadyList+0xd8>)
 80061b2:	441a      	add	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f7ff f913 	bl	80053e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c0:	f001 faa0 	bl	8007704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c4:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <prvAddNewTaskToReadyList+0xcc>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvAddNewTaskToReadyList+0xc8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d207      	bcs.n	80061ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <prvAddNewTaskToReadyList+0xdc>)
 80061dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200013c0 	.word	0x200013c0
 80061f8:	20000eec 	.word	0x20000eec
 80061fc:	200013cc 	.word	0x200013cc
 8006200:	200013dc 	.word	0x200013dc
 8006204:	200013c8 	.word	0x200013c8
 8006208:	20000ef0 	.word	0x20000ef0
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006218:	f001 fa44 	bl	80076a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <vTaskDelete+0x18>
 8006222:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <vTaskDelete+0xc4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	e000      	b.n	800622a <vTaskDelete+0x1a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff f935 	bl	80054a0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3318      	adds	r3, #24
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff f92c 	bl	80054a0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006248:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <vTaskDelete+0xc8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <vTaskDelete+0xc8>)
 8006250:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006252:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <vTaskDelete+0xc4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d10b      	bne.n	8006274 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	481e      	ldr	r0, [pc, #120]	; (80062dc <vTaskDelete+0xcc>)
 8006264:	f7ff f8bf 	bl	80053e6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <vTaskDelete+0xd0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <vTaskDelete+0xd0>)
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e009      	b.n	8006288 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <vTaskDelete+0xd4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <vTaskDelete+0xd4>)
 800627c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fc64 	bl	8006b4c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006284:	f000 fc92 	bl	8006bac <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006288:	f001 fa3c 	bl	8007704 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800628c:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <vTaskDelete+0xd8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <vTaskDelete+0xc4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	429a      	cmp	r2, r3
 800629c:	d116      	bne.n	80062cc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <vTaskDelete+0xdc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <vTaskDelete+0xac>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60bb      	str	r3, [r7, #8]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <vTaskDelete+0xe0>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000eec 	.word	0x20000eec
 80062d8:	200013dc 	.word	0x200013dc
 80062dc:	20001394 	.word	0x20001394
 80062e0:	200013a8 	.word	0x200013a8
 80062e4:	200013c0 	.word	0x200013c0
 80062e8:	200013cc 	.word	0x200013cc
 80062ec:	200013e8 	.word	0x200013e8
 80062f0:	e000ed04 	.word	0xe000ed04

080062f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d017      	beq.n	8006336 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <vTaskDelay+0x60>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <vTaskDelay+0x30>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60bb      	str	r3, [r7, #8]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006324:	f000 f880 	bl	8006428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fcea 	bl	8006d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006330:	f000 f888 	bl	8006444 <xTaskResumeAll>
 8006334:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <vTaskDelay+0x64>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200013e8 	.word	0x200013e8
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800636a:	463a      	mov	r2, r7
 800636c:	1d39      	adds	r1, r7, #4
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe ffd6 	bl	8005324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	9202      	str	r2, [sp, #8]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	460a      	mov	r2, r1
 800638a:	4921      	ldr	r1, [pc, #132]	; (8006410 <vTaskStartScheduler+0xb4>)
 800638c:	4821      	ldr	r0, [pc, #132]	; (8006414 <vTaskStartScheduler+0xb8>)
 800638e:	f7ff fd9d 	bl	8005ecc <xTaskCreateStatic>
 8006392:	4603      	mov	r3, r0
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <vTaskStartScheduler+0xbc>)
 8006396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <vTaskStartScheduler+0xbc>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e001      	b.n	80063aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d102      	bne.n	80063b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063b0:	f000 fcfc 	bl	8006dac <xTimerCreateTimerTask>
 80063b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d116      	bne.n	80063ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	613b      	str	r3, [r7, #16]
}
 80063ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <vTaskStartScheduler+0xc0>)
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <vTaskStartScheduler+0xc4>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <vTaskStartScheduler+0xc8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063e4:	f001 f8bc 	bl	8007560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063e8:	e00e      	b.n	8006408 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f0:	d10a      	bne.n	8006408 <vTaskStartScheduler+0xac>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60fb      	str	r3, [r7, #12]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <vTaskStartScheduler+0xaa>
}
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08007d88 	.word	0x08007d88
 8006414:	08006a41 	.word	0x08006a41
 8006418:	200013e4 	.word	0x200013e4
 800641c:	200013e0 	.word	0x200013e0
 8006420:	200013cc 	.word	0x200013cc
 8006424:	200013c4 	.word	0x200013c4

08006428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <vTaskSuspendAll+0x18>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	4a03      	ldr	r2, [pc, #12]	; (8006440 <vTaskSuspendAll+0x18>)
 8006434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	200013e8 	.word	0x200013e8

08006444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006452:	4b42      	ldr	r3, [pc, #264]	; (800655c <xTaskResumeAll+0x118>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xTaskResumeAll+0x2c>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006470:	f001 f918 	bl	80076a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006474:	4b39      	ldr	r3, [pc, #228]	; (800655c <xTaskResumeAll+0x118>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3b01      	subs	r3, #1
 800647a:	4a38      	ldr	r2, [pc, #224]	; (800655c <xTaskResumeAll+0x118>)
 800647c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647e:	4b37      	ldr	r3, [pc, #220]	; (800655c <xTaskResumeAll+0x118>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d162      	bne.n	800654c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006486:	4b36      	ldr	r3, [pc, #216]	; (8006560 <xTaskResumeAll+0x11c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d05e      	beq.n	800654c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800648e:	e02f      	b.n	80064f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006490:	4b34      	ldr	r3, [pc, #208]	; (8006564 <xTaskResumeAll+0x120>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3318      	adds	r3, #24
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe ffff 	bl	80054a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fffa 	bl	80054a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <xTaskResumeAll+0x124>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d903      	bls.n	80064c0 <xTaskResumeAll+0x7c>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <xTaskResumeAll+0x124>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a27      	ldr	r2, [pc, #156]	; (800656c <xTaskResumeAll+0x128>)
 80064ce:	441a      	add	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe ff85 	bl	80053e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	4b23      	ldr	r3, [pc, #140]	; (8006570 <xTaskResumeAll+0x12c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064ea:	4b22      	ldr	r3, [pc, #136]	; (8006574 <xTaskResumeAll+0x130>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f0:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <xTaskResumeAll+0x120>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1cb      	bne.n	8006490 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064fe:	f000 fb55 	bl	8006bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <xTaskResumeAll+0x134>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800650e:	f000 f847 	bl	80065a0 <xTaskIncrementTick>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006518:	4b16      	ldr	r3, [pc, #88]	; (8006574 <xTaskResumeAll+0x130>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3b01      	subs	r3, #1
 8006522:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f1      	bne.n	800650e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800652a:	4b13      	ldr	r3, [pc, #76]	; (8006578 <xTaskResumeAll+0x134>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <xTaskResumeAll+0x130>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <xTaskResumeAll+0x138>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800654c:	f001 f8da 	bl	8007704 <vPortExitCritical>

	return xAlreadyYielded;
 8006550:	68bb      	ldr	r3, [r7, #8]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200013e8 	.word	0x200013e8
 8006560:	200013c0 	.word	0x200013c0
 8006564:	20001380 	.word	0x20001380
 8006568:	200013c8 	.word	0x200013c8
 800656c:	20000ef0 	.word	0x20000ef0
 8006570:	20000eec 	.word	0x20000eec
 8006574:	200013d4 	.word	0x200013d4
 8006578:	200013d0 	.word	0x200013d0
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006586:	4b05      	ldr	r3, [pc, #20]	; (800659c <xTaskGetTickCount+0x1c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	200013c4 	.word	0x200013c4

080065a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b4f      	ldr	r3, [pc, #316]	; (80066e8 <xTaskIncrementTick+0x148>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 808f 	bne.w	80066d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065b4:	4b4d      	ldr	r3, [pc, #308]	; (80066ec <xTaskIncrementTick+0x14c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065bc:	4a4b      	ldr	r2, [pc, #300]	; (80066ec <xTaskIncrementTick+0x14c>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d120      	bne.n	800660a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c8:	4b49      	ldr	r3, [pc, #292]	; (80066f0 <xTaskIncrementTick+0x150>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <xTaskIncrementTick+0x46>
 80065e8:	4b41      	ldr	r3, [pc, #260]	; (80066f0 <xTaskIncrementTick+0x150>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <xTaskIncrementTick+0x154>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3f      	ldr	r2, [pc, #252]	; (80066f0 <xTaskIncrementTick+0x150>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <xTaskIncrementTick+0x154>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4b3e      	ldr	r3, [pc, #248]	; (80066f8 <xTaskIncrementTick+0x158>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a3d      	ldr	r2, [pc, #244]	; (80066f8 <xTaskIncrementTick+0x158>)
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	f000 fad1 	bl	8006bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800660a:	4b3c      	ldr	r3, [pc, #240]	; (80066fc <xTaskIncrementTick+0x15c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	429a      	cmp	r2, r3
 8006612:	d349      	bcc.n	80066a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <xTaskIncrementTick+0x150>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661e:	4b37      	ldr	r3, [pc, #220]	; (80066fc <xTaskIncrementTick+0x15c>)
 8006620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006624:	601a      	str	r2, [r3, #0]
					break;
 8006626:	e03f      	b.n	80066a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <xTaskIncrementTick+0x150>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d203      	bcs.n	8006648 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006640:	4a2e      	ldr	r2, [pc, #184]	; (80066fc <xTaskIncrementTick+0x15c>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006646:	e02f      	b.n	80066a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe ff27 	bl	80054a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	3318      	adds	r3, #24
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe ff1e 	bl	80054a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4b25      	ldr	r3, [pc, #148]	; (8006700 <xTaskIncrementTick+0x160>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d903      	bls.n	8006678 <xTaskIncrementTick+0xd8>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	4a22      	ldr	r2, [pc, #136]	; (8006700 <xTaskIncrementTick+0x160>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <xTaskIncrementTick+0x164>)
 8006686:	441a      	add	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3304      	adds	r3, #4
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fe fea9 	bl	80053e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <xTaskIncrementTick+0x168>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	429a      	cmp	r2, r3
 80066a0:	d3b8      	bcc.n	8006614 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a6:	e7b5      	b.n	8006614 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066a8:	4b17      	ldr	r3, [pc, #92]	; (8006708 <xTaskIncrementTick+0x168>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4915      	ldr	r1, [pc, #84]	; (8006704 <xTaskIncrementTick+0x164>)
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d901      	bls.n	80066c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066c4:	4b11      	ldr	r3, [pc, #68]	; (800670c <xTaskIncrementTick+0x16c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066cc:	2301      	movs	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e004      	b.n	80066dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066d2:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <xTaskIncrementTick+0x170>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <xTaskIncrementTick+0x170>)
 80066da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066dc:	697b      	ldr	r3, [r7, #20]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200013e8 	.word	0x200013e8
 80066ec:	200013c4 	.word	0x200013c4
 80066f0:	20001378 	.word	0x20001378
 80066f4:	2000137c 	.word	0x2000137c
 80066f8:	200013d8 	.word	0x200013d8
 80066fc:	200013e0 	.word	0x200013e0
 8006700:	200013c8 	.word	0x200013c8
 8006704:	20000ef0 	.word	0x20000ef0
 8006708:	20000eec 	.word	0x20000eec
 800670c:	200013d4 	.word	0x200013d4
 8006710:	200013d0 	.word	0x200013d0

08006714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800671a:	4b28      	ldr	r3, [pc, #160]	; (80067bc <vTaskSwitchContext+0xa8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006722:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <vTaskSwitchContext+0xac>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006728:	e041      	b.n	80067ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800672a:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <vTaskSwitchContext+0xac>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <vTaskSwitchContext+0xb0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e010      	b.n	800675a <vTaskSwitchContext+0x46>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <vTaskSwitchContext+0x40>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <vTaskSwitchContext+0x3e>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	491b      	ldr	r1, [pc, #108]	; (80067c8 <vTaskSwitchContext+0xb4>)
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0e4      	beq.n	8006738 <vTaskSwitchContext+0x24>
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <vTaskSwitchContext+0xb4>)
 800677a:	4413      	add	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	605a      	str	r2, [r3, #4]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3308      	adds	r3, #8
 8006790:	429a      	cmp	r2, r3
 8006792:	d104      	bne.n	800679e <vTaskSwitchContext+0x8a>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a09      	ldr	r2, [pc, #36]	; (80067cc <vTaskSwitchContext+0xb8>)
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	4a06      	ldr	r2, [pc, #24]	; (80067c4 <vTaskSwitchContext+0xb0>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	200013e8 	.word	0x200013e8
 80067c0:	200013d4 	.word	0x200013d4
 80067c4:	200013c8 	.word	0x200013c8
 80067c8:	20000ef0 	.word	0x20000ef0
 80067cc:	20000eec 	.word	0x20000eec

080067d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <vTaskPlaceOnEventList+0x44>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3318      	adds	r3, #24
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fe fe15 	bl	800542e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006804:	2101      	movs	r1, #1
 8006806:	6838      	ldr	r0, [r7, #0]
 8006808:	f000 fa7c 	bl	8006d04 <prvAddCurrentTaskToDelayedList>
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000eec 	.word	0x20000eec

08006818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	617b      	str	r3, [r7, #20]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <vTaskPlaceOnEventListRestricted+0x54>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3318      	adds	r3, #24
 8006846:	4619      	mov	r1, r3
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7fe fdcc 	bl	80053e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006858:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f000 fa51 	bl	8006d04 <prvAddCurrentTaskToDelayedList>
	}
 8006862:	bf00      	nop
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000eec 	.word	0x20000eec

08006870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3318      	adds	r3, #24
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fdfd 	bl	80054a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a6:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <xTaskRemoveFromEventList+0xb0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11d      	bne.n	80068ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fdf4 	bl	80054a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <xTaskRemoveFromEventList+0xb4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <xTaskRemoveFromEventList+0x5c>
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	4a16      	ldr	r2, [pc, #88]	; (8006924 <xTaskRemoveFromEventList+0xb4>)
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <xTaskRemoveFromEventList+0xb8>)
 80068da:	441a      	add	r2, r3
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f7fe fd7f 	bl	80053e6 <vListInsertEnd>
 80068e8:	e005      	b.n	80068f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3318      	adds	r3, #24
 80068ee:	4619      	mov	r1, r3
 80068f0:	480e      	ldr	r0, [pc, #56]	; (800692c <xTaskRemoveFromEventList+0xbc>)
 80068f2:	f7fe fd78 	bl	80053e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <xTaskRemoveFromEventList+0xc0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	429a      	cmp	r2, r3
 8006902:	d905      	bls.n	8006910 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <xTaskRemoveFromEventList+0xc4>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e001      	b.n	8006914 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006914:	697b      	ldr	r3, [r7, #20]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	200013e8 	.word	0x200013e8
 8006924:	200013c8 	.word	0x200013c8
 8006928:	20000ef0 	.word	0x20000ef0
 800692c:	20001380 	.word	0x20001380
 8006930:	20000eec 	.word	0x20000eec
 8006934:	200013d4 	.word	0x200013d4

08006938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <vTaskInternalSetTimeOutState+0x24>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <vTaskInternalSetTimeOutState+0x28>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	200013d8 	.word	0x200013d8
 8006960:	200013c4 	.word	0x200013c4

08006964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	613b      	str	r3, [r7, #16]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069a6:	f000 fe7d 	bl	80076a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069aa:	4b1d      	ldr	r3, [pc, #116]	; (8006a20 <xTaskCheckForTimeOut+0xbc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c2:	d102      	bne.n	80069ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e023      	b.n	8006a12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <xTaskCheckForTimeOut+0xc0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d007      	beq.n	80069e6 <xTaskCheckForTimeOut+0x82>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e015      	b.n	8006a12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d20b      	bcs.n	8006a08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff9b 	bl	8006938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	e004      	b.n	8006a12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a12:	f000 fe77 	bl	8007704 <vPortExitCritical>

	return xReturn;
 8006a16:	69fb      	ldr	r3, [r7, #28]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200013c4 	.word	0x200013c4
 8006a24:	200013d8 	.word	0x200013d8

08006a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <vTaskMissedYield+0x14>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	200013d4 	.word	0x200013d4

08006a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a48:	f000 f852 	bl	8006af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <prvIdleTask+0x28>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d9f9      	bls.n	8006a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <prvIdleTask+0x2c>)
 8006a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a64:	e7f0      	b.n	8006a48 <prvIdleTask+0x8>
 8006a66:	bf00      	nop
 8006a68:	20000ef0 	.word	0x20000ef0
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a76:	2300      	movs	r3, #0
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	e00c      	b.n	8006a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a12      	ldr	r2, [pc, #72]	; (8006ad0 <prvInitialiseTaskLists+0x60>)
 8006a88:	4413      	add	r3, r2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fc7e 	bl	800538c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3301      	adds	r3, #1
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b37      	cmp	r3, #55	; 0x37
 8006a9a:	d9ef      	bls.n	8006a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a9c:	480d      	ldr	r0, [pc, #52]	; (8006ad4 <prvInitialiseTaskLists+0x64>)
 8006a9e:	f7fe fc75 	bl	800538c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aa2:	480d      	ldr	r0, [pc, #52]	; (8006ad8 <prvInitialiseTaskLists+0x68>)
 8006aa4:	f7fe fc72 	bl	800538c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aa8:	480c      	ldr	r0, [pc, #48]	; (8006adc <prvInitialiseTaskLists+0x6c>)
 8006aaa:	f7fe fc6f 	bl	800538c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aae:	480c      	ldr	r0, [pc, #48]	; (8006ae0 <prvInitialiseTaskLists+0x70>)
 8006ab0:	f7fe fc6c 	bl	800538c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ab4:	480b      	ldr	r0, [pc, #44]	; (8006ae4 <prvInitialiseTaskLists+0x74>)
 8006ab6:	f7fe fc69 	bl	800538c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <prvInitialiseTaskLists+0x78>)
 8006abc:	4a05      	ldr	r2, [pc, #20]	; (8006ad4 <prvInitialiseTaskLists+0x64>)
 8006abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <prvInitialiseTaskLists+0x7c>)
 8006ac2:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <prvInitialiseTaskLists+0x68>)
 8006ac4:	601a      	str	r2, [r3, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000ef0 	.word	0x20000ef0
 8006ad4:	20001350 	.word	0x20001350
 8006ad8:	20001364 	.word	0x20001364
 8006adc:	20001380 	.word	0x20001380
 8006ae0:	20001394 	.word	0x20001394
 8006ae4:	200013ac 	.word	0x200013ac
 8006ae8:	20001378 	.word	0x20001378
 8006aec:	2000137c 	.word	0x2000137c

08006af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af6:	e019      	b.n	8006b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006af8:	f000 fdd4 	bl	80076a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afc:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <prvCheckTasksWaitingTermination+0x50>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe fcc9 	bl	80054a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <prvCheckTasksWaitingTermination+0x54>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	4a0b      	ldr	r2, [pc, #44]	; (8006b44 <prvCheckTasksWaitingTermination+0x54>)
 8006b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <prvCheckTasksWaitingTermination+0x58>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <prvCheckTasksWaitingTermination+0x58>)
 8006b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b22:	f000 fdef 	bl	8007704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f810 	bl	8006b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <prvCheckTasksWaitingTermination+0x58>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e1      	bne.n	8006af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20001394 	.word	0x20001394
 8006b44:	200013c0 	.word	0x200013c0
 8006b48:	200013a8 	.word	0x200013a8

08006b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d108      	bne.n	8006b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 ff8c 	bl	8007a80 <vPortFree>
				vPortFree( pxTCB );
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 ff89 	bl	8007a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b6e:	e018      	b.n	8006ba2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d103      	bne.n	8006b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 ff80 	bl	8007a80 <vPortFree>
	}
 8006b80:	e00f      	b.n	8006ba2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d00a      	beq.n	8006ba2 <prvDeleteTCB+0x56>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <prvDeleteTCB+0x54>
	}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bc4:	e008      	b.n	8006bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20001378 	.word	0x20001378
 8006be8:	200013e0 	.word	0x200013e0

08006bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <xTaskGetSchedulerState+0x34>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	e008      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c00:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <xTaskGetSchedulerState+0x38>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	e001      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c12:	687b      	ldr	r3, [r7, #4]
	}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	200013cc 	.word	0x200013cc
 8006c24:	200013e8 	.word	0x200013e8

08006c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d056      	beq.n	8006cec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c3e:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <xTaskPriorityDisinherit+0xd0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d00a      	beq.n	8006c5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60fb      	str	r3, [r7, #12]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60bb      	str	r3, [r7, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d02c      	beq.n	8006cec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d128      	bne.n	8006cec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fbfe 	bl	80054a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <xTaskPriorityDisinherit+0xd4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d903      	bls.n	8006ccc <xTaskPriorityDisinherit+0xa4>
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <xTaskPriorityDisinherit+0xd4>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <xTaskPriorityDisinherit+0xd8>)
 8006cda:	441a      	add	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f7fe fb7f 	bl	80053e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cec:	697b      	ldr	r3, [r7, #20]
	}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000eec 	.word	0x20000eec
 8006cfc:	200013c8 	.word	0x200013c8
 8006d00:	20000ef0 	.word	0x20000ef0

08006d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d0e:	4b21      	ldr	r3, [pc, #132]	; (8006d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d14:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fbc0 	bl	80054a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d26:	d10a      	bne.n	8006d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4619      	mov	r1, r3
 8006d36:	4819      	ldr	r0, [pc, #100]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8006d38:	f7fe fb55 	bl	80053e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d3c:	e026      	b.n	8006d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4413      	add	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d209      	bcs.n	8006d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d56:	4b12      	ldr	r3, [pc, #72]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f7fe fb63 	bl	800542e <vListInsert>
}
 8006d68:	e010      	b.n	8006d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4619      	mov	r1, r3
 8006d76:	4610      	mov	r0, r2
 8006d78:	f7fe fb59 	bl	800542e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d202      	bcs.n	8006d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d86:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6013      	str	r3, [r2, #0]
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200013c4 	.word	0x200013c4
 8006d98:	20000eec 	.word	0x20000eec
 8006d9c:	200013ac 	.word	0x200013ac
 8006da0:	2000137c 	.word	0x2000137c
 8006da4:	20001378 	.word	0x20001378
 8006da8:	200013e0 	.word	0x200013e0

08006dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006db6:	f000 fb07 	bl	80073c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dba:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <xTimerCreateTimerTask+0x80>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d021      	beq.n	8006e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dca:	1d3a      	adds	r2, r7, #4
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	f107 030c 	add.w	r3, r7, #12
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fabf 	bl	8005358 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	9202      	str	r2, [sp, #8]
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	2302      	movs	r3, #2
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	460a      	mov	r2, r1
 8006dec:	4910      	ldr	r1, [pc, #64]	; (8006e30 <xTimerCreateTimerTask+0x84>)
 8006dee:	4811      	ldr	r0, [pc, #68]	; (8006e34 <xTimerCreateTimerTask+0x88>)
 8006df0:	f7ff f86c 	bl	8005ecc <xTaskCreateStatic>
 8006df4:	4603      	mov	r3, r0
 8006df6:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <xTimerCreateTimerTask+0x8c>)
 8006df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <xTimerCreateTimerTask+0x8c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e02:	2301      	movs	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	613b      	str	r3, [r7, #16]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e22:	697b      	ldr	r3, [r7, #20]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000141c 	.word	0x2000141c
 8006e30:	08007d90 	.word	0x08007d90
 8006e34:	08006f71 	.word	0x08006f71
 8006e38:	20001420 	.word	0x20001420

08006e3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	623b      	str	r3, [r7, #32]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <xTimerGenericCommand+0x98>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d02a      	beq.n	8006ec8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	dc18      	bgt.n	8006eb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e84:	f7ff feb2 	bl	8006bec <xTaskGetSchedulerState>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d109      	bne.n	8006ea2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <xTimerGenericCommand+0x98>)
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	f107 0110 	add.w	r1, r7, #16
 8006e96:	2300      	movs	r3, #0
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	f7fe fc2f 	bl	80056fc <xQueueGenericSend>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006ea0:	e012      	b.n	8006ec8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <xTimerGenericCommand+0x98>)
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f107 0110 	add.w	r1, r7, #16
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	f7fe fc25 	bl	80056fc <xQueueGenericSend>
 8006eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8006eb4:	e008      	b.n	8006ec8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <xTimerGenericCommand+0x98>)
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f107 0110 	add.w	r1, r7, #16
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	f7fe fd19 	bl	80058f8 <xQueueGenericSendFromISR>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3728      	adds	r7, #40	; 0x28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000141c 	.word	0x2000141c

08006ed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <prvProcessExpiredTimer+0x94>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fad5 	bl	80054a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d022      	beq.n	8006f4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	18d1      	adds	r1, r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	6978      	ldr	r0, [r7, #20]
 8006f12:	f000 f8d1 	bl	80070b8 <prvInsertTimerInActiveList>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01f      	beq.n	8006f5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	2100      	movs	r1, #0
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f7ff ff88 	bl	8006e3c <xTimerGenericCommand>
 8006f2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d113      	bne.n	8006f5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	60fb      	str	r3, [r7, #12]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	6978      	ldr	r0, [r7, #20]
 8006f62:	4798      	blx	r3
}
 8006f64:	bf00      	nop
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20001414 	.word	0x20001414

08006f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f78:	f107 0308 	add.w	r3, r7, #8
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f857 	bl	8007030 <prvGetNextExpireTime>
 8006f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f803 	bl	8006f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f8e:	f000 f8d5 	bl	800713c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f92:	e7f1      	b.n	8006f78 <prvTimerTask+0x8>

08006f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f9e:	f7ff fa43 	bl	8006428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f866 	bl	8007078 <prvSampleTimeNow>
 8006fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d130      	bne.n	8007016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10a      	bne.n	8006fd0 <prvProcessTimerOrBlockTask+0x3c>
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d806      	bhi.n	8006fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fc2:	f7ff fa3f 	bl	8006444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff85 	bl	8006ed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fce:	e024      	b.n	800701a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d008      	beq.n	8006fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fd6:	4b13      	ldr	r3, [pc, #76]	; (8007024 <prvProcessTimerOrBlockTask+0x90>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <prvProcessTimerOrBlockTask+0x50>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <prvProcessTimerOrBlockTask+0x52>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <prvProcessTimerOrBlockTask+0x94>)
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f7fe ff35 	bl	8005e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ffa:	f7ff fa23 	bl	8006444 <xTaskResumeAll>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <prvProcessTimerOrBlockTask+0x98>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
}
 8007014:	e001      	b.n	800701a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007016:	f7ff fa15 	bl	8006444 <xTaskResumeAll>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20001418 	.word	0x20001418
 8007028:	2000141c 	.word	0x2000141c
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <prvGetNextExpireTime+0x44>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <prvGetNextExpireTime+0x16>
 8007042:	2201      	movs	r2, #1
 8007044:	e000      	b.n	8007048 <prvGetNextExpireTime+0x18>
 8007046:	2200      	movs	r2, #0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <prvGetNextExpireTime+0x44>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e001      	b.n	8007064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007064:	68fb      	ldr	r3, [r7, #12]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20001414 	.word	0x20001414

08007078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007080:	f7ff fa7e 	bl	8006580 <xTaskGetTickCount>
 8007084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <prvSampleTimeNow+0x3c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d205      	bcs.n	800709c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007090:	f000 f936 	bl	8007300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e002      	b.n	80070a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070a2:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <prvSampleTimeNow+0x3c>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20001424 	.word	0x20001424

080070b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d812      	bhi.n	8007104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	e01b      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <prvInsertTimerInActiveList+0x7c>)
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f7fe f996 	bl	800542e <vListInsert>
 8007102:	e012      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d206      	bcs.n	800711a <prvInsertTimerInActiveList+0x62>
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d302      	bcc.n	800711a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e007      	b.n	800712a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <prvInsertTimerInActiveList+0x80>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f7fe f982 	bl	800542e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20001418 	.word	0x20001418
 8007138:	20001414 	.word	0x20001414

0800713c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007142:	e0ca      	b.n	80072da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da18      	bge.n	800717c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800714a:	1d3b      	adds	r3, r7, #4
 800714c:	3304      	adds	r3, #4
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	61fb      	str	r3, [r7, #28]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007172:	6850      	ldr	r0, [r2, #4]
 8007174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007176:	6892      	ldr	r2, [r2, #8]
 8007178:	4611      	mov	r1, r2
 800717a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f2c0 80aa 	blt.w	80072d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe f983 	bl	80054a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800719a:	463b      	mov	r3, r7
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ff6b 	bl	8007078 <prvSampleTimeNow>
 80071a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	f200 8097 	bhi.w	80072da <prvProcessReceivedCommands+0x19e>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <prvProcessReceivedCommands+0x78>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	08007251 	.word	0x08007251
 80071c4:	08007265 	.word	0x08007265
 80071c8:	080072af 	.word	0x080072af
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071dd 	.word	0x080071dd
 80071d4:	08007251 	.word	0x08007251
 80071d8:	08007265 	.word	0x08007265
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	18d1      	adds	r1, r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fc:	f7ff ff5c 	bl	80070b8 <prvInsertTimerInActiveList>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d069      	beq.n	80072da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05e      	beq.n	80072da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	441a      	add	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	f7ff fe05 	bl	8006e3c <xTimerGenericCommand>
 8007232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d14f      	bne.n	80072da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	61bb      	str	r3, [r7, #24]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007262:	e03a      	b.n	80072da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726a:	f043 0301 	orr.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	617b      	str	r3, [r7, #20]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	18d1      	adds	r1, r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a8:	f7ff ff06 	bl	80070b8 <prvInsertTimerInActiveList>
					break;
 80072ac:	e015      	b.n	80072da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80072bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072be:	f000 fbdf 	bl	8007a80 <vPortFree>
 80072c2:	e00a      	b.n	80072da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072d6:	e000      	b.n	80072da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80072d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072da:	4b08      	ldr	r3, [pc, #32]	; (80072fc <prvProcessReceivedCommands+0x1c0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	1d39      	adds	r1, r7, #4
 80072e0:	2200      	movs	r2, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fba4 	bl	8005a30 <xQueueReceive>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f47f af2a 	bne.w	8007144 <prvProcessReceivedCommands+0x8>
	}
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3730      	adds	r7, #48	; 0x30
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	2000141c 	.word	0x2000141c

08007300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007306:	e048      	b.n	800739a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007308:	4b2d      	ldr	r3, [pc, #180]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe f8bd 	bl	80054a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02e      	beq.n	800739a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d90e      	bls.n	800736c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800735a:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fe f862 	bl	800542e <vListInsert>
 800736a:	e016      	b.n	800739a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800736c:	2300      	movs	r3, #0
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	2300      	movs	r3, #0
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	2100      	movs	r1, #0
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fd60 	bl	8006e3c <xTimerGenericCommand>
 800737c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	603b      	str	r3, [r7, #0]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1b1      	bne.n	8007308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073aa:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <prvSwitchTimerLists+0xc4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a04      	ldr	r2, [pc, #16]	; (80073c0 <prvSwitchTimerLists+0xc0>)
 80073b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <prvSwitchTimerLists+0xc4>)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6013      	str	r3, [r2, #0]
}
 80073b8:	bf00      	nop
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20001414 	.word	0x20001414
 80073c4:	20001418 	.word	0x20001418

080073c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073ce:	f000 f969 	bl	80076a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <prvCheckForValidListAndQueue+0x60>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d120      	bne.n	800741c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073da:	4814      	ldr	r0, [pc, #80]	; (800742c <prvCheckForValidListAndQueue+0x64>)
 80073dc:	f7fd ffd6 	bl	800538c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073e0:	4813      	ldr	r0, [pc, #76]	; (8007430 <prvCheckForValidListAndQueue+0x68>)
 80073e2:	f7fd ffd3 	bl	800538c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <prvCheckForValidListAndQueue+0x6c>)
 80073e8:	4a10      	ldr	r2, [pc, #64]	; (800742c <prvCheckForValidListAndQueue+0x64>)
 80073ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073ec:	4b12      	ldr	r3, [pc, #72]	; (8007438 <prvCheckForValidListAndQueue+0x70>)
 80073ee:	4a10      	ldr	r2, [pc, #64]	; (8007430 <prvCheckForValidListAndQueue+0x68>)
 80073f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <prvCheckForValidListAndQueue+0x74>)
 80073f8:	4a11      	ldr	r2, [pc, #68]	; (8007440 <prvCheckForValidListAndQueue+0x78>)
 80073fa:	2110      	movs	r1, #16
 80073fc:	200a      	movs	r0, #10
 80073fe:	f7fe f8e1 	bl	80055c4 <xQueueGenericCreateStatic>
 8007402:	4603      	mov	r3, r0
 8007404:	4a08      	ldr	r2, [pc, #32]	; (8007428 <prvCheckForValidListAndQueue+0x60>)
 8007406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <prvCheckForValidListAndQueue+0x60>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <prvCheckForValidListAndQueue+0x60>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	490b      	ldr	r1, [pc, #44]	; (8007444 <prvCheckForValidListAndQueue+0x7c>)
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fcfa 	bl	8005e10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800741c:	f000 f972 	bl	8007704 <vPortExitCritical>
}
 8007420:	bf00      	nop
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	2000141c 	.word	0x2000141c
 800742c:	200013ec 	.word	0x200013ec
 8007430:	20001400 	.word	0x20001400
 8007434:	20001414 	.word	0x20001414
 8007438:	20001418 	.word	0x20001418
 800743c:	200014c8 	.word	0x200014c8
 8007440:	20001428 	.word	0x20001428
 8007444:	08007d98 	.word	0x08007d98

08007448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3b04      	subs	r3, #4
 8007458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3b04      	subs	r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f023 0201 	bic.w	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3b04      	subs	r3, #4
 8007476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007478:	4a0c      	ldr	r2, [pc, #48]	; (80074ac <pxPortInitialiseStack+0x64>)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3b14      	subs	r3, #20
 8007482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3b04      	subs	r3, #4
 800748e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f06f 0202 	mvn.w	r2, #2
 8007496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b20      	subs	r3, #32
 800749c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	080074b1 	.word	0x080074b1

080074b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <prvTaskExitError+0x54>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c2:	d00a      	beq.n	80074da <prvTaskExitError+0x2a>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <prvTaskExitError+0x28>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60bb      	str	r3, [r7, #8]
}
 80074ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074ee:	bf00      	nop
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0fc      	beq.n	80074f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	2000000c 	.word	0x2000000c
	...

08007510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007510:	4b07      	ldr	r3, [pc, #28]	; (8007530 <pxCurrentTCBConst2>)
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	6808      	ldr	r0, [r1, #0]
 8007516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	f380 8809 	msr	PSP, r0
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8811 	msr	BASEPRI, r0
 800752a:	4770      	bx	lr
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst2>:
 8007530:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007538:	4808      	ldr	r0, [pc, #32]	; (800755c <prvPortStartFirstTask+0x24>)
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	6800      	ldr	r0, [r0, #0]
 800753e:	f380 8808 	msr	MSP, r0
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8814 	msr	CONTROL, r0
 800754a:	b662      	cpsie	i
 800754c:	b661      	cpsie	f
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	df00      	svc	0
 8007558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800755a:	bf00      	nop
 800755c:	e000ed08 	.word	0xe000ed08

08007560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007566:	4b46      	ldr	r3, [pc, #280]	; (8007680 <xPortStartScheduler+0x120>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a46      	ldr	r2, [pc, #280]	; (8007684 <xPortStartScheduler+0x124>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d10a      	bne.n	8007586 <xPortStartScheduler+0x26>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007586:	4b3e      	ldr	r3, [pc, #248]	; (8007680 <xPortStartScheduler+0x120>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <xPortStartScheduler+0x128>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60fb      	str	r3, [r7, #12]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075a6:	4b39      	ldr	r3, [pc, #228]	; (800768c <xPortStartScheduler+0x12c>)
 80075a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	22ff      	movs	r2, #255	; 0xff
 80075b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	4b31      	ldr	r3, [pc, #196]	; (8007690 <xPortStartScheduler+0x130>)
 80075cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ce:	4b31      	ldr	r3, [pc, #196]	; (8007694 <xPortStartScheduler+0x134>)
 80075d0:	2207      	movs	r2, #7
 80075d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d4:	e009      	b.n	80075ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3b01      	subs	r3, #1
 80075dc:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <xPortStartScheduler+0x134>)
 80075de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d0ef      	beq.n	80075d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <xPortStartScheduler+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1c3 0307 	rsb	r3, r3, #7
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d00a      	beq.n	8007618 <xPortStartScheduler+0xb8>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <xPortStartScheduler+0x134>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <xPortStartScheduler+0x134>)
 8007620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <xPortStartScheduler+0x134>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <xPortStartScheduler+0x134>)
 800762c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007636:	4b18      	ldr	r3, [pc, #96]	; (8007698 <xPortStartScheduler+0x138>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <xPortStartScheduler+0x138>)
 800763c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <xPortStartScheduler+0x138>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a14      	ldr	r2, [pc, #80]	; (8007698 <xPortStartScheduler+0x138>)
 8007648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800764c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800764e:	f000 f8dd 	bl	800780c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <xPortStartScheduler+0x13c>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007658:	f000 f8fc 	bl	8007854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800765c:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <xPortStartScheduler+0x140>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a0f      	ldr	r2, [pc, #60]	; (80076a0 <xPortStartScheduler+0x140>)
 8007662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007668:	f7ff ff66 	bl	8007538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800766c:	f7ff f852 	bl	8006714 <vTaskSwitchContext>
	prvTaskExitError();
 8007670:	f7ff ff1e 	bl	80074b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	e000ed00 	.word	0xe000ed00
 8007684:	410fc271 	.word	0x410fc271
 8007688:	410fc270 	.word	0x410fc270
 800768c:	e000e400 	.word	0xe000e400
 8007690:	20001518 	.word	0x20001518
 8007694:	2000151c 	.word	0x2000151c
 8007698:	e000ed20 	.word	0xe000ed20
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	e000ef34 	.word	0xe000ef34

080076a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	607b      	str	r3, [r7, #4]
}
 80076bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <vPortEnterCritical+0x58>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <vPortEnterCritical+0x58>)
 80076c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <vPortEnterCritical+0x58>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10f      	bne.n	80076f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <vPortEnterCritical+0x5c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	603b      	str	r3, [r7, #0]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <vPortEnterCritical+0x4a>
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000000c 	.word	0x2000000c
 8007700:	e000ed04 	.word	0xe000ed04

08007704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <vPortExitCritical+0x50>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <vPortExitCritical+0x24>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	607b      	str	r3, [r7, #4]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <vPortExitCritical+0x50>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3b01      	subs	r3, #1
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <vPortExitCritical+0x50>)
 8007730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007732:	4b08      	ldr	r3, [pc, #32]	; (8007754 <vPortExitCritical+0x50>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <vPortExitCritical+0x42>
 800773a:	2300      	movs	r3, #0
 800773c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f383 8811 	msr	BASEPRI, r3
}
 8007744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
	...

08007760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007760:	f3ef 8009 	mrs	r0, PSP
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <pxCurrentTCBConst>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	f01e 0f10 	tst.w	lr, #16
 8007770:	bf08      	it	eq
 8007772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	6010      	str	r0, [r2, #0]
 800777c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007784:	f380 8811 	msr	BASEPRI, r0
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f7fe ffc0 	bl	8006714 <vTaskSwitchContext>
 8007794:	f04f 0000 	mov.w	r0, #0
 8007798:	f380 8811 	msr	BASEPRI, r0
 800779c:	bc09      	pop	{r0, r3}
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	6808      	ldr	r0, [r1, #0]
 80077a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a6:	f01e 0f10 	tst.w	lr, #16
 80077aa:	bf08      	it	eq
 80077ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077b0:	f380 8809 	msr	PSP, r0
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst>:
 80077c0:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077e2:	f7fe fedd 	bl	80065a0 <xTaskIncrementTick>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <xPortSysTickHandler+0x40>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	2300      	movs	r3, #0
 80077f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	f383 8811 	msr	BASEPRI, r3
}
 80077fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <vPortSetupTimerInterrupt+0x38>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <vPortSetupTimerInterrupt+0x3c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <vPortSetupTimerInterrupt+0x40>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <vPortSetupTimerInterrupt+0x44>)
 800782a:	3b01      	subs	r3, #1
 800782c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800782e:	4b04      	ldr	r3, [pc, #16]	; (8007840 <vPortSetupTimerInterrupt+0x34>)
 8007830:	2207      	movs	r2, #7
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	e000e010 	.word	0xe000e010
 8007844:	e000e018 	.word	0xe000e018
 8007848:	20000000 	.word	0x20000000
 800784c:	10624dd3 	.word	0x10624dd3
 8007850:	e000e014 	.word	0xe000e014

08007854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007864 <vPortEnableVFP+0x10>
 8007858:	6801      	ldr	r1, [r0, #0]
 800785a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800785e:	6001      	str	r1, [r0, #0]
 8007860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007862:	bf00      	nop
 8007864:	e000ed88 	.word	0xe000ed88

08007868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800786e:	f3ef 8305 	mrs	r3, IPSR
 8007872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d914      	bls.n	80078a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <vPortValidateInterruptPriority+0x70>)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007884:	4b15      	ldr	r3, [pc, #84]	; (80078dc <vPortValidateInterruptPriority+0x74>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	7afa      	ldrb	r2, [r7, #11]
 800788a:	429a      	cmp	r2, r3
 800788c:	d20a      	bcs.n	80078a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <vPortValidateInterruptPriority+0x78>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078ac:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <vPortValidateInterruptPriority+0x7c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d90a      	bls.n	80078ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	603b      	str	r3, [r7, #0]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <vPortValidateInterruptPriority+0x60>
	}
 80078ca:	bf00      	nop
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	e000e3f0 	.word	0xe000e3f0
 80078dc:	20001518 	.word	0x20001518
 80078e0:	e000ed0c 	.word	0xe000ed0c
 80078e4:	2000151c 	.word	0x2000151c

080078e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078f4:	f7fe fd98 	bl	8006428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078f8:	4b5b      	ldr	r3, [pc, #364]	; (8007a68 <pvPortMalloc+0x180>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007900:	f000 f920 	bl	8007b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007904:	4b59      	ldr	r3, [pc, #356]	; (8007a6c <pvPortMalloc+0x184>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 8093 	bne.w	8007a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01d      	beq.n	8007954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007918:	2208      	movs	r2, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	2b00      	cmp	r3, #0
 8007928:	d014      	beq.n	8007954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f023 0307 	bic.w	r3, r3, #7
 8007930:	3308      	adds	r3, #8
 8007932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <pvPortMalloc+0x6c>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	617b      	str	r3, [r7, #20]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d06e      	beq.n	8007a38 <pvPortMalloc+0x150>
 800795a:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <pvPortMalloc+0x188>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d869      	bhi.n	8007a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007964:	4b43      	ldr	r3, [pc, #268]	; (8007a74 <pvPortMalloc+0x18c>)
 8007966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007968:	4b42      	ldr	r3, [pc, #264]	; (8007a74 <pvPortMalloc+0x18c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800796e:	e004      	b.n	800797a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <pvPortMalloc+0xa4>
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f1      	bne.n	8007970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <pvPortMalloc+0x180>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	429a      	cmp	r2, r3
 8007994:	d050      	beq.n	8007a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2208      	movs	r2, #8
 800799c:	4413      	add	r3, r2
 800799e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	2308      	movs	r3, #8
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d91f      	bls.n	80079f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <pvPortMalloc+0xf8>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	613b      	str	r3, [r7, #16]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079f2:	69b8      	ldr	r0, [r7, #24]
 80079f4:	f000 f908 	bl	8007c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079f8:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <pvPortMalloc+0x188>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <pvPortMalloc+0x188>)
 8007a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a06:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <pvPortMalloc+0x188>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <pvPortMalloc+0x190>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d203      	bcs.n	8007a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a12:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <pvPortMalloc+0x188>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <pvPortMalloc+0x190>)
 8007a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <pvPortMalloc+0x184>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a2e:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <pvPortMalloc+0x194>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	4a11      	ldr	r2, [pc, #68]	; (8007a7c <pvPortMalloc+0x194>)
 8007a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a38:	f7fe fd04 	bl	8006444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0307 	and.w	r3, r3, #7
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <pvPortMalloc+0x174>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60fb      	str	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <pvPortMalloc+0x172>
	return pvReturn;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3728      	adds	r7, #40	; 0x28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	200020e0 	.word	0x200020e0
 8007a6c:	200020f4 	.word	0x200020f4
 8007a70:	200020e4 	.word	0x200020e4
 8007a74:	200020d8 	.word	0x200020d8
 8007a78:	200020e8 	.word	0x200020e8
 8007a7c:	200020ec 	.word	0x200020ec

08007a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04d      	beq.n	8007b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a92:	2308      	movs	r3, #8
 8007a94:	425b      	negs	r3, r3
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <vPortFree+0xb8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <vPortFree+0x44>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60fb      	str	r3, [r7, #12]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <vPortFree+0x62>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60bb      	str	r3, [r7, #8]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <vPortFree+0xb8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01e      	beq.n	8007b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d11a      	bne.n	8007b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <vPortFree+0xb8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	401a      	ands	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b08:	f7fe fc8e 	bl	8006428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <vPortFree+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4413      	add	r3, r2
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <vPortFree+0xbc>)
 8007b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f000 f874 	bl	8007c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <vPortFree+0xc0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a06      	ldr	r2, [pc, #24]	; (8007b40 <vPortFree+0xc0>)
 8007b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b2a:	f7fe fc8b 	bl	8006444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b2e:	bf00      	nop
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200020f4 	.word	0x200020f4
 8007b3c:	200020e4 	.word	0x200020e4
 8007b40:	200020f0 	.word	0x200020f0

08007b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b50:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <prvHeapInit+0xac>)
 8007b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3307      	adds	r3, #7
 8007b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	4a1f      	ldr	r2, [pc, #124]	; (8007bf0 <prvHeapInit+0xac>)
 8007b74:	4413      	add	r3, r2
 8007b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <prvHeapInit+0xb0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b90:	2208      	movs	r2, #8
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <prvHeapInit+0xb4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <prvHeapInit+0xb4>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <prvHeapInit+0xb8>)
 8007bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <prvHeapInit+0xbc>)
 8007bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <prvHeapInit+0xc0>)
 8007bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20001520 	.word	0x20001520
 8007bf4:	200020d8 	.word	0x200020d8
 8007bf8:	200020e0 	.word	0x200020e0
 8007bfc:	200020e8 	.word	0x200020e8
 8007c00:	200020e4 	.word	0x200020e4
 8007c04:	200020f4 	.word	0x200020f4

08007c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <prvInsertBlockIntoFreeList+0xac>)
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <prvInsertBlockIntoFreeList+0x14>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d8f7      	bhi.n	8007c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d108      	bne.n	8007c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d118      	bne.n	8007c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d00d      	beq.n	8007c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	441a      	add	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e008      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e003      	b.n	8007c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d002      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	200020d8 	.word	0x200020d8
 8007cb8:	200020e0 	.word	0x200020e0

08007cbc <__libc_init_array>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	4d0d      	ldr	r5, [pc, #52]	; (8007cf4 <__libc_init_array+0x38>)
 8007cc0:	4c0d      	ldr	r4, [pc, #52]	; (8007cf8 <__libc_init_array+0x3c>)
 8007cc2:	1b64      	subs	r4, r4, r5
 8007cc4:	10a4      	asrs	r4, r4, #2
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	42a6      	cmp	r6, r4
 8007cca:	d109      	bne.n	8007ce0 <__libc_init_array+0x24>
 8007ccc:	4d0b      	ldr	r5, [pc, #44]	; (8007cfc <__libc_init_array+0x40>)
 8007cce:	4c0c      	ldr	r4, [pc, #48]	; (8007d00 <__libc_init_array+0x44>)
 8007cd0:	f000 f82e 	bl	8007d30 <_init>
 8007cd4:	1b64      	subs	r4, r4, r5
 8007cd6:	10a4      	asrs	r4, r4, #2
 8007cd8:	2600      	movs	r6, #0
 8007cda:	42a6      	cmp	r6, r4
 8007cdc:	d105      	bne.n	8007cea <__libc_init_array+0x2e>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce4:	4798      	blx	r3
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__libc_init_array+0xc>
 8007cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cee:	4798      	blx	r3
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	e7f2      	b.n	8007cda <__libc_init_array+0x1e>
 8007cf4:	08007e14 	.word	0x08007e14
 8007cf8:	08007e14 	.word	0x08007e14
 8007cfc:	08007e14 	.word	0x08007e14
 8007d00:	08007e18 	.word	0x08007e18

08007d04 <memcpy>:
 8007d04:	440a      	add	r2, r1
 8007d06:	4291      	cmp	r1, r2
 8007d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d0c:	d100      	bne.n	8007d10 <memcpy+0xc>
 8007d0e:	4770      	bx	lr
 8007d10:	b510      	push	{r4, lr}
 8007d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	d1f9      	bne.n	8007d12 <memcpy+0xe>
 8007d1e:	bd10      	pop	{r4, pc}

08007d20 <memset>:
 8007d20:	4402      	add	r2, r0
 8007d22:	4603      	mov	r3, r0
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d100      	bne.n	8007d2a <memset+0xa>
 8007d28:	4770      	bx	lr
 8007d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2e:	e7f9      	b.n	8007d24 <memset+0x4>

08007d30 <_init>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr

08007d3c <_fini>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

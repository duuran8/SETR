
Practica2-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dac  08007dac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db4  08007db4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08007dcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08007dcc  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002853b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afd  00000000  00000000  0004857b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  0004d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002188  00000000  00000000  0004f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000504e  00000000  00000000  00051560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e13  00000000  00000000  000565ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b27  00000000  00000000  0007e3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185ee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009874  00000000  00000000  00185f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cd0 	.word	0x08007cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007cd0 	.word	0x08007cd0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <led_toggle>:
 *      Author: julianduran
 */
#include "led_toggle.h"


void led_toggle(uint8_t led) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	switch (led) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d82c      	bhi.n	800053e <led_toggle+0x6a>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <led_toggle+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	08000529 	.word	0x08000529
 80004f8:	08000535 	.word	0x08000535
		case 0:
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <led_toggle+0x74>)
 8000502:	f001 fbdf 	bl	8001cc4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <led_toggle+0x78>)
 800050c:	f001 fbda 	bl	8001cc4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fbd5 	bl	8001cc4 <HAL_GPIO_TogglePin>
		}	break;
 800051a:	e011      	b.n	8000540 <led_toggle+0x6c>
		case 1:
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <led_toggle+0x74>)
 8000522:	f001 fbcf 	bl	8001cc4 <HAL_GPIO_TogglePin>
			break;
 8000526:	e00b      	b.n	8000540 <led_toggle+0x6c>
		case 2:
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <led_toggle+0x78>)
 800052e:	f001 fbc9 	bl	8001cc4 <HAL_GPIO_TogglePin>
			break;
 8000532:	e005      	b.n	8000540 <led_toggle+0x6c>
		case 3:
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f001 fbc3 	bl	8001cc4 <HAL_GPIO_TogglePin>
		default:
			break;
 800053e:	bf00      	nop
		}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	48000400 	.word	0x48000400
 800054c:	48000800 	.word	0x48000800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 ffa8 	bl	80014aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f829 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f9f1 	bl	8000944 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000562:	f000 f887 	bl	8000674 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000566:	f000 f8bd 	bl	80006e4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800056a:	f000 f8f9 	bl	8000760 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800056e:	f000 f91d 	bl	80007ac <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000572:	f000 f959 	bl	8000828 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f987 	bl	8000888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 f9b5 	bl	80008e8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057e:	f004 fdad 	bl	80050dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <main+0x54>)
 8000584:	2100      	movs	r1, #0
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <main+0x58>)
 8000588:	f004 fdf2 	bl	8005170 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <main+0x5c>)
 8000590:	6013      	str	r3, [r2, #0]
  //CreateLedTask();
  int param=0;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
  CreateLedTaskChain(param);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 ff22 	bl	80013e0 <CreateLedTaskChain>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f004 fdc2 	bl	8005124 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x50>
 80005a2:	bf00      	nop
 80005a4:	08007d40 	.word	0x08007d40
 80005a8:	08000ca9 	.word	0x08000ca9
 80005ac:	20000774 	.word	0x20000774

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fb7e 	bl	8007cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 fe3f 	bl	8002258 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 fb7c 	bl	8000cdc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e4:	f001 fe1a 	bl	800221c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xc0>)
 80005ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ee:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xc0>)
 80005f0:	f023 0318 	bic.w	r3, r3, #24
 80005f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2314      	movs	r3, #20
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000618:	2328      	movs	r3, #40	; 0x28
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff35 	bl	800249c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000638:	f000 fb50 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2104      	movs	r1, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fafd 	bl	8002c54 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000660:	f000 fb3c 	bl	8000cdc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000664:	f003 f836 	bl	80036d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_DFSDM1_Init+0x68>)
 800067a:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <MX_DFSDM1_Init+0x6c>)
 800067c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_DFSDM1_Init+0x68>)
 8000680:	2201      	movs	r2, #1
 8000682:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_DFSDM1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_DFSDM1_Init+0x68>)
 800068c:	2202      	movs	r2, #2
 800068e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_DFSDM1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_DFSDM1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_DFSDM1_Init+0x68>)
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_DFSDM1_Init+0x68>)
 80006ca:	f001 f82d 	bl	8001728 <HAL_DFSDM_ChannelInit>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006d4:	f000 fb02 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	40016020 	.word	0x40016020

080006e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_I2C2_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <MX_I2C2_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006f4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_I2C2_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_I2C2_Init+0x74>)
 80006fe:	2201      	movs	r2, #1
 8000700:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_I2C2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_I2C2_Init+0x74>)
 8000722:	f001 fb0c 	bl	8001d3e <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 fad6 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <MX_I2C2_Init+0x74>)
 8000734:	f001 fb92 	bl	8001e5c <HAL_I2CEx_ConfigAnalogFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 facd 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C2_Init+0x74>)
 8000746:	f001 fbd4 	bl	8001ef2 <HAL_I2CEx_ConfigDigitalFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 fac4 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000064 	.word	0x20000064
 800075c:	40005800 	.word	0x40005800

08000760 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_QUADSPI_Init+0x48>)
 8000768:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 8000772:	2204      	movs	r2, #4
 8000774:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 8000778:	2210      	movs	r2, #16
 800077a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 800077e:	2217      	movs	r2, #23
 8000780:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_QUADSPI_Init+0x44>)
 8000790:	f001 fdc8 	bl	8002324 <HAL_QSPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800079a:	f000 fa9f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000b8 	.word	0x200000b8
 80007a8:	a0001000 	.word	0xa0001000

080007ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_SPI3_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_SPI3_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_SPI3_Init+0x74>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI3_Init+0x74>)
 80007c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_SPI3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI3_Init+0x74>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI3_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI3_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SPI3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI3_Init+0x74>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI3_Init+0x74>)
 8000806:	2208      	movs	r2, #8
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_SPI3_Init+0x74>)
 800080c:	f003 f944 	bl	8003a98 <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fa61 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000fc 	.word	0x200000fc
 8000824:	40003c00 	.word	0x40003c00

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART1_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800086c:	f003 fc88 	bl	8004180 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 fa31 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000160 	.word	0x20000160
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART3_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART3_UART_Init+0x58>)
 80008cc:	f003 fc58 	bl	8004180 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 fa01 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001e4 	.word	0x200001e4
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2206      	movs	r2, #6
 80008f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2202      	movs	r2, #2
 8000904:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	f001 fb2d 	bl	8001f8a <HAL_PCD_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f9d1 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000268 	.word	0x20000268

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	4bbd      	ldr	r3, [pc, #756]	; (8000c50 <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4abc      	ldr	r2, [pc, #752]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4bba      	ldr	r3, [pc, #744]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4bb7      	ldr	r3, [pc, #732]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4ab6      	ldr	r2, [pc, #728]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4bb4      	ldr	r3, [pc, #720]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4bb1      	ldr	r3, [pc, #708]	; (8000c50 <MX_GPIO_Init+0x30c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4ab0      	ldr	r2, [pc, #704]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4bae      	ldr	r3, [pc, #696]	; (8000c50 <MX_GPIO_Init+0x30c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4bab      	ldr	r3, [pc, #684]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4aaa      	ldr	r2, [pc, #680]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4ba8      	ldr	r3, [pc, #672]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4ba5      	ldr	r3, [pc, #660]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4aa4      	ldr	r2, [pc, #656]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4ba2      	ldr	r3, [pc, #648]	; (8000c50 <MX_GPIO_Init+0x30c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009d8:	489e      	ldr	r0, [pc, #632]	; (8000c54 <MX_GPIO_Init+0x310>)
 80009da:	f001 f95b 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f248 1124 	movw	r1, #33060	; 0x8124
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 f954 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009ec:	2200      	movs	r2, #0
 80009ee:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009f2:	4899      	ldr	r0, [pc, #612]	; (8000c58 <MX_GPIO_Init+0x314>)
 80009f4:	f001 f94e 	bl	8001c94 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f241 0181 	movw	r1, #4225	; 0x1081
 80009fe:	4897      	ldr	r0, [pc, #604]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000a00:	f001 f948 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0a:	4894      	ldr	r0, [pc, #592]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000a0c:	f001 f942 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a16:	4892      	ldr	r0, [pc, #584]	; (8000c60 <MX_GPIO_Init+0x31c>)
 8000a18:	f001 f93c 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	488d      	ldr	r0, [pc, #564]	; (8000c58 <MX_GPIO_Init+0x314>)
 8000a22:	f001 f937 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2101      	movs	r1, #1
 8000a2a:	488a      	ldr	r0, [pc, #552]	; (8000c54 <MX_GPIO_Init+0x310>)
 8000a2c:	f001 f932 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a30:	f240 1315 	movw	r3, #277	; 0x115
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4882      	ldr	r0, [pc, #520]	; (8000c54 <MX_GPIO_Init+0x310>)
 8000a4a:	f000 ff79 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a4e:	236a      	movs	r3, #106	; 0x6a
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	487c      	ldr	r0, [pc, #496]	; (8000c54 <MX_GPIO_Init+0x310>)
 8000a64:	f000 ff6c 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4878      	ldr	r0, [pc, #480]	; (8000c60 <MX_GPIO_Init+0x31c>)
 8000a80:	f000 ff5e 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a84:	233f      	movs	r3, #63	; 0x3f
 8000a86:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a88:	230b      	movs	r3, #11
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4872      	ldr	r0, [pc, #456]	; (8000c60 <MX_GPIO_Init+0x31c>)
 8000a98:	f000 ff52 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aac:	2308      	movs	r3, #8
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 ff41 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_3_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000abe:	f248 1324 	movw	r3, #33060	; 0x8124
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f000 ff31 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 ff20 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b04:	230b      	movs	r3, #11
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 ff13 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 ff02 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4841      	ldr	r0, [pc, #260]	; (8000c58 <MX_GPIO_Init+0x314>)
 8000b52:	f000 fef5 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b5a:	230b      	movs	r3, #11
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	483b      	ldr	r0, [pc, #236]	; (8000c58 <MX_GPIO_Init+0x314>)
 8000b6a:	f000 fee9 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b6e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b72:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4834      	ldr	r0, [pc, #208]	; (8000c58 <MX_GPIO_Init+0x314>)
 8000b88:	f000 feda 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b8c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b90:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482e      	ldr	r0, [pc, #184]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000ba4:	f000 fecc 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ba8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000bc2:	f000 febd 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4820      	ldr	r0, [pc, #128]	; (8000c60 <MX_GPIO_Init+0x31c>)
 8000be0:	f000 feae 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000be4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <MX_GPIO_Init+0x31c>)
 8000bfc:	f000 fea0 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c10:	2305      	movs	r3, #5
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000c1c:	f000 fe90 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c20:	2378      	movs	r3, #120	; 0x78
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_GPIO_Init+0x318>)
 8000c3c:	f000 fe80 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e00a      	b.n	8000c64 <MX_GPIO_Init+0x320>
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48001000 	.word	0x48001000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48000800 	.word	0x48000800
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_GPIO_Init+0x360>)
 8000c76:	f000 fe63 	bl	8001940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	2017      	movs	r0, #23
 8000c80:	f000 fd28 	bl	80016d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c84:	2017      	movs	r0, #23
 8000c86:	f000 fd41 	bl	800170c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2028      	movs	r0, #40	; 0x28
 8000c90:	f000 fd20 	bl	80016d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c94:	2028      	movs	r0, #40	; 0x28
 8000c96:	f000 fd39 	bl	800170c <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f004 faef 	bl	8005294 <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartDefaultTask+0x8>

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f000 fc07 	bl	80014dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40014800 	.word	0x40014800

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f000 fcd5 	bl	80016d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ac      	sub	sp, #176	; 0xb0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2288      	movs	r2, #136	; 0x88
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 ffb1 	bl	8007cc0 <memset>
  if(DFSDM1_Init == 0)
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d142      	bne.n	8000dec <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f9c2 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d82:	f7ff ffab 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000db6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dde:	f000 fdaf 	bl	8001940 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a02      	ldr	r2, [pc, #8]	; (8000df4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dea:	6013      	str	r3, [r2, #0]
  }

}
 8000dec:	bf00      	nop
 8000dee:	37b0      	adds	r7, #176	; 0xb0
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000778 	.word	0x20000778
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48001000 	.word	0x48001000

08000e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0ac      	sub	sp, #176	; 0xb0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2288      	movs	r2, #136	; 0x88
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 ff4d 	bl	8007cc0 <memset>
  if(hi2c->Instance==I2C2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_I2C_MspInit+0xb0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d13b      	bne.n	8000ea8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 f95f 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e48:	f7ff ff48 	bl	8000cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <HAL_I2C_MspInit+0xb8>)
 8000e8c:	f000 fd58 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_I2C_MspInit+0xb4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37b0      	adds	r7, #176	; 0xb0
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_QSPI_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d128      	bne.n	8000f30 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6513      	str	r3, [r2, #80]	; 0x50
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_QSPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f0e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f12:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f20:	230a      	movs	r3, #10
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_QSPI_MspInit+0x84>)
 8000f2c:	f000 fd08 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	a0001000 	.word	0xa0001000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48001000 	.word	0x48001000

08000f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_SPI_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d128      	bne.n	8000fb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_SPI_MspInit+0x80>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_SPI_MspInit+0x84>)
 8000fb4:	f000 fcc4 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40003c00 	.word	0x40003c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ae      	sub	sp, #184	; 0xb8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2288      	movs	r2, #136	; 0x88
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 fe67 	bl	8007cc0 <memset>
  if(huart->Instance==USART1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a42      	ldr	r2, [pc, #264]	; (8001100 <HAL_UART_MspInit+0x134>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13b      	bne.n	8001074 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001000:	2300      	movs	r3, #0
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f879 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001014:	f7ff fe62 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001018:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <HAL_UART_MspInit+0x138>)
 800101a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101c:	4a39      	ldr	r2, [pc, #228]	; (8001104 <HAL_UART_MspInit+0x138>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6613      	str	r3, [r2, #96]	; 0x60
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <HAL_UART_MspInit+0x138>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_UART_MspInit+0x138>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a33      	ldr	r2, [pc, #204]	; (8001104 <HAL_UART_MspInit+0x138>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_UART_MspInit+0x138>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001048:	23c0      	movs	r3, #192	; 0xc0
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106a:	4619      	mov	r1, r3
 800106c:	4826      	ldr	r0, [pc, #152]	; (8001108 <HAL_UART_MspInit+0x13c>)
 800106e:	f000 fc67 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001072:	e040      	b.n	80010f6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_UART_MspInit+0x140>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d13b      	bne.n	80010f6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800107e:	2304      	movs	r3, #4
 8001080:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001082:	2300      	movs	r3, #0
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f838 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001096:	f7ff fe21 	bl	8000cdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_UART_MspInit+0x138>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_UART_MspInit+0x138>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0x138>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0x138>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_UART_MspInit+0x138>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0x138>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_UART_MspInit+0x144>)
 80010f2:	f000 fc25 	bl	8001940 <HAL_GPIO_Init>
}
 80010f6:	bf00      	nop
 80010f8:	37b8      	adds	r7, #184	; 0xb8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40013800 	.word	0x40013800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400
 800110c:	40004800 	.word	0x40004800
 8001110:	48000c00 	.word	0x48000c00

08001114 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ac      	sub	sp, #176	; 0xb0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2288      	movs	r2, #136	; 0x88
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f006 fdc3 	bl	8007cc0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001142:	d17c      	bne.n	800123e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001148:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800114a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800114e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800115a:	2318      	movs	r3, #24
 800115c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800116a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f001 ffc3 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001180:	f7ff fdac 	bl	8000cdc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_PCD_MspInit+0x134>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800119c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 fbc1 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011d8:	230a      	movs	r3, #10
 80011da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fbaa 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_PCD_MspInit+0x134>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a15      	ldr	r2, [pc, #84]	; (8001248 <HAL_PCD_MspInit+0x134>)
 80011f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_PCD_MspInit+0x134>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d114      	bne.n	800123a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121a:	6593      	str	r3, [r2, #88]	; 0x58
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_PCD_MspInit+0x134>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001228:	f001 f86c 	bl	8002304 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_PCD_MspInit+0x134>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_PCD_MspInit+0x134>)
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001238:	e001      	b.n	800123e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800123a:	f001 f863 	bl	8002304 <HAL_PWREx_EnableVddUSB>
}
 800123e:	bf00      	nop
 8001240:	37b0      	adds	r7, #176	; 0xb0
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_InitTick+0xc8>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <HAL_InitTick+0xc8>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_InitTick+0xc8>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fead 	bl	8002fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001282:	f001 fe95 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8001286:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <HAL_InitTick+0xcc>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9b      	lsrs	r3, r3, #18
 8001292:	3b01      	subs	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_InitTick+0xd0>)
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <HAL_InitTick+0xd4>)
 800129a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_InitTick+0xd0>)
 800129e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_InitTick+0xd0>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_InitTick+0xd0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_InitTick+0xd0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_InitTick+0xd0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <HAL_InitTick+0xd0>)
 80012be:	f002 fc8e 	bl	8003bde <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d11b      	bne.n	8001308 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <HAL_InitTick+0xd0>)
 80012d2:	f002 fce5 	bl	8003ca0 <HAL_TIM_Base_Start_IT>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d111      	bne.n	8001308 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80012e4:	201a      	movs	r0, #26
 80012e6:	f000 fa11 	bl	800170c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d808      	bhi.n	8001302 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	201a      	movs	r0, #26
 80012f6:	f000 f9ed 	bl	80016d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_InitTick+0xd8>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e002      	b.n	8001308 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	431bde83 	.word	0x431bde83
 800131c:	2000077c 	.word	0x2000077c
 8001320:	40014800 	.word	0x40014800
 8001324:	20000004 	.word	0x20000004

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001358:	2020      	movs	r0, #32
 800135a:	f000 fccd 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800135e:	2040      	movs	r0, #64	; 0x40
 8001360:	f000 fcca 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	f000 fcc7 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800136a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800136e:	f000 fcc3 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800137e:	f002 fcff 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000077c 	.word	0x2000077c

0800138c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001390:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001394:	f000 fcb0 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001398:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800139c:	f000 fcac 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a4:	f000 fca8 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ac:	f000 fca4 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013b4:	f000 fca0 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <CreateLedTaskChain>:
		led_toggle(p);
		vTaskDelay(1000);
	}
}

void CreateLedTaskChain(int param){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
	xTaskCreate(LedTaskChain, "LedTaskChain", 128, param, 1, NULL);
 80013e8:	2300      	movs	r3, #0
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	4903      	ldr	r1, [pc, #12]	; (8001404 <CreateLedTaskChain+0x24>)
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <CreateLedTaskChain+0x28>)
 80013f8:	f004 fd99 	bl	8005f2e <xTaskCreate>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	08007d18 	.word	0x08007d18
 8001408:	0800140d 	.word	0x0800140d

0800140c <LedTaskChain>:

void LedTaskChain(void *pArg){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	int p = (int *) pArg;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<5;i++){
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e00b      	b.n	8001436 <LedTaskChain+0x2a>
			led_toggle(p);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f856 	bl	80004d4 <led_toggle>
			vTaskDelay(1000);
 8001428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142c:	f004 ff36 	bl	800629c <vTaskDelay>
	for(int i=0;i<5;i++){
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b04      	cmp	r3, #4
 800143a:	ddf0      	ble.n	800141e <LedTaskChain+0x12>
		}
	CreateLedTaskChain(p=p+1);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3301      	adds	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68b8      	ldr	r0, [r7, #8]
 8001444:	f7ff ffcc 	bl	80013e0 <CreateLedTaskChain>
	vTaskDelete(NULL);
 8001448:	2000      	movs	r0, #0
 800144a:	f004 feb5 	bl	80061b8 <vTaskDelete>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff ffae 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	; (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	; (80014a4 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f006 fbe9 	bl	8007c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148a:	f7ff f861 	bl	8000550 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001490:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800149c:	08007dbc 	.word	0x08007dbc
  ldr r2, =_sbss
 80014a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014a4:	200020f8 	.word	0x200020f8

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>

080014aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f902 	bl	80016be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fec6 	bl	800124c <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	e001      	b.n	80014d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014cc:	f7ff fc0c 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	200007c8 	.word	0x200007c8

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200007c8 	.word	0x200007c8

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e6:	f7ff ff61 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	6978      	ldr	r0, [r7, #20]
 80016f2:	f7ff ffb1 	bl	8001658 <NVIC_EncodePriority>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff80 	bl	8001604 <__NVIC_SetPriority>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff54 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0ac      	b.n	8001894 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f8b2 	bl	80018a8 <DFSDM_GetChannelFromInstance>
 8001744:	4603      	mov	r3, r0
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_DFSDM_ChannelInit+0x174>)
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e09f      	b.n	8001894 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff faef 	bl	8000d38 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800175a:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <HAL_DFSDM_ChannelInit+0x178>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a4f      	ldr	r2, [pc, #316]	; (80018a0 <HAL_DFSDM_ChannelInit+0x178>)
 8001762:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001764:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <HAL_DFSDM_ChannelInit+0x178>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d125      	bne.n	80017b8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800176c:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001776:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001778:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4948      	ldr	r1, [pc, #288]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800178c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001790:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	493f      	ldr	r1, [pc, #252]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a3c      	ldr	r2, [pc, #240]	; (80018a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80017b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017b6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80017c6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017d6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017dc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 020f 	bic.w	r2, r2, #15
 80017f4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800181c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6899      	ldr	r1, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f002 0207 	and.w	r2, r2, #7
 8001848:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001874:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f810 	bl	80018a8 <DFSDM_GetChannelFromInstance>
 8001888:	4602      	mov	r2, r0
 800188a:	4904      	ldr	r1, [pc, #16]	; (800189c <HAL_DFSDM_ChannelInit+0x174>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200007d0 	.word	0x200007d0
 80018a0:	200007cc 	.word	0x200007cc
 80018a4:	40016000 	.word	0x40016000

080018a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <DFSDM_GetChannelFromInstance+0x7c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e02b      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <DFSDM_GetChannelFromInstance+0x80>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e024      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <DFSDM_GetChannelFromInstance+0x84>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e01d      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <DFSDM_GetChannelFromInstance+0x88>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018e2:	2304      	movs	r3, #4
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e016      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <DFSDM_GetChannelFromInstance+0x8c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018f0:	2305      	movs	r3, #5
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e00f      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <DFSDM_GetChannelFromInstance+0x90>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018fe:	2306      	movs	r3, #6
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e008      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <DFSDM_GetChannelFromInstance+0x94>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800190c:	2307      	movs	r3, #7
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e001      	b.n	8001916 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001912:	2303      	movs	r3, #3
 8001914:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40016000 	.word	0x40016000
 8001928:	40016020 	.word	0x40016020
 800192c:	40016040 	.word	0x40016040
 8001930:	40016080 	.word	0x40016080
 8001934:	400160a0 	.word	0x400160a0
 8001938:	400160c0 	.word	0x400160c0
 800193c:	400160e0 	.word	0x400160e0

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e17f      	b.n	8001c50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8171 	beq.w	8001c4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0201 	and.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d118      	bne.n	8001a20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	6939      	ldr	r1, [r7, #16]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80ac 	beq.w	8001c4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_GPIO_Init+0x330>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <HAL_GPIO_Init+0x330>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	; 0x60
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_GPIO_Init+0x330>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b0a:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <HAL_GPIO_Init+0x334>)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b34:	d025      	beq.n	8001b82 <HAL_GPIO_Init+0x242>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4f      	ldr	r2, [pc, #316]	; (8001c78 <HAL_GPIO_Init+0x338>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01f      	beq.n	8001b7e <HAL_GPIO_Init+0x23e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4e      	ldr	r2, [pc, #312]	; (8001c7c <HAL_GPIO_Init+0x33c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_GPIO_Init+0x23a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4d      	ldr	r2, [pc, #308]	; (8001c80 <HAL_GPIO_Init+0x340>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x236>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x344>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x232>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_GPIO_Init+0x348>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x22e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <HAL_GPIO_Init+0x34c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x22a>
 8001b66:	2306      	movs	r3, #6
 8001b68:	e00c      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00a      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b6e:	2305      	movs	r3, #5
 8001b70:	e008      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b72:	2304      	movs	r3, #4
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b76:	2303      	movs	r3, #3
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x244>
 8001b82:	2300      	movs	r3, #0
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	f002 0203 	and.w	r2, r2, #3
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b94:	4937      	ldr	r1, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x334>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc6:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c1a:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_GPIO_Init+0x350>)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f47f ae78 	bne.w	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	48001000 	.word	0x48001000
 8001c88:	48001400 	.word	0x48001400
 8001c8c:	48001800 	.word	0x48001800
 8001c90:	40010400 	.word	0x40010400

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43d9      	mvns	r1, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f806 	bl	8001d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e081      	b.n	8001e54 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff f84b 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2224      	movs	r2, #36	; 0x24
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	e006      	b.n	8001dc6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dc4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d104      	bne.n	8001dd8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69d9      	ldr	r1, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d138      	bne.n	8001ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e032      	b.n	8001ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d139      	bne.n	8001f7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e033      	b.n	8001f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2224      	movs	r2, #36	; 0x24
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8c:	b08f      	sub	sp, #60	; 0x3c
 8001f8e:	af0a      	add	r7, sp, #40	; 0x28
 8001f90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e116      	b.n	80021ca <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f8ac 	bl	8001114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fdb1 	bl	8004b42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	687e      	ldr	r6, [r7, #4]
 8001fe8:	466d      	mov	r5, sp
 8001fea:	f106 0410 	add.w	r4, r6, #16
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ffa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ffe:	1d33      	adds	r3, r6, #4
 8002000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002002:	6838      	ldr	r0, [r7, #0]
 8002004:	f002 fd71 	bl	8004aea <USB_CoreInit>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0d7      	b.n	80021ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fd9f 	bl	8004b64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e04a      	b.n	80020c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	333d      	adds	r3, #61	; 0x3d
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	333c      	adds	r3, #60	; 0x3c
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	b298      	uxth	r0, r3
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3344      	adds	r3, #68	; 0x44
 8002068:	4602      	mov	r2, r0
 800206a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3340      	adds	r3, #64	; 0x40
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3348      	adds	r3, #72	; 0x48
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	334c      	adds	r3, #76	; 0x4c
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3354      	adds	r3, #84	; 0x54
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	3301      	adds	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d3af      	bcc.n	800202c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e044      	b.n	800215c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3b5      	bcc.n	80020d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	687e      	ldr	r6, [r7, #4]
 800216e:	466d      	mov	r5, sp
 8002170:	f106 0410 	add.w	r4, r6, #16
 8002174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002180:	e885 0003 	stmia.w	r5, {r0, r1}
 8002184:	1d33      	adds	r3, r6, #4
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f002 fd37 	bl	8004bfc <USB_DevInit>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e014      	b.n	80021ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d102      	bne.n	80021be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f80a 	bl	80021d2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fee3 	bl	8004f8e <USB_DevDisconnect>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	f043 0303 	orr.w	r3, r3, #3
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007000 	.word	0x40007000

0800223c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_PWREx_GetVoltageRange+0x18>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40007000 	.word	0x40007000

08002258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002266:	d130      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002274:	d038      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2232      	movs	r2, #50	; 0x32
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800229c:	e002      	b.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d102      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f2      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d110      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d007      	beq.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000
 80022fc:	20000000 	.word	0x20000000
 8002300:	431bde83 	.word	0x431bde83

08002304 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_PWREx_EnableVddUSB+0x1c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_PWREx_EnableVddUSB+0x1c>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6053      	str	r3, [r2, #4]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff f8ea 	bl	8001504 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e063      	b.n	8002404 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe fdb3 	bl	8000ebc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002356:	f241 3188 	movw	r1, #5000	; 0x1388
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f858 	bl	8002410 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	3b01      	subs	r3, #1
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	2120      	movs	r1, #32
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f850 	bl	800242c <QSPI_WaitFlagStateUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d131      	bne.n	80023fa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023a0:	f023 0310 	bic.w	r3, r3, #16
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	0611      	lsls	r1, r2, #24
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_QSPI_Init+0xe8>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6912      	ldr	r2, [r2, #16]
 80023c6:	0411      	lsls	r1, r2, #16
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6952      	ldr	r2, [r2, #20]
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6992      	ldr	r2, [r2, #24]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002402:	7afb      	ldrb	r3, [r7, #11]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ffe0f8fe 	.word	0xffe0f8fe

08002410 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800243c:	e01a      	b.n	8002474 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002444:	d016      	beq.n	8002474 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7ff f85d 	bl	8001504 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2204      	movs	r2, #4
 8002460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e00e      	b.n	8002492 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d1d6      	bne.n	800243e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e3ca      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4b97      	ldr	r3, [pc, #604]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b8:	4b94      	ldr	r3, [pc, #592]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80e4 	beq.w	8002698 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4a>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	f040 808b 	bne.w	80025f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	f040 8087 	bne.w	80025f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_RCC_OscConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e3a2      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	4b82      	ldr	r3, [pc, #520]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_RCC_OscConfig+0x7c>
 800250e:	4b7f      	ldr	r3, [pc, #508]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002516:	e005      	b.n	8002524 <HAL_RCC_OscConfig+0x88>
 8002518:	4b7c      	ldr	r3, [pc, #496]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002524:	4293      	cmp	r3, r2
 8002526:	d223      	bcs.n	8002570 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fd87 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e383      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253c:	4b73      	ldr	r3, [pc, #460]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a72      	ldr	r2, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	496d      	ldr	r1, [pc, #436]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255a:	4b6c      	ldr	r3, [pc, #432]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4968      	ldr	r1, [pc, #416]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
 800256e:	e025      	b.n	80025bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4960      	ldr	r1, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	495b      	ldr	r1, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd47 	bl	8003040 <RCC_SetFlashLatencyFromMSIRange>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e343      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025bc:	f000 fc4a 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	4950      	ldr	r1, [pc, #320]	; (8002710 <HAL_RCC_OscConfig+0x274>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_RCC_OscConfig+0x278>)
 80025da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_RCC_OscConfig+0x27c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fe33 	bl	800124c <HAL_InitTick>
 80025e6:	4603      	mov	r3, r0
 80025e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d052      	beq.n	8002696 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	e327      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a42      	ldr	r2, [pc, #264]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002608:	f7fe ff7c 	bl	8001504 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002610:	f7fe ff78 	bl	8001504 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e310      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a36      	ldr	r2, [pc, #216]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4931      	ldr	r1, [pc, #196]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	492c      	ldr	r1, [pc, #176]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	e01a      	b.n	8002698 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266e:	f7fe ff49 	bl	8001504 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002676:	f7fe ff45 	bl	8001504 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e2dd      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x1da>
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002696:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d074      	beq.n	800278e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x21a>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d10e      	bne.n	80026ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d064      	beq.n	800278c <HAL_RCC_OscConfig+0x2f0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d160      	bne.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e2ba      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x24a>
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e026      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ee:	d115      	bne.n	800271c <HAL_RCC_OscConfig+0x280>
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a05      	ldr	r2, [pc, #20]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a02      	ldr	r2, [pc, #8]	; (800270c <HAL_RCC_OscConfig+0x270>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e014      	b.n	8002734 <HAL_RCC_OscConfig+0x298>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	08007d64 	.word	0x08007d64
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004
 800271c:	4ba0      	ldr	r3, [pc, #640]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a9f      	ldr	r2, [pc, #636]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b9d      	ldr	r3, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a9c      	ldr	r2, [pc, #624]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fee2 	bl	8001504 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fede 	bl	8001504 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e276      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002756:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x2a8>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fece 	bl	8001504 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe feca 	bl	8001504 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e262      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277e:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x2d0>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d060      	beq.n	800285c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x310>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d119      	bne.n	80027da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d116      	bne.n	80027da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ac:	4b7c      	ldr	r3, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x328>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e23f      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	4973      	ldr	r1, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d8:	e040      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e2:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe89 	bl	8001504 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fe85 	bl	8001504 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e21d      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002808:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	495f      	ldr	r1, [pc, #380]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
 8002828:	e018      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5c      	ldr	r2, [pc, #368]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fe65 	bl	8001504 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe fe61 	bl	8001504 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1f9      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01c      	beq.n	80028aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	4a4a      	ldr	r2, [pc, #296]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fe40 	bl	8001504 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fe3c 	bl	8001504 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1d4      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ef      	beq.n	8002888 <HAL_RCC_OscConfig+0x3ec>
 80028a8:	e01b      	b.n	80028e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b0:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fe23 	bl	8001504 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fe1f 	bl	8001504 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1b7      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d4:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a6 	beq.w	8002a3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	; 0x58
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCC_OscConfig+0x508>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d118      	bne.n	800295a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_OscConfig+0x508>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_RCC_OscConfig+0x508>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002934:	f7fe fde6 	bl	8001504 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe fde2 	bl	8001504 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e17a      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x508>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <HAL_RCC_OscConfig+0x4d8>
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002972:	e029      	b.n	80029c8 <HAL_RCC_OscConfig+0x52c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d115      	bne.n	80029a8 <HAL_RCC_OscConfig+0x50c>
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a03      	ldr	r2, [pc, #12]	; (80029a0 <HAL_RCC_OscConfig+0x504>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299c:	e014      	b.n	80029c8 <HAL_RCC_OscConfig+0x52c>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	4b9c      	ldr	r3, [pc, #624]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a9b      	ldr	r2, [pc, #620]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b8:	4b98      	ldr	r3, [pc, #608]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a97      	ldr	r2, [pc, #604]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d016      	beq.n	80029fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fd98 	bl	8001504 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fd94 	bl	8001504 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e12a      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ed      	beq.n	80029d8 <HAL_RCC_OscConfig+0x53c>
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fd81 	bl	8001504 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fd7d 	bl	8001504 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e113      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1c:	4b7f      	ldr	r3, [pc, #508]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ed      	bne.n	8002a06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a30:	4b7a      	ldr	r3, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	4a79      	ldr	r2, [pc, #484]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80fe 	beq.w	8002c42 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 80d0 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a50:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d130      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d127      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a90:	2a07      	cmp	r2, #7
 8002a92:	bf14      	ite	ne
 8002a94:	2201      	movne	r2, #1
 8002a96:	2200      	moveq	r2, #0
 8002a98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d113      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d06e      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d069      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0ad      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af4:	f7fe fd06 	bl	8001504 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fd02 	bl	8001504 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e09a      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1a:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <HAL_RCC_OscConfig+0x784>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b34:	0212      	lsls	r2, r2, #8
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0552      	lsls	r2, r2, #21
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b48:	0852      	lsrs	r2, r2, #1
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	0652      	lsls	r2, r2, #25
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b54:	0912      	lsrs	r2, r2, #4
 8002b56:	0452      	lsls	r2, r2, #17
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4930      	ldr	r1, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b78:	f7fe fcc4 	bl	8001504 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fcc0 	bl	8001504 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e058      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9e:	e050      	b.n	8002c42 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04f      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d148      	bne.n	8002c42 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc8:	f7fe fc9c 	bl	8001504 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fc98 	bl	8001504 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e030      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x734>
 8002bee:	e028      	b.n	8002c42 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d023      	beq.n	8002c3e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCC_OscConfig+0x780>)
 8002bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fc7f 	bl	8001504 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	e00c      	b.n	8002c24 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fc7b 	bl	8001504 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d905      	bls.n	8002c24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x7b0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ec      	bne.n	8002c0a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_OscConfig+0x7b0>)
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4905      	ldr	r1, [pc, #20]	; (8002c4c <HAL_RCC_OscConfig+0x7b0>)
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_OscConfig+0x7b4>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60cb      	str	r3, [r1, #12]
 8002c3c:	e001      	b.n	8002c42 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	feeefffc 	.word	0xfeeefffc

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0e7      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d910      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4970      	ldr	r1, [pc, #448]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cf      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4960      	ldr	r1, [pc, #384]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04c      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0a6      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf2:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e09a      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d0a:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e08e      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e086      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4943      	ldr	r1, [pc, #268]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fe fbe2 	bl	8001504 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe fbde 	bl	8001504 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e06e      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d010      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d208      	bcs.n	8002d9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	492b      	ldr	r1, [pc, #172]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d210      	bcs.n	8002dca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 0207 	bic.w	r2, r3, #7
 8002db0:	4923      	ldr	r1, [pc, #140]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e036      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4918      	ldr	r1, [pc, #96]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4910      	ldr	r1, [pc, #64]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e08:	f000 f824 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_RCC_ClockConfig+0x1f0>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	490b      	ldr	r1, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1f4>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1f8>)
 8002e26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1fc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fa0d 	bl	800124c <HAL_InitTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e36:	7afb      	ldrb	r3, [r7, #11]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08007d64 	.word	0x08007d64
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d121      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11e      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e004      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d134      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0xa6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xac>
 8002ef8:	e005      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efc:	617b      	str	r3, [r7, #20]
      break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f02:	617b      	str	r3, [r7, #20]
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	617b      	str	r3, [r7, #20]
      break;
 8002f0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	fb03 f202 	mul.w	r2, r3, r2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	0e5b      	lsrs	r3, r3, #25
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08007d7c 	.word	0x08007d7c
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4904      	ldr	r1, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08007d74 	.word	0x08007d74

08002fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fb4:	f7ff ffda 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08007d74 	.word	0x08007d74

08002fdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	220f      	movs	r2, #15
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0203 	and.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_GetClockConfig+0x5c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_RCC_GetClockConfig+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0207 	and.w	r2, r3, #7
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40022000 	.word	0x40022000

08003040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003058:	f7ff f8f0 	bl	800223c <HAL_PWREx_GetVoltageRange>
 800305c:	6178      	str	r0, [r7, #20]
 800305e:	e014      	b.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	; 0x58
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003078:	f7ff f8e0 	bl	800223c <HAL_PWREx_GetVoltageRange>
 800307c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003090:	d10b      	bne.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d919      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2ba0      	cmp	r3, #160	; 0xa0
 800309c:	d902      	bls.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800309e:	2302      	movs	r3, #2
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	e013      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e010      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d902      	bls.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030b0:	2303      	movs	r3, #3
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e00a      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d102      	bne.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030bc:	2302      	movs	r3, #2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e004      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b70      	cmp	r3, #112	; 0x70
 80030c6:	d101      	bne.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 0207 	bic.w	r2, r3, #7
 80030d4:	4909      	ldr	r1, [pc, #36]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003108:	2300      	movs	r3, #0
 800310a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800310c:	2300      	movs	r3, #0
 800310e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d041      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003120:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003124:	d02a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003126:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800312a:	d824      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800312c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003132:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003136:	d81e      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800313c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003140:	d010      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003142:	e018      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003144:	4b86      	ldr	r3, [pc, #536]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a85      	ldr	r2, [pc, #532]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003150:	e015      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 facb 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003162:	e00c      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3320      	adds	r3, #32
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fbb6 	bl	80038dc <RCCEx_PLLSAI2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	74fb      	strb	r3, [r7, #19]
      break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800317c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003184:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003192:	4973      	ldr	r1, [pc, #460]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319a:	e001      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d041      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031b4:	d02a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ba:	d824      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c0:	d008      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031c6:	d81e      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d0:	d010      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031d2:	e018      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031d4:	4b62      	ldr	r3, [pc, #392]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a61      	ldr	r2, [pc, #388]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e0:	e015      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fa83 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f2:	e00c      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3320      	adds	r3, #32
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fb6e 	bl	80038dc <RCCEx_PLLSAI2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003204:	e003      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	74fb      	strb	r3, [r7, #19]
      break;
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800320c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003222:	494f      	ldr	r1, [pc, #316]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800322a:	e001      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a0 	beq.w	800337e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003258:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	4a40      	ldr	r2, [pc, #256]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003262:	6593      	str	r3, [r2, #88]	; 0x58
 8003264:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003270:	2301      	movs	r3, #1
 8003272:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3a      	ldr	r2, [pc, #232]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003280:	f7fe f940 	bl	8001504 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003286:	e009      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003288:	f7fe f93c 	bl	8001504 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	74fb      	strb	r3, [r7, #19]
        break;
 800329a:	e005      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d15c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d019      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe f8fb 	bl	8001504 <HAL_GetTick>
 800330e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003310:	e00b      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f8f7 	bl	8001504 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d902      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	74fb      	strb	r3, [r7, #19]
            break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ec      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334e:	4904      	ldr	r1, [pc, #16]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003356:	e009      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
 800335c:	e006      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7c7b      	ldrb	r3, [r7, #17]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b9e      	ldr	r3, [pc, #632]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	4a9d      	ldr	r2, [pc, #628]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338a:	4b98      	ldr	r3, [pc, #608]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 0203 	bic.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	4994      	ldr	r1, [pc, #592]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ac:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 020c 	bic.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	498c      	ldr	r1, [pc, #560]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033ce:	4b87      	ldr	r3, [pc, #540]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4983      	ldr	r1, [pc, #524]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033f0:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	497b      	ldr	r1, [pc, #492]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	4972      	ldr	r1, [pc, #456]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003434:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	496a      	ldr	r1, [pc, #424]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	4961      	ldr	r1, [pc, #388]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003478:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	4959      	ldr	r1, [pc, #356]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	4950      	ldr	r1, [pc, #320]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	4948      	ldr	r1, [pc, #288]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034de:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	493f      	ldr	r1, [pc, #252]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d028      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351e:	d106      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
 800352c:	e011      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003536:	d10c      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8d8 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	491f      	ldr	r1, [pc, #124]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357c:	d106      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003588:	60d3      	str	r3, [r2, #12]
 800358a:	e011      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f8a9 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02b      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035da:	d109      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e014      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f877 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	4928      	ldr	r1, [pc, #160]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f854 	bl	80036f4 <RCCEx_PLLSAI1_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	74bb      	strb	r3, [r7, #18]
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3320      	adds	r3, #32
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f935 	bl	80038dc <RCCEx_PLLSAI2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800368c:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369a:	490d      	ldr	r1, [pc, #52]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4904      	ldr	r1, [pc, #16]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036de:	f043 0304 	orr.w	r3, r3, #4
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003702:	4b75      	ldr	r3, [pc, #468]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800370e:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0203 	and.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d10d      	bne.n	800373a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
       ||
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
       ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d047      	beq.n	80037ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	e044      	b.n	80037ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d018      	beq.n	800377a <RCCEx_PLLSAI1_Config+0x86>
 8003748:	2b03      	cmp	r3, #3
 800374a:	d825      	bhi.n	8003798 <RCCEx_PLLSAI1_Config+0xa4>
 800374c:	2b01      	cmp	r3, #1
 800374e:	d002      	beq.n	8003756 <RCCEx_PLLSAI1_Config+0x62>
 8003750:	2b02      	cmp	r3, #2
 8003752:	d009      	beq.n	8003768 <RCCEx_PLLSAI1_Config+0x74>
 8003754:	e020      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003756:	4b60      	ldr	r3, [pc, #384]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11d      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003766:	e01a      	b.n	800379e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003768:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d116      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003778:	e013      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800377a:	4b57      	ldr	r3, [pc, #348]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003796:	e006      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      break;
 800379c:	e004      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10d      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	430b      	orrs	r3, r1
 80037c4:	4944      	ldr	r1, [pc, #272]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d17d      	bne.n	80038cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d0:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a40      	ldr	r2, [pc, #256]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7fd fe92 	bl	8001504 <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e2:	e009      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e4:	f7fd fe8e 	bl	8001504 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	73fb      	strb	r3, [r7, #15]
        break;
 80037f6:	e005      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ef      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d160      	bne.n	80038cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6892      	ldr	r2, [r2, #8]
 8003820:	0211      	lsls	r1, r2, #8
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	0912      	lsrs	r2, r2, #4
 8003828:	0452      	lsls	r2, r2, #17
 800382a:	430a      	orrs	r2, r1
 800382c:	492a      	ldr	r1, [pc, #168]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
 8003832:	e027      	b.n	8003884 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d112      	bne.n	8003860 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003842:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	0211      	lsls	r1, r2, #8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6912      	ldr	r2, [r2, #16]
 8003850:	0852      	lsrs	r2, r2, #1
 8003852:	3a01      	subs	r2, #1
 8003854:	0552      	lsls	r2, r2, #21
 8003856:	430a      	orrs	r2, r1
 8003858:	491f      	ldr	r1, [pc, #124]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	610b      	str	r3, [r1, #16]
 800385e:	e011      	b.n	8003884 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	0211      	lsls	r1, r2, #8
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6952      	ldr	r2, [r2, #20]
 8003876:	0852      	lsrs	r2, r2, #1
 8003878:	3a01      	subs	r2, #1
 800387a:	0652      	lsls	r2, r2, #25
 800387c:	430a      	orrs	r2, r1
 800387e:	4916      	ldr	r1, [pc, #88]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800388e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd fe38 	bl	8001504 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003896:	e009      	b.n	80038ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003898:	f7fd fe34 	bl	8001504 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d902      	bls.n	80038ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	73fb      	strb	r3, [r7, #15]
          break;
 80038aa:	e005      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ef      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4904      	ldr	r1, [pc, #16]	; (80038d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000

080038dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d018      	beq.n	8003928 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038f6:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0203 	and.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d10d      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
       ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800390e:	4b61      	ldr	r3, [pc, #388]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
       ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d047      	beq.n	80039b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	e044      	b.n	80039b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d018      	beq.n	8003962 <RCCEx_PLLSAI2_Config+0x86>
 8003930:	2b03      	cmp	r3, #3
 8003932:	d825      	bhi.n	8003980 <RCCEx_PLLSAI2_Config+0xa4>
 8003934:	2b01      	cmp	r3, #1
 8003936:	d002      	beq.n	800393e <RCCEx_PLLSAI2_Config+0x62>
 8003938:	2b02      	cmp	r3, #2
 800393a:	d009      	beq.n	8003950 <RCCEx_PLLSAI2_Config+0x74>
 800393c:	e020      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800393e:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d11d      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800394e:	e01a      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003960:	e013      	b.n	800398a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003962:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800397e:	e006      	b.n	800398e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e004      	b.n	8003990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003986:	bf00      	nop
 8003988:	e002      	b.n	8003990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	430b      	orrs	r3, r1
 80039ac:	4939      	ldr	r1, [pc, #228]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d167      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039b8:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd fd9e 	bl	8001504 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039cc:	f7fd fd9a 	bl	8001504 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
        break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e0:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d14a      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6892      	ldr	r2, [r2, #8]
 8003a08:	0211      	lsls	r1, r2, #8
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	0912      	lsrs	r2, r2, #4
 8003a10:	0452      	lsls	r2, r2, #17
 8003a12:	430a      	orrs	r2, r1
 8003a14:	491f      	ldr	r1, [pc, #124]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	614b      	str	r3, [r1, #20]
 8003a1a:	e011      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6912      	ldr	r2, [r2, #16]
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0652      	lsls	r2, r2, #25
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4916      	ldr	r1, [pc, #88]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fd5a 	bl	8001504 <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a52:	e009      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a54:	f7fd fd56 	bl	8001504 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d902      	bls.n	8003a68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	73fb      	strb	r3, [r7, #15]
          break;
 8003a66:	e005      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ef      	beq.n	8003a54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4904      	ldr	r1, [pc, #16]	; (8003a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e095      	b.n	8003bd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aba:	d009      	beq.n	8003ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
 8003ac2:	e005      	b.n	8003ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fa2a 	bl	8000f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b10:	d902      	bls.n	8003b18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e002      	b.n	8003b1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b26:	d007      	beq.n	8003b38 <HAL_SPI_Init+0xa0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	ea42 0103 	orr.w	r1, r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0204 	and.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bb4:	ea42 0103 	orr.w	r1, r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e049      	b.n	8003c84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f841 	bl	8003c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f000 f9f7 	bl	8004010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d001      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e04f      	b.n	8003d58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d018      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIM_Base_Start_IT+0x76>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d115      	bne.n	8003d42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d015      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0xb4>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d011      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	e008      	b.n	8003d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e000      	b.n	8003d56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800
 8003d70:	40000c00 	.word	0x40000c00
 8003d74:	40013400 	.word	0x40013400
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	00010007 	.word	0x00010007

08003d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0202 	mvn.w	r2, #2
 8003dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f905 	bl	8003fd2 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8f7 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f908 	bl	8003fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0204 	mvn.w	r2, #4
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8db 	bl	8003fd2 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8cd 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8de 	bl	8003fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0208 	mvn.w	r2, #8
 8003e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8b1 	bl	8003fd2 <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8a3 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f8b4 	bl	8003fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0210 	mvn.w	r2, #16
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2208      	movs	r2, #8
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f887 	bl	8003fd2 <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f879 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f88a 	bl	8003fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0201 	mvn.w	r2, #1
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fc feda 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f914 	bl	8004158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f907 	bl	800416c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f838 	bl	8003ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0220 	mvn.w	r2, #32
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8c7 	bl	8004144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a40      	ldr	r2, [pc, #256]	; (8004124 <TIM_Base_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402e:	d00f      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <TIM_Base_SetConfig+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3c      	ldr	r2, [pc, #240]	; (800412c <TIM_Base_SetConfig+0x11c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3b      	ldr	r2, [pc, #236]	; (8004130 <TIM_Base_SetConfig+0x120>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <TIM_Base_SetConfig+0x124>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d108      	bne.n	8004062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <TIM_Base_SetConfig+0x114>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d01b      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <TIM_Base_SetConfig+0x118>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d017      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	; (800412c <TIM_Base_SetConfig+0x11c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <TIM_Base_SetConfig+0x120>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00f      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a29      	ldr	r2, [pc, #164]	; (8004134 <TIM_Base_SetConfig+0x124>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <TIM_Base_SetConfig+0x128>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <TIM_Base_SetConfig+0x12c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x9a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <TIM_Base_SetConfig+0x130>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <TIM_Base_SetConfig+0x114>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00f      	beq.n	8004108 <TIM_Base_SetConfig+0xf8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <TIM_Base_SetConfig+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_Base_SetConfig+0xf8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a11      	ldr	r2, [pc, #68]	; (8004138 <TIM_Base_SetConfig+0x128>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0xf8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <TIM_Base_SetConfig+0x12c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0xf8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <TIM_Base_SetConfig+0x130>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800

08004144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e040      	b.n	8004214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc ff12 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f82c 	bl	800421c <UART_SetConfig>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e022      	b.n	8004214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fad8 	bl	800478c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb5f 	bl	80048d0 <UART_CheckIdleState>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b08a      	sub	sp, #40	; 0x28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4313      	orrs	r3, r2
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4ba4      	ldr	r3, [pc, #656]	; (80044dc <UART_SetConfig+0x2c0>)
 800424c:	4013      	ands	r3, r2
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a99      	ldr	r2, [pc, #612]	; (80044e0 <UART_SetConfig+0x2c4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	4313      	orrs	r3, r2
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a90      	ldr	r2, [pc, #576]	; (80044e4 <UART_SetConfig+0x2c8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d126      	bne.n	80042f4 <UART_SetConfig+0xd8>
 80042a6:	4b90      	ldr	r3, [pc, #576]	; (80044e8 <UART_SetConfig+0x2cc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d81b      	bhi.n	80042ec <UART_SetConfig+0xd0>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0xa0>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042dd 	.word	0x080042dd
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e116      	b.n	8004502 <UART_SetConfig+0x2e6>
 80042d4:	2302      	movs	r3, #2
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e112      	b.n	8004502 <UART_SetConfig+0x2e6>
 80042dc:	2304      	movs	r3, #4
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e10e      	b.n	8004502 <UART_SetConfig+0x2e6>
 80042e4:	2308      	movs	r3, #8
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e10a      	b.n	8004502 <UART_SetConfig+0x2e6>
 80042ec:	2310      	movs	r3, #16
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e106      	b.n	8004502 <UART_SetConfig+0x2e6>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7c      	ldr	r2, [pc, #496]	; (80044ec <UART_SetConfig+0x2d0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d138      	bne.n	8004370 <UART_SetConfig+0x154>
 80042fe:	4b7a      	ldr	r3, [pc, #488]	; (80044e8 <UART_SetConfig+0x2cc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d82d      	bhi.n	8004368 <UART_SetConfig+0x14c>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0xf8>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004349 	.word	0x08004349
 8004318:	08004369 	.word	0x08004369
 800431c:	08004369 	.word	0x08004369
 8004320:	08004369 	.word	0x08004369
 8004324:	08004359 	.word	0x08004359
 8004328:	08004369 	.word	0x08004369
 800432c:	08004369 	.word	0x08004369
 8004330:	08004369 	.word	0x08004369
 8004334:	08004351 	.word	0x08004351
 8004338:	08004369 	.word	0x08004369
 800433c:	08004369 	.word	0x08004369
 8004340:	08004369 	.word	0x08004369
 8004344:	08004361 	.word	0x08004361
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e0d8      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004350:	2302      	movs	r3, #2
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e0d4      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e0d0      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e0cc      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e0c8      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <UART_SetConfig+0x2d4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d125      	bne.n	80043c6 <UART_SetConfig+0x1aa>
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <UART_SetConfig+0x2cc>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004384:	2b30      	cmp	r3, #48	; 0x30
 8004386:	d016      	beq.n	80043b6 <UART_SetConfig+0x19a>
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d818      	bhi.n	80043be <UART_SetConfig+0x1a2>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d00a      	beq.n	80043a6 <UART_SetConfig+0x18a>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d814      	bhi.n	80043be <UART_SetConfig+0x1a2>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <UART_SetConfig+0x182>
 8004398:	2b10      	cmp	r3, #16
 800439a:	d008      	beq.n	80043ae <UART_SetConfig+0x192>
 800439c:	e00f      	b.n	80043be <UART_SetConfig+0x1a2>
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a4:	e0ad      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043a6:	2302      	movs	r3, #2
 80043a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ac:	e0a9      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043ae:	2304      	movs	r3, #4
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b4:	e0a5      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043b6:	2308      	movs	r3, #8
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043bc:	e0a1      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043be:	2310      	movs	r3, #16
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c4:	e09d      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a4a      	ldr	r2, [pc, #296]	; (80044f4 <UART_SetConfig+0x2d8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d125      	bne.n	800441c <UART_SetConfig+0x200>
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043da:	2bc0      	cmp	r3, #192	; 0xc0
 80043dc:	d016      	beq.n	800440c <UART_SetConfig+0x1f0>
 80043de:	2bc0      	cmp	r3, #192	; 0xc0
 80043e0:	d818      	bhi.n	8004414 <UART_SetConfig+0x1f8>
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d00a      	beq.n	80043fc <UART_SetConfig+0x1e0>
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d814      	bhi.n	8004414 <UART_SetConfig+0x1f8>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <UART_SetConfig+0x1d8>
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d008      	beq.n	8004404 <UART_SetConfig+0x1e8>
 80043f2:	e00f      	b.n	8004414 <UART_SetConfig+0x1f8>
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e082      	b.n	8004502 <UART_SetConfig+0x2e6>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e07e      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e07a      	b.n	8004502 <UART_SetConfig+0x2e6>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e076      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e072      	b.n	8004502 <UART_SetConfig+0x2e6>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a35      	ldr	r2, [pc, #212]	; (80044f8 <UART_SetConfig+0x2dc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d12a      	bne.n	800447c <UART_SetConfig+0x260>
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <UART_SetConfig+0x2cc>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004434:	d01a      	beq.n	800446c <UART_SetConfig+0x250>
 8004436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443a:	d81b      	bhi.n	8004474 <UART_SetConfig+0x258>
 800443c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004440:	d00c      	beq.n	800445c <UART_SetConfig+0x240>
 8004442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004446:	d815      	bhi.n	8004474 <UART_SetConfig+0x258>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <UART_SetConfig+0x238>
 800444c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004450:	d008      	beq.n	8004464 <UART_SetConfig+0x248>
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x258>
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445a:	e052      	b.n	8004502 <UART_SetConfig+0x2e6>
 800445c:	2302      	movs	r3, #2
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e04e      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004464:	2304      	movs	r3, #4
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e04a      	b.n	8004502 <UART_SetConfig+0x2e6>
 800446c:	2308      	movs	r3, #8
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e046      	b.n	8004502 <UART_SetConfig+0x2e6>
 8004474:	2310      	movs	r3, #16
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e042      	b.n	8004502 <UART_SetConfig+0x2e6>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <UART_SetConfig+0x2c4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d13a      	bne.n	80044fc <UART_SetConfig+0x2e0>
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <UART_SetConfig+0x2cc>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004494:	d01a      	beq.n	80044cc <UART_SetConfig+0x2b0>
 8004496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449a:	d81b      	bhi.n	80044d4 <UART_SetConfig+0x2b8>
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d00c      	beq.n	80044bc <UART_SetConfig+0x2a0>
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d815      	bhi.n	80044d4 <UART_SetConfig+0x2b8>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <UART_SetConfig+0x298>
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d008      	beq.n	80044c4 <UART_SetConfig+0x2a8>
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x2b8>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e022      	b.n	8004502 <UART_SetConfig+0x2e6>
 80044bc:	2302      	movs	r3, #2
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e01e      	b.n	8004502 <UART_SetConfig+0x2e6>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e01a      	b.n	8004502 <UART_SetConfig+0x2e6>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e016      	b.n	8004502 <UART_SetConfig+0x2e6>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e012      	b.n	8004502 <UART_SetConfig+0x2e6>
 80044dc:	efff69f3 	.word	0xefff69f3
 80044e0:	40008000 	.word	0x40008000
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40004400 	.word	0x40004400
 80044f0:	40004800 	.word	0x40004800
 80044f4:	40004c00 	.word	0x40004c00
 80044f8:	40005000 	.word	0x40005000
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a9f      	ldr	r2, [pc, #636]	; (8004784 <UART_SetConfig+0x568>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d17a      	bne.n	8004602 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800450c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004510:	2b08      	cmp	r3, #8
 8004512:	d824      	bhi.n	800455e <UART_SetConfig+0x342>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x300>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004541 	.word	0x08004541
 8004520:	0800455f 	.word	0x0800455f
 8004524:	08004549 	.word	0x08004549
 8004528:	0800455f 	.word	0x0800455f
 800452c:	0800454f 	.word	0x0800454f
 8004530:	0800455f 	.word	0x0800455f
 8004534:	0800455f 	.word	0x0800455f
 8004538:	0800455f 	.word	0x0800455f
 800453c:	08004557 	.word	0x08004557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7fe fd20 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004544:	61f8      	str	r0, [r7, #28]
        break;
 8004546:	e010      	b.n	800456a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b8f      	ldr	r3, [pc, #572]	; (8004788 <UART_SetConfig+0x56c>)
 800454a:	61fb      	str	r3, [r7, #28]
        break;
 800454c:	e00d      	b.n	800456a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7fe fc81 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004552:	61f8      	str	r0, [r7, #28]
        break;
 8004554:	e009      	b.n	800456a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	61fb      	str	r3, [r7, #28]
        break;
 800455c:	e005      	b.n	800456a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80fb 	beq.w	8004768 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	429a      	cmp	r2, r3
 8004580:	d305      	bcc.n	800458e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	429a      	cmp	r2, r3
 800458c:	d903      	bls.n	8004596 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004594:	e0e8      	b.n	8004768 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2200      	movs	r2, #0
 800459a:	461c      	mov	r4, r3
 800459c:	4615      	mov	r5, r2
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	022b      	lsls	r3, r5, #8
 80045a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045ac:	0222      	lsls	r2, r4, #8
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	6849      	ldr	r1, [r1, #4]
 80045b2:	0849      	lsrs	r1, r1, #1
 80045b4:	2000      	movs	r0, #0
 80045b6:	4688      	mov	r8, r1
 80045b8:	4681      	mov	r9, r0
 80045ba:	eb12 0a08 	adds.w	sl, r2, r8
 80045be:	eb43 0b09 	adc.w	fp, r3, r9
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d0:	4650      	mov	r0, sl
 80045d2:	4659      	mov	r1, fp
 80045d4:	f7fb fdfc 	bl	80001d0 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d308      	bcc.n	80045fa <UART_SetConfig+0x3de>
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d204      	bcs.n	80045fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	e0b6      	b.n	8004768 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004600:	e0b2      	b.n	8004768 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460a:	d15e      	bne.n	80046ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800460c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004610:	2b08      	cmp	r3, #8
 8004612:	d828      	bhi.n	8004666 <UART_SetConfig+0x44a>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x400>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fca0 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004644:	61f8      	str	r0, [r7, #28]
        break;
 8004646:	e014      	b.n	8004672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fcb2 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 800464c:	61f8      	str	r0, [r7, #28]
        break;
 800464e:	e010      	b.n	8004672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b4d      	ldr	r3, [pc, #308]	; (8004788 <UART_SetConfig+0x56c>)
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e00d      	b.n	8004672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fbfd 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 800465a:	61f8      	str	r0, [r7, #28]
        break;
 800465c:	e009      	b.n	8004672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e005      	b.n	8004672 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d077      	beq.n	8004768 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005a      	lsls	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	441a      	add	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d916      	bls.n	80046c2 <UART_SetConfig+0x4a6>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d212      	bcs.n	80046c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f023 030f 	bic.w	r3, r3, #15
 80046a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	8afb      	ldrh	r3, [r7, #22]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	8afa      	ldrh	r2, [r7, #22]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	e052      	b.n	8004768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046c8:	e04e      	b.n	8004768 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d827      	bhi.n	8004722 <UART_SetConfig+0x506>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <UART_SetConfig+0x4bc>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	08004723 	.word	0x08004723
 80046e8:	08004713 	.word	0x08004713
 80046ec:	08004723 	.word	0x08004723
 80046f0:	08004723 	.word	0x08004723
 80046f4:	08004723 	.word	0x08004723
 80046f8:	0800471b 	.word	0x0800471b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fe fc42 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004700:	61f8      	str	r0, [r7, #28]
        break;
 8004702:	e014      	b.n	800472e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004704:	f7fe fc54 	bl	8002fb0 <HAL_RCC_GetPCLK2Freq>
 8004708:	61f8      	str	r0, [r7, #28]
        break;
 800470a:	e010      	b.n	800472e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <UART_SetConfig+0x56c>)
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e00d      	b.n	800472e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004712:	f7fe fb9f 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004716:	61f8      	str	r0, [r7, #28]
        break;
 8004718:	e009      	b.n	800472e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471e:	61fb      	str	r3, [r7, #28]
        break;
 8004720:	e005      	b.n	800472e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800472c:	bf00      	nop
    }

    if (pclk != 0U)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d019      	beq.n	8004768 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	085a      	lsrs	r2, r3, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d909      	bls.n	8004762 <UART_SetConfig+0x546>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d205      	bcs.n	8004762 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e002      	b.n	8004768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004782:	bf00      	nop
 8004784:	40008000 	.word	0x40008000
 8004788:	00f42400 	.word	0x00f42400

0800478c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01a      	beq.n	80048a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488a:	d10a      	bne.n	80048a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e0:	f7fc fe10 	bl	8001504 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d10e      	bne.n	8004912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f82d 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e023      	b.n	800495a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d10e      	bne.n	800493e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f817 	bl	8004962 <UART_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00d      	b.n	800495a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b09c      	sub	sp, #112	; 0x70
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	e0a5      	b.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497a:	f000 80a1 	beq.w	8004ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fc fdc1 	bl	8001504 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <UART_WaitOnFlagUntilTimeout+0x32>
 800498e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004990:	2b00      	cmp	r3, #0
 8004992:	d13e      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a8:	667b      	str	r3, [r7, #100]	; 0x64
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e6      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3308      	adds	r3, #8
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	663b      	str	r3, [r7, #96]	; 0x60
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e067      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04f      	beq.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d147      	bne.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a8c:	623a      	str	r2, [r7, #32]
 8004a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	6a3a      	ldr	r2, [r7, #32]
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e5      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e010      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	f43f af4a 	beq.w	8004974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3770      	adds	r7, #112	; 0x70
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aea:	b084      	sub	sp, #16
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	f107 001c 	add.w	r0, r7, #28
 8004af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa6f 	bl	8004fec <USB_CoreReset>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
 8004b24:	e005      	b.n	8004b32 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b3e:	b004      	add	sp, #16
 8004b40:	4770      	bx	lr

08004b42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d115      	bne.n	8004bb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b92:	2001      	movs	r0, #1
 8004b94:	f7fc fcc2 	bl	800151c <HAL_Delay>
      ms++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa16 	bl	8004fd0 <USB_GetMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d01e      	beq.n	8004be8 <USB_SetCurrentMode+0x84>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b31      	cmp	r3, #49	; 0x31
 8004bae:	d9f0      	bls.n	8004b92 <USB_SetCurrentMode+0x2e>
 8004bb0:	e01a      	b.n	8004be8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d115      	bne.n	8004be4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7fc fca9 	bl	800151c <HAL_Delay>
      ms++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f9fd 	bl	8004fd0 <USB_GetMode>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <USB_SetCurrentMode+0x84>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b31      	cmp	r3, #49	; 0x31
 8004be0:	d9f0      	bls.n	8004bc4 <USB_SetCurrentMode+0x60>
 8004be2:	e001      	b.n	8004be8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e005      	b.n	8004bf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b32      	cmp	r3, #50	; 0x32
 8004bec:	d101      	bne.n	8004bf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e009      	b.n	8004c30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3340      	adds	r3, #64	; 0x40
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	2200      	movs	r2, #0
 8004c28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b0e      	cmp	r3, #14
 8004c34:	d9f2      	bls.n	8004c1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11c      	bne.n	8004c76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4a:	f043 0302 	orr.w	r3, r3, #2
 8004c4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e005      	b.n	8004c82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	4619      	mov	r1, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	680b      	ldr	r3, [r1, #0]
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ca2:	2103      	movs	r1, #3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f959 	bl	8004f5c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004caa:	2110      	movs	r1, #16
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8f1 	bl	8004e94 <USB_FlushTxFifo>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f91d 	bl	8004efc <USB_FlushRxFifo>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cea:	461a      	mov	r2, r3
 8004cec:	2300      	movs	r3, #0
 8004cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e043      	b.n	8004d7e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d0c:	d118      	bne.n	8004d40 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	461a      	mov	r2, r3
 8004d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	e013      	b.n	8004d52 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	461a      	mov	r2, r3
 8004d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e008      	b.n	8004d52 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	461a      	mov	r2, r3
 8004d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d3b7      	bcc.n	8004cf6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	e043      	b.n	8004e14 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da2:	d118      	bne.n	8004dd6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	461a      	mov	r2, r3
 8004db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e013      	b.n	8004de8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e008      	b.n	8004de8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	2300      	movs	r3, #0
 8004df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3301      	adds	r3, #1
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d3b7      	bcc.n	8004d8c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f043 0210 	orr.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <USB_DevInit+0x294>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f043 0208 	orr.w	r2, r3, #8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d107      	bne.n	8004e7e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e8a:	b004      	add	sp, #16
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	803c3800 	.word	0x803c3800

08004e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <USB_FlushTxFifo+0x64>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e01b      	b.n	8004eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	daf2      	bge.n	8004ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	019b      	lsls	r3, r3, #6
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <USB_FlushTxFifo+0x64>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d0f0      	beq.n	8004ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <USB_FlushRxFifo+0x5c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e018      	b.n	8004f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	daf2      	bge.n	8004f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <USB_FlushRxFifo+0x5c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e006      	b.n	8004f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d0f0      	beq.n	8004f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	00030d40 	.word	0x00030d40

08004f5c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fa8:	f023 0303 	bic.w	r3, r3, #3
 8004fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbc:	f043 0302 	orr.w	r3, r3, #2
 8004fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <USB_CoreReset+0x64>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e01b      	b.n	8005042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	daf2      	bge.n	8004ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <USB_CoreReset+0x64>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e006      	b.n	8005042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d0f0      	beq.n	8005022 <USB_CoreReset+0x36>

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	00030d40 	.word	0x00030d40

08005054 <__NVIC_SetPriority>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	6039      	str	r1, [r7, #0]
 800505e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	db0a      	blt.n	800507e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	490c      	ldr	r1, [pc, #48]	; (80050a0 <__NVIC_SetPriority+0x4c>)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	440b      	add	r3, r1
 8005078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800507c:	e00a      	b.n	8005094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4908      	ldr	r1, [pc, #32]	; (80050a4 <__NVIC_SetPriority+0x50>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3b04      	subs	r3, #4
 800508c:	0112      	lsls	r2, r2, #4
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	440b      	add	r3, r1
 8005092:	761a      	strb	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000e100 	.word	0xe000e100
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <SysTick_Handler+0x1c>)
 80050ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050b0:	f001 fd70 	bl	8006b94 <xTaskGetSchedulerState>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050ba:	f002 fb55 	bl	8007768 <xPortSysTickHandler>
  }
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050cc:	2100      	movs	r1, #0
 80050ce:	f06f 0004 	mvn.w	r0, #4
 80050d2:	f7ff ffbf 	bl	8005054 <__NVIC_SetPriority>
#endif
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e2:	f3ef 8305 	mrs	r3, IPSR
 80050e6:	603b      	str	r3, [r7, #0]
  return(result);
 80050e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ee:	f06f 0305 	mvn.w	r3, #5
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	e00c      	b.n	8005110 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <osKernelInitialize+0x44>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050fe:	4b08      	ldr	r3, [pc, #32]	; (8005120 <osKernelInitialize+0x44>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005104:	2300      	movs	r3, #0
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e002      	b.n	8005110 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800510e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005110:	687b      	ldr	r3, [r7, #4]
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	200007f0 	.word	0x200007f0

08005124 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512a:	f3ef 8305 	mrs	r3, IPSR
 800512e:	603b      	str	r3, [r7, #0]
  return(result);
 8005130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005136:	f06f 0305 	mvn.w	r3, #5
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e010      	b.n	8005160 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <osKernelStart+0x48>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d109      	bne.n	800515a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005146:	f7ff ffbf 	bl	80050c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <osKernelStart+0x48>)
 800514c:	2202      	movs	r2, #2
 800514e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005150:	f001 f8d8 	bl	8006304 <vTaskStartScheduler>
      stat = osOK;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	e002      	b.n	8005160 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800515e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200007f0 	.word	0x200007f0

08005170 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b08e      	sub	sp, #56	; 0x38
 8005174:	af04      	add	r7, sp, #16
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005180:	f3ef 8305 	mrs	r3, IPSR
 8005184:	617b      	str	r3, [r7, #20]
  return(result);
 8005186:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005188:	2b00      	cmp	r3, #0
 800518a:	d17e      	bne.n	800528a <osThreadNew+0x11a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d07b      	beq.n	800528a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005196:	2318      	movs	r3, #24
 8005198:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d045      	beq.n	8005236 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osThreadNew+0x48>
        name = attr->name;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <osThreadNew+0x6e>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b38      	cmp	r3, #56	; 0x38
 80051d0:	d805      	bhi.n	80051de <osThreadNew+0x6e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <osThreadNew+0x72>
        return (NULL);
 80051de:	2300      	movs	r3, #0
 80051e0:	e054      	b.n	800528c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <osThreadNew+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b5b      	cmp	r3, #91	; 0x5b
 8005200:	d90a      	bls.n	8005218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <osThreadNew+0xa8>
        mem = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	e010      	b.n	800523a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <osThreadNew+0xca>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <osThreadNew+0xca>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <osThreadNew+0xca>
          mem = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e001      	b.n	800523a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d110      	bne.n	8005262 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005248:	9202      	str	r2, [sp, #8]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fe0c 	bl	8005e74 <xTaskCreateStatic>
 800525c:	4603      	mov	r3, r0
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e013      	b.n	800528a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	b29a      	uxth	r2, r3
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fe57 	bl	8005f2e <xTaskCreate>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <osThreadNew+0x11a>
            hTask = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528a:	693b      	ldr	r3, [r7, #16]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529c:	f3ef 8305 	mrs	r3, IPSR
 80052a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <osDelay+0x1c>
    stat = osErrorISR;
 80052a8:	f06f 0305 	mvn.w	r3, #5
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e007      	b.n	80052c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ffee 	bl	800629c <vTaskDelay>
    }
  }

  return (stat);
 80052c0:	68fb      	ldr	r3, [r7, #12]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80052dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a06      	ldr	r2, [pc, #24]	; (80052fc <vApplicationGetIdleTaskMemory+0x30>)
 80052e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200007f4 	.word	0x200007f4
 80052fc:	20000850 	.word	0x20000850

08005300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <vApplicationGetTimerTaskMemory+0x2c>)
 8005310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a06      	ldr	r2, [pc, #24]	; (8005330 <vApplicationGetTimerTaskMemory+0x30>)
 8005316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000a50 	.word	0x20000a50
 8005330:	20000aac 	.word	0x20000aac

08005334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0208 	add.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800534c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f103 0208 	add.w	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f103 0208 	add.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d103      	bne.n	80053f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e00c      	b.n	8005410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3308      	adds	r3, #8
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e002      	b.n	8005404 <vListInsert+0x2e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	d2f6      	bcs.n	80053fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6892      	ldr	r2, [r2, #8]
 800545e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6852      	ldr	r2, [r2, #4]
 8005468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d103      	bne.n	800547c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054c6:	f002 f8bd 	bl	8007644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	441a      	add	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	3b01      	subs	r3, #1
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	22ff      	movs	r2, #255	; 0xff
 8005512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d114      	bne.n	8005546 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3310      	adds	r3, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f001 f975 	bl	8006818 <xTaskRemoveFromEventList>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <xQueueGenericReset+0xcc>)
 8005536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	e009      	b.n	800555a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3310      	adds	r3, #16
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fef2 	bl	8005334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff feed 	bl	8005334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800555a:	f002 f8a3 	bl	80076a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <xQueueGenericCreateStatic+0x52>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <xQueueGenericCreateStatic+0x56>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericCreateStatic+0x58>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <xQueueGenericCreateStatic+0x7e>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <xQueueGenericCreateStatic+0x82>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericCreateStatic+0x84>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	61fb      	str	r3, [r7, #28]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800560a:	2350      	movs	r3, #80	; 0x50
 800560c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b50      	cmp	r3, #80	; 0x50
 8005612:	d00a      	beq.n	800562a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61bb      	str	r3, [r7, #24]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800562a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800563e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f805 	bl	800565c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005654:	4618      	mov	r0, r3
 8005656:	3730      	adds	r7, #48	; 0x30
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e002      	b.n	800567e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800568a:	2101      	movs	r1, #1
 800568c:	69b8      	ldr	r0, [r7, #24]
 800568e:	f7ff ff05 	bl	800549c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	; 0x38
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056b2:	2300      	movs	r3, #0
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xQueueGenericSend+0x32>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <xQueueGenericSend+0x40>
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <xQueueGenericSend+0x44>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <xQueueGenericSend+0x46>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <xQueueGenericSend+0x60>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d103      	bne.n	8005712 <xQueueGenericSend+0x6e>
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <xQueueGenericSend+0x72>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <xQueueGenericSend+0x74>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <xQueueGenericSend+0x8e>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	623b      	str	r3, [r7, #32]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005732:	f001 fa2f 	bl	8006b94 <xTaskGetSchedulerState>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <xQueueGenericSend+0x9e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <xQueueGenericSend+0xa2>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSend+0xa4>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericSend+0xbe>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	61fb      	str	r3, [r7, #28]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005762:	f001 ff6f 	bl	8007644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	429a      	cmp	r2, r3
 8005770:	d302      	bcc.n	8005778 <xQueueGenericSend+0xd4>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d129      	bne.n	80057cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800577e:	f000 fa0b 	bl	8005b98 <prvCopyDataToQueue>
 8005782:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d010      	beq.n	80057ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	3324      	adds	r3, #36	; 0x24
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f841 	bl	8006818 <xTaskRemoveFromEventList>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800579c:	4b3f      	ldr	r3, [pc, #252]	; (800589c <xQueueGenericSend+0x1f8>)
 800579e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	e00a      	b.n	80057c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057b4:	4b39      	ldr	r3, [pc, #228]	; (800589c <xQueueGenericSend+0x1f8>)
 80057b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057c4:	f001 ff6e 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e063      	b.n	8005894 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057d2:	f001 ff67 	bl	80076a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e05c      	b.n	8005894 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	4618      	mov	r0, r3
 80057e6:	f001 f87b 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ee:	f001 ff59 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057f2:	f000 fded 	bl	80063d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057f6:	f001 ff25 	bl	8007644 <vPortEnterCritical>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005800:	b25b      	sxtb	r3, r3
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005806:	d103      	bne.n	8005810 <xQueueGenericSend+0x16c>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005816:	b25b      	sxtb	r3, r3
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581c:	d103      	bne.n	8005826 <xQueueGenericSend+0x182>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005826:	f001 ff3d 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800582a:	1d3a      	adds	r2, r7, #4
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f001 f86a 	bl	800690c <xTaskCheckForTimeOut>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d124      	bne.n	8005888 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800583e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005840:	f000 faa2 	bl	8005d88 <prvIsQueueFull>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d018      	beq.n	800587c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	3310      	adds	r3, #16
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 ff90 	bl	8006778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fa2d 	bl	8005cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800585e:	f000 fdc5 	bl	80063ec <xTaskResumeAll>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	f47f af7c 	bne.w	8005762 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <xQueueGenericSend+0x1f8>)
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	e772      	b.n	8005762 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800587c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587e:	f000 fa1b 	bl	8005cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005882:	f000 fdb3 	bl	80063ec <xTaskResumeAll>
 8005886:	e76c      	b.n	8005762 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800588a:	f000 fa15 	bl	8005cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800588e:	f000 fdad 	bl	80063ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005892:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005894:	4618      	mov	r0, r3
 8005896:	3738      	adds	r7, #56	; 0x38
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b090      	sub	sp, #64	; 0x40
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <xQueueGenericSendFromISR+0x3c>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <xQueueGenericSendFromISR+0x40>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <xQueueGenericSendFromISR+0x42>
 80058e0:	2300      	movs	r3, #0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d103      	bne.n	800590a <xQueueGenericSendFromISR+0x6a>
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <xQueueGenericSendFromISR+0x6e>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <xQueueGenericSendFromISR+0x70>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	623b      	str	r3, [r7, #32]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800592a:	f001 ff6d 	bl	8007808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800592e:	f3ef 8211 	mrs	r2, BASEPRI
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	61fa      	str	r2, [r7, #28]
 8005944:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005946:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	429a      	cmp	r2, r3
 8005954:	d302      	bcc.n	800595c <xQueueGenericSendFromISR+0xbc>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d12f      	bne.n	80059bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005972:	f000 f911 	bl	8005b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005976:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597e:	d112      	bne.n	80059a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d016      	beq.n	80059b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f000 ff43 	bl	8006818 <xTaskRemoveFromEventList>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00e      	beq.n	80059b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e007      	b.n	80059b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059aa:	3301      	adds	r3, #1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	b25a      	sxtb	r2, r3
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059b6:	2301      	movs	r3, #1
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059ba:	e001      	b.n	80059c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3740      	adds	r7, #64	; 0x40
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	; 0x30
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <xQueueReceive+0x30>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	623b      	str	r3, [r7, #32]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueReceive+0x3e>
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <xQueueReceive+0x42>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <xQueueReceive+0x44>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueReceive+0x5e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61fb      	str	r3, [r7, #28]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a36:	f001 f8ad 	bl	8006b94 <xTaskGetSchedulerState>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <xQueueReceive+0x6e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <xQueueReceive+0x72>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <xQueueReceive+0x74>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueReceive+0x8e>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	61bb      	str	r3, [r7, #24]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a66:	f001 fded 	bl	8007644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01f      	beq.n	8005ab6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7a:	f000 f8f7 	bl	8005c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00f      	beq.n	8005aae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	3310      	adds	r3, #16
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fec0 	bl	8006818 <xTaskRemoveFromEventList>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <xQueueReceive+0x1bc>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aae:	f001 fdf9 	bl	80076a4 <vPortExitCritical>
				return pdPASS;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e069      	b.n	8005b8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005abc:	f001 fdf2 	bl	80076a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e062      	b.n	8005b8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 ff06 	bl	80068e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ad8:	f001 fde4 	bl	80076a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005adc:	f000 fc78 	bl	80063d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae0:	f001 fdb0 	bl	8007644 <vPortEnterCritical>
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aea:	b25b      	sxtb	r3, r3
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af0:	d103      	bne.n	8005afa <xQueueReceive+0x122>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b06:	d103      	bne.n	8005b10 <xQueueReceive+0x138>
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b10:	f001 fdc8 	bl	80076a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b14:	1d3a      	adds	r2, r7, #4
 8005b16:	f107 0310 	add.w	r3, r7, #16
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fef5 	bl	800690c <xTaskCheckForTimeOut>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d123      	bne.n	8005b70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2a:	f000 f917 	bl	8005d5c <prvIsQueueEmpty>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d017      	beq.n	8005b64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	3324      	adds	r3, #36	; 0x24
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fe1b 	bl	8006778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 f8b8 	bl	8005cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b48:	f000 fc50 	bl	80063ec <xTaskResumeAll>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d189      	bne.n	8005a66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b52:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <xQueueReceive+0x1bc>)
 8005b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	e780      	b.n	8005a66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b66:	f000 f8a7 	bl	8005cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b6a:	f000 fc3f 	bl	80063ec <xTaskResumeAll>
 8005b6e:	e77a      	b.n	8005a66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b72:	f000 f8a1 	bl	8005cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b76:	f000 fc39 	bl	80063ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7c:	f000 f8ee 	bl	8005d5c <prvIsQueueEmpty>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f43f af6f 	beq.w	8005a66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	; 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d14d      	bne.n	8005c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f804 	bl	8006bd0 <xTaskPriorityDisinherit>
 8005bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	e043      	b.n	8005c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d119      	bne.n	8005c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6858      	ldr	r0, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	461a      	mov	r2, r3
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	f002 f85e 	bl	8007ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	441a      	add	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d32b      	bcc.n	8005c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	e026      	b.n	8005c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68d8      	ldr	r0, [r3, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	461a      	mov	r2, r3
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	f002 f844 	bl	8007ca4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	425b      	negs	r3, r3
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d207      	bcs.n	8005c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	425b      	negs	r3, r3
 8005c42:	441a      	add	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d105      	bne.n	8005c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c62:	697b      	ldr	r3, [r7, #20]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d303      	bcc.n	8005ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68d9      	ldr	r1, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6838      	ldr	r0, [r7, #0]
 8005cac:	f001 fffa 	bl	8007ca4 <memcpy>
	}
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc0:	f001 fcc0 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ccc:	e011      	b.n	8005cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3324      	adds	r3, #36	; 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fd9c 	bl	8006818 <xTaskRemoveFromEventList>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce6:	f000 fe73 	bl	80069d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dce9      	bgt.n	8005cce <prvUnlockQueue+0x16>
 8005cfa:	e000      	b.n	8005cfe <prvUnlockQueue+0x46>
					break;
 8005cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d06:	f001 fccd 	bl	80076a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d0a:	f001 fc9b 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d16:	e011      	b.n	8005d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d012      	beq.n	8005d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3310      	adds	r3, #16
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fd77 	bl	8006818 <xTaskRemoveFromEventList>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d30:	f000 fe4e 	bl	80069d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	dce9      	bgt.n	8005d18 <prvUnlockQueue+0x60>
 8005d44:	e000      	b.n	8005d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d50:	f001 fca8 	bl	80076a4 <vPortExitCritical>
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d64:	f001 fc6e 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e001      	b.n	8005d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d7a:	f001 fc93 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d90:	f001 fc58 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d102      	bne.n	8005da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e001      	b.n	8005daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005daa:	f001 fc7b 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 8005dae:	68fb      	ldr	r3, [r7, #12]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e014      	b.n	8005df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <vQueueAddToRegistry+0x50>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dd4:	490c      	ldr	r1, [pc, #48]	; (8005e08 <vQueueAddToRegistry+0x50>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <vQueueAddToRegistry+0x50>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4413      	add	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dea:	e006      	b.n	8005dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b07      	cmp	r3, #7
 8005df6:	d9e7      	bls.n	8005dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000eac 	.word	0x20000eac

08005e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e1c:	f001 fc12 	bl	8007644 <vPortEnterCritical>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2c:	d103      	bne.n	8005e36 <vQueueWaitForMessageRestricted+0x2a>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e3c:	b25b      	sxtb	r3, r3
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e42:	d103      	bne.n	8005e4c <vQueueWaitForMessageRestricted+0x40>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4c:	f001 fc2a 	bl	80076a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fcad 	bl	80067c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f7ff ff26 	bl	8005cb8 <prvUnlockQueue>
	}
 8005e6c:	bf00      	nop
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08e      	sub	sp, #56	; 0x38
 8005e78:	af04      	add	r7, sp, #16
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	623b      	str	r3, [r7, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xTaskCreateStatic+0x46>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	61fb      	str	r3, [r7, #28]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eba:	235c      	movs	r3, #92	; 0x5c
 8005ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ec2:	d00a      	beq.n	8005eda <xTaskCreateStatic+0x66>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61bb      	str	r3, [r7, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01e      	beq.n	8005f20 <xTaskCreateStatic+0xac>
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005efa:	2300      	movs	r3, #0
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	f107 0314 	add.w	r3, r7, #20
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f850 	bl	8005fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f1a:	f000 f8dd 	bl	80060d8 <prvAddNewTaskToReadyList>
 8005f1e:	e001      	b.n	8005f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f24:	697b      	ldr	r3, [r7, #20]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3728      	adds	r7, #40	; 0x28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08c      	sub	sp, #48	; 0x30
 8005f32:	af04      	add	r7, sp, #16
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fca0 	bl	8007888 <pvPortMalloc>
 8005f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f50:	205c      	movs	r0, #92	; 0x5c
 8005f52:	f001 fc99 	bl	8007888 <pvPortMalloc>
 8005f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
 8005f64:	e005      	b.n	8005f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f001 fd5a 	bl	8007a20 <vPortFree>
 8005f6c:	e001      	b.n	8005f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	2300      	movs	r3, #0
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f80e 	bl	8005fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f9c:	69f8      	ldr	r0, [r7, #28]
 8005f9e:	f000 f89b 	bl	80060d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e002      	b.n	8005fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fae:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	21a5      	movs	r1, #165	; 0xa5
 8005fd2:	f001 fe75 	bl	8007cc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	617b      	str	r3, [r7, #20]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01f      	beq.n	8006056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e012      	b.n	8006042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	7819      	ldrb	r1, [r3, #0]
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	3334      	adds	r3, #52	; 0x34
 800602c:	460a      	mov	r2, r1
 800602e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	2b0f      	cmp	r3, #15
 8006046:	d9e9      	bls.n	800601c <prvInitialiseNewTask+0x64>
 8006048:	e000      	b.n	800604c <prvInitialiseNewTask+0x94>
			{
				break;
 800604a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006054:	e003      	b.n	800605e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	2b37      	cmp	r3, #55	; 0x37
 8006062:	d901      	bls.n	8006068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006064:	2337      	movs	r3, #55	; 0x37
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2200      	movs	r2, #0
 8006078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff f978 	bl	8005374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	3318      	adds	r3, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff f973 	bl	8005374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	2200      	movs	r2, #0
 80060a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	69b8      	ldr	r0, [r7, #24]
 80060b8:	f001 f99a 	bl	80073f0 <pxPortInitialiseStack>
 80060bc:	4602      	mov	r2, r0
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ce:	bf00      	nop
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 fab0 	bl	8007644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060e4:	4b2d      	ldr	r3, [pc, #180]	; (800619c <prvAddNewTaskToReadyList+0xc4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a2c      	ldr	r2, [pc, #176]	; (800619c <prvAddNewTaskToReadyList+0xc4>)
 80060ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ee:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060fc:	4b27      	ldr	r3, [pc, #156]	; (800619c <prvAddNewTaskToReadyList+0xc4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d110      	bne.n	8006126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006104:	f000 fc88 	bl	8006a18 <prvInitialiseTaskLists>
 8006108:	e00d      	b.n	8006126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <prvAddNewTaskToReadyList+0xcc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006112:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d802      	bhi.n	8006126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006120:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006126:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <prvAddNewTaskToReadyList+0xd0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <prvAddNewTaskToReadyList+0xd0>)
 800612e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006130:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <prvAddNewTaskToReadyList+0xd0>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <prvAddNewTaskToReadyList+0xd4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d903      	bls.n	800614c <prvAddNewTaskToReadyList+0x74>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <prvAddNewTaskToReadyList+0xd4>)
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <prvAddNewTaskToReadyList+0xd8>)
 800615a:	441a      	add	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f7ff f913 	bl	800538e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006168:	f001 fa9c 	bl	80076a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <prvAddNewTaskToReadyList+0xcc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d207      	bcs.n	8006192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <prvAddNewTaskToReadyList+0xdc>)
 8006184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200013c0 	.word	0x200013c0
 80061a0:	20000eec 	.word	0x20000eec
 80061a4:	200013cc 	.word	0x200013cc
 80061a8:	200013dc 	.word	0x200013dc
 80061ac:	200013c8 	.word	0x200013c8
 80061b0:	20000ef0 	.word	0x20000ef0
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80061c0:	f001 fa40 	bl	8007644 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <vTaskDelete+0x18>
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <vTaskDelete+0xc4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	e000      	b.n	80061d2 <vTaskDelete+0x1a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f935 	bl	8005448 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3318      	adds	r3, #24
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff f92c 	bl	8005448 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80061f0:	4b23      	ldr	r3, [pc, #140]	; (8006280 <vTaskDelete+0xc8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a22      	ldr	r2, [pc, #136]	; (8006280 <vTaskDelete+0xc8>)
 80061f8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80061fa:	4b20      	ldr	r3, [pc, #128]	; (800627c <vTaskDelete+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	429a      	cmp	r2, r3
 8006202:	d10b      	bne.n	800621c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	481e      	ldr	r0, [pc, #120]	; (8006284 <vTaskDelete+0xcc>)
 800620c:	f7ff f8bf 	bl	800538e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <vTaskDelete+0xd0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <vTaskDelete+0xd0>)
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e009      	b.n	8006230 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800621c:	4b1b      	ldr	r3, [pc, #108]	; (800628c <vTaskDelete+0xd4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3b01      	subs	r3, #1
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <vTaskDelete+0xd4>)
 8006224:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fc64 	bl	8006af4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800622c:	f000 fc92 	bl	8006b54 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006230:	f001 fa38 	bl	80076a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <vTaskDelete+0xd8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800623c:	4b0f      	ldr	r3, [pc, #60]	; (800627c <vTaskDelete+0xc4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	429a      	cmp	r2, r3
 8006244:	d116      	bne.n	8006274 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <vTaskDelete+0xdc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <vTaskDelete+0xac>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60bb      	str	r3, [r7, #8]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <vTaskDelete+0xe0>)
 8006266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000eec 	.word	0x20000eec
 8006280:	200013dc 	.word	0x200013dc
 8006284:	20001394 	.word	0x20001394
 8006288:	200013a8 	.word	0x200013a8
 800628c:	200013c0 	.word	0x200013c0
 8006290:	200013cc 	.word	0x200013cc
 8006294:	200013e8 	.word	0x200013e8
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d017      	beq.n	80062de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <vTaskDelay+0x60>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <vTaskDelay+0x30>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062cc:	f000 f880 	bl	80063d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062d0:	2100      	movs	r1, #0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fcea 	bl	8006cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062d8:	f000 f888 	bl	80063ec <xTaskResumeAll>
 80062dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d107      	bne.n	80062f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <vTaskDelay+0x64>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200013e8 	.word	0x200013e8
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006312:	463a      	mov	r2, r7
 8006314:	1d39      	adds	r1, r7, #4
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe ffd6 	bl	80052cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	9202      	str	r2, [sp, #8]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	2300      	movs	r3, #0
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	460a      	mov	r2, r1
 8006332:	4921      	ldr	r1, [pc, #132]	; (80063b8 <vTaskStartScheduler+0xb4>)
 8006334:	4821      	ldr	r0, [pc, #132]	; (80063bc <vTaskStartScheduler+0xb8>)
 8006336:	f7ff fd9d 	bl	8005e74 <xTaskCreateStatic>
 800633a:	4603      	mov	r3, r0
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <vTaskStartScheduler+0xbc>)
 800633e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006340:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <vTaskStartScheduler+0xbc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e001      	b.n	8006352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d102      	bne.n	800635e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006358:	f000 fcfc 	bl	8006d54 <xTimerCreateTimerTask>
 800635c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d116      	bne.n	8006392 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	613b      	str	r3, [r7, #16]
}
 8006376:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <vTaskStartScheduler+0xc0>)
 800637a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800637e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <vTaskStartScheduler+0xc4>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <vTaskStartScheduler+0xc8>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800638c:	f001 f8b8 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006390:	e00e      	b.n	80063b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006398:	d10a      	bne.n	80063b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	60fb      	str	r3, [r7, #12]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <vTaskStartScheduler+0xaa>
}
 80063b0:	bf00      	nop
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	08007d28 	.word	0x08007d28
 80063bc:	080069e9 	.word	0x080069e9
 80063c0:	200013e4 	.word	0x200013e4
 80063c4:	200013e0 	.word	0x200013e0
 80063c8:	200013cc 	.word	0x200013cc
 80063cc:	200013c4 	.word	0x200013c4

080063d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <vTaskSuspendAll+0x18>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3301      	adds	r3, #1
 80063da:	4a03      	ldr	r2, [pc, #12]	; (80063e8 <vTaskSuspendAll+0x18>)
 80063dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063de:	bf00      	nop
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	200013e8 	.word	0x200013e8

080063ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063fa:	4b42      	ldr	r3, [pc, #264]	; (8006504 <xTaskResumeAll+0x118>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <xTaskResumeAll+0x2c>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	603b      	str	r3, [r7, #0]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006418:	f001 f914 	bl	8007644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800641c:	4b39      	ldr	r3, [pc, #228]	; (8006504 <xTaskResumeAll+0x118>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	4a38      	ldr	r2, [pc, #224]	; (8006504 <xTaskResumeAll+0x118>)
 8006424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006426:	4b37      	ldr	r3, [pc, #220]	; (8006504 <xTaskResumeAll+0x118>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d162      	bne.n	80064f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <xTaskResumeAll+0x11c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d05e      	beq.n	80064f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006436:	e02f      	b.n	8006498 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006438:	4b34      	ldr	r3, [pc, #208]	; (800650c <xTaskResumeAll+0x120>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3318      	adds	r3, #24
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe ffff 	bl	8005448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3304      	adds	r3, #4
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fffa 	bl	8005448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4b2d      	ldr	r3, [pc, #180]	; (8006510 <xTaskResumeAll+0x124>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d903      	bls.n	8006468 <xTaskResumeAll+0x7c>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	4a2a      	ldr	r2, [pc, #168]	; (8006510 <xTaskResumeAll+0x124>)
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4a27      	ldr	r2, [pc, #156]	; (8006514 <xTaskResumeAll+0x128>)
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3304      	adds	r3, #4
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe ff85 	bl	800538e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	4b23      	ldr	r3, [pc, #140]	; (8006518 <xTaskResumeAll+0x12c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <xTaskResumeAll+0x130>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006498:	4b1c      	ldr	r3, [pc, #112]	; (800650c <xTaskResumeAll+0x120>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1cb      	bne.n	8006438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064a6:	f000 fb55 	bl	8006b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <xTaskResumeAll+0x134>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064b6:	f000 f847 	bl	8006548 <xTaskIncrementTick>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064c0:	4b16      	ldr	r3, [pc, #88]	; (800651c <xTaskResumeAll+0x130>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f1      	bne.n	80064b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <xTaskResumeAll+0x134>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064d8:	4b10      	ldr	r3, [pc, #64]	; (800651c <xTaskResumeAll+0x130>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <xTaskResumeAll+0x138>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064f4:	f001 f8d6 	bl	80076a4 <vPortExitCritical>

	return xAlreadyYielded;
 80064f8:	68bb      	ldr	r3, [r7, #8]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200013e8 	.word	0x200013e8
 8006508:	200013c0 	.word	0x200013c0
 800650c:	20001380 	.word	0x20001380
 8006510:	200013c8 	.word	0x200013c8
 8006514:	20000ef0 	.word	0x20000ef0
 8006518:	20000eec 	.word	0x20000eec
 800651c:	200013d4 	.word	0x200013d4
 8006520:	200013d0 	.word	0x200013d0
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <xTaskGetTickCount+0x1c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006534:	687b      	ldr	r3, [r7, #4]
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	200013c4 	.word	0x200013c4

08006548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <xTaskIncrementTick+0x148>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 808f 	bne.w	800667a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800655c:	4b4d      	ldr	r3, [pc, #308]	; (8006694 <xTaskIncrementTick+0x14c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006564:	4a4b      	ldr	r2, [pc, #300]	; (8006694 <xTaskIncrementTick+0x14c>)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d120      	bne.n	80065b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006570:	4b49      	ldr	r3, [pc, #292]	; (8006698 <xTaskIncrementTick+0x150>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <xTaskIncrementTick+0x48>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	603b      	str	r3, [r7, #0]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <xTaskIncrementTick+0x46>
 8006590:	4b41      	ldr	r3, [pc, #260]	; (8006698 <xTaskIncrementTick+0x150>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <xTaskIncrementTick+0x154>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3f      	ldr	r2, [pc, #252]	; (8006698 <xTaskIncrementTick+0x150>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	4a3f      	ldr	r2, [pc, #252]	; (800669c <xTaskIncrementTick+0x154>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <xTaskIncrementTick+0x158>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a3d      	ldr	r2, [pc, #244]	; (80066a0 <xTaskIncrementTick+0x158>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	f000 fad1 	bl	8006b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065b2:	4b3c      	ldr	r3, [pc, #240]	; (80066a4 <xTaskIncrementTick+0x15c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d349      	bcc.n	8006650 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065bc:	4b36      	ldr	r3, [pc, #216]	; (8006698 <xTaskIncrementTick+0x150>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c6:	4b37      	ldr	r3, [pc, #220]	; (80066a4 <xTaskIncrementTick+0x15c>)
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065cc:	601a      	str	r2, [r3, #0]
					break;
 80065ce:	e03f      	b.n	8006650 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d0:	4b31      	ldr	r3, [pc, #196]	; (8006698 <xTaskIncrementTick+0x150>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d203      	bcs.n	80065f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065e8:	4a2e      	ldr	r2, [pc, #184]	; (80066a4 <xTaskIncrementTick+0x15c>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065ee:	e02f      	b.n	8006650 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe ff27 	bl	8005448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3318      	adds	r3, #24
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe ff1e 	bl	8005448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <xTaskIncrementTick+0x160>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <xTaskIncrementTick+0xd8>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <xTaskIncrementTick+0x160>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <xTaskIncrementTick+0x164>)
 800662e:	441a      	add	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7fe fea9 	bl	800538e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <xTaskIncrementTick+0x168>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	429a      	cmp	r2, r3
 8006648:	d3b8      	bcc.n	80065bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800664a:	2301      	movs	r3, #1
 800664c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800664e:	e7b5      	b.n	80065bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006650:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <xTaskIncrementTick+0x168>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4915      	ldr	r1, [pc, #84]	; (80066ac <xTaskIncrementTick+0x164>)
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d901      	bls.n	800666c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <xTaskIncrementTick+0x16c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e004      	b.n	8006684 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <xTaskIncrementTick+0x170>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	4a0d      	ldr	r2, [pc, #52]	; (80066b8 <xTaskIncrementTick+0x170>)
 8006682:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006684:	697b      	ldr	r3, [r7, #20]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	200013e8 	.word	0x200013e8
 8006694:	200013c4 	.word	0x200013c4
 8006698:	20001378 	.word	0x20001378
 800669c:	2000137c 	.word	0x2000137c
 80066a0:	200013d8 	.word	0x200013d8
 80066a4:	200013e0 	.word	0x200013e0
 80066a8:	200013c8 	.word	0x200013c8
 80066ac:	20000ef0 	.word	0x20000ef0
 80066b0:	20000eec 	.word	0x20000eec
 80066b4:	200013d4 	.word	0x200013d4
 80066b8:	200013d0 	.word	0x200013d0

080066bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066c2:	4b28      	ldr	r3, [pc, #160]	; (8006764 <vTaskSwitchContext+0xa8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <vTaskSwitchContext+0xac>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066d0:	e041      	b.n	8006756 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066d2:	4b25      	ldr	r3, [pc, #148]	; (8006768 <vTaskSwitchContext+0xac>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d8:	4b24      	ldr	r3, [pc, #144]	; (800676c <vTaskSwitchContext+0xb0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e010      	b.n	8006702 <vTaskSwitchContext+0x46>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <vTaskSwitchContext+0x40>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	607b      	str	r3, [r7, #4]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <vTaskSwitchContext+0x3e>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3b01      	subs	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	491b      	ldr	r1, [pc, #108]	; (8006770 <vTaskSwitchContext+0xb4>)
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0e4      	beq.n	80066e0 <vTaskSwitchContext+0x24>
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <vTaskSwitchContext+0xb4>)
 8006722:	4413      	add	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	605a      	str	r2, [r3, #4]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3308      	adds	r3, #8
 8006738:	429a      	cmp	r2, r3
 800673a:	d104      	bne.n	8006746 <vTaskSwitchContext+0x8a>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a09      	ldr	r2, [pc, #36]	; (8006774 <vTaskSwitchContext+0xb8>)
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4a06      	ldr	r2, [pc, #24]	; (800676c <vTaskSwitchContext+0xb0>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6013      	str	r3, [r2, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200013e8 	.word	0x200013e8
 8006768:	200013d4 	.word	0x200013d4
 800676c:	200013c8 	.word	0x200013c8
 8006770:	20000ef0 	.word	0x20000ef0
 8006774:	20000eec 	.word	0x20000eec

08006778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	60fb      	str	r3, [r7, #12]
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <vTaskPlaceOnEventList+0x44>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3318      	adds	r3, #24
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe fe15 	bl	80053d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067ac:	2101      	movs	r1, #1
 80067ae:	6838      	ldr	r0, [r7, #0]
 80067b0:	f000 fa7c 	bl	8006cac <prvAddCurrentTaskToDelayedList>
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000eec 	.word	0x20000eec

080067c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	617b      	str	r3, [r7, #20]
}
 80067e4:	bf00      	nop
 80067e6:	e7fe      	b.n	80067e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <vTaskPlaceOnEventListRestricted+0x54>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3318      	adds	r3, #24
 80067ee:	4619      	mov	r1, r3
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fe fdcc 	bl	800538e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006800:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	68b8      	ldr	r0, [r7, #8]
 8006806:	f000 fa51 	bl	8006cac <prvAddCurrentTaskToDelayedList>
	}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000eec 	.word	0x20000eec

08006818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3318      	adds	r3, #24
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fdfd 	bl	8005448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684e:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <xTaskRemoveFromEventList+0xb0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11d      	bne.n	8006892 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fdf4 	bl	8005448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b19      	ldr	r3, [pc, #100]	; (80068cc <xTaskRemoveFromEventList+0xb4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d903      	bls.n	8006874 <xTaskRemoveFromEventList+0x5c>
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	4a16      	ldr	r2, [pc, #88]	; (80068cc <xTaskRemoveFromEventList+0xb4>)
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <xTaskRemoveFromEventList+0xb8>)
 8006882:	441a      	add	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe fd7f 	bl	800538e <vListInsertEnd>
 8006890:	e005      	b.n	800689e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3318      	adds	r3, #24
 8006896:	4619      	mov	r1, r3
 8006898:	480e      	ldr	r0, [pc, #56]	; (80068d4 <xTaskRemoveFromEventList+0xbc>)
 800689a:	f7fe fd78 	bl	800538e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <xTaskRemoveFromEventList+0xc0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d905      	bls.n	80068b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <xTaskRemoveFromEventList+0xc4>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e001      	b.n	80068bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068bc:	697b      	ldr	r3, [r7, #20]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200013e8 	.word	0x200013e8
 80068cc:	200013c8 	.word	0x200013c8
 80068d0:	20000ef0 	.word	0x20000ef0
 80068d4:	20001380 	.word	0x20001380
 80068d8:	20000eec 	.word	0x20000eec
 80068dc:	200013d4 	.word	0x200013d4

080068e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <vTaskInternalSetTimeOutState+0x24>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <vTaskInternalSetTimeOutState+0x28>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	200013d8 	.word	0x200013d8
 8006908:	200013c4 	.word	0x200013c4

0800690c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800694e:	f000 fe79 	bl	8007644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <xTaskCheckForTimeOut+0xbc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800696a:	d102      	bne.n	8006972 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e023      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <xTaskCheckForTimeOut+0xc0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d007      	beq.n	800698e <xTaskCheckForTimeOut+0x82>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e015      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d20b      	bcs.n	80069b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ff9b 	bl	80068e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e004      	b.n	80069ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069b6:	2301      	movs	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069ba:	f000 fe73 	bl	80076a4 <vPortExitCritical>

	return xReturn;
 80069be:	69fb      	ldr	r3, [r7, #28]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200013c4 	.word	0x200013c4
 80069cc:	200013d8 	.word	0x200013d8

080069d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d4:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <vTaskMissedYield+0x14>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	200013d4 	.word	0x200013d4

080069e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f0:	f000 f852 	bl	8006a98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <prvIdleTask+0x28>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d9f9      	bls.n	80069f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <prvIdleTask+0x2c>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a0c:	e7f0      	b.n	80069f0 <prvIdleTask+0x8>
 8006a0e:	bf00      	nop
 8006a10:	20000ef0 	.word	0x20000ef0
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00c      	b.n	8006a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <prvInitialiseTaskLists+0x60>)
 8006a30:	4413      	add	r3, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fc7e 	bl	8005334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b37      	cmp	r3, #55	; 0x37
 8006a42:	d9ef      	bls.n	8006a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a46:	f7fe fc75 	bl	8005334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a4a:	480d      	ldr	r0, [pc, #52]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a4c:	f7fe fc72 	bl	8005334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a50:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x6c>)
 8006a52:	f7fe fc6f 	bl	8005334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a56:	480c      	ldr	r0, [pc, #48]	; (8006a88 <prvInitialiseTaskLists+0x70>)
 8006a58:	f7fe fc6c 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a5c:	480b      	ldr	r0, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x74>)
 8006a5e:	f7fe fc69 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <prvInitialiseTaskLists+0x78>)
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x64>)
 8006a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvInitialiseTaskLists+0x7c>)
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <prvInitialiseTaskLists+0x68>)
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000ef0 	.word	0x20000ef0
 8006a7c:	20001350 	.word	0x20001350
 8006a80:	20001364 	.word	0x20001364
 8006a84:	20001380 	.word	0x20001380
 8006a88:	20001394 	.word	0x20001394
 8006a8c:	200013ac 	.word	0x200013ac
 8006a90:	20001378 	.word	0x20001378
 8006a94:	2000137c 	.word	0x2000137c

08006a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9e:	e019      	b.n	8006ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa0:	f000 fdd0 	bl	8007644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <prvCheckTasksWaitingTermination+0x50>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fcc9 	bl	8005448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x54>)
 8006abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aca:	f000 fdeb 	bl	80076a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f810 	bl	8006af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <prvCheckTasksWaitingTermination+0x58>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e1      	bne.n	8006aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20001394 	.word	0x20001394
 8006aec:	200013c0 	.word	0x200013c0
 8006af0:	200013a8 	.word	0x200013a8

08006af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d108      	bne.n	8006b18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 ff88 	bl	8007a20 <vPortFree>
				vPortFree( pxTCB );
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 ff85 	bl	8007a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b16:	e018      	b.n	8006b4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d103      	bne.n	8006b2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 ff7c 	bl	8007a20 <vPortFree>
	}
 8006b28:	e00f      	b.n	8006b4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d00a      	beq.n	8006b4a <prvDeleteTCB+0x56>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <prvDeleteTCB+0x54>
	}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <prvResetNextTaskUnblockTime+0x38>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <prvResetNextTaskUnblockTime+0x3c>)
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b6c:	e008      	b.n	8006b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6e:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <prvResetNextTaskUnblockTime+0x38>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <prvResetNextTaskUnblockTime+0x3c>)
 8006b7e:	6013      	str	r3, [r2, #0]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20001378 	.word	0x20001378
 8006b90:	200013e0 	.word	0x200013e0

08006b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <xTaskGetSchedulerState+0x34>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	e008      	b.n	8006bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <xTaskGetSchedulerState+0x38>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	e001      	b.n	8006bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bba:	687b      	ldr	r3, [r7, #4]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	200013cc 	.word	0x200013cc
 8006bcc:	200013e8 	.word	0x200013e8

08006bd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d056      	beq.n	8006c94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <xTaskPriorityDisinherit+0xd0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d00a      	beq.n	8006c06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	60fb      	str	r3, [r7, #12]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60bb      	str	r3, [r7, #8]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d02c      	beq.n	8006c94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d128      	bne.n	8006c94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fbfe 	bl	8005448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <xTaskPriorityDisinherit+0xd4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d903      	bls.n	8006c74 <xTaskPriorityDisinherit+0xa4>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a0c      	ldr	r2, [pc, #48]	; (8006ca4 <xTaskPriorityDisinherit+0xd4>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <xTaskPriorityDisinherit+0xd8>)
 8006c82:	441a      	add	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fb7f 	bl	800538e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c94:	697b      	ldr	r3, [r7, #20]
	}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000eec 	.word	0x20000eec
 8006ca4:	200013c8 	.word	0x200013c8
 8006ca8:	20000ef0 	.word	0x20000ef0

08006cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fbc0 	bl	8005448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cce:	d10a      	bne.n	8006ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4819      	ldr	r0, [pc, #100]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ce0:	f7fe fb55 	bl	800538e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ce4:	e026      	b.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d209      	bcs.n	8006d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f7fe fb63 	bl	80053d6 <vListInsert>
}
 8006d10:	e010      	b.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fe fb59 	bl	80053d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d202      	bcs.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d2e:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6013      	str	r3, [r2, #0]
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	200013c4 	.word	0x200013c4
 8006d40:	20000eec 	.word	0x20000eec
 8006d44:	200013ac 	.word	0x200013ac
 8006d48:	2000137c 	.word	0x2000137c
 8006d4c:	20001378 	.word	0x20001378
 8006d50:	200013e0 	.word	0x200013e0

08006d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d5e:	f000 fb07 	bl	8007370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d62:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <xTimerCreateTimerTask+0x80>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d021      	beq.n	8006dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d72:	1d3a      	adds	r2, r7, #4
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fabf 	bl	8005300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	9202      	str	r2, [sp, #8]
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	460a      	mov	r2, r1
 8006d94:	4910      	ldr	r1, [pc, #64]	; (8006dd8 <xTimerCreateTimerTask+0x84>)
 8006d96:	4811      	ldr	r0, [pc, #68]	; (8006ddc <xTimerCreateTimerTask+0x88>)
 8006d98:	f7ff f86c 	bl	8005e74 <xTaskCreateStatic>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4a10      	ldr	r2, [pc, #64]	; (8006de0 <xTimerCreateTimerTask+0x8c>)
 8006da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <xTimerCreateTimerTask+0x8c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	613b      	str	r3, [r7, #16]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dca:	697b      	ldr	r3, [r7, #20]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	2000141c 	.word	0x2000141c
 8006dd8:	08007d30 	.word	0x08007d30
 8006ddc:	08006f19 	.word	0x08006f19
 8006de0:	20001420 	.word	0x20001420

08006de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	623b      	str	r3, [r7, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <xTimerGenericCommand+0x98>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02a      	beq.n	8006e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	dc18      	bgt.n	8006e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e2c:	f7ff feb2 	bl	8006b94 <xTaskGetSchedulerState>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d109      	bne.n	8006e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e36:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <xTimerGenericCommand+0x98>)
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f107 0110 	add.w	r1, r7, #16
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e42:	f7fe fc2f 	bl	80056a4 <xQueueGenericSend>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24
 8006e48:	e012      	b.n	8006e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <xTimerGenericCommand+0x98>)
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f107 0110 	add.w	r1, r7, #16
 8006e52:	2300      	movs	r3, #0
 8006e54:	2200      	movs	r2, #0
 8006e56:	f7fe fc25 	bl	80056a4 <xQueueGenericSend>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e5c:	e008      	b.n	8006e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e5e:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <xTimerGenericCommand+0x98>)
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f107 0110 	add.w	r1, r7, #16
 8006e66:	2300      	movs	r3, #0
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	f7fe fd19 	bl	80058a0 <xQueueGenericSendFromISR>
 8006e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3728      	adds	r7, #40	; 0x28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2000141c 	.word	0x2000141c

08006e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8a:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <prvProcessExpiredTimer+0x94>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fad5 	bl	8005448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d022      	beq.n	8006ef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	18d1      	adds	r1, r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	6978      	ldr	r0, [r7, #20]
 8006eba:	f000 f8d1 	bl	8007060 <prvInsertTimerInActiveList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01f      	beq.n	8006f04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	f7ff ff88 	bl	8006de4 <xTimerGenericCommand>
 8006ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d113      	bne.n	8006f04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	6978      	ldr	r0, [r7, #20]
 8006f0a:	4798      	blx	r3
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20001414 	.word	0x20001414

08006f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f857 	bl	8006fd8 <prvGetNextExpireTime>
 8006f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f803 	bl	8006f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f36:	f000 f8d5 	bl	80070e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f3a:	e7f1      	b.n	8006f20 <prvTimerTask+0x8>

08006f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f46:	f7ff fa43 	bl	80063d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f4a:	f107 0308 	add.w	r3, r7, #8
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f866 	bl	8007020 <prvSampleTimeNow>
 8006f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d130      	bne.n	8006fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <prvProcessTimerOrBlockTask+0x3c>
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d806      	bhi.n	8006f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f6a:	f7ff fa3f 	bl	80063ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff85 	bl	8006e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f76:	e024      	b.n	8006fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f7e:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <prvProcessTimerOrBlockTask+0x90>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <prvProcessTimerOrBlockTask+0x50>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <prvProcessTimerOrBlockTask+0x52>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <prvProcessTimerOrBlockTask+0x94>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f7fe ff35 	bl	8005e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fa2:	f7ff fa23 	bl	80063ec <xTaskResumeAll>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fac:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <prvProcessTimerOrBlockTask+0x98>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
}
 8006fbc:	e001      	b.n	8006fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fbe:	f7ff fa15 	bl	80063ec <xTaskResumeAll>
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20001418 	.word	0x20001418
 8006fd0:	2000141c 	.word	0x2000141c
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	; (800701c <prvGetNextExpireTime+0x44>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <prvGetNextExpireTime+0x16>
 8006fea:	2201      	movs	r2, #1
 8006fec:	e000      	b.n	8006ff0 <prvGetNextExpireTime+0x18>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <prvGetNextExpireTime+0x44>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e001      	b.n	800700c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20001414 	.word	0x20001414

08007020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007028:	f7ff fa7e 	bl	8006528 <xTaskGetTickCount>
 800702c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <prvSampleTimeNow+0x3c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d205      	bcs.n	8007044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007038:	f000 f936 	bl	80072a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e002      	b.n	800704a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800704a:	4a04      	ldr	r2, [pc, #16]	; (800705c <prvSampleTimeNow+0x3c>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007050:	68fb      	ldr	r3, [r7, #12]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20001424 	.word	0x20001424

08007060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d812      	bhi.n	80070ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e01b      	b.n	80070d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800709a:	4b10      	ldr	r3, [pc, #64]	; (80070dc <prvInsertTimerInActiveList+0x7c>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fe f996 	bl	80053d6 <vListInsert>
 80070aa:	e012      	b.n	80070d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d206      	bcs.n	80070c2 <prvInsertTimerInActiveList+0x62>
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e007      	b.n	80070d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <prvInsertTimerInActiveList+0x80>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fe f982 	bl	80053d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070d2:	697b      	ldr	r3, [r7, #20]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20001418 	.word	0x20001418
 80070e0:	20001414 	.word	0x20001414

080070e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08e      	sub	sp, #56	; 0x38
 80070e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ea:	e0ca      	b.n	8007282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da18      	bge.n	8007124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070f2:	1d3b      	adds	r3, r7, #4
 80070f4:	3304      	adds	r3, #4
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	61fb      	str	r3, [r7, #28]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711a:	6850      	ldr	r0, [r2, #4]
 800711c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711e:	6892      	ldr	r2, [r2, #8]
 8007120:	4611      	mov	r1, r2
 8007122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f2c0 80aa 	blt.w	8007280 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe f983 	bl	8005448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007142:	463b      	mov	r3, r7
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff ff6b 	bl	8007020 <prvSampleTimeNow>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b09      	cmp	r3, #9
 8007150:	f200 8097 	bhi.w	8007282 <prvProcessReceivedCommands+0x19e>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <prvProcessReceivedCommands+0x78>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007185 	.word	0x08007185
 8007160:	08007185 	.word	0x08007185
 8007164:	08007185 	.word	0x08007185
 8007168:	080071f9 	.word	0x080071f9
 800716c:	0800720d 	.word	0x0800720d
 8007170:	08007257 	.word	0x08007257
 8007174:	08007185 	.word	0x08007185
 8007178:	08007185 	.word	0x08007185
 800717c:	080071f9 	.word	0x080071f9
 8007180:	0800720d 	.word	0x0800720d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	18d1      	adds	r1, r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a4:	f7ff ff5c 	bl	8007060 <prvInsertTimerInActiveList>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d069      	beq.n	8007282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d05e      	beq.n	8007282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	441a      	add	r2, r3
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	2100      	movs	r1, #0
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f7ff fe05 	bl	8006de4 <xTimerGenericCommand>
 80071da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d14f      	bne.n	8007282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	61bb      	str	r3, [r7, #24]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071fe:	f023 0301 	bic.w	r3, r3, #1
 8007202:	b2da      	uxtb	r2, r3
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800720a:	e03a      	b.n	8007282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	b2da      	uxtb	r2, r3
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	617b      	str	r3, [r7, #20]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	18d1      	adds	r1, r2, r3
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007250:	f7ff ff06 	bl	8007060 <prvInsertTimerInActiveList>
					break;
 8007254:	e015      	b.n	8007282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d103      	bne.n	800726c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007266:	f000 fbdb 	bl	8007a20 <vPortFree>
 800726a:	e00a      	b.n	8007282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	b2da      	uxtb	r2, r3
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800727e:	e000      	b.n	8007282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <prvProcessReceivedCommands+0x1c0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1d39      	adds	r1, r7, #4
 8007288:	2200      	movs	r2, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fba4 	bl	80059d8 <xQueueReceive>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af2a 	bne.w	80070ec <prvProcessReceivedCommands+0x8>
	}
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	3730      	adds	r7, #48	; 0x30
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2000141c 	.word	0x2000141c

080072a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072ae:	e048      	b.n	8007342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072b0:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <prvSwitchTimerLists+0xc0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ba:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <prvSwitchTimerLists+0xc0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe f8bd 	bl	8005448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02e      	beq.n	8007342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d90e      	bls.n	8007314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <prvSwitchTimerLists+0xc0>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7fe f862 	bl	80053d6 <vListInsert>
 8007312:	e016      	b.n	8007342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007314:	2300      	movs	r3, #0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fd60 	bl	8006de4 <xTimerGenericCommand>
 8007324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	603b      	str	r3, [r7, #0]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <prvSwitchTimerLists+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1b1      	bne.n	80072b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <prvSwitchTimerLists+0xc0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007352:	4b06      	ldr	r3, [pc, #24]	; (800736c <prvSwitchTimerLists+0xc4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a04      	ldr	r2, [pc, #16]	; (8007368 <prvSwitchTimerLists+0xc0>)
 8007358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <prvSwitchTimerLists+0xc4>)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6013      	str	r3, [r2, #0]
}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20001414 	.word	0x20001414
 800736c:	20001418 	.word	0x20001418

08007370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007376:	f000 f965 	bl	8007644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800737a:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <prvCheckForValidListAndQueue+0x60>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d120      	bne.n	80073c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007382:	4814      	ldr	r0, [pc, #80]	; (80073d4 <prvCheckForValidListAndQueue+0x64>)
 8007384:	f7fd ffd6 	bl	8005334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007388:	4813      	ldr	r0, [pc, #76]	; (80073d8 <prvCheckForValidListAndQueue+0x68>)
 800738a:	f7fd ffd3 	bl	8005334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <prvCheckForValidListAndQueue+0x6c>)
 8007390:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <prvCheckForValidListAndQueue+0x64>)
 8007392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007394:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <prvCheckForValidListAndQueue+0x70>)
 8007396:	4a10      	ldr	r2, [pc, #64]	; (80073d8 <prvCheckForValidListAndQueue+0x68>)
 8007398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800739a:	2300      	movs	r3, #0
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <prvCheckForValidListAndQueue+0x74>)
 80073a0:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <prvCheckForValidListAndQueue+0x78>)
 80073a2:	2110      	movs	r1, #16
 80073a4:	200a      	movs	r0, #10
 80073a6:	f7fe f8e1 	bl	800556c <xQueueGenericCreateStatic>
 80073aa:	4603      	mov	r3, r0
 80073ac:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <prvCheckForValidListAndQueue+0x60>)
 80073ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <prvCheckForValidListAndQueue+0x60>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <prvCheckForValidListAndQueue+0x60>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	490b      	ldr	r1, [pc, #44]	; (80073ec <prvCheckForValidListAndQueue+0x7c>)
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fcfa 	bl	8005db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c4:	f000 f96e 	bl	80076a4 <vPortExitCritical>
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000141c 	.word	0x2000141c
 80073d4:	200013ec 	.word	0x200013ec
 80073d8:	20001400 	.word	0x20001400
 80073dc:	20001414 	.word	0x20001414
 80073e0:	20001418 	.word	0x20001418
 80073e4:	200014c8 	.word	0x200014c8
 80073e8:	20001428 	.word	0x20001428
 80073ec:	08007d38 	.word	0x08007d38

080073f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b04      	subs	r3, #4
 8007400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b04      	subs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b04      	subs	r3, #4
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <pxPortInitialiseStack+0x64>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b14      	subs	r3, #20
 800742a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f06f 0202 	mvn.w	r2, #2
 800743e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3b20      	subs	r3, #32
 8007444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	08007459 	.word	0x08007459

08007458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <prvTaskExitError+0x54>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800746a:	d00a      	beq.n	8007482 <prvTaskExitError+0x2a>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60fb      	str	r3, [r7, #12]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <prvTaskExitError+0x28>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60bb      	str	r3, [r7, #8]
}
 8007494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007496:	bf00      	nop
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0fc      	beq.n	8007498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800749e:	bf00      	nop
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	; (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b46      	ldr	r3, [pc, #280]	; (8007620 <xPortStartScheduler+0x120>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a46      	ldr	r2, [pc, #280]	; (8007624 <xPortStartScheduler+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10a      	bne.n	8007526 <xPortStartScheduler+0x26>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a3f      	ldr	r2, [pc, #252]	; (8007628 <xPortStartScheduler+0x128>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x46>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <xPortStartScheduler+0x12c>)
 8007548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <xPortStartScheduler+0x130>)
 800756c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800756e:	4b31      	ldr	r3, [pc, #196]	; (8007634 <xPortStartScheduler+0x134>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007574:	e009      	b.n	800758a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <xPortStartScheduler+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <xPortStartScheduler+0x134>)
 800757e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	b2db      	uxtb	r3, r3
 8007588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d0ef      	beq.n	8007576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00a      	beq.n	80075b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <xPortStartScheduler+0x134>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <xPortStartScheduler+0x134>)
 80075c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <xPortStartScheduler+0x134>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <xPortStartScheduler+0x134>)
 80075cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <xPortStartScheduler+0x138>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <xPortStartScheduler+0x138>)
 80075dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <xPortStartScheduler+0x138>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a14      	ldr	r2, [pc, #80]	; (8007638 <xPortStartScheduler+0x138>)
 80075e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075ee:	f000 f8dd 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <xPortStartScheduler+0x13c>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075f8:	f000 f8fc 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <xPortStartScheduler+0x140>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <xPortStartScheduler+0x140>)
 8007602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007608:	f7ff ff66 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800760c:	f7ff f856 	bl	80066bc <vTaskSwitchContext>
	prvTaskExitError();
 8007610:	f7ff ff22 	bl	8007458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00
 8007624:	410fc271 	.word	0x410fc271
 8007628:	410fc270 	.word	0x410fc270
 800762c:	e000e400 	.word	0xe000e400
 8007630:	20001518 	.word	0x20001518
 8007634:	2000151c 	.word	0x2000151c
 8007638:	e000ed20 	.word	0xe000ed20
 800763c:	2000000c 	.word	0x2000000c
 8007640:	e000ef34 	.word	0xe000ef34

08007644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	607b      	str	r3, [r7, #4]
}
 800765c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vPortEnterCritical+0x58>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3301      	adds	r3, #1
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <vPortEnterCritical+0x58>)
 8007666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <vPortEnterCritical+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10f      	bne.n	8007690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <vPortEnterCritical+0x5c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <vPortEnterCritical+0x4c>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	603b      	str	r3, [r7, #0]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <vPortEnterCritical+0x4a>
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	2000000c 	.word	0x2000000c
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <vPortExitCritical+0x50>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <vPortExitCritical+0x24>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	607b      	str	r3, [r7, #4]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <vPortExitCritical+0x50>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vPortExitCritical+0x50>)
 80076d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <vPortExitCritical+0x42>
 80076da:	2300      	movs	r3, #0
 80076dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f383 8811 	msr	BASEPRI, r3
}
 80076e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7fe ffc4 	bl	80066bc <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7fe fee1 	bl	8006548 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <xPortSysTickHandler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800780e:	f3ef 8305 	mrs	r3, IPSR
 8007812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d914      	bls.n	8007844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <vPortValidateInterruptPriority+0x70>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <vPortValidateInterruptPriority+0x74>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	429a      	cmp	r2, r3
 800782c:	d20a      	bcs.n	8007844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortValidateInterruptPriority+0x78>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <vPortValidateInterruptPriority+0x7c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d90a      	bls.n	800786a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	603b      	str	r3, [r7, #0]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <vPortValidateInterruptPriority+0x60>
	}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	e000e3f0 	.word	0xe000e3f0
 800787c:	20001518 	.word	0x20001518
 8007880:	e000ed0c 	.word	0xe000ed0c
 8007884:	2000151c 	.word	0x2000151c

08007888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08a      	sub	sp, #40	; 0x28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007894:	f7fe fd9c 	bl	80063d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007898:	4b5b      	ldr	r3, [pc, #364]	; (8007a08 <pvPortMalloc+0x180>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a0:	f000 f920 	bl	8007ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078a4:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <pvPortMalloc+0x184>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8093 	bne.w	80079d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01d      	beq.n	80078f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d014      	beq.n	80078f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f023 0307 	bic.w	r3, r3, #7
 80078d0:	3308      	adds	r3, #8
 80078d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <pvPortMalloc+0x6c>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	617b      	str	r3, [r7, #20]
}
 80078f0:	bf00      	nop
 80078f2:	e7fe      	b.n	80078f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d06e      	beq.n	80079d8 <pvPortMalloc+0x150>
 80078fa:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <pvPortMalloc+0x188>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d869      	bhi.n	80079d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007904:	4b43      	ldr	r3, [pc, #268]	; (8007a14 <pvPortMalloc+0x18c>)
 8007906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <pvPortMalloc+0x18c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790e:	e004      	b.n	800791a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <pvPortMalloc+0xa4>
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f1      	bne.n	8007910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <pvPortMalloc+0x180>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007932:	429a      	cmp	r2, r3
 8007934:	d050      	beq.n	80079d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2208      	movs	r2, #8
 800793c:	4413      	add	r3, r2
 800793e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	2308      	movs	r3, #8
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	429a      	cmp	r2, r3
 8007956:	d91f      	bls.n	8007998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <pvPortMalloc+0xf8>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	613b      	str	r3, [r7, #16]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007992:	69b8      	ldr	r0, [r7, #24]
 8007994:	f000 f908 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <pvPortMalloc+0x188>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <pvPortMalloc+0x188>)
 80079a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <pvPortMalloc+0x188>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <pvPortMalloc+0x190>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d203      	bcs.n	80079ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079b2:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <pvPortMalloc+0x188>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <pvPortMalloc+0x190>)
 80079b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x184>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x194>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3301      	adds	r3, #1
 80079d4:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <pvPortMalloc+0x194>)
 80079d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d8:	f7fe fd08 	bl	80063ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <pvPortMalloc+0x174>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60fb      	str	r3, [r7, #12]
}
 80079f8:	bf00      	nop
 80079fa:	e7fe      	b.n	80079fa <pvPortMalloc+0x172>
	return pvReturn;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200020e0 	.word	0x200020e0
 8007a0c:	200020f4 	.word	0x200020f4
 8007a10:	200020e4 	.word	0x200020e4
 8007a14:	200020d8 	.word	0x200020d8
 8007a18:	200020e8 	.word	0x200020e8
 8007a1c:	200020ec 	.word	0x200020ec

08007a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d04d      	beq.n	8007ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a32:	2308      	movs	r3, #8
 8007a34:	425b      	negs	r3, r3
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <vPortFree+0xb8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <vPortFree+0x44>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <vPortFree+0x62>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60bb      	str	r3, [r7, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <vPortFree+0xb8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01e      	beq.n	8007ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11a      	bne.n	8007ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <vPortFree+0xb8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa8:	f7fe fc92 	bl	80063d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <vPortFree+0xbc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <vPortFree+0xbc>)
 8007ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	f000 f874 	bl	8007ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <vPortFree+0xc0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a06      	ldr	r2, [pc, #24]	; (8007ae0 <vPortFree+0xc0>)
 8007ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aca:	f7fe fc8f 	bl	80063ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200020f4 	.word	0x200020f4
 8007adc:	200020e4 	.word	0x200020e4
 8007ae0:	200020f0 	.word	0x200020f0

08007ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007af0:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <prvHeapInit+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00c      	beq.n	8007b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3307      	adds	r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0307 	bic.w	r3, r3, #7
 8007b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <prvHeapInit+0xac>)
 8007b14:	4413      	add	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <prvHeapInit+0xb0>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b22:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <prvHeapInit+0xb0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b30:	2208      	movs	r2, #8
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <prvHeapInit+0xb4>)
 8007b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b46:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <prvHeapInit+0xb4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b4e:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <prvHeapInit+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvHeapInit+0xb4>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <prvHeapInit+0xb8>)
 8007b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <prvHeapInit+0xbc>)
 8007b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <prvHeapInit+0xc0>)
 8007b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	20001520 	.word	0x20001520
 8007b94:	200020d8 	.word	0x200020d8
 8007b98:	200020e0 	.word	0x200020e0
 8007b9c:	200020e8 	.word	0x200020e8
 8007ba0:	200020e4 	.word	0x200020e4
 8007ba4:	200020f4 	.word	0x200020f4

08007ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bb0:	4b28      	ldr	r3, [pc, #160]	; (8007c54 <prvInsertBlockIntoFreeList+0xac>)
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e002      	b.n	8007bbc <prvInsertBlockIntoFreeList+0x14>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d8f7      	bhi.n	8007bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d108      	bne.n	8007bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d118      	bne.n	8007c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00d      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e008      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c26:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <prvInsertBlockIntoFreeList+0xb0>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e003      	b.n	8007c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	200020d8 	.word	0x200020d8
 8007c58:	200020e0 	.word	0x200020e0

08007c5c <__libc_init_array>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4d0d      	ldr	r5, [pc, #52]	; (8007c94 <__libc_init_array+0x38>)
 8007c60:	4c0d      	ldr	r4, [pc, #52]	; (8007c98 <__libc_init_array+0x3c>)
 8007c62:	1b64      	subs	r4, r4, r5
 8007c64:	10a4      	asrs	r4, r4, #2
 8007c66:	2600      	movs	r6, #0
 8007c68:	42a6      	cmp	r6, r4
 8007c6a:	d109      	bne.n	8007c80 <__libc_init_array+0x24>
 8007c6c:	4d0b      	ldr	r5, [pc, #44]	; (8007c9c <__libc_init_array+0x40>)
 8007c6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ca0 <__libc_init_array+0x44>)
 8007c70:	f000 f82e 	bl	8007cd0 <_init>
 8007c74:	1b64      	subs	r4, r4, r5
 8007c76:	10a4      	asrs	r4, r4, #2
 8007c78:	2600      	movs	r6, #0
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	d105      	bne.n	8007c8a <__libc_init_array+0x2e>
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c84:	4798      	blx	r3
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7ee      	b.n	8007c68 <__libc_init_array+0xc>
 8007c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8e:	4798      	blx	r3
 8007c90:	3601      	adds	r6, #1
 8007c92:	e7f2      	b.n	8007c7a <__libc_init_array+0x1e>
 8007c94:	08007db4 	.word	0x08007db4
 8007c98:	08007db4 	.word	0x08007db4
 8007c9c:	08007db4 	.word	0x08007db4
 8007ca0:	08007db8 	.word	0x08007db8

08007ca4 <memcpy>:
 8007ca4:	440a      	add	r2, r1
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007cac:	d100      	bne.n	8007cb0 <memcpy+0xc>
 8007cae:	4770      	bx	lr
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d1f9      	bne.n	8007cb2 <memcpy+0xe>
 8007cbe:	bd10      	pop	{r4, pc}

08007cc0 <memset>:
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d100      	bne.n	8007cca <memset+0xa>
 8007cc8:	4770      	bx	lr
 8007cca:	f803 1b01 	strb.w	r1, [r3], #1
 8007cce:	e7f9      	b.n	8007cc4 <memset+0x4>

08007cd0 <_init>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr

08007cdc <_fini>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr

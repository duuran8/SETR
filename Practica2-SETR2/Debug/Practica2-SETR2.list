
Practica2-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c8c  08007c8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c94  08007c94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08007cac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08007cac  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028463  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b17  00000000  00000000  000484a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  0004cfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002178  00000000  00000000  0004f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000504e  00000000  00000000  00051488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027dc0  00000000  00000000  000564d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b0e  00000000  00000000  0007e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009828  00000000  00000000  00185df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bc0 	.word	0x08007bc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007bc0 	.word	0x08007bc0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <led_toggle>:
 *      Author: julianduran
 */
#include "led_toggle.h"


void led_toggle(uint8_t led) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	switch (led) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d82c      	bhi.n	800053e <led_toggle+0x6a>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <led_toggle+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	08000529 	.word	0x08000529
 80004f8:	08000535 	.word	0x08000535
		case 0:
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <led_toggle+0x74>)
 8000502:	f001 fbc3 	bl	8001c8c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <led_toggle+0x78>)
 800050c:	f001 fbbe 	bl	8001c8c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fbb9 	bl	8001c8c <HAL_GPIO_TogglePin>
		}	break;
 800051a:	e011      	b.n	8000540 <led_toggle+0x6c>
		case 1:
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <led_toggle+0x74>)
 8000522:	f001 fbb3 	bl	8001c8c <HAL_GPIO_TogglePin>
			break;
 8000526:	e00b      	b.n	8000540 <led_toggle+0x6c>
		case 2:
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <led_toggle+0x78>)
 800052e:	f001 fbad 	bl	8001c8c <HAL_GPIO_TogglePin>
			break;
 8000532:	e005      	b.n	8000540 <led_toggle+0x6c>
		case 3:
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f001 fba7 	bl	8001c8c <HAL_GPIO_TogglePin>
		default:
			break;
 800053e:	bf00      	nop
		}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	48000400 	.word	0x48000400
 800054c:	48000800 	.word	0x48000800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 ff8d 	bl	8001472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f826 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f9ee 	bl	800093c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000560:	f000 f884 	bl	800066c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000564:	f000 f8ba 	bl	80006dc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000568:	f000 f8f6 	bl	8000758 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800056c:	f000 f91a 	bl	80007a4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000570:	f000 f956 	bl	8000820 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000574:	f000 f984 	bl	8000880 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000578:	f000 f9b2 	bl	80008e0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f004 fd92 	bl	80050a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <main+0x4c>)
 8000582:	2100      	movs	r1, #0
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x50>)
 8000586:	f004 fdd7 	bl	8005138 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <main+0x54>)
 800058e:	6013      	str	r3, [r2, #0]
  //CreateLedTask();
  CreateLedTaskParam();
 8000590:	f000 ff22 	bl	80013d8 <CreateLedTaskParam>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f004 fdaa 	bl	80050ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x48>
 800059a:	bf00      	nop
 800059c:	08007c20 	.word	0x08007c20
 80005a0:	08000ca1 	.word	0x08000ca1
 80005a4:	20000774 	.word	0x20000774

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f007 fafa 	bl	8007bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f001 fe27 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 fb7c 	bl	8000cd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f001 fe02 	bl	80021e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <SystemClock_Config+0xc0>)
 80005e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e6:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xc0>)
 80005e8:	f023 0318 	bic.w	r3, r3, #24
 80005ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f0:	2314      	movs	r3, #20
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000608:	2301      	movs	r3, #1
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000610:	2328      	movs	r3, #40	; 0x28
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000614:	2307      	movs	r3, #7
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f001 ff1d 	bl	8002464 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000630:	f000 fb50 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fae5 	bl	8002c1c <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000658:	f000 fb3c 	bl	8000cd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065c:	f003 f81e 	bl	800369c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	; 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 8000672:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <MX_DFSDM1_Init+0x6c>)
 8000674:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 8000678:	2201      	movs	r2, #1
 800067a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 8000684:	2202      	movs	r2, #2
 8000686:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 8000696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_DFSDM1_Init+0x68>)
 80006c2:	f001 f815 	bl	80016f0 <HAL_DFSDM_ChannelInit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006cc:	f000 fb02 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	40016020 	.word	0x40016020

080006dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_I2C2_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_I2C2_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_I2C2_Init+0x74>)
 80006e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80006ec:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_I2C2_Init+0x74>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_I2C2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_I2C2_Init+0x74>)
 800071a:	f001 faf4 	bl	8001d06 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fad6 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C2_Init+0x74>)
 800072c:	f001 fb7a 	bl	8001e24 <HAL_I2CEx_ConfigAnalogFilter>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000736:	f000 facd 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_I2C2_Init+0x74>)
 800073e:	f001 fbbc 	bl	8001eba <HAL_I2CEx_ConfigDigitalFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 fac4 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000064 	.word	0x20000064
 8000754:	40005800 	.word	0x40005800

08000758 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_QUADSPI_Init+0x44>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_QUADSPI_Init+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_QUADSPI_Init+0x44>)
 8000764:	2202      	movs	r2, #2
 8000766:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_QUADSPI_Init+0x44>)
 800076a:	2204      	movs	r2, #4
 800076c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_QUADSPI_Init+0x44>)
 8000770:	2210      	movs	r2, #16
 8000772:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_QUADSPI_Init+0x44>)
 8000776:	2217      	movs	r2, #23
 8000778:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_QUADSPI_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_QUADSPI_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_QUADSPI_Init+0x44>)
 8000788:	f001 fdb0 	bl	80022ec <HAL_QSPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000792:	f000 fa9f 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	a0001000 	.word	0xa0001000

080007a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_SPI3_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_SPI3_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_SPI3_Init+0x74>)
 80007b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI3_Init+0x74>)
 80007be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI3_Init+0x74>)
 80007d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI3_Init+0x74>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI3_Init+0x74>)
 80007fe:	2208      	movs	r2, #8
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_SPI3_Init+0x74>)
 8000804:	f003 f92c 	bl	8003a60 <HAL_SPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fa61 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000fc 	.word	0x200000fc
 800081c:	40003c00 	.word	0x40003c00

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_USART1_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART1_UART_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART1_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART1_UART_Init+0x58>)
 8000864:	f003 fc70 	bl	8004148 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 fa31 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000160 	.word	0x20000160
 800087c:	40013800 	.word	0x40013800

08000880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART3_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008c4:	f003 fc40 	bl	8004148 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 fa01 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001e4 	.word	0x200001e4
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2206      	movs	r2, #6
 80008f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	f001 fb15 	bl	8001f52 <HAL_PCD_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f9d1 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000268 	.word	0x20000268

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4bbd      	ldr	r3, [pc, #756]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4abc      	ldr	r2, [pc, #752]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4bba      	ldr	r3, [pc, #744]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4bb7      	ldr	r3, [pc, #732]	; (8000c48 <MX_GPIO_Init+0x30c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4ab6      	ldr	r2, [pc, #728]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4bb4      	ldr	r3, [pc, #720]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4bb1      	ldr	r3, [pc, #708]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4ab0      	ldr	r2, [pc, #704]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4bae      	ldr	r3, [pc, #696]	; (8000c48 <MX_GPIO_Init+0x30c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4bab      	ldr	r3, [pc, #684]	; (8000c48 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4aaa      	ldr	r2, [pc, #680]	; (8000c48 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4ba8      	ldr	r3, [pc, #672]	; (8000c48 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4ba5      	ldr	r3, [pc, #660]	; (8000c48 <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4aa4      	ldr	r2, [pc, #656]	; (8000c48 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4ba2      	ldr	r3, [pc, #648]	; (8000c48 <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009d0:	489e      	ldr	r0, [pc, #632]	; (8000c4c <MX_GPIO_Init+0x310>)
 80009d2:	f001 f943 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f248 1124 	movw	r1, #33060	; 0x8124
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 f93c 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009e4:	2200      	movs	r2, #0
 80009e6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009ea:	4899      	ldr	r0, [pc, #612]	; (8000c50 <MX_GPIO_Init+0x314>)
 80009ec:	f001 f936 	bl	8001c5c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f241 0181 	movw	r1, #4225	; 0x1081
 80009f6:	4897      	ldr	r0, [pc, #604]	; (8000c54 <MX_GPIO_Init+0x318>)
 80009f8:	f001 f930 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	4894      	ldr	r0, [pc, #592]	; (8000c54 <MX_GPIO_Init+0x318>)
 8000a04:	f001 f92a 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a0e:	4892      	ldr	r0, [pc, #584]	; (8000c58 <MX_GPIO_Init+0x31c>)
 8000a10:	f001 f924 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2120      	movs	r1, #32
 8000a18:	488d      	ldr	r0, [pc, #564]	; (8000c50 <MX_GPIO_Init+0x314>)
 8000a1a:	f001 f91f 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2101      	movs	r1, #1
 8000a22:	488a      	ldr	r0, [pc, #552]	; (8000c4c <MX_GPIO_Init+0x310>)
 8000a24:	f001 f91a 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a28:	f240 1315 	movw	r3, #277	; 0x115
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4882      	ldr	r0, [pc, #520]	; (8000c4c <MX_GPIO_Init+0x310>)
 8000a42:	f000 ff61 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a46:	236a      	movs	r3, #106	; 0x6a
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	487c      	ldr	r0, [pc, #496]	; (8000c4c <MX_GPIO_Init+0x310>)
 8000a5c:	f000 ff54 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4878      	ldr	r0, [pc, #480]	; (8000c58 <MX_GPIO_Init+0x31c>)
 8000a78:	f000 ff46 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a7c:	233f      	movs	r3, #63	; 0x3f
 8000a7e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a80:	230b      	movs	r3, #11
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4872      	ldr	r0, [pc, #456]	; (8000c58 <MX_GPIO_Init+0x31c>)
 8000a90:	f000 ff3a 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a94:	2303      	movs	r3, #3
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 ff29 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_3_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ab6:	f248 1324 	movw	r3, #33060	; 0x8124
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 ff19 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f000 ff08 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000af8:	2310      	movs	r3, #16
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afc:	230b      	movs	r3, #11
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f000 fefb 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b12:	23c0      	movs	r3, #192	; 0xc0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b22:	2305      	movs	r3, #5
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f000 feea 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4841      	ldr	r0, [pc, #260]	; (8000c50 <MX_GPIO_Init+0x314>)
 8000b4a:	f000 fedd 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b52:	230b      	movs	r3, #11
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	483b      	ldr	r0, [pc, #236]	; (8000c50 <MX_GPIO_Init+0x314>)
 8000b62:	f000 fed1 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b66:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b6a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4834      	ldr	r0, [pc, #208]	; (8000c50 <MX_GPIO_Init+0x314>)
 8000b80:	f000 fec2 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b84:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b88:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482e      	ldr	r0, [pc, #184]	; (8000c54 <MX_GPIO_Init+0x318>)
 8000b9c:	f000 feb4 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ba0:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4826      	ldr	r0, [pc, #152]	; (8000c54 <MX_GPIO_Init+0x318>)
 8000bba:	f000 fea5 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_GPIO_Init+0x31c>)
 8000bd8:	f000 fe96 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x31c>)
 8000bf4:	f000 fe88 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0x318>)
 8000c14:	f000 fe78 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c18:	2378      	movs	r3, #120	; 0x78
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_GPIO_Init+0x318>)
 8000c34:	f000 fe68 	bl	8001908 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e00a      	b.n	8000c5c <MX_GPIO_Init+0x320>
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001000 	.word	0x48001000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c62:	2304      	movs	r3, #4
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MX_GPIO_Init+0x360>)
 8000c6e:	f000 fe4b 	bl	8001908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2017      	movs	r0, #23
 8000c78:	f000 fd10 	bl	800169c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c7c:	2017      	movs	r0, #23
 8000c7e:	f000 fd29 	bl	80016d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	2028      	movs	r0, #40	; 0x28
 8000c88:	f000 fd08 	bl	800169c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f000 fd21 	bl	80016d4 <HAL_NVIC_EnableIRQ>

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f004 fad7 	bl	800525c <osDelay>
 8000cae:	e7fb      	b.n	8000ca8 <StartDefaultTask+0x8>

08000cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc2:	f000 fbef 	bl	80014a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40014800 	.word	0x40014800

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fcbd 	bl	800169c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	; 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2288      	movs	r2, #136	; 0x88
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 ff2d 	bl	8007bb0 <memset>
  if(DFSDM1_Init == 0)
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d142      	bne.n	8000de4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 f9aa 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff ffab 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dae:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dd6:	f000 fd97 	bl	8001908 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a02      	ldr	r2, [pc, #8]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000de2:	6013      	str	r3, [r2, #0]
  }

}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000778 	.word	0x20000778
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48001000 	.word	0x48001000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ac      	sub	sp, #176	; 0xb0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2288      	movs	r2, #136	; 0x88
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 fec9 	bl	8007bb0 <memset>
  if(hi2c->Instance==I2C2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_I2C_MspInit+0xb0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d13b      	bne.n	8000ea0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 f947 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e40:	f7ff ff48 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e76:	2304      	movs	r3, #4
 8000e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e80:	4619      	mov	r1, r3
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_I2C_MspInit+0xb8>)
 8000e84:	f000 fd40 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e92:	6593      	str	r3, [r2, #88]	; 0x58
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	37b0      	adds	r7, #176	; 0xb0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005800 	.word	0x40005800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_QSPI_MspInit+0x7c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d128      	bne.n	8000f28 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f06:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f0a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_QSPI_MspInit+0x84>)
 8000f24:	f000 fcf0 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	a0001000 	.word	0xa0001000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48001000 	.word	0x48001000

08000f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_SPI_MspInit+0x84>)
 8000fac:	f000 fcac 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40003c00 	.word	0x40003c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ae      	sub	sp, #184	; 0xb8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2288      	movs	r2, #136	; 0x88
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fde3 	bl	8007bb0 <memset>
  if(huart->Instance==USART1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a42      	ldr	r2, [pc, #264]	; (80010f8 <HAL_UART_MspInit+0x134>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13b      	bne.n	800106c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4618      	mov	r0, r3
 8001002:	f002 f861 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff fe62 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a39      	ldr	r2, [pc, #228]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_UART_MspInit+0x138>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_UART_MspInit+0x138>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_UART_MspInit+0x138>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001062:	4619      	mov	r1, r3
 8001064:	4826      	ldr	r0, [pc, #152]	; (8001100 <HAL_UART_MspInit+0x13c>)
 8001066:	f000 fc4f 	bl	8001908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	e040      	b.n	80010ee <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <HAL_UART_MspInit+0x140>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d13b      	bne.n	80010ee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f002 f820 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800108e:	f7ff fe21 	bl	8000cd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <HAL_UART_MspInit+0x144>)
 80010ea:	f000 fc0d 	bl	8001908 <HAL_GPIO_Init>
}
 80010ee:	bf00      	nop
 80010f0:	37b8      	adds	r7, #184	; 0xb8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400
 8001104:	40004800 	.word	0x40004800
 8001108:	48000c00 	.word	0x48000c00

0800110c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	; 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fd3f 	bl	8007bb0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800113a:	d17c      	bne.n	8001236 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001152:	2318      	movs	r3, #24
 8001154:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 ffab 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001178:	f7ff fdac 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fba9 	bl	8001908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011d0:	230a      	movs	r3, #10
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fb92 	bl	8001908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d114      	bne.n	8001232 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001220:	f001 f854 	bl	80022cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800122a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001230:	e001      	b.n	8001236 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001232:	f001 f84b 	bl	80022cc <HAL_PWREx_EnableVddUSB>
}
 8001236:	bf00      	nop
 8001238:	37b0      	adds	r7, #176	; 0xb0
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_InitTick+0xc8>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_InitTick+0xc8>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6613      	str	r3, [r2, #96]	; 0x60
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_InitTick+0xc8>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fe95 	bl	8002fa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800127a:	f001 fe7d 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 800127e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	4a23      	ldr	r2, [pc, #140]	; (8001310 <HAL_InitTick+0xcc>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	3b01      	subs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_InitTick+0xd0>)
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <HAL_InitTick+0xd4>)
 8001292:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_InitTick+0xd0>)
 8001296:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_InitTick+0xd0>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_InitTick+0xd0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_InitTick+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_InitTick+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <HAL_InitTick+0xd0>)
 80012b6:	f002 fc76 	bl	8003ba6 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d11b      	bne.n	8001300 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <HAL_InitTick+0xd0>)
 80012ca:	f002 fccd 	bl	8003c68 <HAL_TIM_Base_Start_IT>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80012dc:	201a      	movs	r0, #26
 80012de:	f000 f9f9 	bl	80016d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d808      	bhi.n	80012fa <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	201a      	movs	r0, #26
 80012ee:	f000 f9d5 	bl	800169c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_InitTick+0xd8>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e002      	b.n	8001300 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001304:	4618      	mov	r0, r3
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	431bde83 	.word	0x431bde83
 8001314:	2000077c 	.word	0x2000077c
 8001318:	40014800 	.word	0x40014800
 800131c:	20000004 	.word	0x20000004

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001350:	2020      	movs	r0, #32
 8001352:	f000 fcb5 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001356:	2040      	movs	r0, #64	; 0x40
 8001358:	f000 fcb2 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800135c:	2080      	movs	r0, #128	; 0x80
 800135e:	f000 fcaf 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001366:	f000 fcab 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001376:	f002 fce7 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000077c 	.word	0x2000077c

08001384 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001388:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800138c:	f000 fc98 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001390:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001394:	f000 fc94 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001398:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800139c:	f000 fc90 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a4:	f000 fc8c 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013ac:	f000 fc88 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <CreateLedTaskParam>:
		vTaskDelay(1000);
	}
}


void CreateLedTaskParam(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
	xTaskCreate(LedToggleTaskParam, "LedToggleTaskParam", 128, 3, 1, NULL);
 80013de:	2300      	movs	r3, #0
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2303      	movs	r3, #3
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	4903      	ldr	r1, [pc, #12]	; (80013f8 <CreateLedTaskParam+0x20>)
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <CreateLedTaskParam+0x24>)
 80013ee:	f004 fd82 	bl	8005ef6 <xTaskCreate>
	}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08007bf4 	.word	0x08007bf4
 80013fc:	08001401 	.word	0x08001401

08001400 <LedToggleTaskParam>:

void LedToggleTaskParam(void *pArg){
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	int p = (int *) pArg;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60fb      	str	r3, [r7, #12]
	for(;;){
		led_toggle(p);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f85f 	bl	80004d4 <led_toggle>
		vTaskDelay(1000);
 8001416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141a:	f004 feb1 	bl	8006180 <vTaskDelay>
	for(;;){
 800141e:	e7f5      	b.n	800140c <LedToggleTaskParam+0xc>

08001420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001424:	f7ff ffc6 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <LoopForever+0x6>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <LoopForever+0xe>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	; (800146c <LoopForever+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f006 fb7d 	bl	8007b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001452:	f7ff f87d 	bl	8000550 <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001464:	08007c9c 	.word	0x08007c9c
  ldr r2, =_sbss
 8001468:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800146c:	200020f8 	.word	0x200020f8

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>

08001472 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f902 	bl	8001686 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001482:	200f      	movs	r0, #15
 8001484:	f7ff fede 	bl	8001244 <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e001      	b.n	8001498 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001494:	f7ff fc24 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	200007c8 	.word	0x200007c8

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200007c8 	.word	0x200007c8

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <__NVIC_EnableIRQ+0x38>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff4c 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ae:	f7ff ff61 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	6978      	ldr	r0, [r7, #20]
 80016ba:	f7ff ffb1 	bl	8001620 <NVIC_EncodePriority>
 80016be:	4602      	mov	r2, r0
 80016c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff80 	bl	80015cc <__NVIC_SetPriority>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff54 	bl	8001590 <__NVIC_EnableIRQ>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0ac      	b.n	800185c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f8b2 	bl	8001870 <DFSDM_GetChannelFromInstance>
 800170c:	4603      	mov	r3, r0
 800170e:	4a55      	ldr	r2, [pc, #340]	; (8001864 <HAL_DFSDM_ChannelInit+0x174>)
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e09f      	b.n	800185c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fb07 	bl	8000d30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 800172a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_DFSDM_ChannelInit+0x178>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d125      	bne.n	8001780 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001734:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800173a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800173e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4948      	ldr	r1, [pc, #288]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001754:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001758:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	493f      	ldr	r1, [pc, #252]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_DFSDM_ChannelInit+0x17c>)
 800177a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800177e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800178e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800179e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 020f 	bic.w	r2, r2, #15
 80017bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80017e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f002 0207 	and.w	r2, r2, #7
 8001810:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800183c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f810 	bl	8001870 <DFSDM_GetChannelFromInstance>
 8001850:	4602      	mov	r2, r0
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <HAL_DFSDM_ChannelInit+0x174>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200007d0 	.word	0x200007d0
 8001868:	200007cc 	.word	0x200007cc
 800186c:	40016000 	.word	0x40016000

08001870 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <DFSDM_GetChannelFromInstance+0x7c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e02b      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <DFSDM_GetChannelFromInstance+0x80>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d102      	bne.n	8001894 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e024      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <DFSDM_GetChannelFromInstance+0x84>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d102      	bne.n	80018a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800189c:	2302      	movs	r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e01d      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <DFSDM_GetChannelFromInstance+0x88>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e016      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <DFSDM_GetChannelFromInstance+0x8c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018b8:	2305      	movs	r3, #5
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e00f      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <DFSDM_GetChannelFromInstance+0x90>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018c6:	2306      	movs	r3, #6
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e008      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <DFSDM_GetChannelFromInstance+0x94>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018d4:	2307      	movs	r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018da:	2303      	movs	r3, #3
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40016000 	.word	0x40016000
 80018f0:	40016020 	.word	0x40016020
 80018f4:	40016040 	.word	0x40016040
 80018f8:	40016080 	.word	0x40016080
 80018fc:	400160a0 	.word	0x400160a0
 8001900:	400160c0 	.word	0x400160c0
 8001904:	400160e0 	.word	0x400160e0

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	e17f      	b.n	8001c18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8171 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <HAL_GPIO_Init+0x40>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d130      	bne.n	80019aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	f003 0201 	and.w	r2, r3, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d118      	bne.n	80019e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	6939      	ldr	r1, [r7, #16]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80ac 	beq.w	8001c12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_GPIO_Init+0x330>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x242>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x338>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x23e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_GPIO_Init+0x33c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x23a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x340>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x236>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x344>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x232>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_GPIO_Init+0x348>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x22e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x34c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x22a>
 8001b2e:	2306      	movs	r3, #6
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x244>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x334>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_GPIO_Init+0x350>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae78 	bne.w	8001918 <HAL_GPIO_Init+0x10>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	48000c00 	.word	0x48000c00
 8001c4c:	48001000 	.word	0x48001000
 8001c50:	48001400 	.word	0x48001400
 8001c54:	48001800 	.word	0x48001800
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43d9      	mvns	r1, r3
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	400b      	ands	r3, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f806 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e081      	b.n	8001e1c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d106      	bne.n	8001d32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff f863 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2224      	movs	r2, #36	; 0x24
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	e006      	b.n	8001d8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d104      	bne.n	8001da0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69d9      	ldr	r1, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d138      	bne.n	8001eac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e032      	b.n	8001eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d139      	bne.n	8001f44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e033      	b.n	8001f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2224      	movs	r2, #36	; 0x24
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f54:	b08f      	sub	sp, #60	; 0x3c
 8001f56:	af0a      	add	r7, sp, #40	; 0x28
 8001f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e116      	b.n	8002192 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff f8c4 	bl	800110c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fdb1 	bl	8004b0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	687e      	ldr	r6, [r7, #4]
 8001fb0:	466d      	mov	r5, sp
 8001fb2:	f106 0410 	add.w	r4, r6, #16
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc6:	1d33      	adds	r3, r6, #4
 8001fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f002 fd71 	bl	8004ab2 <USB_CoreInit>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0d7      	b.n	8002192 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fd9f 	bl	8004b2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e04a      	b.n	800208a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	333d      	adds	r3, #61	; 0x3d
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	333c      	adds	r3, #60	; 0x3c
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	b298      	uxth	r0, r3
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3344      	adds	r3, #68	; 0x44
 8002030:	4602      	mov	r2, r0
 8002032:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3340      	adds	r3, #64	; 0x40
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3348      	adds	r3, #72	; 0x48
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	334c      	adds	r3, #76	; 0x4c
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3354      	adds	r3, #84	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3af      	bcc.n	8001ff4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e044      	b.n	8002124 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d3b5      	bcc.n	800209a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	687e      	ldr	r6, [r7, #4]
 8002136:	466d      	mov	r5, sp
 8002138:	f106 0410 	add.w	r4, r6, #16
 800213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002148:	e885 0003 	stmia.w	r5, {r0, r1}
 800214c:	1d33      	adds	r3, r6, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f002 fd37 	bl	8004bc4 <USB_DevInit>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e014      	b.n	8002192 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f80a 	bl	800219a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fee3 	bl	8004f56 <USB_DevDisconnect>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800219a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	f043 0303 	orr.w	r3, r3, #3
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	; 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6053      	str	r3, [r2, #4]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40007000 	.word	0x40007000

080022ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff f8ea 	bl	80014cc <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e063      	b.n	80023cc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe fdcb 	bl	8000eb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800231e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f858 	bl	80023d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	2120      	movs	r1, #32
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f850 	bl	80023f4 <QSPI_WaitFlagStateUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002358:	7afb      	ldrb	r3, [r7, #11]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d131      	bne.n	80023c2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002368:	f023 0310 	bic.w	r3, r3, #16
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	0611      	lsls	r1, r2, #24
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_QSPI_Init+0xe8>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6912      	ldr	r2, [r2, #16]
 800238e:	0411      	lsls	r1, r2, #16
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6952      	ldr	r2, [r2, #20]
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6992      	ldr	r2, [r2, #24]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	ffe0f8fe 	.word	0xffe0f8fe

080023d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002404:	e01a      	b.n	800243c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240c:	d016      	beq.n	800243c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240e:	f7ff f85d 	bl	80014cc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	d302      	bcc.n	8002424 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2204      	movs	r2, #4
 8002428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00e      	b.n	800245a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	429a      	cmp	r2, r3
 8002456:	d1d6      	bne.n	8002406 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e3ca      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	4b97      	ldr	r3, [pc, #604]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002480:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80e4 	beq.w	8002660 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x4a>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	f040 808b 	bne.w	80025bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	f040 8087 	bne.w	80025bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ae:	4b89      	ldr	r3, [pc, #548]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e3a2      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_RCC_OscConfig+0x7c>
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024de:	e005      	b.n	80024ec <HAL_RCC_OscConfig+0x88>
 80024e0:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d223      	bcs.n	8002538 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fd87 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e383      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a72      	ldr	r2, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	496d      	ldr	r1, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002522:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	4968      	ldr	r1, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	e025      	b.n	8002584 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4960      	ldr	r1, [pc, #384]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	495b      	ldr	r1, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fd47 	bl	8003008 <RCC_SetFlashLatencyFromMSIRange>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e343      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002584:	f000 fc4a 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	4950      	ldr	r1, [pc, #320]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
 80025a0:	4a4e      	ldr	r2, [pc, #312]	; (80026dc <HAL_RCC_OscConfig+0x278>)
 80025a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025a4:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fe4b 	bl	8001244 <HAL_InitTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d052      	beq.n	800265e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	e327      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d032      	beq.n	800262a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a42      	ldr	r2, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff7c 	bl	80014cc <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d8:	f7fe ff78 	bl	80014cc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e310      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a36      	ldr	r2, [pc, #216]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4931      	ldr	r1, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	492c      	ldr	r1, [pc, #176]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e01a      	b.n	8002660 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002636:	f7fe ff49 	bl	80014cc <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263e:	f7fe ff45 	bl	80014cc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e2dd      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002650:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x1da>
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d074      	beq.n	8002756 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x21a>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d10e      	bne.n	8002696 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d160      	bne.n	8002754 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e2ba      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x24a>
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b6:	d115      	bne.n	80026e4 <HAL_RCC_OscConfig+0x280>
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x298>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08007c44 	.word	0x08007c44
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004
 80026e4:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a9f      	ldr	r2, [pc, #636]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b9d      	ldr	r3, [pc, #628]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a9c      	ldr	r2, [pc, #624]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fee2 	bl	80014cc <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fede 	bl	80014cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e276      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x2a8>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fece 	bl	80014cc <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe feca 	bl	80014cc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e262      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x2d0>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d060      	beq.n	8002824 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x310>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d116      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x328>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e23f      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	4973      	ldr	r1, [pc, #460]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	e040      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d023      	beq.n	80027f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6e      	ldr	r2, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fe89 	bl	80014cc <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fe85 	bl	80014cc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e21d      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	495f      	ldr	r1, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fe65 	bl	80014cc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fe61 	bl	80014cc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1f9      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fe40 	bl	80014cc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fe3c 	bl	80014cc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1d4      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x3ec>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002878:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fe23 	bl	80014cc <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fe1f 	bl	80014cc <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1b7      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80a6 	beq.w	8002a04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x508>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_OscConfig+0x508>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	; (800296c <HAL_RCC_OscConfig+0x508>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fde6 	bl	80014cc <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fde2 	bl	80014cc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e17a      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x508>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_RCC_OscConfig+0x4d8>
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	e029      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d115      	bne.n	8002970 <HAL_RCC_OscConfig+0x50c>
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a03      	ldr	r2, [pc, #12]	; (8002968 <HAL_RCC_OscConfig+0x504>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	4b9c      	ldr	r3, [pc, #624]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	4a9b      	ldr	r2, [pc, #620]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002980:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	4a97      	ldr	r2, [pc, #604]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fd98 	bl	80014cc <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fd94 	bl	80014cc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e12a      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	4b8b      	ldr	r3, [pc, #556]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ed      	beq.n	80029a0 <HAL_RCC_OscConfig+0x53c>
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fd81 	bl	80014cc <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fd7d 	bl	80014cc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e113      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e4:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ed      	bne.n	80029ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80fe 	beq.w	8002c0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	f040 80d0 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a18:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d130      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d127      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a58:	2a07      	cmp	r2, #7
 8002a5a:	bf14      	ite	ne
 8002a5c:	2201      	movne	r2, #1
 8002a5e:	2200      	moveq	r2, #0
 8002a60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	3b01      	subs	r3, #1
 8002a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d06e      	beq.n	8002b6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d069      	beq.n	8002b68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0ad      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002abc:	f7fe fd06 	bl	80014cc <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fd02 	bl	80014cc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e09a      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <HAL_RCC_OscConfig+0x784>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002afc:	0212      	lsls	r2, r2, #8
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b04:	0852      	lsrs	r2, r2, #1
 8002b06:	3a01      	subs	r2, #1
 8002b08:	0552      	lsls	r2, r2, #21
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0652      	lsls	r2, r2, #25
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b1c:	0912      	lsrs	r2, r2, #4
 8002b1e:	0452      	lsls	r2, r2, #17
 8002b20:	430a      	orrs	r2, r1
 8002b22:	4930      	ldr	r1, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b40:	f7fe fcc4 	bl	80014cc <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fcc0 	bl	80014cc <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e058      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b66:	e050      	b.n	8002c0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e04f      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d148      	bne.n	8002c0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b90:	f7fe fc9c 	bl	80014cc <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fc98 	bl	80014cc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e030      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x734>
 8002bb6:	e028      	b.n	8002c0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d023      	beq.n	8002c06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x780>)
 8002bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fc7f 	bl	80014cc <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd0:	e00c      	b.n	8002bec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fc7b 	bl	80014cc <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d905      	bls.n	8002bec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e013      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_OscConfig+0x7b0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ec      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_OscConfig+0x7b0>)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	4905      	ldr	r1, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x7b0>)
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
 8002c04:	e001      	b.n	8002c0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	feeefffc 	.word	0xfeeefffc

08002c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0e7      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4970      	ldr	r1, [pc, #448]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b6e      	ldr	r3, [pc, #440]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cf      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4960      	ldr	r1, [pc, #384]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d04c      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d121      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0a6      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e09a      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e08e      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e086      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4943      	ldr	r1, [pc, #268]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fbe2 	bl	80014cc <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fbde 	bl	80014cc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e06e      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d208      	bcs.n	8002d62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	492b      	ldr	r1, [pc, #172]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d210      	bcs.n	8002d92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 0207 	bic.w	r2, r3, #7
 8002d78:	4923      	ldr	r1, [pc, #140]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e036      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4918      	ldr	r1, [pc, #96]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4910      	ldr	r1, [pc, #64]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd0:	f000 f824 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	490b      	ldr	r1, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1f4>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1fc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fa25 	bl	8001244 <HAL_InitTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007c44 	.word	0x08007c44
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x34>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d121      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d11e      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e005      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e78:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e004      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d134      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ec0:	e005      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec4:	617b      	str	r3, [r7, #20]
      break;
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eca:	617b      	str	r3, [r7, #20]
      break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	617b      	str	r3, [r7, #20]
      break;
 8002ed2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	fb03 f202 	mul.w	r2, r3, r2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0e5b      	lsrs	r3, r3, #25
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	3301      	adds	r3, #1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f14:	69bb      	ldr	r3, [r7, #24]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08007c5c 	.word	0x08007c5c
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200

08002f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08007c54 	.word	0x08007c54

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f7c:	f7ff ffda 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0adb      	lsrs	r3, r3, #11
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08007c54 	.word	0x08007c54

08002fa4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCC_GetClockConfig+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	40022000 	.word	0x40022000

08003008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003020:	f7ff f8f0 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8003024:	6178      	str	r0, [r7, #20]
 8003026:	e014      	b.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003040:	f7ff f8e0 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8003044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d10b      	bne.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d919      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2ba0      	cmp	r3, #160	; 0xa0
 8003064:	d902      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003066:	2302      	movs	r3, #2
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e013      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e010      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d902      	bls.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003078:	2303      	movs	r3, #3
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e00a      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d102      	bne.n	800308a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003084:	2302      	movs	r3, #2
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	e004      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d101      	bne.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	4909      	ldr	r1, [pc, #36]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d041      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ec:	d02a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f2:	d824      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030fe:	d81e      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003108:	d010      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800310a:	e018      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800310c:	4b86      	ldr	r3, [pc, #536]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a85      	ldr	r2, [pc, #532]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003118:	e015      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 facb 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312a:	e00c      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3320      	adds	r3, #32
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fbb6 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	74fb      	strb	r3, [r7, #19]
      break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314c:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315a:	4973      	ldr	r1, [pc, #460]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003162:	e001      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d041      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800317c:	d02a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800317e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003182:	d824      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800318a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800318e:	d81e      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d010      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800319a:	e018      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319c:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fa83 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ba:	e00c      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3320      	adds	r3, #32
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fb6e 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	74fb      	strb	r3, [r7, #19]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031dc:	4b52      	ldr	r3, [pc, #328]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ea:	494f      	ldr	r1, [pc, #316]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a0 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	4a40      	ldr	r2, [pc, #256]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	; 0x58
 800322c:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003248:	f7fe f940 	bl	80014cc <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe f93c 	bl	80014cc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	74fb      	strb	r3, [r7, #19]
        break;
 8003262:	e005      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d15c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d019      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	4a20      	ldr	r2, [pc, #128]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe f8fb 	bl	80014cc <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	e00b      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe f8f7 	bl	80014cc <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d902      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	74fb      	strb	r3, [r7, #19]
            break;
 80032f0:	e006      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ec      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003316:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003334:	7c7b      	ldrb	r3, [r7, #17]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b9e      	ldr	r3, [pc, #632]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a9d      	ldr	r2, [pc, #628]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4b98      	ldr	r3, [pc, #608]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f023 0203 	bic.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	4994      	ldr	r1, [pc, #592]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003374:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 020c 	bic.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	498c      	ldr	r1, [pc, #560]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4983      	ldr	r1, [pc, #524]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b8:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	497b      	ldr	r1, [pc, #492]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	4972      	ldr	r1, [pc, #456]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	496a      	ldr	r1, [pc, #424]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	4961      	ldr	r1, [pc, #388]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003440:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	4959      	ldr	r1, [pc, #356]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	4950      	ldr	r1, [pc, #320]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	4948      	ldr	r1, [pc, #288]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a6:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	493f      	ldr	r1, [pc, #252]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d028      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d6:	4937      	ldr	r1, [pc, #220]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
 80034f4:	e011      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034fe:	d10c      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f8d8 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d028      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	491f      	ldr	r1, [pc, #124]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003544:	d106      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003550:	60d3      	str	r3, [r2, #12]
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f8a9 	bl	80036bc <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	4908      	ldr	r1, [pc, #32]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a2:	d109      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ae:	60d3      	str	r3, [r2, #12]
 80035b0:	e014      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f877 	bl	80036bc <RCCEx_PLLSAI1_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	4928      	ldr	r1, [pc, #160]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003606:	d10d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2102      	movs	r1, #2
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f854 	bl	80036bc <RCCEx_PLLSAI1_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d014      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
 8003622:	e011      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d10c      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3320      	adds	r3, #32
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f935 	bl	80038a4 <RCCEx_PLLSAI2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003662:	490d      	ldr	r1, [pc, #52]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003686:	4904      	ldr	r1, [pc, #16]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800368e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ca:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10d      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ee:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
       ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d047      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e044      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d018      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x86>
 8003710:	2b03      	cmp	r3, #3
 8003712:	d825      	bhi.n	8003760 <RCCEx_PLLSAI1_Config+0xa4>
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x62>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d009      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x74>
 800371c:	e020      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800371e:	4b60      	ldr	r3, [pc, #384]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11d      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e01a      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003730:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003740:	e013      	b.n	800376a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800374e:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800375e:	e006      	b.n	800376e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e004      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800376e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	430b      	orrs	r3, r1
 800378c:	4944      	ldr	r1, [pc, #272]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d17d      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd fe92 	bl	80014cc <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ac:	f7fd fe8e 	bl	80014cc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
        break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c0:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1ef      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d160      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6892      	ldr	r2, [r2, #8]
 80037e8:	0211      	lsls	r1, r2, #8
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	0912      	lsrs	r2, r2, #4
 80037f0:	0452      	lsls	r2, r2, #17
 80037f2:	430a      	orrs	r2, r1
 80037f4:	492a      	ldr	r1, [pc, #168]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	610b      	str	r3, [r1, #16]
 80037fa:	e027      	b.n	800384c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d112      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800380a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	0211      	lsls	r1, r2, #8
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6912      	ldr	r2, [r2, #16]
 8003818:	0852      	lsrs	r2, r2, #1
 800381a:	3a01      	subs	r2, #1
 800381c:	0552      	lsls	r2, r2, #21
 800381e:	430a      	orrs	r2, r1
 8003820:	491f      	ldr	r1, [pc, #124]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	610b      	str	r3, [r1, #16]
 8003826:	e011      	b.n	800384c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	0211      	lsls	r1, r2, #8
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6952      	ldr	r2, [r2, #20]
 800383e:	0852      	lsrs	r2, r2, #1
 8003840:	3a01      	subs	r2, #1
 8003842:	0652      	lsls	r2, r2, #25
 8003844:	430a      	orrs	r2, r1
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd fe38 	bl	80014cc <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800385e:	e009      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003860:	f7fd fe34 	bl	80014cc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d902      	bls.n	8003874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	73fb      	strb	r3, [r7, #15]
          break;
 8003872:	e005      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4904      	ldr	r1, [pc, #16]	; (80038a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d047      	beq.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI2_Config+0x86>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI2_Config+0xa4>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x62>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI2_Config+0x74>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003906:	4b55      	ldr	r3, [pc, #340]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003936:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003956:	bf00      	nop
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	430b      	orrs	r3, r1
 8003974:	4939      	ldr	r1, [pc, #228]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d167      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a35      	ldr	r2, [pc, #212]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fd9e 	bl	80014cc <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003994:	f7fd fd9a 	bl	80014cc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d14a      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	0912      	lsrs	r2, r2, #4
 80039d8:	0452      	lsls	r2, r2, #17
 80039da:	430a      	orrs	r2, r1
 80039dc:	491f      	ldr	r1, [pc, #124]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	614b      	str	r3, [r1, #20]
 80039e2:	e011      	b.n	8003a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6912      	ldr	r2, [r2, #16]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0652      	lsls	r2, r2, #25
 8003a00:	430a      	orrs	r2, r1
 8003a02:	4916      	ldr	r1, [pc, #88]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd fd5a 	bl	80014cc <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a1c:	f7fd fd56 	bl	80014cc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a2e:	e005      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4904      	ldr	r1, [pc, #16]	; (8003a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e095      	b.n	8003b9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a82:	d009      	beq.n	8003a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	61da      	str	r2, [r3, #28]
 8003a8a:	e005      	b.n	8003a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fa42 	bl	8000f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad8:	d902      	bls.n	8003ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e002      	b.n	8003ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aee:	d007      	beq.n	8003b00 <HAL_SPI_Init+0xa0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	ea42 0103 	orr.w	r1, r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 0204 	and.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b7c:	ea42 0103 	orr.w	r1, r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e049      	b.n	8003c4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f841 	bl	8003c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 f9f7 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e04f      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d018      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x76>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d115      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d015      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d011      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e008      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	00010007 	.word	0x00010007

08003d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0202 	mvn.w	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f905 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8f7 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f908 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0204 	mvn.w	r2, #4
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8db 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8cd 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8de 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0208 	mvn.w	r2, #8
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8b1 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8a3 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8b4 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f887 	bl	8003f9a <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f879 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f88a 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fef2 	bl	8000cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f914 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f907 	bl	8004134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d10e      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f838 	bl	8003fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0220 	mvn.w	r2, #32
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8c7 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a40      	ldr	r2, [pc, #256]	; (80040ec <TIM_Base_SetConfig+0x114>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3a      	ldr	r2, [pc, #232]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d108      	bne.n	800402a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <TIM_Base_SetConfig+0x114>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <TIM_Base_SetConfig+0x118>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <TIM_Base_SetConfig+0x11c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <TIM_Base_SetConfig+0x120>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <TIM_Base_SetConfig+0x124>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <TIM_Base_SetConfig+0x128>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <TIM_Base_SetConfig+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a26      	ldr	r2, [pc, #152]	; (8004108 <TIM_Base_SetConfig+0x130>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <TIM_Base_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00f      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <TIM_Base_SetConfig+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <TIM_Base_SetConfig+0x128>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <TIM_Base_SetConfig+0x12c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0f      	ldr	r2, [pc, #60]	; (8004108 <TIM_Base_SetConfig+0x130>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e040      	b.n	80041dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc ff2a 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f82c 	bl	80041e4 <UART_SetConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fad8 	bl	8004754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb5f 	bl	8004898 <UART_CheckIdleState>
 80041da:	4603      	mov	r3, r0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b08a      	sub	sp, #40	; 0x28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4ba4      	ldr	r3, [pc, #656]	; (80044a4 <UART_SetConfig+0x2c0>)
 8004214:	4013      	ands	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800421c:	430b      	orrs	r3, r1
 800421e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a99      	ldr	r2, [pc, #612]	; (80044a8 <UART_SetConfig+0x2c4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	4313      	orrs	r3, r2
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a90      	ldr	r2, [pc, #576]	; (80044ac <UART_SetConfig+0x2c8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d126      	bne.n	80042bc <UART_SetConfig+0xd8>
 800426e:	4b90      	ldr	r3, [pc, #576]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b03      	cmp	r3, #3
 800427a:	d81b      	bhi.n	80042b4 <UART_SetConfig+0xd0>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0xa0>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004295 	.word	0x08004295
 8004288:	080042a5 	.word	0x080042a5
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042ad 	.word	0x080042ad
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e116      	b.n	80044ca <UART_SetConfig+0x2e6>
 800429c:	2302      	movs	r3, #2
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e112      	b.n	80044ca <UART_SetConfig+0x2e6>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e10e      	b.n	80044ca <UART_SetConfig+0x2e6>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e10a      	b.n	80044ca <UART_SetConfig+0x2e6>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e106      	b.n	80044ca <UART_SetConfig+0x2e6>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <UART_SetConfig+0x2d0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d138      	bne.n	8004338 <UART_SetConfig+0x154>
 80042c6:	4b7a      	ldr	r3, [pc, #488]	; (80044b0 <UART_SetConfig+0x2cc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d82d      	bhi.n	8004330 <UART_SetConfig+0x14c>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0xf8>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004331 	.word	0x08004331
 80042e4:	08004331 	.word	0x08004331
 80042e8:	08004331 	.word	0x08004331
 80042ec:	08004321 	.word	0x08004321
 80042f0:	08004331 	.word	0x08004331
 80042f4:	08004331 	.word	0x08004331
 80042f8:	08004331 	.word	0x08004331
 80042fc:	08004319 	.word	0x08004319
 8004300:	08004331 	.word	0x08004331
 8004304:	08004331 	.word	0x08004331
 8004308:	08004331 	.word	0x08004331
 800430c:	08004329 	.word	0x08004329
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0d8      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004318:	2302      	movs	r3, #2
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e0d4      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004320:	2304      	movs	r3, #4
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e0d0      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004328:	2308      	movs	r3, #8
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e0cc      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e0c8      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5e      	ldr	r2, [pc, #376]	; (80044b8 <UART_SetConfig+0x2d4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d125      	bne.n	800438e <UART_SetConfig+0x1aa>
 8004342:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800434c:	2b30      	cmp	r3, #48	; 0x30
 800434e:	d016      	beq.n	800437e <UART_SetConfig+0x19a>
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d818      	bhi.n	8004386 <UART_SetConfig+0x1a2>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d00a      	beq.n	800436e <UART_SetConfig+0x18a>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d814      	bhi.n	8004386 <UART_SetConfig+0x1a2>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <UART_SetConfig+0x182>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d008      	beq.n	8004376 <UART_SetConfig+0x192>
 8004364:	e00f      	b.n	8004386 <UART_SetConfig+0x1a2>
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436c:	e0ad      	b.n	80044ca <UART_SetConfig+0x2e6>
 800436e:	2302      	movs	r3, #2
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004374:	e0a9      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004376:	2304      	movs	r3, #4
 8004378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437c:	e0a5      	b.n	80044ca <UART_SetConfig+0x2e6>
 800437e:	2308      	movs	r3, #8
 8004380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004384:	e0a1      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004386:	2310      	movs	r3, #16
 8004388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438c:	e09d      	b.n	80044ca <UART_SetConfig+0x2e6>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <UART_SetConfig+0x2d8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d125      	bne.n	80043e4 <UART_SetConfig+0x200>
 8004398:	4b45      	ldr	r3, [pc, #276]	; (80044b0 <UART_SetConfig+0x2cc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043a2:	2bc0      	cmp	r3, #192	; 0xc0
 80043a4:	d016      	beq.n	80043d4 <UART_SetConfig+0x1f0>
 80043a6:	2bc0      	cmp	r3, #192	; 0xc0
 80043a8:	d818      	bhi.n	80043dc <UART_SetConfig+0x1f8>
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d00a      	beq.n	80043c4 <UART_SetConfig+0x1e0>
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d814      	bhi.n	80043dc <UART_SetConfig+0x1f8>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <UART_SetConfig+0x1d8>
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d008      	beq.n	80043cc <UART_SetConfig+0x1e8>
 80043ba:	e00f      	b.n	80043dc <UART_SetConfig+0x1f8>
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e082      	b.n	80044ca <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e07e      	b.n	80044ca <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e07a      	b.n	80044ca <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e076      	b.n	80044ca <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e072      	b.n	80044ca <UART_SetConfig+0x2e6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a35      	ldr	r2, [pc, #212]	; (80044c0 <UART_SetConfig+0x2dc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d12a      	bne.n	8004444 <UART_SetConfig+0x260>
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043fc:	d01a      	beq.n	8004434 <UART_SetConfig+0x250>
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d81b      	bhi.n	800443c <UART_SetConfig+0x258>
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d00c      	beq.n	8004424 <UART_SetConfig+0x240>
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d815      	bhi.n	800443c <UART_SetConfig+0x258>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <UART_SetConfig+0x238>
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	d008      	beq.n	800442c <UART_SetConfig+0x248>
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x258>
 800441c:	2300      	movs	r3, #0
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e052      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004424:	2302      	movs	r3, #2
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e04e      	b.n	80044ca <UART_SetConfig+0x2e6>
 800442c:	2304      	movs	r3, #4
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004432:	e04a      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004434:	2308      	movs	r3, #8
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443a:	e046      	b.n	80044ca <UART_SetConfig+0x2e6>
 800443c:	2310      	movs	r3, #16
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004442:	e042      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <UART_SetConfig+0x2c4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d13a      	bne.n	80044c4 <UART_SetConfig+0x2e0>
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <UART_SetConfig+0x2cc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445c:	d01a      	beq.n	8004494 <UART_SetConfig+0x2b0>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004462:	d81b      	bhi.n	800449c <UART_SetConfig+0x2b8>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004468:	d00c      	beq.n	8004484 <UART_SetConfig+0x2a0>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446e:	d815      	bhi.n	800449c <UART_SetConfig+0x2b8>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x298>
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d008      	beq.n	800448c <UART_SetConfig+0x2a8>
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x2b8>
 800447c:	2300      	movs	r3, #0
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e022      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e01e      	b.n	80044ca <UART_SetConfig+0x2e6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e01a      	b.n	80044ca <UART_SetConfig+0x2e6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e016      	b.n	80044ca <UART_SetConfig+0x2e6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e012      	b.n	80044ca <UART_SetConfig+0x2e6>
 80044a4:	efff69f3 	.word	0xefff69f3
 80044a8:	40008000 	.word	0x40008000
 80044ac:	40013800 	.word	0x40013800
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40004400 	.word	0x40004400
 80044b8:	40004800 	.word	0x40004800
 80044bc:	40004c00 	.word	0x40004c00
 80044c0:	40005000 	.word	0x40005000
 80044c4:	2310      	movs	r3, #16
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a9f      	ldr	r2, [pc, #636]	; (800474c <UART_SetConfig+0x568>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d17a      	bne.n	80045ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d824      	bhi.n	8004526 <UART_SetConfig+0x342>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x300>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004527 	.word	0x08004527
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004527 	.word	0x08004527
 80044f4:	08004517 	.word	0x08004517
 80044f8:	08004527 	.word	0x08004527
 80044fc:	08004527 	.word	0x08004527
 8004500:	08004527 	.word	0x08004527
 8004504:	0800451f 	.word	0x0800451f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe fd20 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800450c:	61f8      	str	r0, [r7, #28]
        break;
 800450e:	e010      	b.n	8004532 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004510:	4b8f      	ldr	r3, [pc, #572]	; (8004750 <UART_SetConfig+0x56c>)
 8004512:	61fb      	str	r3, [r7, #28]
        break;
 8004514:	e00d      	b.n	8004532 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004516:	f7fe fc81 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 800451a:	61f8      	str	r0, [r7, #28]
        break;
 800451c:	e009      	b.n	8004532 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	61fb      	str	r3, [r7, #28]
        break;
 8004524:	e005      	b.n	8004532 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004530:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80fb 	beq.w	8004730 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	429a      	cmp	r2, r3
 8004548:	d305      	bcc.n	8004556 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	429a      	cmp	r2, r3
 8004554:	d903      	bls.n	800455e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800455c:	e0e8      	b.n	8004730 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2200      	movs	r2, #0
 8004562:	461c      	mov	r4, r3
 8004564:	4615      	mov	r5, r2
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	022b      	lsls	r3, r5, #8
 8004570:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004574:	0222      	lsls	r2, r4, #8
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6849      	ldr	r1, [r1, #4]
 800457a:	0849      	lsrs	r1, r1, #1
 800457c:	2000      	movs	r0, #0
 800457e:	4688      	mov	r8, r1
 8004580:	4681      	mov	r9, r0
 8004582:	eb12 0a08 	adds.w	sl, r2, r8
 8004586:	eb43 0b09 	adc.w	fp, r3, r9
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004598:	4650      	mov	r0, sl
 800459a:	4659      	mov	r1, fp
 800459c:	f7fb fe18 	bl	80001d0 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ae:	d308      	bcc.n	80045c2 <UART_SetConfig+0x3de>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d204      	bcs.n	80045c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	60da      	str	r2, [r3, #12]
 80045c0:	e0b6      	b.n	8004730 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045c8:	e0b2      	b.n	8004730 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d2:	d15e      	bne.n	8004692 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d828      	bhi.n	800462e <UART_SetConfig+0x44a>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0x400>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004609 	.word	0x08004609
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004619 	.word	0x08004619
 80045f0:	0800462f 	.word	0x0800462f
 80045f4:	0800461f 	.word	0x0800461f
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	0800462f 	.word	0x0800462f
 8004600:	0800462f 	.word	0x0800462f
 8004604:	08004627 	.word	0x08004627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe fca0 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800460c:	61f8      	str	r0, [r7, #28]
        break;
 800460e:	e014      	b.n	800463a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004610:	f7fe fcb2 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004614:	61f8      	str	r0, [r7, #28]
        break;
 8004616:	e010      	b.n	800463a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004618:	4b4d      	ldr	r3, [pc, #308]	; (8004750 <UART_SetConfig+0x56c>)
 800461a:	61fb      	str	r3, [r7, #28]
        break;
 800461c:	e00d      	b.n	800463a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461e:	f7fe fbfd 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8004622:	61f8      	str	r0, [r7, #28]
        break;
 8004624:	e009      	b.n	800463a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462a:	61fb      	str	r3, [r7, #28]
        break;
 800462c:	e005      	b.n	800463a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d077      	beq.n	8004730 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005a      	lsls	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	441a      	add	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d916      	bls.n	800468a <UART_SetConfig+0x4a6>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004662:	d212      	bcs.n	800468a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f023 030f 	bic.w	r3, r3, #15
 800466c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	b29a      	uxth	r2, r3
 800467a:	8afb      	ldrh	r3, [r7, #22]
 800467c:	4313      	orrs	r3, r2
 800467e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	8afa      	ldrh	r2, [r7, #22]
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e052      	b.n	8004730 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004690:	e04e      	b.n	8004730 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004696:	2b08      	cmp	r3, #8
 8004698:	d827      	bhi.n	80046ea <UART_SetConfig+0x506>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <UART_SetConfig+0x4bc>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c4:	f7fe fc42 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 80046c8:	61f8      	str	r0, [r7, #28]
        break;
 80046ca:	e014      	b.n	80046f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046cc:	f7fe fc54 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 80046d0:	61f8      	str	r0, [r7, #28]
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <UART_SetConfig+0x56c>)
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fe fb9f 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 80046de:	61f8      	str	r0, [r7, #28]
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	61fb      	str	r3, [r7, #28]
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046f4:	bf00      	nop
    }

    if (pclk != 0U)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d019      	beq.n	8004730 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085a      	lsrs	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	d909      	bls.n	800472a <UART_SetConfig+0x546>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d205      	bcs.n	800472a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	e002      	b.n	8004730 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800473c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004740:	4618      	mov	r0, r3
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	40008000 	.word	0x40008000
 8004750:	00f42400 	.word	0x00f42400

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d10a      	bne.n	800486a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a8:	f7fc fe10 	bl	80014cc <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d10e      	bne.n	80048da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f82d 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e023      	b.n	8004922 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d10e      	bne.n	8004906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f817 	bl	800492a <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e00d      	b.n	8004922 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b09c      	sub	sp, #112	; 0x70
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493a:	e0a5      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004942:	f000 80a1 	beq.w	8004a88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fc fdc1 	bl	80014cc <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <UART_WaitOnFlagUntilTimeout+0x32>
 8004956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004958:	2b00      	cmp	r3, #0
 800495a:	d13e      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800496a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004970:	667b      	str	r3, [r7, #100]	; 0x64
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	663b      	str	r3, [r7, #96]	; 0x60
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80049b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e067      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d04f      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d147      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e6      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	613b      	str	r3, [r7, #16]
   return(result);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a54:	623a      	str	r2, [r7, #32]
 8004a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e010      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	f43f af4a 	beq.w	800493c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3770      	adds	r7, #112	; 0x70
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	f107 001c 	add.w	r0, r7, #28
 8004ac0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fa6f 	bl	8004fb4 <USB_CoreReset>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
 8004aec:	e005      	b.n	8004afa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b06:	b004      	add	sp, #16
 8004b08:	4770      	bx	lr

08004b0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d115      	bne.n	8004b7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f7fc fcc2 	bl	80014e4 <HAL_Delay>
      ms++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa16 	bl	8004f98 <USB_GetMode>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d01e      	beq.n	8004bb0 <USB_SetCurrentMode+0x84>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b31      	cmp	r3, #49	; 0x31
 8004b76:	d9f0      	bls.n	8004b5a <USB_SetCurrentMode+0x2e>
 8004b78:	e01a      	b.n	8004bb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d115      	bne.n	8004bac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fc fca9 	bl	80014e4 <HAL_Delay>
      ms++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9fd 	bl	8004f98 <USB_GetMode>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <USB_SetCurrentMode+0x84>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b31      	cmp	r3, #49	; 0x31
 8004ba8:	d9f0      	bls.n	8004b8c <USB_SetCurrentMode+0x60>
 8004baa:	e001      	b.n	8004bb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e005      	b.n	8004bbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b32      	cmp	r3, #50	; 0x32
 8004bb4:	d101      	bne.n	8004bba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e009      	b.n	8004bf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3340      	adds	r3, #64	; 0x40
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b0e      	cmp	r3, #14
 8004bfc:	d9f2      	bls.n	8004be4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11c      	bne.n	8004c3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e005      	b.n	8004c4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c50:	461a      	mov	r2, r3
 8004c52:	2300      	movs	r3, #0
 8004c54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	461a      	mov	r2, r3
 8004c66:	680b      	ldr	r3, [r1, #0]
 8004c68:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f959 	bl	8004f24 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c72:	2110      	movs	r1, #16
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8f1 	bl	8004e5c <USB_FlushTxFifo>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f91d 	bl	8004ec4 <USB_FlushRxFifo>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e043      	b.n	8004d46 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d118      	bne.n	8004d08 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e013      	b.n	8004d1a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e008      	b.n	8004d1a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3301      	adds	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3b7      	bcc.n	8004cbe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	e043      	b.n	8004ddc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d6a:	d118      	bne.n	8004d9e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e013      	b.n	8004db0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	461a      	mov	r2, r3
 8004d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e008      	b.n	8004db0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3b7      	bcc.n	8004d54 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f043 0210 	orr.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <USB_DevInit+0x294>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f043 0208 	orr.w	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	f043 0304 	orr.w	r3, r3, #4
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e52:	b004      	add	sp, #16
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	803c3800 	.word	0x803c3800

08004e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e01b      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	daf2      	bge.n	8004e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e006      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d0f0      	beq.n	8004e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	00030d40 	.word	0x00030d40

08004ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e018      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	daf2      	bge.n	8004ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e006      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d0f0      	beq.n	8004ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <USB_CoreReset+0x64>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e01b      	b.n	800500a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	daf2      	bge.n	8004fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <USB_CoreReset+0x64>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d0f0      	beq.n	8004fea <USB_CoreReset+0x36>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	00030d40 	.word	0x00030d40

0800501c <__NVIC_SetPriority>:
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502c:	2b00      	cmp	r3, #0
 800502e:	db0a      	blt.n	8005046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	490c      	ldr	r1, [pc, #48]	; (8005068 <__NVIC_SetPriority+0x4c>)
 8005036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	440b      	add	r3, r1
 8005040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005044:	e00a      	b.n	800505c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4908      	ldr	r1, [pc, #32]	; (800506c <__NVIC_SetPriority+0x50>)
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	3b04      	subs	r3, #4
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	440b      	add	r3, r1
 800505a:	761a      	strb	r2, [r3, #24]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000e100 	.word	0xe000e100
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <SysTick_Handler+0x1c>)
 8005076:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005078:	f001 fcfe 	bl	8006a78 <xTaskGetSchedulerState>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005082:	f002 fae9 	bl	8007658 <xPortSysTickHandler>
  }
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	e000e010 	.word	0xe000e010

08005090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005094:	2100      	movs	r1, #0
 8005096:	f06f 0004 	mvn.w	r0, #4
 800509a:	f7ff ffbf 	bl	800501c <__NVIC_SetPriority>
#endif
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050aa:	f3ef 8305 	mrs	r3, IPSR
 80050ae:	603b      	str	r3, [r7, #0]
  return(result);
 80050b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050b6:	f06f 0305 	mvn.w	r3, #5
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	e00c      	b.n	80050d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <osKernelInitialize+0x44>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <osKernelInitialize+0x44>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	e002      	b.n	80050d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050d8:	687b      	ldr	r3, [r7, #4]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	200007f0 	.word	0x200007f0

080050ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f2:	f3ef 8305 	mrs	r3, IPSR
 80050f6:	603b      	str	r3, [r7, #0]
  return(result);
 80050f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <osKernelStart+0x1a>
    stat = osErrorISR;
 80050fe:	f06f 0305 	mvn.w	r3, #5
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	e010      	b.n	8005128 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <osKernelStart+0x48>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d109      	bne.n	8005122 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800510e:	f7ff ffbf 	bl	8005090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <osKernelStart+0x48>)
 8005114:	2202      	movs	r2, #2
 8005116:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005118:	f001 f866 	bl	80061e8 <vTaskStartScheduler>
      stat = osOK;
 800511c:	2300      	movs	r3, #0
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	e002      	b.n	8005128 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005128:	687b      	ldr	r3, [r7, #4]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	200007f0 	.word	0x200007f0

08005138 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08e      	sub	sp, #56	; 0x38
 800513c:	af04      	add	r7, sp, #16
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005148:	f3ef 8305 	mrs	r3, IPSR
 800514c:	617b      	str	r3, [r7, #20]
  return(result);
 800514e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005150:	2b00      	cmp	r3, #0
 8005152:	d17e      	bne.n	8005252 <osThreadNew+0x11a>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d07b      	beq.n	8005252 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800515e:	2318      	movs	r3, #24
 8005160:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800516a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d045      	beq.n	80051fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <osThreadNew+0x48>
        name = attr->name;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <osThreadNew+0x6e>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b38      	cmp	r3, #56	; 0x38
 8005198:	d805      	bhi.n	80051a6 <osThreadNew+0x6e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <osThreadNew+0x72>
        return (NULL);
 80051a6:	2300      	movs	r3, #0
 80051a8:	e054      	b.n	8005254 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <osThreadNew+0xa8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b5b      	cmp	r3, #91	; 0x5b
 80051c8:	d90a      	bls.n	80051e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <osThreadNew+0xa8>
        mem = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e010      	b.n	8005202 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10c      	bne.n	8005202 <osThreadNew+0xca>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <osThreadNew+0xca>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <osThreadNew+0xca>
          mem = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e001      	b.n	8005202 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d110      	bne.n	800522a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005210:	9202      	str	r2, [sp, #8]
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fe0c 	bl	8005e3c <xTaskCreateStatic>
 8005224:	4603      	mov	r3, r0
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e013      	b.n	8005252 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d110      	bne.n	8005252 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	b29a      	uxth	r2, r3
 8005234:	f107 0310 	add.w	r3, r7, #16
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fe57 	bl	8005ef6 <xTaskCreate>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d001      	beq.n	8005252 <osThreadNew+0x11a>
            hTask = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005252:	693b      	ldr	r3, [r7, #16]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005264:	f3ef 8305 	mrs	r3, IPSR
 8005268:	60bb      	str	r3, [r7, #8]
  return(result);
 800526a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <osDelay+0x1c>
    stat = osErrorISR;
 8005270:	f06f 0305 	mvn.w	r3, #5
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e007      	b.n	8005288 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 ff7c 	bl	8006180 <vTaskDelay>
    }
  }

  return (stat);
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a07      	ldr	r2, [pc, #28]	; (80052c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80052a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a06      	ldr	r2, [pc, #24]	; (80052c4 <vApplicationGetIdleTaskMemory+0x30>)
 80052aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2280      	movs	r2, #128	; 0x80
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	200007f4 	.word	0x200007f4
 80052c4:	20000850 	.word	0x20000850

080052c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80052d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <vApplicationGetTimerTaskMemory+0x30>)
 80052de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000a50 	.word	0x20000a50
 80052f8:	20000aac 	.word	0x20000aac

080052fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f103 0208 	add.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f103 0208 	add.w	r2, r3, #8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f103 0208 	add.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b4:	d103      	bne.n	80053be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e00c      	b.n	80053d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3308      	adds	r3, #8
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e002      	b.n	80053cc <vListInsert+0x2e>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d2f6      	bcs.n	80053c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6892      	ldr	r2, [r2, #8]
 8005426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6852      	ldr	r2, [r2, #4]
 8005430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d103      	bne.n	8005444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	1e5a      	subs	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800548e:	f002 f851 	bl	8007534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	3b01      	subs	r3, #1
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	22ff      	movs	r2, #255	; 0xff
 80054d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	22ff      	movs	r2, #255	; 0xff
 80054da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d114      	bne.n	800550e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01a      	beq.n	8005522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3310      	adds	r3, #16
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 f903 	bl	80066fc <xTaskRemoveFromEventList>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <xQueueGenericReset+0xcc>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	e009      	b.n	8005522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3310      	adds	r3, #16
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fef2 	bl	80052fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff feed 	bl	80052fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005522:	f002 f837 	bl	8007594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005526:	2301      	movs	r3, #1
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08e      	sub	sp, #56	; 0x38
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <xQueueGenericCreateStatic+0x52>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <xQueueGenericCreateStatic+0x56>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <xQueueGenericCreateStatic+0x58>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <xQueueGenericCreateStatic+0x7e>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <xQueueGenericCreateStatic+0x82>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <xQueueGenericCreateStatic+0x84>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	61fb      	str	r3, [r7, #28]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055d2:	2350      	movs	r3, #80	; 0x50
 80055d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b50      	cmp	r3, #80	; 0x50
 80055da:	d00a      	beq.n	80055f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61bb      	str	r3, [r7, #24]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f805 	bl	8005624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800561c:	4618      	mov	r0, r3
 800561e:	3730      	adds	r7, #48	; 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e002      	b.n	8005646 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005652:	2101      	movs	r1, #1
 8005654:	69b8      	ldr	r0, [r7, #24]
 8005656:	f7ff ff05 	bl	8005464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericSend+0x32>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <xQueueGenericSend+0x40>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <xQueueGenericSend+0x44>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <xQueueGenericSend+0x46>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <xQueueGenericSend+0x60>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d103      	bne.n	80056da <xQueueGenericSend+0x6e>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <xQueueGenericSend+0x72>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <xQueueGenericSend+0x74>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueGenericSend+0x8e>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fa:	f001 f9bd 	bl	8006a78 <xTaskGetSchedulerState>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <xQueueGenericSend+0x9e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <xQueueGenericSend+0xa2>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSend+0xa4>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericSend+0xbe>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	61fb      	str	r3, [r7, #28]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572a:	f001 ff03 	bl	8007534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <xQueueGenericSend+0xd4>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d129      	bne.n	8005794 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005746:	f000 fa0b 	bl	8005b60 <prvCopyDataToQueue>
 800574a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	3324      	adds	r3, #36	; 0x24
 8005758:	4618      	mov	r0, r3
 800575a:	f000 ffcf 	bl	80066fc <xTaskRemoveFromEventList>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d013      	beq.n	800578c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <xQueueGenericSend+0x1f8>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	e00a      	b.n	800578c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800577c:	4b39      	ldr	r3, [pc, #228]	; (8005864 <xQueueGenericSend+0x1f8>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800578c:	f001 ff02 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 8005790:	2301      	movs	r3, #1
 8005792:	e063      	b.n	800585c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800579a:	f001 fefb 	bl	8007594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	e05c      	b.n	800585c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057a8:	f107 0314 	add.w	r3, r7, #20
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f809 	bl	80067c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057b6:	f001 feed 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ba:	f000 fd7b 	bl	80062b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057be:	f001 feb9 	bl	8007534 <vPortEnterCritical>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ce:	d103      	bne.n	80057d8 <xQueueGenericSend+0x16c>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSend+0x182>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ee:	f001 fed1 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f2:	1d3a      	adds	r2, r7, #4
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fff8 	bl	80067f0 <xTaskCheckForTimeOut>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d124      	bne.n	8005850 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005808:	f000 faa2 	bl	8005d50 <prvIsQueueFull>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	3310      	adds	r3, #16
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ff1e 	bl	800665c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005822:	f000 fa2d 	bl	8005c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005826:	f000 fd53 	bl	80062d0 <xTaskResumeAll>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f af7c 	bne.w	800572a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <xQueueGenericSend+0x1f8>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	e772      	b.n	800572a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fa1b 	bl	8005c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800584a:	f000 fd41 	bl	80062d0 <xTaskResumeAll>
 800584e:	e76c      	b.n	800572a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005852:	f000 fa15 	bl	8005c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005856:	f000 fd3b 	bl	80062d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800585a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800585c:	4618      	mov	r0, r3
 800585e:	3738      	adds	r7, #56	; 0x38
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	; 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueGenericSendFromISR+0x3c>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <xQueueGenericSendFromISR+0x40>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <xQueueGenericSendFromISR+0x42>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d103      	bne.n	80058d2 <xQueueGenericSendFromISR+0x6a>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <xQueueGenericSendFromISR+0x6e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueGenericSendFromISR+0x70>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	623b      	str	r3, [r7, #32]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f2:	f001 ff01 	bl	80076f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058f6:	f3ef 8211 	mrs	r2, BASEPRI
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800590e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <xQueueGenericSendFromISR+0xbc>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d12f      	bne.n	8005984 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800593a:	f000 f911 	bl	8005b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800593e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005946:	d112      	bne.n	800596e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fed1 	bl	80066fc <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e007      	b.n	800597e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800596e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005972:	3301      	adds	r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	b25a      	sxtb	r2, r3
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800597e:	2301      	movs	r3, #1
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005982:	e001      	b.n	8005988 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005984:	2300      	movs	r3, #0
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005992:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005996:	4618      	mov	r0, r3
 8005998:	3740      	adds	r7, #64	; 0x40
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueReceive+0x30>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	623b      	str	r3, [r7, #32]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <xQueueReceive+0x3e>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueReceive+0x42>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueReceive+0x44>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueReceive+0x5e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 f83b 	bl	8006a78 <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueReceive+0x6e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueReceive+0x72>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueReceive+0x74>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueReceive+0x8e>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61bb      	str	r3, [r7, #24]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f001 fd81 	bl	8007534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01f      	beq.n	8005a7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 f8f7 	bl	8005c34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1e5a      	subs	r2, r3, #1
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	3310      	adds	r3, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fe4e 	bl	80066fc <xTaskRemoveFromEventList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a66:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <xQueueReceive+0x1bc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a76:	f001 fd8d 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e069      	b.n	8005b52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a84:	f001 fd86 	bl	8007594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e062      	b.n	8005b52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 0310 	add.w	r3, r7, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fe94 	bl	80067c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f001 fd78 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fc06 	bl	80062b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f001 fd44 	bl	8007534 <vPortEnterCritical>
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab8:	d103      	bne.n	8005ac2 <xQueueReceive+0x122>
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ace:	d103      	bne.n	8005ad8 <xQueueReceive+0x138>
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 fd5c 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	1d3a      	adds	r2, r7, #4
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fe83 	bl	80067f0 <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d123      	bne.n	8005b38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af2:	f000 f917 	bl	8005d24 <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fda9 	bl	800665c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0c:	f000 f8b8 	bl	8005c80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b10:	f000 fbde 	bl	80062d0 <xTaskResumeAll>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d189      	bne.n	8005a2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <xQueueReceive+0x1bc>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	e780      	b.n	8005a2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 f8a7 	bl	8005c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b32:	f000 fbcd 	bl	80062d0 <xTaskResumeAll>
 8005b36:	e77a      	b.n	8005a2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3a:	f000 f8a1 	bl	8005c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3e:	f000 fbc7 	bl	80062d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 f8ee 	bl	8005d24 <prvIsQueueEmpty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f af6f 	beq.w	8005a2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d14d      	bne.n	8005c22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 ff92 	bl	8006ab4 <xTaskPriorityDisinherit>
 8005b90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	e043      	b.n	8005c22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d119      	bne.n	8005bd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6858      	ldr	r0, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	f001 fff2 	bl	8007b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d32b      	bcc.n	8005c22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e026      	b.n	8005c22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68d8      	ldr	r0, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	f001 ffd8 	bl	8007b94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	425b      	negs	r3, r3
 8005bee:	441a      	add	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d207      	bcs.n	8005c10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	425b      	negs	r3, r3
 8005c0a:	441a      	add	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d105      	bne.n	8005c22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c2a:	697b      	ldr	r3, [r7, #20]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	441a      	add	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d303      	bcc.n	8005c68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68d9      	ldr	r1, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	461a      	mov	r2, r3
 8005c72:	6838      	ldr	r0, [r7, #0]
 8005c74:	f001 ff8e 	bl	8007b94 <memcpy>
	}
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c88:	f001 fc54 	bl	8007534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c94:	e011      	b.n	8005cba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d012      	beq.n	8005cc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fd2a 	bl	80066fc <xTaskRemoveFromEventList>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cae:	f000 fe01 	bl	80068b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dce9      	bgt.n	8005c96 <prvUnlockQueue+0x16>
 8005cc2:	e000      	b.n	8005cc6 <prvUnlockQueue+0x46>
					break;
 8005cc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cce:	f001 fc61 	bl	8007594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cd2:	f001 fc2f 	bl	8007534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cde:	e011      	b.n	8005d04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3310      	adds	r3, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fd05 	bl	80066fc <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cf8:	f000 fddc 	bl	80068b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	dce9      	bgt.n	8005ce0 <prvUnlockQueue+0x60>
 8005d0c:	e000      	b.n	8005d10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	22ff      	movs	r2, #255	; 0xff
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d18:	f001 fc3c 	bl	8007594 <vPortExitCritical>
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d2c:	f001 fc02 	bl	8007534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e001      	b.n	8005d42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f001 fc27 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d58:	f001 fbec 	bl	8007534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d102      	bne.n	8005d6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e001      	b.n	8005d72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d72:	f001 fc0f 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005d76:	68fb      	ldr	r3, [r7, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e014      	b.n	8005dba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d9c:	490c      	ldr	r1, [pc, #48]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005db2:	e006      	b.n	8005dc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d9e7      	bls.n	8005d90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000eac 	.word	0x20000eac

08005dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005de4:	f001 fba6 	bl	8007534 <vPortEnterCritical>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df4:	d103      	bne.n	8005dfe <vQueueWaitForMessageRestricted+0x2a>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d103      	bne.n	8005e14 <vQueueWaitForMessageRestricted+0x40>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e14:	f001 fbbe 	bl	8007594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fc3b 	bl	80066a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	f7ff ff26 	bl	8005c80 <prvUnlockQueue>
	}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af04      	add	r7, sp, #16
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	623b      	str	r3, [r7, #32]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	61fb      	str	r3, [r7, #28]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e82:	235c      	movs	r3, #92	; 0x5c
 8005e84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b5c      	cmp	r3, #92	; 0x5c
 8005e8a:	d00a      	beq.n	8005ea2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01e      	beq.n	8005ee8 <xTaskCreateStatic+0xac>
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	f107 0314 	add.w	r3, r7, #20
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f850 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee2:	f000 f8dd 	bl	80060a0 <prvAddNewTaskToReadyList>
 8005ee6:	e001      	b.n	8005eec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eec:	697b      	ldr	r3, [r7, #20]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b08c      	sub	sp, #48	; 0x30
 8005efa:	af04      	add	r7, sp, #16
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fc34 	bl	8007778 <pvPortMalloc>
 8005f10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f18:	205c      	movs	r0, #92	; 0x5c
 8005f1a:	f001 fc2d 	bl	8007778 <pvPortMalloc>
 8005f1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f2c:	e005      	b.n	8005f3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f001 fcee 	bl	8007910 <vPortFree>
 8005f34:	e001      	b.n	8005f3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f80e 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f64:	69f8      	ldr	r0, [r7, #28]
 8005f66:	f000 f89b 	bl	80060a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e002      	b.n	8005f76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f76:	69bb      	ldr	r3, [r7, #24]
	}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	21a5      	movs	r1, #165	; 0xa5
 8005f9a:	f001 fe09 	bl	8007bb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	617b      	str	r3, [r7, #20]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01f      	beq.n	800601e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e012      	b.n	800600a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	7819      	ldrb	r1, [r3, #0]
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3334      	adds	r3, #52	; 0x34
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	d9e9      	bls.n	8005fe4 <prvInitialiseNewTask+0x64>
 8006010:	e000      	b.n	8006014 <prvInitialiseNewTask+0x94>
			{
				break;
 8006012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800601c:	e003      	b.n	8006026 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b37      	cmp	r3, #55	; 0x37
 800602a:	d901      	bls.n	8006030 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800602c:	2337      	movs	r3, #55	; 0x37
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f978 	bl	800533c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3318      	adds	r3, #24
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff f973 	bl	800533c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	69b8      	ldr	r0, [r7, #24]
 8006080:	f001 f928 	bl	80072d4 <pxPortInitialiseStack>
 8006084:	4602      	mov	r2, r0
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006096:	bf00      	nop
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060a8:	f001 fa44 	bl	8007534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060ac:	4b2d      	ldr	r3, [pc, #180]	; (8006164 <prvAddNewTaskToReadyList+0xc4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <prvAddNewTaskToReadyList+0xc4>)
 80060b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060b6:	4b2c      	ldr	r3, [pc, #176]	; (8006168 <prvAddNewTaskToReadyList+0xc8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <prvAddNewTaskToReadyList+0xc8>)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060c4:	4b27      	ldr	r3, [pc, #156]	; (8006164 <prvAddNewTaskToReadyList+0xc4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d110      	bne.n	80060ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060cc:	f000 fc16 	bl	80068fc <prvInitialiseTaskLists>
 80060d0:	e00d      	b.n	80060ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060d2:	4b26      	ldr	r3, [pc, #152]	; (800616c <prvAddNewTaskToReadyList+0xcc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060da:	4b23      	ldr	r3, [pc, #140]	; (8006168 <prvAddNewTaskToReadyList+0xc8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d802      	bhi.n	80060ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060e8:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <prvAddNewTaskToReadyList+0xc8>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <prvAddNewTaskToReadyList+0xd0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <prvAddNewTaskToReadyList+0xd0>)
 80060f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <prvAddNewTaskToReadyList+0xd0>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <prvAddNewTaskToReadyList+0xd4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d903      	bls.n	8006114 <prvAddNewTaskToReadyList+0x74>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	4a18      	ldr	r2, [pc, #96]	; (8006174 <prvAddNewTaskToReadyList+0xd4>)
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a15      	ldr	r2, [pc, #84]	; (8006178 <prvAddNewTaskToReadyList+0xd8>)
 8006122:	441a      	add	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7ff f913 	bl	8005356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006130:	f001 fa30 	bl	8007594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <prvAddNewTaskToReadyList+0xcc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <prvAddNewTaskToReadyList+0xc8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	429a      	cmp	r2, r3
 8006148:	d207      	bcs.n	800615a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <prvAddNewTaskToReadyList+0xdc>)
 800614c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	200013c0 	.word	0x200013c0
 8006168:	20000eec 	.word	0x20000eec
 800616c:	200013cc 	.word	0x200013cc
 8006170:	200013dc 	.word	0x200013dc
 8006174:	200013c8 	.word	0x200013c8
 8006178:	20000ef0 	.word	0x20000ef0
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d017      	beq.n	80061c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <vTaskDelay+0x60>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <vTaskDelay+0x30>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60bb      	str	r3, [r7, #8]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061b0:	f000 f880 	bl	80062b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061b4:	2100      	movs	r1, #0
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fcea 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061bc:	f000 f888 	bl	80062d0 <xTaskResumeAll>
 80061c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <vTaskDelay+0x64>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	200013e8 	.word	0x200013e8
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061f6:	463a      	mov	r2, r7
 80061f8:	1d39      	adds	r1, r7, #4
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f848 	bl	8005294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	9202      	str	r2, [sp, #8]
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	2300      	movs	r3, #0
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	460a      	mov	r2, r1
 8006216:	4921      	ldr	r1, [pc, #132]	; (800629c <vTaskStartScheduler+0xb4>)
 8006218:	4821      	ldr	r0, [pc, #132]	; (80062a0 <vTaskStartScheduler+0xb8>)
 800621a:	f7ff fe0f 	bl	8005e3c <xTaskCreateStatic>
 800621e:	4603      	mov	r3, r0
 8006220:	4a20      	ldr	r2, [pc, #128]	; (80062a4 <vTaskStartScheduler+0xbc>)
 8006222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <vTaskStartScheduler+0xbc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	e001      	b.n	8006236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d102      	bne.n	8006242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800623c:	f000 fcfc 	bl	8006c38 <xTimerCreateTimerTask>
 8006240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d116      	bne.n	8006276 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	613b      	str	r3, [r7, #16]
}
 800625a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800625c:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <vTaskStartScheduler+0xc0>)
 800625e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <vTaskStartScheduler+0xc4>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <vTaskStartScheduler+0xc8>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006270:	f001 f8be 	bl	80073f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006274:	e00e      	b.n	8006294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627c:	d10a      	bne.n	8006294 <vTaskStartScheduler+0xac>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <vTaskStartScheduler+0xaa>
}
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	08007c08 	.word	0x08007c08
 80062a0:	080068cd 	.word	0x080068cd
 80062a4:	200013e4 	.word	0x200013e4
 80062a8:	200013e0 	.word	0x200013e0
 80062ac:	200013cc 	.word	0x200013cc
 80062b0:	200013c4 	.word	0x200013c4

080062b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <vTaskSuspendAll+0x18>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	4a03      	ldr	r2, [pc, #12]	; (80062cc <vTaskSuspendAll+0x18>)
 80062c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062c2:	bf00      	nop
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	200013e8 	.word	0x200013e8

080062d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062de:	4b42      	ldr	r3, [pc, #264]	; (80063e8 <xTaskResumeAll+0x118>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <xTaskResumeAll+0x2c>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	603b      	str	r3, [r7, #0]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062fc:	f001 f91a 	bl	8007534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006300:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <xTaskResumeAll+0x118>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3b01      	subs	r3, #1
 8006306:	4a38      	ldr	r2, [pc, #224]	; (80063e8 <xTaskResumeAll+0x118>)
 8006308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630a:	4b37      	ldr	r3, [pc, #220]	; (80063e8 <xTaskResumeAll+0x118>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d162      	bne.n	80063d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006312:	4b36      	ldr	r3, [pc, #216]	; (80063ec <xTaskResumeAll+0x11c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d05e      	beq.n	80063d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631a:	e02f      	b.n	800637c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631c:	4b34      	ldr	r3, [pc, #208]	; (80063f0 <xTaskResumeAll+0x120>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3318      	adds	r3, #24
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff f871 	bl	8005410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff f86c 	bl	8005410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	4b2d      	ldr	r3, [pc, #180]	; (80063f4 <xTaskResumeAll+0x124>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d903      	bls.n	800634c <xTaskResumeAll+0x7c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <xTaskResumeAll+0x124>)
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <xTaskResumeAll+0x128>)
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fe fff7 	bl	8005356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	4b23      	ldr	r3, [pc, #140]	; (80063fc <xTaskResumeAll+0x12c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006376:	4b22      	ldr	r3, [pc, #136]	; (8006400 <xTaskResumeAll+0x130>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <xTaskResumeAll+0x120>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1cb      	bne.n	800631c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800638a:	f000 fb55 	bl	8006a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <xTaskResumeAll+0x134>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d010      	beq.n	80063bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800639a:	f000 f847 	bl	800642c <xTaskIncrementTick>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <xTaskResumeAll+0x130>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f1      	bne.n	800639a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063b6:	4b13      	ldr	r3, [pc, #76]	; (8006404 <xTaskResumeAll+0x134>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xTaskResumeAll+0x130>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <xTaskResumeAll+0x138>)
 80063ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063d8:	f001 f8dc 	bl	8007594 <vPortExitCritical>

	return xAlreadyYielded;
 80063dc:	68bb      	ldr	r3, [r7, #8]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200013e8 	.word	0x200013e8
 80063ec:	200013c0 	.word	0x200013c0
 80063f0:	20001380 	.word	0x20001380
 80063f4:	200013c8 	.word	0x200013c8
 80063f8:	20000ef0 	.word	0x20000ef0
 80063fc:	20000eec 	.word	0x20000eec
 8006400:	200013d4 	.word	0x200013d4
 8006404:	200013d0 	.word	0x200013d0
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <xTaskGetTickCount+0x1c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006418:	687b      	ldr	r3, [r7, #4]
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200013c4 	.word	0x200013c4

0800642c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006436:	4b4f      	ldr	r3, [pc, #316]	; (8006574 <xTaskIncrementTick+0x148>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 808f 	bne.w	800655e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <xTaskIncrementTick+0x14c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006448:	4a4b      	ldr	r2, [pc, #300]	; (8006578 <xTaskIncrementTick+0x14c>)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d120      	bne.n	8006496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006454:	4b49      	ldr	r3, [pc, #292]	; (800657c <xTaskIncrementTick+0x150>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <xTaskIncrementTick+0x48>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	603b      	str	r3, [r7, #0]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xTaskIncrementTick+0x46>
 8006474:	4b41      	ldr	r3, [pc, #260]	; (800657c <xTaskIncrementTick+0x150>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	4b41      	ldr	r3, [pc, #260]	; (8006580 <xTaskIncrementTick+0x154>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3f      	ldr	r2, [pc, #252]	; (800657c <xTaskIncrementTick+0x150>)
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4a3f      	ldr	r2, [pc, #252]	; (8006580 <xTaskIncrementTick+0x154>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <xTaskIncrementTick+0x158>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <xTaskIncrementTick+0x158>)
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	f000 fad1 	bl	8006a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006496:	4b3c      	ldr	r3, [pc, #240]	; (8006588 <xTaskIncrementTick+0x15c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	429a      	cmp	r2, r3
 800649e:	d349      	bcc.n	8006534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a0:	4b36      	ldr	r3, [pc, #216]	; (800657c <xTaskIncrementTick+0x150>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064aa:	4b37      	ldr	r3, [pc, #220]	; (8006588 <xTaskIncrementTick+0x15c>)
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b0:	601a      	str	r2, [r3, #0]
					break;
 80064b2:	e03f      	b.n	8006534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b4:	4b31      	ldr	r3, [pc, #196]	; (800657c <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d203      	bcs.n	80064d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064cc:	4a2e      	ldr	r2, [pc, #184]	; (8006588 <xTaskIncrementTick+0x15c>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064d2:	e02f      	b.n	8006534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe ff99 	bl	8005410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3318      	adds	r3, #24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff90 	bl	8005410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <xTaskIncrementTick+0x160>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <xTaskIncrementTick+0xd8>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <xTaskIncrementTick+0x160>)
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <xTaskIncrementTick+0x164>)
 8006512:	441a      	add	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe ff1b 	bl	8005356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <xTaskIncrementTick+0x168>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	429a      	cmp	r2, r3
 800652c:	d3b8      	bcc.n	80064a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006532:	e7b5      	b.n	80064a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <xTaskIncrementTick+0x168>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4915      	ldr	r1, [pc, #84]	; (8006590 <xTaskIncrementTick+0x164>)
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d901      	bls.n	8006550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800654c:	2301      	movs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <xTaskIncrementTick+0x16c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e004      	b.n	8006568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800655e:	4b0f      	ldr	r3, [pc, #60]	; (800659c <xTaskIncrementTick+0x170>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	4a0d      	ldr	r2, [pc, #52]	; (800659c <xTaskIncrementTick+0x170>)
 8006566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006568:	697b      	ldr	r3, [r7, #20]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200013e8 	.word	0x200013e8
 8006578:	200013c4 	.word	0x200013c4
 800657c:	20001378 	.word	0x20001378
 8006580:	2000137c 	.word	0x2000137c
 8006584:	200013d8 	.word	0x200013d8
 8006588:	200013e0 	.word	0x200013e0
 800658c:	200013c8 	.word	0x200013c8
 8006590:	20000ef0 	.word	0x20000ef0
 8006594:	20000eec 	.word	0x20000eec
 8006598:	200013d4 	.word	0x200013d4
 800659c:	200013d0 	.word	0x200013d0

080065a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065a6:	4b28      	ldr	r3, [pc, #160]	; (8006648 <vTaskSwitchContext+0xa8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065ae:	4b27      	ldr	r3, [pc, #156]	; (800664c <vTaskSwitchContext+0xac>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065b4:	e041      	b.n	800663a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065b6:	4b25      	ldr	r3, [pc, #148]	; (800664c <vTaskSwitchContext+0xac>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065bc:	4b24      	ldr	r3, [pc, #144]	; (8006650 <vTaskSwitchContext+0xb0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	e010      	b.n	80065e6 <vTaskSwitchContext+0x46>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vTaskSwitchContext+0x3e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	491b      	ldr	r1, [pc, #108]	; (8006654 <vTaskSwitchContext+0xb4>)
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0e4      	beq.n	80065c4 <vTaskSwitchContext+0x24>
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4a13      	ldr	r2, [pc, #76]	; (8006654 <vTaskSwitchContext+0xb4>)
 8006606:	4413      	add	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3308      	adds	r3, #8
 800661c:	429a      	cmp	r2, r3
 800661e:	d104      	bne.n	800662a <vTaskSwitchContext+0x8a>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <vTaskSwitchContext+0xb8>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	4a06      	ldr	r2, [pc, #24]	; (8006650 <vTaskSwitchContext+0xb0>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6013      	str	r3, [r2, #0]
}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	200013e8 	.word	0x200013e8
 800664c:	200013d4 	.word	0x200013d4
 8006650:	200013c8 	.word	0x200013c8
 8006654:	20000ef0 	.word	0x20000ef0
 8006658:	20000eec 	.word	0x20000eec

0800665c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60fb      	str	r3, [r7, #12]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006682:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vTaskPlaceOnEventList+0x44>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3318      	adds	r3, #24
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe fe87 	bl	800539e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006690:	2101      	movs	r1, #1
 8006692:	6838      	ldr	r0, [r7, #0]
 8006694:	f000 fa7c 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000eec 	.word	0x20000eec

080066a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3318      	adds	r3, #24
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7fe fe3e 	bl	8005356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	68b8      	ldr	r0, [r7, #8]
 80066ea:	f000 fa51 	bl	8006b90 <prvAddCurrentTaskToDelayedList>
	}
 80066ee:	bf00      	nop
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000eec 	.word	0x20000eec

080066fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	60fb      	str	r3, [r7, #12]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3318      	adds	r3, #24
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fe6f 	bl	8005410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006732:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <xTaskRemoveFromEventList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11d      	bne.n	8006776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fe66 	bl	8005410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <xTaskRemoveFromEventList+0xb4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d903      	bls.n	8006758 <xTaskRemoveFromEventList+0x5c>
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <xTaskRemoveFromEventList+0xb4>)
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <xTaskRemoveFromEventList+0xb8>)
 8006766:	441a      	add	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fe fdf1 	bl	8005356 <vListInsertEnd>
 8006774:	e005      	b.n	8006782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3318      	adds	r3, #24
 800677a:	4619      	mov	r1, r3
 800677c:	480e      	ldr	r0, [pc, #56]	; (80067b8 <xTaskRemoveFromEventList+0xbc>)
 800677e:	f7fe fdea 	bl	8005356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4b0d      	ldr	r3, [pc, #52]	; (80067bc <xTaskRemoveFromEventList+0xc0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	429a      	cmp	r2, r3
 800678e:	d905      	bls.n	800679c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <xTaskRemoveFromEventList+0xc4>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e001      	b.n	80067a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067a0:	697b      	ldr	r3, [r7, #20]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200013e8 	.word	0x200013e8
 80067b0:	200013c8 	.word	0x200013c8
 80067b4:	20000ef0 	.word	0x20000ef0
 80067b8:	20001380 	.word	0x20001380
 80067bc:	20000eec 	.word	0x20000eec
 80067c0:	200013d4 	.word	0x200013d4

080067c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <vTaskInternalSetTimeOutState+0x24>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <vTaskInternalSetTimeOutState+0x28>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	605a      	str	r2, [r3, #4]
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	200013d8 	.word	0x200013d8
 80067ec:	200013c4 	.word	0x200013c4

080067f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	613b      	str	r3, [r7, #16]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60fb      	str	r3, [r7, #12]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006832:	f000 fe7f 	bl	8007534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <xTaskCheckForTimeOut+0xbc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684e:	d102      	bne.n	8006856 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e023      	b.n	800689e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <xTaskCheckForTimeOut+0xc0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d007      	beq.n	8006872 <xTaskCheckForTimeOut+0x82>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e015      	b.n	800689e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	d20b      	bcs.n	8006894 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff9b 	bl	80067c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	e004      	b.n	800689e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f000 fe79 	bl	8007594 <vPortExitCritical>

	return xReturn;
 80068a2:	69fb      	ldr	r3, [r7, #28]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	200013c4 	.word	0x200013c4
 80068b0:	200013d8 	.word	0x200013d8

080068b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <vTaskMissedYield+0x14>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	200013d4 	.word	0x200013d4

080068cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d4:	f000 f852 	bl	800697c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068d8:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <prvIdleTask+0x28>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d9f9      	bls.n	80068d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <prvIdleTask+0x2c>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f0:	e7f0      	b.n	80068d4 <prvIdleTask+0x8>
 80068f2:	bf00      	nop
 80068f4:	20000ef0 	.word	0x20000ef0
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	e00c      	b.n	8006922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a12      	ldr	r2, [pc, #72]	; (800695c <prvInitialiseTaskLists+0x60>)
 8006914:	4413      	add	r3, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fcf0 	bl	80052fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3301      	adds	r3, #1
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b37      	cmp	r3, #55	; 0x37
 8006926:	d9ef      	bls.n	8006908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006928:	480d      	ldr	r0, [pc, #52]	; (8006960 <prvInitialiseTaskLists+0x64>)
 800692a:	f7fe fce7 	bl	80052fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800692e:	480d      	ldr	r0, [pc, #52]	; (8006964 <prvInitialiseTaskLists+0x68>)
 8006930:	f7fe fce4 	bl	80052fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006934:	480c      	ldr	r0, [pc, #48]	; (8006968 <prvInitialiseTaskLists+0x6c>)
 8006936:	f7fe fce1 	bl	80052fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693a:	480c      	ldr	r0, [pc, #48]	; (800696c <prvInitialiseTaskLists+0x70>)
 800693c:	f7fe fcde 	bl	80052fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006940:	480b      	ldr	r0, [pc, #44]	; (8006970 <prvInitialiseTaskLists+0x74>)
 8006942:	f7fe fcdb 	bl	80052fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <prvInitialiseTaskLists+0x78>)
 8006948:	4a05      	ldr	r2, [pc, #20]	; (8006960 <prvInitialiseTaskLists+0x64>)
 800694a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <prvInitialiseTaskLists+0x7c>)
 800694e:	4a05      	ldr	r2, [pc, #20]	; (8006964 <prvInitialiseTaskLists+0x68>)
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000ef0 	.word	0x20000ef0
 8006960:	20001350 	.word	0x20001350
 8006964:	20001364 	.word	0x20001364
 8006968:	20001380 	.word	0x20001380
 800696c:	20001394 	.word	0x20001394
 8006970:	200013ac 	.word	0x200013ac
 8006974:	20001378 	.word	0x20001378
 8006978:	2000137c 	.word	0x2000137c

0800697c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006982:	e019      	b.n	80069b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006984:	f000 fdd6 	bl	8007534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <prvCheckTasksWaitingTermination+0x50>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fd3b 	bl	8005410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a0b      	ldr	r2, [pc, #44]	; (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 80069a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4a0a      	ldr	r2, [pc, #40]	; (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ae:	f000 fdf1 	bl	8007594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f810 	bl	80069d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e1      	bne.n	8006984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20001394 	.word	0x20001394
 80069d0:	200013c0 	.word	0x200013c0
 80069d4:	200013a8 	.word	0x200013a8

080069d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 ff8e 	bl	8007910 <vPortFree>
				vPortFree( pxTCB );
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 ff8b 	bl	8007910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069fa:	e018      	b.n	8006a2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d103      	bne.n	8006a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 ff82 	bl	8007910 <vPortFree>
	}
 8006a0c:	e00f      	b.n	8006a2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d00a      	beq.n	8006a2e <prvDeleteTCB+0x56>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <prvDeleteTCB+0x54>
	}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a3e:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <prvResetNextTaskUnblockTime+0x38>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <prvResetNextTaskUnblockTime+0x3c>)
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a50:	e008      	b.n	8006a64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <prvResetNextTaskUnblockTime+0x38>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <prvResetNextTaskUnblockTime+0x3c>)
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	20001378 	.word	0x20001378
 8006a74:	200013e0 	.word	0x200013e0

08006a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <xTaskGetSchedulerState+0x34>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a86:	2301      	movs	r3, #1
 8006a88:	607b      	str	r3, [r7, #4]
 8006a8a:	e008      	b.n	8006a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <xTaskGetSchedulerState+0x38>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a94:	2302      	movs	r3, #2
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e001      	b.n	8006a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a9e:	687b      	ldr	r3, [r7, #4]
	}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	200013cc 	.word	0x200013cc
 8006ab0:	200013e8 	.word	0x200013e8

08006ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d056      	beq.n	8006b78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aca:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <xTaskPriorityDisinherit+0xd0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d00a      	beq.n	8006aea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	1e5a      	subs	r2, r3, #1
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d02c      	beq.n	8006b78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d128      	bne.n	8006b78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fc70 	bl	8005410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <xTaskPriorityDisinherit+0xd4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d903      	bls.n	8006b58 <xTaskPriorityDisinherit+0xa4>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <xTaskPriorityDisinherit+0xd4>)
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <xTaskPriorityDisinherit+0xd8>)
 8006b66:	441a      	add	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fbf1 	bl	8005356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b78:	697b      	ldr	r3, [r7, #20]
	}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000eec 	.word	0x20000eec
 8006b88:	200013c8 	.word	0x200013c8
 8006b8c:	20000ef0 	.word	0x20000ef0

08006b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b9a:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ba0:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fc32 	bl	8005410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb2:	d10a      	bne.n	8006bca <prvAddCurrentTaskToDelayedList+0x3a>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4819      	ldr	r0, [pc, #100]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bc4:	f7fe fbc7 	bl	8005356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bc8:	e026      	b.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4413      	add	r3, r2
 8006bd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bd2:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d209      	bcs.n	8006bf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006be2:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f7fe fbd5 	bl	800539e <vListInsert>
}
 8006bf4:	e010      	b.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe fbcb 	bl	800539e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d202      	bcs.n	8006c18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c12:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6013      	str	r3, [r2, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200013c4 	.word	0x200013c4
 8006c24:	20000eec 	.word	0x20000eec
 8006c28:	200013ac 	.word	0x200013ac
 8006c2c:	2000137c 	.word	0x2000137c
 8006c30:	20001378 	.word	0x20001378
 8006c34:	200013e0 	.word	0x200013e0

08006c38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c42:	f000 fb07 	bl	8007254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <xTimerCreateTimerTask+0x80>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d021      	beq.n	8006c92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c56:	1d3a      	adds	r2, r7, #4
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	f107 030c 	add.w	r3, r7, #12
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fb31 	bl	80052c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	9202      	str	r2, [sp, #8]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2302      	movs	r3, #2
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2300      	movs	r3, #0
 8006c76:	460a      	mov	r2, r1
 8006c78:	4910      	ldr	r1, [pc, #64]	; (8006cbc <xTimerCreateTimerTask+0x84>)
 8006c7a:	4811      	ldr	r0, [pc, #68]	; (8006cc0 <xTimerCreateTimerTask+0x88>)
 8006c7c:	f7ff f8de 	bl	8005e3c <xTaskCreateStatic>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <xTimerCreateTimerTask+0x8c>)
 8006c84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c86:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <xTimerCreateTimerTask+0x8c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cae:	697b      	ldr	r3, [r7, #20]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000141c 	.word	0x2000141c
 8006cbc:	08007c10 	.word	0x08007c10
 8006cc0:	08006dfd 	.word	0x08006dfd
 8006cc4:	20001420 	.word	0x20001420

08006cc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <xTimerGenericCommand+0x98>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02a      	beq.n	8006d54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	dc18      	bgt.n	8006d42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d10:	f7ff feb2 	bl	8006a78 <xTaskGetSchedulerState>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d109      	bne.n	8006d2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d1a:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <xTimerGenericCommand+0x98>)
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	f107 0110 	add.w	r1, r7, #16
 8006d22:	2300      	movs	r3, #0
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	f7fe fca1 	bl	800566c <xQueueGenericSend>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d2c:	e012      	b.n	8006d54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <xTimerGenericCommand+0x98>)
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f107 0110 	add.w	r1, r7, #16
 8006d36:	2300      	movs	r3, #0
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f7fe fc97 	bl	800566c <xQueueGenericSend>
 8006d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d40:	e008      	b.n	8006d54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <xTimerGenericCommand+0x98>)
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f107 0110 	add.w	r1, r7, #16
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	f7fe fd8b 	bl	8005868 <xQueueGenericSendFromISR>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000141c 	.word	0x2000141c

08006d64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <prvProcessExpiredTimer+0x94>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fb47 	bl	8005410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d022      	beq.n	8006dd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	18d1      	adds	r1, r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f000 f8d1 	bl	8006f44 <prvInsertTimerInActiveList>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01f      	beq.n	8006de8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006da8:	2300      	movs	r3, #0
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	2300      	movs	r3, #0
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	2100      	movs	r1, #0
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f7ff ff88 	bl	8006cc8 <xTimerGenericCommand>
 8006db8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d113      	bne.n	8006de8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	6978      	ldr	r0, [r7, #20]
 8006dee:	4798      	blx	r3
}
 8006df0:	bf00      	nop
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20001414 	.word	0x20001414

08006dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f857 	bl	8006ebc <prvGetNextExpireTime>
 8006e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f803 	bl	8006e20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e1a:	f000 f8d5 	bl	8006fc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e1e:	e7f1      	b.n	8006e04 <prvTimerTask+0x8>

08006e20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e2a:	f7ff fa43 	bl	80062b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e2e:	f107 0308 	add.w	r3, r7, #8
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f866 	bl	8006f04 <prvSampleTimeNow>
 8006e38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d130      	bne.n	8006ea2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <prvProcessTimerOrBlockTask+0x3c>
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d806      	bhi.n	8006e5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e4e:	f7ff fa3f 	bl	80062d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff ff85 	bl	8006d64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e5a:	e024      	b.n	8006ea6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <prvProcessTimerOrBlockTask+0x90>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <prvProcessTimerOrBlockTask+0x50>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <prvProcessTimerOrBlockTask+0x52>
 8006e70:	2300      	movs	r3, #0
 8006e72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <prvProcessTimerOrBlockTask+0x94>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	f7fe ffa7 	bl	8005dd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e86:	f7ff fa23 	bl	80062d0 <xTaskResumeAll>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e90:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <prvProcessTimerOrBlockTask+0x98>)
 8006e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	f3bf 8f6f 	isb	sy
}
 8006ea0:	e001      	b.n	8006ea6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ea2:	f7ff fa15 	bl	80062d0 <xTaskResumeAll>
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20001418 	.word	0x20001418
 8006eb4:	2000141c 	.word	0x2000141c
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ec4:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <prvGetNextExpireTime+0x44>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <prvGetNextExpireTime+0x16>
 8006ece:	2201      	movs	r2, #1
 8006ed0:	e000      	b.n	8006ed4 <prvGetNextExpireTime+0x18>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ee0:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <prvGetNextExpireTime+0x44>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e001      	b.n	8006ef0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20001414 	.word	0x20001414

08006f04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f0c:	f7ff fa7e 	bl	800640c <xTaskGetTickCount>
 8006f10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <prvSampleTimeNow+0x3c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d205      	bcs.n	8006f28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f1c:	f000 f936 	bl	800718c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e002      	b.n	8006f2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f2e:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <prvSampleTimeNow+0x3c>)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f34:	68fb      	ldr	r3, [r7, #12]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20001424 	.word	0x20001424

08006f44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d812      	bhi.n	8006f90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	e01b      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <prvInsertTimerInActiveList+0x7c>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fe fa08 	bl	800539e <vListInsert>
 8006f8e:	e012      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d206      	bcs.n	8006fa6 <prvInsertTimerInActiveList+0x62>
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e007      	b.n	8006fb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <prvInsertTimerInActiveList+0x80>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe f9f4 	bl	800539e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fb6:	697b      	ldr	r3, [r7, #20]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20001418 	.word	0x20001418
 8006fc4:	20001414 	.word	0x20001414

08006fc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08e      	sub	sp, #56	; 0x38
 8006fcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fce:	e0ca      	b.n	8007166 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da18      	bge.n	8007008 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fd6:	1d3b      	adds	r3, r7, #4
 8006fd8:	3304      	adds	r3, #4
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	61fb      	str	r3, [r7, #28]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ffe:	6850      	ldr	r0, [r2, #4]
 8007000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007002:	6892      	ldr	r2, [r2, #8]
 8007004:	4611      	mov	r1, r2
 8007006:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f2c0 80aa 	blt.w	8007164 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe f9f5 	bl	8005410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007026:	463b      	mov	r3, r7
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff6b 	bl	8006f04 <prvSampleTimeNow>
 800702e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b09      	cmp	r3, #9
 8007034:	f200 8097 	bhi.w	8007166 <prvProcessReceivedCommands+0x19e>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <prvProcessReceivedCommands+0x78>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007069 	.word	0x08007069
 8007044:	08007069 	.word	0x08007069
 8007048:	08007069 	.word	0x08007069
 800704c:	080070dd 	.word	0x080070dd
 8007050:	080070f1 	.word	0x080070f1
 8007054:	0800713b 	.word	0x0800713b
 8007058:	08007069 	.word	0x08007069
 800705c:	08007069 	.word	0x08007069
 8007060:	080070dd 	.word	0x080070dd
 8007064:	080070f1 	.word	0x080070f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	b2da      	uxtb	r2, r3
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	18d1      	adds	r1, r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	f7ff ff5c 	bl	8006f44 <prvInsertTimerInActiveList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d069      	beq.n	8007166 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007098:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05e      	beq.n	8007166 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	441a      	add	r2, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	2100      	movs	r1, #0
 80070b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ba:	f7ff fe05 	bl	8006cc8 <xTimerGenericCommand>
 80070be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d14f      	bne.n	8007166 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	61bb      	str	r3, [r7, #24]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070ee:	e03a      	b.n	8007166 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	617b      	str	r3, [r7, #20]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007134:	f7ff ff06 	bl	8006f44 <prvInsertTimerInActiveList>
					break;
 8007138:	e015      	b.n	8007166 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d103      	bne.n	8007150 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714a:	f000 fbe1 	bl	8007910 <vPortFree>
 800714e:	e00a      	b.n	8007166 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007156:	f023 0301 	bic.w	r3, r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007162:	e000      	b.n	8007166 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007164:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007166:	4b08      	ldr	r3, [pc, #32]	; (8007188 <prvProcessReceivedCommands+0x1c0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	1d39      	adds	r1, r7, #4
 800716c:	2200      	movs	r2, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fc16 	bl	80059a0 <xQueueReceive>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	f47f af2a 	bne.w	8006fd0 <prvProcessReceivedCommands+0x8>
	}
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000141c 	.word	0x2000141c

0800718c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007192:	e048      	b.n	8007226 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007194:	4b2d      	ldr	r3, [pc, #180]	; (800724c <prvSwitchTimerLists+0xc0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719e:	4b2b      	ldr	r3, [pc, #172]	; (800724c <prvSwitchTimerLists+0xc0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe f92f 	bl	8005410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02e      	beq.n	8007226 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d90e      	bls.n	80071f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071e6:	4b19      	ldr	r3, [pc, #100]	; (800724c <prvSwitchTimerLists+0xc0>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe f8d4 	bl	800539e <vListInsert>
 80071f6:	e016      	b.n	8007226 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2300      	movs	r3, #0
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	2100      	movs	r1, #0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fd60 	bl	8006cc8 <xTimerGenericCommand>
 8007208:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	603b      	str	r3, [r7, #0]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <prvSwitchTimerLists+0xc0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1b1      	bne.n	8007194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007230:	4b06      	ldr	r3, [pc, #24]	; (800724c <prvSwitchTimerLists+0xc0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007236:	4b06      	ldr	r3, [pc, #24]	; (8007250 <prvSwitchTimerLists+0xc4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <prvSwitchTimerLists+0xc0>)
 800723c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSwitchTimerLists+0xc4>)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6013      	str	r3, [r2, #0]
}
 8007244:	bf00      	nop
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20001414 	.word	0x20001414
 8007250:	20001418 	.word	0x20001418

08007254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800725a:	f000 f96b 	bl	8007534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <prvCheckForValidListAndQueue+0x60>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d120      	bne.n	80072a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007266:	4814      	ldr	r0, [pc, #80]	; (80072b8 <prvCheckForValidListAndQueue+0x64>)
 8007268:	f7fe f848 	bl	80052fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800726c:	4813      	ldr	r0, [pc, #76]	; (80072bc <prvCheckForValidListAndQueue+0x68>)
 800726e:	f7fe f845 	bl	80052fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <prvCheckForValidListAndQueue+0x6c>)
 8007274:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <prvCheckForValidListAndQueue+0x64>)
 8007276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <prvCheckForValidListAndQueue+0x70>)
 800727a:	4a10      	ldr	r2, [pc, #64]	; (80072bc <prvCheckForValidListAndQueue+0x68>)
 800727c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800727e:	2300      	movs	r3, #0
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <prvCheckForValidListAndQueue+0x74>)
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <prvCheckForValidListAndQueue+0x78>)
 8007286:	2110      	movs	r1, #16
 8007288:	200a      	movs	r0, #10
 800728a:	f7fe f953 	bl	8005534 <xQueueGenericCreateStatic>
 800728e:	4603      	mov	r3, r0
 8007290:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <prvCheckForValidListAndQueue+0x60>)
 8007292:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <prvCheckForValidListAndQueue+0x60>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <prvCheckForValidListAndQueue+0x60>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	490b      	ldr	r1, [pc, #44]	; (80072d0 <prvCheckForValidListAndQueue+0x7c>)
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fd6c 	bl	8005d80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072a8:	f000 f974 	bl	8007594 <vPortExitCritical>
}
 80072ac:	bf00      	nop
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	2000141c 	.word	0x2000141c
 80072b8:	200013ec 	.word	0x200013ec
 80072bc:	20001400 	.word	0x20001400
 80072c0:	20001414 	.word	0x20001414
 80072c4:	20001418 	.word	0x20001418
 80072c8:	200014c8 	.word	0x200014c8
 80072cc:	20001428 	.word	0x20001428
 80072d0:	08007c18 	.word	0x08007c18

080072d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3b04      	subs	r3, #4
 80072e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f023 0201 	bic.w	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b04      	subs	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007304:	4a0c      	ldr	r2, [pc, #48]	; (8007338 <pxPortInitialiseStack+0x64>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b14      	subs	r3, #20
 800730e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b04      	subs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f06f 0202 	mvn.w	r2, #2
 8007322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3b20      	subs	r3, #32
 8007328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	0800733d 	.word	0x0800733d

0800733c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <prvTaskExitError+0x54>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734e:	d00a      	beq.n	8007366 <prvTaskExitError+0x2a>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <prvTaskExitError+0x28>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60bb      	str	r3, [r7, #8]
}
 8007378:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800737a:	bf00      	nop
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0fc      	beq.n	800737c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	2000000c 	.word	0x2000000c
	...

080073a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <pxCurrentTCBConst2>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	f380 8809 	msr	PSP, r0
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	4770      	bx	lr
 80073bc:	f3af 8000 	nop.w

080073c0 <pxCurrentTCBConst2>:
 80073c0:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop

080073c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073c8:	4808      	ldr	r0, [pc, #32]	; (80073ec <prvPortStartFirstTask+0x24>)
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	6800      	ldr	r0, [r0, #0]
 80073ce:	f380 8808 	msr	MSP, r0
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8814 	msr	CONTROL, r0
 80073da:	b662      	cpsie	i
 80073dc:	b661      	cpsie	f
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	df00      	svc	0
 80073e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ea:	bf00      	nop
 80073ec:	e000ed08 	.word	0xe000ed08

080073f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073f6:	4b46      	ldr	r3, [pc, #280]	; (8007510 <xPortStartScheduler+0x120>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a46      	ldr	r2, [pc, #280]	; (8007514 <xPortStartScheduler+0x124>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10a      	bne.n	8007416 <xPortStartScheduler+0x26>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007416:	4b3e      	ldr	r3, [pc, #248]	; (8007510 <xPortStartScheduler+0x120>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a3f      	ldr	r2, [pc, #252]	; (8007518 <xPortStartScheduler+0x128>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d10a      	bne.n	8007436 <xPortStartScheduler+0x46>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007436:	4b39      	ldr	r3, [pc, #228]	; (800751c <xPortStartScheduler+0x12c>)
 8007438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	22ff      	movs	r2, #255	; 0xff
 8007446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007458:	b2da      	uxtb	r2, r3
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <xPortStartScheduler+0x130>)
 800745c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800745e:	4b31      	ldr	r3, [pc, #196]	; (8007524 <xPortStartScheduler+0x134>)
 8007460:	2207      	movs	r2, #7
 8007462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007464:	e009      	b.n	800747a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007466:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <xPortStartScheduler+0x134>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3b01      	subs	r3, #1
 800746c:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <xPortStartScheduler+0x134>)
 800746e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b80      	cmp	r3, #128	; 0x80
 8007484:	d0ef      	beq.n	8007466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007486:	4b27      	ldr	r3, [pc, #156]	; (8007524 <xPortStartScheduler+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1c3 0307 	rsb	r3, r3, #7
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00a      	beq.n	80074a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60bb      	str	r3, [r7, #8]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074a8:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <xPortStartScheduler+0x134>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <xPortStartScheduler+0x134>)
 80074b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <xPortStartScheduler+0x134>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ba:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <xPortStartScheduler+0x134>)
 80074bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074c6:	4b18      	ldr	r3, [pc, #96]	; (8007528 <xPortStartScheduler+0x138>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a17      	ldr	r2, [pc, #92]	; (8007528 <xPortStartScheduler+0x138>)
 80074cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <xPortStartScheduler+0x138>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <xPortStartScheduler+0x138>)
 80074d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074de:	f000 f8dd 	bl	800769c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074e2:	4b12      	ldr	r3, [pc, #72]	; (800752c <xPortStartScheduler+0x13c>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074e8:	f000 f8fc 	bl	80076e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <xPortStartScheduler+0x140>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <xPortStartScheduler+0x140>)
 80074f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074f8:	f7ff ff66 	bl	80073c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074fc:	f7ff f850 	bl	80065a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007500:	f7ff ff1c 	bl	800733c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	e000ed00 	.word	0xe000ed00
 8007514:	410fc271 	.word	0x410fc271
 8007518:	410fc270 	.word	0x410fc270
 800751c:	e000e400 	.word	0xe000e400
 8007520:	20001518 	.word	0x20001518
 8007524:	2000151c 	.word	0x2000151c
 8007528:	e000ed20 	.word	0xe000ed20
 800752c:	2000000c 	.word	0x2000000c
 8007530:	e000ef34 	.word	0xe000ef34

08007534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	607b      	str	r3, [r7, #4]
}
 800754c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <vPortEnterCritical+0x58>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	4a0d      	ldr	r2, [pc, #52]	; (800758c <vPortEnterCritical+0x58>)
 8007556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007558:	4b0c      	ldr	r3, [pc, #48]	; (800758c <vPortEnterCritical+0x58>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10f      	bne.n	8007580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortEnterCritical+0x5c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <vPortEnterCritical+0x4c>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	603b      	str	r3, [r7, #0]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <vPortEnterCritical+0x4a>
	}
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	2000000c 	.word	0x2000000c
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <vPortExitCritical+0x50>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <vPortExitCritical+0x24>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	607b      	str	r3, [r7, #4]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <vPortExitCritical+0x50>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <vPortExitCritical+0x50>)
 80075c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075c2:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <vPortExitCritical+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <vPortExitCritical+0x42>
 80075ca:	2300      	movs	r3, #0
 80075cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f383 8811 	msr	BASEPRI, r3
}
 80075d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000000c 	.word	0x2000000c
	...

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f01e 0f10 	tst.w	lr, #16
 8007600:	bf08      	it	eq
 8007602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007614:	f380 8811 	msr	BASEPRI, r0
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f7fe ffbe 	bl	80065a0 <vTaskSwitchContext>
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	f380 8811 	msr	BASEPRI, r0
 800762c:	bc09      	pop	{r0, r3}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007636:	f01e 0f10 	tst.w	lr, #16
 800763a:	bf08      	it	eq
 800763c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007640:	f380 8809 	msr	PSP, r0
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst>:
 8007650:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
}
 8007670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007672:	f7fe fedb 	bl	800642c <xTaskIncrementTick>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <xPortSysTickHandler+0x40>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <vPortSetupTimerInterrupt+0x38>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <vPortSetupTimerInterrupt+0x3c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <vPortSetupTimerInterrupt+0x40>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <vPortSetupTimerInterrupt+0x44>)
 80076ba:	3b01      	subs	r3, #1
 80076bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076c0:	2207      	movs	r2, #7
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	e000e010 	.word	0xe000e010
 80076d4:	e000e018 	.word	0xe000e018
 80076d8:	20000000 	.word	0x20000000
 80076dc:	10624dd3 	.word	0x10624dd3
 80076e0:	e000e014 	.word	0xe000e014

080076e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076f4 <vPortEnableVFP+0x10>
 80076e8:	6801      	ldr	r1, [r0, #0]
 80076ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ee:	6001      	str	r1, [r0, #0]
 80076f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076f2:	bf00      	nop
 80076f4:	e000ed88 	.word	0xe000ed88

080076f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076fe:	f3ef 8305 	mrs	r3, IPSR
 8007702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d914      	bls.n	8007734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <vPortValidateInterruptPriority+0x70>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <vPortValidateInterruptPriority+0x74>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	7afa      	ldrb	r2, [r7, #11]
 800771a:	429a      	cmp	r2, r3
 800771c:	d20a      	bcs.n	8007734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <vPortValidateInterruptPriority+0x78>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <vPortValidateInterruptPriority+0x7c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d90a      	bls.n	800775a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	603b      	str	r3, [r7, #0]
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <vPortValidateInterruptPriority+0x60>
	}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	e000e3f0 	.word	0xe000e3f0
 800776c:	20001518 	.word	0x20001518
 8007770:	e000ed0c 	.word	0xe000ed0c
 8007774:	2000151c 	.word	0x2000151c

08007778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007784:	f7fe fd96 	bl	80062b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007788:	4b5b      	ldr	r3, [pc, #364]	; (80078f8 <pvPortMalloc+0x180>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007790:	f000 f920 	bl	80079d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007794:	4b59      	ldr	r3, [pc, #356]	; (80078fc <pvPortMalloc+0x184>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8093 	bne.w	80078c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01d      	beq.n	80077e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077a8:	2208      	movs	r2, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d014      	beq.n	80077e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f023 0307 	bic.w	r3, r3, #7
 80077c0:	3308      	adds	r3, #8
 80077c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <pvPortMalloc+0x6c>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d06e      	beq.n	80078c8 <pvPortMalloc+0x150>
 80077ea:	4b45      	ldr	r3, [pc, #276]	; (8007900 <pvPortMalloc+0x188>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d869      	bhi.n	80078c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077f4:	4b43      	ldr	r3, [pc, #268]	; (8007904 <pvPortMalloc+0x18c>)
 80077f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <pvPortMalloc+0x18c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fe:	e004      	b.n	800780a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <pvPortMalloc+0xa4>
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f1      	bne.n	8007800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800781c:	4b36      	ldr	r3, [pc, #216]	; (80078f8 <pvPortMalloc+0x180>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	429a      	cmp	r2, r3
 8007824:	d050      	beq.n	80078c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2208      	movs	r2, #8
 800782c:	4413      	add	r3, r2
 800782e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	2308      	movs	r3, #8
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	429a      	cmp	r2, r3
 8007846:	d91f      	bls.n	8007888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <pvPortMalloc+0xf8>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	613b      	str	r3, [r7, #16]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007882:	69b8      	ldr	r0, [r7, #24]
 8007884:	f000 f908 	bl	8007a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <pvPortMalloc+0x188>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <pvPortMalloc+0x188>)
 8007894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <pvPortMalloc+0x188>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <pvPortMalloc+0x190>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d203      	bcs.n	80078aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078a2:	4b17      	ldr	r3, [pc, #92]	; (8007900 <pvPortMalloc+0x188>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <pvPortMalloc+0x190>)
 80078a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <pvPortMalloc+0x184>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x194>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a11      	ldr	r2, [pc, #68]	; (800790c <pvPortMalloc+0x194>)
 80078c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078c8:	f7fe fd02 	bl	80062d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <pvPortMalloc+0x174>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <pvPortMalloc+0x172>
	return pvReturn;
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	200020e0 	.word	0x200020e0
 80078fc:	200020f4 	.word	0x200020f4
 8007900:	200020e4 	.word	0x200020e4
 8007904:	200020d8 	.word	0x200020d8
 8007908:	200020e8 	.word	0x200020e8
 800790c:	200020ec 	.word	0x200020ec

08007910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04d      	beq.n	80079be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007922:	2308      	movs	r3, #8
 8007924:	425b      	negs	r3, r3
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4413      	add	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <vPortFree+0xb8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <vPortFree+0x44>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60fb      	str	r3, [r7, #12]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <vPortFree+0x62>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	60bb      	str	r3, [r7, #8]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <vPortFree+0xb8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01e      	beq.n	80079be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11a      	bne.n	80079be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <vPortFree+0xb8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	43db      	mvns	r3, r3
 8007992:	401a      	ands	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007998:	f7fe fc8c 	bl	80062b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <vPortFree+0xbc>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4413      	add	r3, r2
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <vPortFree+0xbc>)
 80079a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079aa:	6938      	ldr	r0, [r7, #16]
 80079ac:	f000 f874 	bl	8007a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <vPortFree+0xc0>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	4a06      	ldr	r2, [pc, #24]	; (80079d0 <vPortFree+0xc0>)
 80079b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ba:	f7fe fc89 	bl	80062d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200020f4 	.word	0x200020f4
 80079cc:	200020e4 	.word	0x200020e4
 80079d0:	200020f0 	.word	0x200020f0

080079d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079e0:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <prvHeapInit+0xac>)
 80079e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00c      	beq.n	8007a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3307      	adds	r3, #7
 80079f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <prvHeapInit+0xac>)
 8007a04:	4413      	add	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	; (8007a84 <prvHeapInit+0xb0>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a12:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <prvHeapInit+0xb0>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a20:	2208      	movs	r2, #8
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0307 	bic.w	r3, r3, #7
 8007a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <prvHeapInit+0xb4>)
 8007a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <prvHeapInit+0xb4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a3e:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvHeapInit+0xb4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <prvHeapInit+0xb4>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <prvHeapInit+0xb8>)
 8007a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <prvHeapInit+0xbc>)
 8007a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a6c:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <prvHeapInit+0xc0>)
 8007a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a72:	601a      	str	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20001520 	.word	0x20001520
 8007a84:	200020d8 	.word	0x200020d8
 8007a88:	200020e0 	.word	0x200020e0
 8007a8c:	200020e8 	.word	0x200020e8
 8007a90:	200020e4 	.word	0x200020e4
 8007a94:	200020f4 	.word	0x200020f4

08007a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aa0:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <prvInsertBlockIntoFreeList+0xac>)
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	e002      	b.n	8007aac <prvInsertBlockIntoFreeList+0x14>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d8f7      	bhi.n	8007aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d108      	bne.n	8007ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d118      	bne.n	8007b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b15      	ldr	r3, [pc, #84]	; (8007b48 <prvInsertBlockIntoFreeList+0xb0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d00d      	beq.n	8007b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e008      	b.n	8007b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvInsertBlockIntoFreeList+0xb0>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e003      	b.n	8007b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d002      	beq.n	8007b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	200020d8 	.word	0x200020d8
 8007b48:	200020e0 	.word	0x200020e0

08007b4c <__libc_init_array>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4d0d      	ldr	r5, [pc, #52]	; (8007b84 <__libc_init_array+0x38>)
 8007b50:	4c0d      	ldr	r4, [pc, #52]	; (8007b88 <__libc_init_array+0x3c>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	2600      	movs	r6, #0
 8007b58:	42a6      	cmp	r6, r4
 8007b5a:	d109      	bne.n	8007b70 <__libc_init_array+0x24>
 8007b5c:	4d0b      	ldr	r5, [pc, #44]	; (8007b8c <__libc_init_array+0x40>)
 8007b5e:	4c0c      	ldr	r4, [pc, #48]	; (8007b90 <__libc_init_array+0x44>)
 8007b60:	f000 f82e 	bl	8007bc0 <_init>
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	2600      	movs	r6, #0
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	d105      	bne.n	8007b7a <__libc_init_array+0x2e>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b74:	4798      	blx	r3
 8007b76:	3601      	adds	r6, #1
 8007b78:	e7ee      	b.n	8007b58 <__libc_init_array+0xc>
 8007b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	e7f2      	b.n	8007b6a <__libc_init_array+0x1e>
 8007b84:	08007c94 	.word	0x08007c94
 8007b88:	08007c94 	.word	0x08007c94
 8007b8c:	08007c94 	.word	0x08007c94
 8007b90:	08007c98 	.word	0x08007c98

08007b94 <memcpy>:
 8007b94:	440a      	add	r2, r1
 8007b96:	4291      	cmp	r1, r2
 8007b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b9c:	d100      	bne.n	8007ba0 <memcpy+0xc>
 8007b9e:	4770      	bx	lr
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007baa:	4291      	cmp	r1, r2
 8007bac:	d1f9      	bne.n	8007ba2 <memcpy+0xe>
 8007bae:	bd10      	pop	{r4, pc}

08007bb0 <memset>:
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d100      	bne.n	8007bba <memset+0xa>
 8007bb8:	4770      	bx	lr
 8007bba:	f803 1b01 	strb.w	r1, [r3], #1
 8007bbe:	e7f9      	b.n	8007bb4 <memset+0x4>

08007bc0 <_init>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	bf00      	nop
 8007bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc6:	bc08      	pop	{r3}
 8007bc8:	469e      	mov	lr, r3
 8007bca:	4770      	bx	lr

08007bcc <_fini>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

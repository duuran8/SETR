
Practica2-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c88  08007c88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c90  08007c90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08007ca8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08007ca8  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028433  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aff  00000000  00000000  00048473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002340  00000000  00000000  0004cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002168  00000000  00000000  0004f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000504e  00000000  00000000  00051420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d9f  00000000  00000000  0005646e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107af8  00000000  00000000  0007e20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e8  00000000  00000000  00185d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd0 	.word	0x08007bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007bd0 	.word	0x08007bd0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <led_toggle>:
 *      Author: julianduran
 */
#include "led_toggle.h"


void led_toggle(uint8_t led) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	switch (led) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d82c      	bhi.n	800053e <led_toggle+0x6a>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <led_toggle+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	08000529 	.word	0x08000529
 80004f8:	08000535 	.word	0x08000535
		case 0:
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <led_toggle+0x74>)
 8000502:	f001 fbd1 	bl	8001ca8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <led_toggle+0x78>)
 800050c:	f001 fbcc 	bl	8001ca8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fbc7 	bl	8001ca8 <HAL_GPIO_TogglePin>
		}	break;
 800051a:	e011      	b.n	8000540 <led_toggle+0x6c>
		case 1:
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <led_toggle+0x74>)
 8000522:	f001 fbc1 	bl	8001ca8 <HAL_GPIO_TogglePin>
			break;
 8000526:	e00b      	b.n	8000540 <led_toggle+0x6c>
		case 2:
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <led_toggle+0x78>)
 800052e:	f001 fbbb 	bl	8001ca8 <HAL_GPIO_TogglePin>
			break;
 8000532:	e005      	b.n	8000540 <led_toggle+0x6c>
		case 3:
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f001 fbb5 	bl	8001ca8 <HAL_GPIO_TogglePin>
		default:
			break;
 800053e:	bf00      	nop
		}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	48000400 	.word	0x48000400
 800054c:	48000800 	.word	0x48000800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 ff9a 	bl	800148e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f837 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f9ff 	bl	8000960 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000562:	f000 f895 	bl	8000690 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000566:	f000 f8cb 	bl	8000700 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800056a:	f000 f907 	bl	800077c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800056e:	f000 f92b 	bl	80007c8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000572:	f000 f967 	bl	8000844 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f995 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057a:	f000 f9c3 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057e:	f004 fd9f 	bl	80050c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <main+0x70>)
 8000584:	2100      	movs	r1, #0
 8000586:	480f      	ldr	r0, [pc, #60]	; (80005c4 <main+0x74>)
 8000588:	f004 fde4 	bl	8005154 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <main+0x78>)
 8000590:	6013      	str	r3, [r2, #0]
  CreateLedTask();
 8000592:	f000 ff33 	bl	80013fc <CreateLedTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000596:	f004 fdb7 	bl	8005108 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0;i<4;i++){
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e00b      	b.n	80005b8 <main+0x68>
		  led_toggle(i);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff95 	bl	80004d4 <led_toggle>
		  HAL_Delay(500);
 80005aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ae:	f000 ffa7 	bl	8001500 <HAL_Delay>
	  for(int i=0;i<4;i++){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3301      	adds	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	ddf0      	ble.n	80005a0 <main+0x50>
 80005be:	e7ec      	b.n	800059a <main+0x4a>
 80005c0:	08007c1c 	.word	0x08007c1c
 80005c4:	08000cc5 	.word	0x08000cc5
 80005c8:	20000774 	.word	0x20000774

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 faf0 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f2:	f001 fe23 	bl	800223c <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fb7c 	bl	8000cf8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f001 fdfe 	bl	8002200 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	; 0x28
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ff19 	bl	8002480 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 fb50 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fae1 	bl	8002c38 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 fb3c 	bl	8000cf8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f003 f81a 	bl	80036b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_DFSDM1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 800069c:	2201      	movs	r2, #1
 800069e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e6:	f001 f811 	bl	800170c <HAL_DFSDM_ChannelInit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 fb02 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40016020 	.word	0x40016020

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C2_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C2_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C2_Init+0x74>)
 800070c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000710:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_I2C2_Init+0x74>)
 800071a:	2201      	movs	r2, #1
 800071c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_I2C2_Init+0x74>)
 800073e:	f001 faf0 	bl	8001d22 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fad6 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C2_Init+0x74>)
 8000750:	f001 fb76 	bl	8001e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800075a:	f000 facd 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C2_Init+0x74>)
 8000762:	f001 fbb8 	bl	8001ed6 <HAL_I2CEx_ConfigDigitalFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 fac4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000064 	.word	0x20000064
 8000778:	40005800 	.word	0x40005800

0800077c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <MX_QUADSPI_Init+0x48>)
 8000784:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 800078e:	2204      	movs	r2, #4
 8000790:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 8000794:	2210      	movs	r2, #16
 8000796:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 800079a:	2217      	movs	r2, #23
 800079c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_QUADSPI_Init+0x44>)
 80007ac:	f001 fdac 	bl	8002308 <HAL_QSPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007b6:	f000 fa9f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000b8 	.word	0x200000b8
 80007c4:	a0001000 	.word	0xa0001000

080007c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_SPI3_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_SPI3_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_SPI3_Init+0x74>)
 80007d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_SPI3_Init+0x74>)
 80007e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_SPI3_Init+0x74>)
 80007f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI3_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI3_Init+0x74>)
 8000822:	2208      	movs	r2, #8
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_SPI3_Init+0x74>)
 8000828:	f003 f928 	bl	8003a7c <HAL_SPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 fa61 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000fc 	.word	0x200000fc
 8000840:	40003c00 	.word	0x40003c00

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART1_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_USART1_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000888:	f003 fc6c 	bl	8004164 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 fa31 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000160 	.word	0x20000160
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f003 fc3c 	bl	8004164 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 fa01 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001e4 	.word	0x200001e4
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800090e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2206      	movs	r2, #6
 8000914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2202      	movs	r2, #2
 8000920:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	f001 fb11 	bl	8001f6e <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 f9d1 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000268 	.word	0x20000268

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4bbd      	ldr	r3, [pc, #756]	; (8000c6c <MX_GPIO_Init+0x30c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4abc      	ldr	r2, [pc, #752]	; (8000c6c <MX_GPIO_Init+0x30c>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4bba      	ldr	r3, [pc, #744]	; (8000c6c <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4bb7      	ldr	r3, [pc, #732]	; (8000c6c <MX_GPIO_Init+0x30c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4ab6      	ldr	r2, [pc, #728]	; (8000c6c <MX_GPIO_Init+0x30c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4bb4      	ldr	r3, [pc, #720]	; (8000c6c <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4bb1      	ldr	r3, [pc, #708]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4ab0      	ldr	r2, [pc, #704]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4bae      	ldr	r3, [pc, #696]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4bab      	ldr	r3, [pc, #684]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4aaa      	ldr	r2, [pc, #680]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4ba8      	ldr	r3, [pc, #672]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4ba5      	ldr	r3, [pc, #660]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4aa4      	ldr	r2, [pc, #656]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4ba2      	ldr	r3, [pc, #648]	; (8000c6c <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009f4:	489e      	ldr	r0, [pc, #632]	; (8000c70 <MX_GPIO_Init+0x310>)
 80009f6:	f001 f93f 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f248 1124 	movw	r1, #33060	; 0x8124
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f001 f938 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a0e:	4899      	ldr	r0, [pc, #612]	; (8000c74 <MX_GPIO_Init+0x314>)
 8000a10:	f001 f932 	bl	8001c78 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a1a:	4897      	ldr	r0, [pc, #604]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000a1c:	f001 f92c 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4894      	ldr	r0, [pc, #592]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000a28:	f001 f926 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a32:	4892      	ldr	r0, [pc, #584]	; (8000c7c <MX_GPIO_Init+0x31c>)
 8000a34:	f001 f920 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	488d      	ldr	r0, [pc, #564]	; (8000c74 <MX_GPIO_Init+0x314>)
 8000a3e:	f001 f91b 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2101      	movs	r1, #1
 8000a46:	488a      	ldr	r0, [pc, #552]	; (8000c70 <MX_GPIO_Init+0x310>)
 8000a48:	f001 f916 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a4c:	f240 1315 	movw	r3, #277	; 0x115
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4882      	ldr	r0, [pc, #520]	; (8000c70 <MX_GPIO_Init+0x310>)
 8000a66:	f000 ff5d 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a6a:	236a      	movs	r3, #106	; 0x6a
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	487c      	ldr	r0, [pc, #496]	; (8000c70 <MX_GPIO_Init+0x310>)
 8000a80:	f000 ff50 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4878      	ldr	r0, [pc, #480]	; (8000c7c <MX_GPIO_Init+0x31c>)
 8000a9c:	f000 ff42 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000aa0:	233f      	movs	r3, #63	; 0x3f
 8000aa2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4872      	ldr	r0, [pc, #456]	; (8000c7c <MX_GPIO_Init+0x31c>)
 8000ab4:	f000 ff36 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f000 ff25 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_3_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ada:	f248 1324 	movw	r3, #33060	; 0x8124
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 ff15 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 ff04 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b20:	230b      	movs	r3, #11
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fef7 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b36:	23c0      	movs	r3, #192	; 0xc0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fee6 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4841      	ldr	r0, [pc, #260]	; (8000c74 <MX_GPIO_Init+0x314>)
 8000b6e:	f000 fed9 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b76:	230b      	movs	r3, #11
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	483b      	ldr	r0, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x314>)
 8000b86:	f000 fecd 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b8a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b8e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4834      	ldr	r0, [pc, #208]	; (8000c74 <MX_GPIO_Init+0x314>)
 8000ba4:	f000 febe 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ba8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482e      	ldr	r0, [pc, #184]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000bc0:	f000 feb0 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bc4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000bde:	f000 fea1 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4820      	ldr	r0, [pc, #128]	; (8000c7c <MX_GPIO_Init+0x31c>)
 8000bfc:	f000 fe92 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4819      	ldr	r0, [pc, #100]	; (8000c7c <MX_GPIO_Init+0x31c>)
 8000c18:	f000 fe84 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000c38:	f000 fe74 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c3c:	2378      	movs	r3, #120	; 0x78
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <MX_GPIO_Init+0x318>)
 8000c58:	f000 fe64 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e00a      	b.n	8000c80 <MX_GPIO_Init+0x320>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48001000 	.word	0x48001000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c86:	2304      	movs	r3, #4
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <MX_GPIO_Init+0x360>)
 8000c92:	f000 fe47 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2017      	movs	r0, #23
 8000c9c:	f000 fd0c 	bl	80016b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca0:	2017      	movs	r0, #23
 8000ca2:	f000 fd25 	bl	80016f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2028      	movs	r0, #40	; 0x28
 8000cac:	f000 fd04 	bl	80016b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb0:	2028      	movs	r0, #40	; 0x28
 8000cb2:	f000 fd1d 	bl	80016f0 <HAL_NVIC_EnableIRQ>

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f004 fad3 	bl	8005278 <osDelay>
 8000cd2:	e7fb      	b.n	8000ccc <StartDefaultTask+0x8>

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fbeb 	bl	80014c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40014800 	.word	0x40014800

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f06f 0001 	mvn.w	r0, #1
 8000d42:	f000 fcb9 	bl	80016b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0ac      	sub	sp, #176	; 0xb0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2288      	movs	r2, #136	; 0x88
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 ff23 	bl	8007bc0 <memset>
  if(DFSDM1_Init == 0)
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d142      	bne.n	8000e08 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 f9a6 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d9e:	f7ff ffab 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dd2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dec:	2306      	movs	r3, #6
 8000dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dfa:	f000 fd93 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a02      	ldr	r2, [pc, #8]	; (8000e10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e06:	6013      	str	r3, [r2, #0]
  }

}
 8000e08:	bf00      	nop
 8000e0a:	37b0      	adds	r7, #176	; 0xb0
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000778 	.word	0x20000778
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48001000 	.word	0x48001000

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ac      	sub	sp, #176	; 0xb0
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2288      	movs	r2, #136	; 0x88
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 febf 	bl	8007bc0 <memset>
  if(hi2c->Instance==I2C2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_I2C_MspInit+0xb0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d13b      	bne.n	8000ec4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f943 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff ff48 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_I2C_MspInit+0xb8>)
 8000ea8:	f000 fd3c 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0xb4>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	37b0      	adds	r7, #176	; 0xb0
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005800 	.word	0x40005800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <HAL_QSPI_MspInit+0x7c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d128      	bne.n	8000f4c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6513      	str	r3, [r2, #80]	; 0x50
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_QSPI_MspInit+0x80>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f2a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f2e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_QSPI_MspInit+0x84>)
 8000f48:	f000 fcec 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	a0001000 	.word	0xa0001000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48001000 	.word	0x48001000

08000f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_SPI_MspInit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d128      	bne.n	8000fd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_SPI_MspInit+0x80>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fb2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_SPI_MspInit+0x84>)
 8000fd0:	f000 fca8 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40003c00 	.word	0x40003c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000800 	.word	0x48000800

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ae      	sub	sp, #184	; 0xb8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	2288      	movs	r2, #136	; 0x88
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 fdd9 	bl	8007bc0 <memset>
  if(huart->Instance==USART1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <HAL_UART_MspInit+0x134>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d13b      	bne.n	8001090 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800101c:	2300      	movs	r3, #0
 800101e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4618      	mov	r0, r3
 8001026:	f002 f85d 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001030:	f7ff fe62 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_UART_MspInit+0x138>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001038:	4a39      	ldr	r2, [pc, #228]	; (8001120 <HAL_UART_MspInit+0x138>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103e:	6613      	str	r3, [r2, #96]	; 0x60
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_UART_MspInit+0x138>)
 8001042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_UART_MspInit+0x138>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a33      	ldr	r2, [pc, #204]	; (8001120 <HAL_UART_MspInit+0x138>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_UART_MspInit+0x138>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001064:	23c0      	movs	r3, #192	; 0xc0
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107c:	2307      	movs	r3, #7
 800107e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001086:	4619      	mov	r1, r3
 8001088:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_UART_MspInit+0x13c>)
 800108a:	f000 fc4b 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800108e:	e040      	b.n	8001112 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_UART_MspInit+0x140>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d13b      	bne.n	8001112 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109a:	2304      	movs	r3, #4
 800109c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800109e:	2300      	movs	r3, #0
 80010a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f81c 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010b2:	f7ff fe21 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_UART_MspInit+0x138>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001100:	2307      	movs	r3, #7
 8001102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <HAL_UART_MspInit+0x144>)
 800110e:	f000 fc09 	bl	8001924 <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	37b8      	adds	r7, #184	; 0xb8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40013800 	.word	0x40013800
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400
 8001128:	40004800 	.word	0x40004800
 800112c:	48000c00 	.word	0x48000c00

08001130 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	; 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	; 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f006 fd35 	bl	8007bc0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800115e:	d17c      	bne.n	800125a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001166:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800116a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001176:	2318      	movs	r3, #24
 8001178:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800117a:	2307      	movs	r3, #7
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001186:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4618      	mov	r0, r3
 8001192:	f001 ffa7 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800119c:	f7ff fdac 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_PCD_MspInit+0x134>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <HAL_PCD_MspInit+0x134>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_PCD_MspInit+0x134>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fba5 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011f4:	230a      	movs	r3, #10
 80011f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f000 fb8e 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a15      	ldr	r2, [pc, #84]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800120e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_PCD_MspInit+0x134>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_PCD_MspInit+0x134>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d114      	bne.n	8001256 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_PCD_MspInit+0x134>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001244:	f001 f850 	bl	80022e8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_PCD_MspInit+0x134>)
 800124e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001254:	e001      	b.n	800125a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001256:	f001 f847 	bl	80022e8 <HAL_PWREx_EnableVddUSB>
}
 800125a:	bf00      	nop
 800125c:	37b0      	adds	r7, #176	; 0xb0
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_InitTick+0xc8>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_InitTick+0xc8>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_InitTick+0xc8>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe91 	bl	8002fc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800129e:	f001 fe79 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80012a2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <HAL_InitTick+0xcc>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	3b01      	subs	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_InitTick+0xd0>)
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_InitTick+0xd4>)
 80012b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_InitTick+0xd0>)
 80012ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012be:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_InitTick+0xd0>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_InitTick+0xd0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_InitTick+0xd0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_InitTick+0xd0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <HAL_InitTick+0xd0>)
 80012da:	f002 fc72 	bl	8003bc2 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11b      	bne.n	8001324 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80012ec:	4812      	ldr	r0, [pc, #72]	; (8001338 <HAL_InitTick+0xd0>)
 80012ee:	f002 fcc9 	bl	8003c84 <HAL_TIM_Base_Start_IT>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001300:	201a      	movs	r0, #26
 8001302:	f000 f9f5 	bl	80016f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d808      	bhi.n	800131e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	201a      	movs	r0, #26
 8001312:	f000 f9d1 	bl	80016b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0xd8>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e002      	b.n	8001324 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001328:	4618      	mov	r0, r3
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	431bde83 	.word	0x431bde83
 8001338:	2000077c 	.word	0x2000077c
 800133c:	40014800 	.word	0x40014800
 8001340:	20000004 	.word	0x20000004

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001374:	2020      	movs	r0, #32
 8001376:	f000 fcb1 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800137a:	2040      	movs	r0, #64	; 0x40
 800137c:	f000 fcae 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001380:	2080      	movs	r0, #128	; 0x80
 8001382:	f000 fcab 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001386:	f44f 7080 	mov.w	r0, #256	; 0x100
 800138a:	f000 fca7 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800139a:	f002 fce3 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000077c 	.word	0x2000077c

080013a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013b0:	f000 fc94 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013b8:	f000 fc90 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c0:	f000 fc8c 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c8:	f000 fc88 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013d0:	f000 fc84 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <CreateLedTask>:
#include "tareas.h"

void CreateLedTask(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
	//puntero a la funcion, nombre, tamaño de pila, parametro de tarea, numero de prioridad, handle de tarea
	xTaskCreate(LedToggleTask, "LedToggleTask", 128, NULL, 1, NULL);
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2301      	movs	r3, #1
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	4903      	ldr	r1, [pc, #12]	; (800141c <CreateLedTask+0x20>)
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <CreateLedTask+0x24>)
 8001412:	f004 fd7e 	bl	8005f12 <xTaskCreate>
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08007bf4 	.word	0x08007bf4
 8001420:	08001425 	.word	0x08001425

08001424 <LedToggleTask>:


void LedToggleTask(void *pArg){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	for(;;){
		led_toggle(0);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff f851 	bl	80004d4 <led_toggle>
		vTaskDelay(1000);
 8001432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001436:	f004 feb1 	bl	800619c <vTaskDelay>
	for(;;){
 800143a:	e7f7      	b.n	800142c <LedToggleTask+0x8>

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff ffca 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f006 fb77 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff f86f 	bl	8000550 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001480:	08007c98 	.word	0x08007c98
  ldr r2, =_sbss
 8001484:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001488:	200020f8 	.word	0x200020f8

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>

0800148e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f902 	bl	80016a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	200f      	movs	r0, #15
 80014a0:	f7ff fee2 	bl	8001268 <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e001      	b.n	80014b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b0:	f7ff fc28 	bl	8000d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	200007c8 	.word	0x200007c8

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200007c8 	.word	0x200007c8

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	db0b      	blt.n	80015d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f003 021f 	and.w	r2, r3, #31
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <__NVIC_EnableIRQ+0x38>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff4c 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ca:	f7ff ff61 	bl	8001590 <__NVIC_GetPriorityGrouping>
 80016ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	6978      	ldr	r0, [r7, #20]
 80016d6:	f7ff ffb1 	bl	800163c <NVIC_EncodePriority>
 80016da:	4602      	mov	r2, r0
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff80 	bl	80015e8 <__NVIC_SetPriority>
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff54 	bl	80015ac <__NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0ac      	b.n	8001878 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f8b2 	bl	800188c <DFSDM_GetChannelFromInstance>
 8001728:	4603      	mov	r3, r0
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_DFSDM_ChannelInit+0x174>)
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e09f      	b.n	8001878 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fb0b 	bl	8000d54 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800173e:	4b51      	ldr	r3, [pc, #324]	; (8001884 <HAL_DFSDM_ChannelInit+0x178>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a4f      	ldr	r2, [pc, #316]	; (8001884 <HAL_DFSDM_ChannelInit+0x178>)
 8001746:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001748:	4b4e      	ldr	r3, [pc, #312]	; (8001884 <HAL_DFSDM_ChannelInit+0x178>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d125      	bne.n	800179c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001750:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800175a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4948      	ldr	r1, [pc, #288]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001770:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001774:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800177e:	4b42      	ldr	r3, [pc, #264]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3b01      	subs	r3, #1
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	493f      	ldr	r1, [pc, #252]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_DFSDM_ChannelInit+0x17c>)
 8001796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800179a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80017aa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017ba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017c0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020f 	bic.w	r2, r2, #15
 80017d8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001800:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f002 0207 	and.w	r2, r2, #7
 800182c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001858:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f810 	bl	800188c <DFSDM_GetChannelFromInstance>
 800186c:	4602      	mov	r2, r0
 800186e:	4904      	ldr	r1, [pc, #16]	; (8001880 <HAL_DFSDM_ChannelInit+0x174>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200007d0 	.word	0x200007d0
 8001884:	200007cc 	.word	0x200007cc
 8001888:	40016000 	.word	0x40016000

0800188c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <DFSDM_GetChannelFromInstance+0x7c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d102      	bne.n	80018a2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e02b      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <DFSDM_GetChannelFromInstance+0x80>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d102      	bne.n	80018b0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e024      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <DFSDM_GetChannelFromInstance+0x84>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e01d      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <DFSDM_GetChannelFromInstance+0x88>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018c6:	2304      	movs	r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e016      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <DFSDM_GetChannelFromInstance+0x8c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018d4:	2305      	movs	r3, #5
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e00f      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <DFSDM_GetChannelFromInstance+0x90>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80018e2:	2306      	movs	r3, #6
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e008      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <DFSDM_GetChannelFromInstance+0x94>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e001      	b.n	80018fa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80018f6:	2303      	movs	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40016000 	.word	0x40016000
 800190c:	40016020 	.word	0x40016020
 8001910:	40016040 	.word	0x40016040
 8001914:	40016080 	.word	0x40016080
 8001918:	400160a0 	.word	0x400160a0
 800191c:	400160c0 	.word	0x400160c0
 8001920:	400160e0 	.word	0x400160e0

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e17f      	b.n	8001c34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8171 	beq.w	8001c2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x40>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d118      	bne.n	8001a04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	6939      	ldr	r1, [r7, #16]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ac 	beq.w	8001c2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aee:	4a5a      	ldr	r2, [pc, #360]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x242>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_GPIO_Init+0x338>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x23e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4e      	ldr	r2, [pc, #312]	; (8001c60 <HAL_GPIO_Init+0x33c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x23a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_GPIO_Init+0x340>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x236>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_GPIO_Init+0x344>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x232>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_GPIO_Init+0x348>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x22e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_GPIO_Init+0x34c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x22a>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e00c      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00a      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b52:	2305      	movs	r3, #5
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b66:	2300      	movs	r3, #0
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b78:	4937      	ldr	r1, [pc, #220]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001baa:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f47f ae78 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48001400 	.word	0x48001400
 8001c70:	48001800 	.word	0x48001800
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43d9      	mvns	r1, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f806 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e081      	b.n	8001e38 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff f867 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2224      	movs	r2, #36	; 0x24
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d107      	bne.n	8001d9c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	e006      	b.n	8001daa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001da8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d104      	bne.n	8001dbc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69d9      	ldr	r1, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d138      	bne.n	8001ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e032      	b.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d139      	bne.n	8001f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e033      	b.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2224      	movs	r2, #36	; 0x24
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f70:	b08f      	sub	sp, #60	; 0x3c
 8001f72:	af0a      	add	r7, sp, #40	; 0x28
 8001f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e116      	b.n	80021ae <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff f8c8 	bl	8001130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fdb1 	bl	8004b26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	687e      	ldr	r6, [r7, #4]
 8001fcc:	466d      	mov	r5, sp
 8001fce:	f106 0410 	add.w	r4, r6, #16
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe2:	1d33      	adds	r3, r6, #4
 8001fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	f002 fd71 	bl	8004ace <USB_CoreInit>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0d7      	b.n	80021ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fd9f 	bl	8004b48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e04a      	b.n	80020a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	333d      	adds	r3, #61	; 0x3d
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	b298      	uxth	r0, r3
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3344      	adds	r3, #68	; 0x44
 800204c:	4602      	mov	r2, r0
 800204e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3340      	adds	r3, #64	; 0x40
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3348      	adds	r3, #72	; 0x48
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	334c      	adds	r3, #76	; 0x4c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3354      	adds	r3, #84	; 0x54
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	3301      	adds	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3af      	bcc.n	8002010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e044      	b.n	8002140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3b5      	bcc.n	80020b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	687e      	ldr	r6, [r7, #4]
 8002152:	466d      	mov	r5, sp
 8002154:	f106 0410 	add.w	r4, r6, #16
 8002158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002164:	e885 0003 	stmia.w	r5, {r0, r1}
 8002168:	1d33      	adds	r3, r6, #4
 800216a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216c:	6838      	ldr	r0, [r7, #0]
 800216e:	f002 fd37 	bl	8004be0 <USB_DevInit>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e014      	b.n	80021ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f80a 	bl	80021b6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fee3 	bl	8004f72 <USB_DevDisconnect>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	f043 0303 	orr.w	r3, r3, #3
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <HAL_PWREx_GetVoltageRange+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007000 	.word	0x40007000

0800223c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224a:	d130      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002258:	d038      	beq.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2232      	movs	r2, #50	; 0x32
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002280:	e002      	b.n	8002288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b01      	subs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d102      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f2      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d110      	bne.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e00f      	b.n	80022ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d007      	beq.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c4:	4a05      	ldr	r2, [pc, #20]	; (80022dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000
 80022e0:	20000000 	.word	0x20000000
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f6:	6053      	str	r3, [r2, #4]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40007000 	.word	0x40007000

08002308 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff f8ea 	bl	80014e8 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e063      	b.n	80023e8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fdcf 	bl	8000ed8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800233a:	f241 3188 	movw	r1, #5000	; 0x1388
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f858 	bl	80023f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	2120      	movs	r1, #32
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f850 	bl	8002410 <QSPI_WaitFlagStateUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d131      	bne.n	80023de <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002384:	f023 0310 	bic.w	r3, r3, #16
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	0611      	lsls	r1, r2, #24
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_QSPI_Init+0xe8>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	0411      	lsls	r1, r2, #16
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6952      	ldr	r2, [r2, #20]
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6992      	ldr	r2, [r2, #24]
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80023e6:	7afb      	ldrb	r3, [r7, #11]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ffe0f8fe 	.word	0xffe0f8fe

080023f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002420:	e01a      	b.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d016      	beq.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f85d 	bl	80014e8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2204      	movs	r2, #4
 8002444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e00e      	b.n	8002476 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1d6      	bne.n	8002422 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e3ca      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b97      	ldr	r3, [pc, #604]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249c:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80e4 	beq.w	800267c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_RCC_OscConfig+0x4a>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	f040 808b 	bne.w	80025d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 8087 	bne.w	80025d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ca:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e3a2      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_RCC_OscConfig+0x7c>
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fa:	e005      	b.n	8002508 <HAL_RCC_OscConfig+0x88>
 80024fc:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	4293      	cmp	r3, r2
 800250a:	d223      	bcs.n	8002554 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd87 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e383      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002520:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	496d      	ldr	r1, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253e:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	4968      	ldr	r1, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
 8002552:	e025      	b.n	80025a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4960      	ldr	r1, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	495b      	ldr	r1, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd47 	bl	8003024 <RCC_SetFlashLatencyFromMSIRange>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e343      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a0:	f000 fc4a 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	4950      	ldr	r1, [pc, #320]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a4e      	ldr	r2, [pc, #312]	; (80026f8 <HAL_RCC_OscConfig+0x278>)
 80025be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <HAL_RCC_OscConfig+0x27c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fe4f 	bl	8001268 <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d052      	beq.n	800267a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	e327      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d032      	beq.n	8002646 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a42      	ldr	r2, [pc, #264]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ec:	f7fe ff7c 	bl	80014e8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f4:	f7fe ff78 	bl	80014e8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e310      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a36      	ldr	r2, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002618:	f043 0308 	orr.w	r3, r3, #8
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4931      	ldr	r1, [pc, #196]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002630:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	492c      	ldr	r1, [pc, #176]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	e01a      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002652:	f7fe ff49 	bl	80014e8 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800265a:	f7fe ff45 	bl	80014e8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e2dd      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x1da>
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800267a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d074      	beq.n	8002772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x21a>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d10e      	bne.n	80026b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d10b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d064      	beq.n	8002770 <HAL_RCC_OscConfig+0x2f0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d160      	bne.n	8002770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e2ba      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x24a>
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e026      	b.n	8002718 <HAL_RCC_OscConfig+0x298>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d2:	d115      	bne.n	8002700 <HAL_RCC_OscConfig+0x280>
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a02      	ldr	r2, [pc, #8]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x298>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08007c40 	.word	0x08007c40
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004
 8002700:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a9f      	ldr	r2, [pc, #636]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b9d      	ldr	r3, [pc, #628]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a9c      	ldr	r2, [pc, #624]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fee2 	bl	80014e8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fede 	bl	80014e8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e276      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x2a8>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fece 	bl	80014e8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7fe feca 	bl	80014e8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e262      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x2d0>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d060      	beq.n	8002840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x310>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d119      	bne.n	80027be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d116      	bne.n	80027be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x328>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e23f      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	4973      	ldr	r1, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	e040      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d023      	beq.n	800280e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c6:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fe89 	bl	80014e8 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fe85 	bl	80014e8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e21d      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	4b65      	ldr	r3, [pc, #404]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b62      	ldr	r3, [pc, #392]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	495f      	ldr	r1, [pc, #380]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e018      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fe65 	bl	80014e8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fe61 	bl	80014e8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1f9      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d03c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285a:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fe40 	bl	80014e8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fe3c 	bl	80014e8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1d4      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <HAL_RCC_OscConfig+0x3ec>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002894:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fe23 	bl	80014e8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a6:	f7fe fe1f 	bl	80014e8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1b7      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a6 	beq.w	8002a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	; 0x58
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x508>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d118      	bne.n	800293e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_OscConfig+0x508>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x508>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002918:	f7fe fde6 	bl	80014e8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fde2 	bl	80014e8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e17a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x508>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d108      	bne.n	8002958 <HAL_RCC_OscConfig+0x4d8>
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002956:	e029      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d115      	bne.n	800298c <HAL_RCC_OscConfig+0x50c>
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	4a07      	ldr	r2, [pc, #28]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <HAL_RCC_OscConfig+0x504>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x52c>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	4b9c      	ldr	r3, [pc, #624]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a9b      	ldr	r2, [pc, #620]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299c:	4b98      	ldr	r3, [pc, #608]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a97      	ldr	r2, [pc, #604]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d016      	beq.n	80029e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fd98 	bl	80014e8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fd94 	bl	80014e8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e12a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ed      	beq.n	80029bc <HAL_RCC_OscConfig+0x53c>
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fd81 	bl	80014e8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fd7d 	bl	80014e8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e113      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a00:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ed      	bne.n	80029ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b7a      	ldr	r3, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	4a79      	ldr	r2, [pc, #484]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80fe 	beq.w	8002c26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	f040 80d0 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a34:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d130      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	3b01      	subs	r3, #1
 8002a54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d127      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a74:	2a07      	cmp	r2, #7
 8002a76:	bf14      	ite	ne
 8002a78:	2201      	movne	r2, #1
 8002a7a:	2200      	moveq	r2, #0
 8002a7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d06e      	beq.n	8002b88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d069      	beq.n	8002b84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0ad      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002acc:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad8:	f7fe fd06 	bl	80014e8 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fd02 	bl	80014e8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e09a      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b40      	ldr	r3, [pc, #256]	; (8002c04 <HAL_RCC_OscConfig+0x784>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b0e:	3a01      	subs	r2, #1
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b18:	0212      	lsls	r2, r2, #8
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0552      	lsls	r2, r2, #21
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b2c:	0852      	lsrs	r2, r2, #1
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	0652      	lsls	r2, r2, #25
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b38:	0912      	lsrs	r2, r2, #4
 8002b3a:	0452      	lsls	r2, r2, #17
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4930      	ldr	r1, [pc, #192]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2d      	ldr	r2, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7fe fcc4 	bl	80014e8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fcc0 	bl	80014e8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	e050      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04f      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d148      	bne.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba0:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bac:	f7fe fc9c 	bl	80014e8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fc98 	bl	80014e8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e030      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x734>
 8002bd2:	e028      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d023      	beq.n	8002c22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x780>)
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fc7f 	bl	80014e8 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	e00c      	b.n	8002c08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fc7b 	bl	80014e8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d905      	bls.n	8002c08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e013      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ec      	bne.n	8002bee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4905      	ldr	r1, [pc, #20]	; (8002c30 <HAL_RCC_OscConfig+0x7b0>)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_OscConfig+0x7b4>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e001      	b.n	8002c26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	feeefffc 	.word	0xfeeefffc

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0e7      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4970      	ldr	r1, [pc, #448]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0cf      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d010      	beq.n	8002caa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d908      	bls.n	8002caa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4960      	ldr	r1, [pc, #384]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04c      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0a6      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e09a      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cee:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e08e      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e086      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4943      	ldr	r1, [pc, #268]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe fbe2 	bl	80014e8 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fbde 	bl	80014e8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e06e      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	492b      	ldr	r1, [pc, #172]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d210      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 0207 	bic.w	r2, r3, #7
 8002d94:	4923      	ldr	r1, [pc, #140]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9c:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e036      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4918      	ldr	r1, [pc, #96]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4910      	ldr	r1, [pc, #64]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dec:	f000 f824 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	490b      	ldr	r1, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1f4>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1fc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fa29 	bl	8001268 <HAL_InitTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08007c40 	.word	0x08007c40
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x34>
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d121      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d11e      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e005      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e94:	4a2b      	ldr	r2, [pc, #172]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e004      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d134      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0xa6>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8002edc:	e005      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee0:	617b      	str	r3, [r7, #20]
      break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ee6:	617b      	str	r3, [r7, #20]
      break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	617b      	str	r3, [r7, #20]
      break;
 8002eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	3301      	adds	r3, #1
 8002efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	fb03 f202 	mul.w	r2, r3, r2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	0e5b      	lsrs	r3, r3, #25
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	3301      	adds	r3, #1
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f30:	69bb      	ldr	r3, [r7, #24]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08007c58 	.word	0x08007c58
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	007a1200 	.word	0x007a1200

08002f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08007c50 	.word	0x08007c50

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f98:	f7ff ffda 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08007c50 	.word	0x08007c50

08002fc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	220f      	movs	r2, #15
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_RCC_GetClockConfig+0x60>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	601a      	str	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	40022000 	.word	0x40022000

08003024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800303c:	f7ff f8f0 	bl	8002220 <HAL_PWREx_GetVoltageRange>
 8003040:	6178      	str	r0, [r7, #20]
 8003042:	e014      	b.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800304a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304e:	6593      	str	r3, [r2, #88]	; 0x58
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800305c:	f7ff f8e0 	bl	8002220 <HAL_PWREx_GetVoltageRange>
 8003060:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003074:	d10b      	bne.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d919      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2ba0      	cmp	r3, #160	; 0xa0
 8003080:	d902      	bls.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003082:	2302      	movs	r3, #2
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e013      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003088:	2301      	movs	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e010      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d902      	bls.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003094:	2303      	movs	r3, #3
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e00a      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b80      	cmp	r3, #128	; 0x80
 800309e:	d102      	bne.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030a0:	2302      	movs	r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e004      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d101      	bne.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4909      	ldr	r1, [pc, #36]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030ec:	2300      	movs	r3, #0
 80030ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d041      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003108:	d02a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800310a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800310e:	d824      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800311a:	d81e      	bhi.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003124:	d010      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003126:	e018      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003128:	4b86      	ldr	r3, [pc, #536]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a85      	ldr	r2, [pc, #532]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 facb 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003146:	e00c      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3320      	adds	r3, #32
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fbb6 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
      break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003168:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003176:	4973      	ldr	r1, [pc, #460]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d041      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003198:	d02a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800319a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800319e:	d824      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031aa:	d81e      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d010      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031b6:	e018      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031b8:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fa83 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3320      	adds	r3, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fb6e 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	74fb      	strb	r3, [r7, #19]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031f8:	4b52      	ldr	r3, [pc, #328]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003206:	494f      	ldr	r1, [pc, #316]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800320e:	e001      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a0 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	4a40      	ldr	r2, [pc, #256]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6593      	str	r3, [r2, #88]	; 0x58
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003264:	f7fe f940 	bl	80014e8 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326a:	e009      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fe f93c 	bl	80014e8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d902      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	74fb      	strb	r3, [r7, #19]
        break;
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ef      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d15c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d019      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b0:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032dc:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe f8fb 	bl	80014e8 <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	e00b      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe f8f7 	bl	80014e8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d902      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	74fb      	strb	r3, [r7, #19]
            break;
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ec      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003332:	4904      	ldr	r1, [pc, #16]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800333a:	e009      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
 8003340:	e006      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b9e      	ldr	r3, [pc, #632]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a9d      	ldr	r2, [pc, #628]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336e:	4b98      	ldr	r3, [pc, #608]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	4994      	ldr	r1, [pc, #592]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 020c 	bic.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	498c      	ldr	r1, [pc, #560]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b2:	4b87      	ldr	r3, [pc, #540]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	4983      	ldr	r1, [pc, #524]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	497b      	ldr	r1, [pc, #492]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	4972      	ldr	r1, [pc, #456]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	496a      	ldr	r1, [pc, #424]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	4961      	ldr	r1, [pc, #388]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800345c:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	4959      	ldr	r1, [pc, #356]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	4950      	ldr	r1, [pc, #320]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	4948      	ldr	r1, [pc, #288]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	493f      	ldr	r1, [pc, #252]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d028      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003502:	d106      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
 8003510:	e011      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351a:	d10c      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8d8 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	491f      	ldr	r1, [pc, #124]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003560:	d106      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356c:	60d3      	str	r3, [r2, #12]
 800356e:	e011      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f8a9 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02b      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	4908      	ldr	r1, [pc, #32]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e014      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f877 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	4928      	ldr	r1, [pc, #160]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	2102      	movs	r1, #2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f854 	bl	80036d8 <RCCEx_PLLSAI1_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d014      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	74bb      	strb	r3, [r7, #18]
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3320      	adds	r3, #32
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f935 	bl	80038c0 <RCCEx_PLLSAI2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367e:	490d      	ldr	r1, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a2:	4904      	ldr	r1, [pc, #16]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000

080036d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036e6:	4b75      	ldr	r3, [pc, #468]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0203 	and.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
       ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
       ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d047      	beq.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e044      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d018      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x86>
 800372c:	2b03      	cmp	r3, #3
 800372e:	d825      	bhi.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <RCCEx_PLLSAI1_Config+0x62>
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x74>
 8003738:	e020      	b.n	800377c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373a:	4b60      	ldr	r3, [pc, #384]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e01a      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374c:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e013      	b.n	8003786 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375e:	4b57      	ldr	r3, [pc, #348]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	4b54      	ldr	r3, [pc, #336]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377a:	e006      	b.n	800378a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e004      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378a:	bf00      	nop
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	430b      	orrs	r3, r1
 80037a8:	4944      	ldr	r1, [pc, #272]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d17d      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a40      	ldr	r2, [pc, #256]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fd fe92 	bl	80014e8 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fd fe8e 	bl	80014e8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037dc:	4b37      	ldr	r3, [pc, #220]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ef      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6892      	ldr	r2, [r2, #8]
 8003804:	0211      	lsls	r1, r2, #8
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	0912      	lsrs	r2, r2, #4
 800380c:	0452      	lsls	r2, r2, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	492a      	ldr	r1, [pc, #168]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
 8003816:	e027      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d112      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003826:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0552      	lsls	r2, r2, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	491f      	ldr	r1, [pc, #124]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e011      	b.n	8003868 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800384c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6952      	ldr	r2, [r2, #20]
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	430a      	orrs	r2, r1
 8003862:	4916      	ldr	r1, [pc, #88]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fe38 	bl	80014e8 <HAL_GetTick>
 8003878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387a:	e009      	b.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387c:	f7fd fe34 	bl	80014e8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d902      	bls.n	8003890 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	73fb      	strb	r3, [r7, #15]
          break;
 800388e:	e005      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ef      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	4904      	ldr	r1, [pc, #16]	; (80038bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ce:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0203 	and.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
       ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038f2:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
       ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d047      	beq.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	e044      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d018      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x86>
 8003914:	2b03      	cmp	r3, #3
 8003916:	d825      	bhi.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
 8003918:	2b01      	cmp	r3, #1
 800391a:	d002      	beq.n	8003922 <RCCEx_PLLSAI2_Config+0x62>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d009      	beq.n	8003934 <RCCEx_PLLSAI2_Config+0x74>
 8003920:	e020      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003922:	4b55      	ldr	r3, [pc, #340]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11d      	bne.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e01a      	b.n	800396a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e013      	b.n	800396e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003952:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003962:	e006      	b.n	8003972 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e004      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003972:	bf00      	nop
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	430b      	orrs	r3, r1
 8003990:	4939      	ldr	r1, [pc, #228]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d167      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fd9e 	bl	80014e8 <HAL_GetTick>
 80039ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ae:	e009      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b0:	f7fd fd9a 	bl	80014e8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d902      	bls.n	80039c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	73fb      	strb	r3, [r7, #15]
        break;
 80039c2:	e005      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d14a      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039dc:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0912      	lsrs	r2, r2, #4
 80039f4:	0452      	lsls	r2, r2, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	491f      	ldr	r1, [pc, #124]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	614b      	str	r3, [r1, #20]
 80039fe:	e011      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6912      	ldr	r2, [r2, #16]
 8003a16:	0852      	lsrs	r2, r2, #1
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0652      	lsls	r2, r2, #25
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fd5a 	bl	80014e8 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a38:	f7fd fd56 	bl	80014e8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e095      	b.n	8003bba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9e:	d009      	beq.n	8003ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fa46 	bl	8000f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af4:	d902      	bls.n	8003afc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e002      	b.n	8003b02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b0a:	d007      	beq.n	8003b1c <HAL_SPI_Init+0xa0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	f003 0204 	and.w	r2, r3, #4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b98:	ea42 0103 	orr.w	r1, r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e049      	b.n	8003c68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f841 	bl	8003c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 f9f7 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e04f      	b.n	8003d3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d018      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIM_Base_Start_IT+0x76>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d115      	bne.n	8003d26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b06      	cmp	r3, #6
 8003d0a:	d015      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0xb4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d011      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	e008      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e000      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40013400 	.word	0x40013400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	00010007 	.word	0x00010007

08003d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0202 	mvn.w	r2, #2
 8003d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f905 	bl	8003fb6 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8f7 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f908 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0204 	mvn.w	r2, #4
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8db 	bl	8003fb6 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8cd 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8de 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0208 	mvn.w	r2, #8
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8b1 	bl	8003fb6 <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8a3 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8b4 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0210 	mvn.w	r2, #16
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2208      	movs	r2, #8
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f887 	bl	8003fb6 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f879 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f88a 	bl	8003fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0201 	mvn.w	r2, #1
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc fef6 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f914 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f22:	d10e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f907 	bl	8004150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f838 	bl	8003fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0220 	mvn.w	r2, #32
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8c7 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a40      	ldr	r2, [pc, #256]	; (8004108 <TIM_Base_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d00f      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3d      	ldr	r2, [pc, #244]	; (800410c <TIM_Base_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <TIM_Base_SetConfig+0x120>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2f      	ldr	r2, [pc, #188]	; (8004108 <TIM_Base_SetConfig+0x114>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d01b      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	; (800410c <TIM_Base_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d017      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <TIM_Base_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <TIM_Base_SetConfig+0x120>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00f      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <TIM_Base_SetConfig+0x124>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <TIM_Base_SetConfig+0x128>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0x9a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <TIM_Base_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <TIM_Base_SetConfig+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a11      	ldr	r2, [pc, #68]	; (800411c <TIM_Base_SetConfig+0x128>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <TIM_Base_SetConfig+0x12c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <TIM_Base_SetConfig+0x130>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e040      	b.n	80041f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc ff2e 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f82c 	bl	8004200 <UART_SetConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fad8 	bl	8004770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fb5f 	bl	80048b4 <UART_CheckIdleState>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4313      	orrs	r3, r2
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4ba4      	ldr	r3, [pc, #656]	; (80044c0 <UART_SetConfig+0x2c0>)
 8004230:	4013      	ands	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004238:	430b      	orrs	r3, r1
 800423a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a99      	ldr	r2, [pc, #612]	; (80044c4 <UART_SetConfig+0x2c4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	4313      	orrs	r3, r2
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a90      	ldr	r2, [pc, #576]	; (80044c8 <UART_SetConfig+0x2c8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d126      	bne.n	80042d8 <UART_SetConfig+0xd8>
 800428a:	4b90      	ldr	r3, [pc, #576]	; (80044cc <UART_SetConfig+0x2cc>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d81b      	bhi.n	80042d0 <UART_SetConfig+0xd0>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0xa0>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e116      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e112      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e10e      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e10a      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e106      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7c      	ldr	r2, [pc, #496]	; (80044d0 <UART_SetConfig+0x2d0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d138      	bne.n	8004354 <UART_SetConfig+0x154>
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <UART_SetConfig+0x2cc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d82d      	bhi.n	800434c <UART_SetConfig+0x14c>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xf8>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004335 	.word	0x08004335
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800434d 	.word	0x0800434d
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004345 	.word	0x08004345
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e0d8      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e0d4      	b.n	80044e6 <UART_SetConfig+0x2e6>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e0d0      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e0cc      	b.n	80044e6 <UART_SetConfig+0x2e6>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e0c8      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <UART_SetConfig+0x2d4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d125      	bne.n	80043aa <UART_SetConfig+0x1aa>
 800435e:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <UART_SetConfig+0x2cc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d016      	beq.n	800439a <UART_SetConfig+0x19a>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d818      	bhi.n	80043a2 <UART_SetConfig+0x1a2>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d00a      	beq.n	800438a <UART_SetConfig+0x18a>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d814      	bhi.n	80043a2 <UART_SetConfig+0x1a2>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <UART_SetConfig+0x182>
 800437c:	2b10      	cmp	r3, #16
 800437e:	d008      	beq.n	8004392 <UART_SetConfig+0x192>
 8004380:	e00f      	b.n	80043a2 <UART_SetConfig+0x1a2>
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004388:	e0ad      	b.n	80044e6 <UART_SetConfig+0x2e6>
 800438a:	2302      	movs	r3, #2
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004390:	e0a9      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004392:	2304      	movs	r3, #4
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004398:	e0a5      	b.n	80044e6 <UART_SetConfig+0x2e6>
 800439a:	2308      	movs	r3, #8
 800439c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a0:	e0a1      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043a2:	2310      	movs	r3, #16
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a8:	e09d      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <UART_SetConfig+0x2d8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d125      	bne.n	8004400 <UART_SetConfig+0x200>
 80043b4:	4b45      	ldr	r3, [pc, #276]	; (80044cc <UART_SetConfig+0x2cc>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043be:	2bc0      	cmp	r3, #192	; 0xc0
 80043c0:	d016      	beq.n	80043f0 <UART_SetConfig+0x1f0>
 80043c2:	2bc0      	cmp	r3, #192	; 0xc0
 80043c4:	d818      	bhi.n	80043f8 <UART_SetConfig+0x1f8>
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d00a      	beq.n	80043e0 <UART_SetConfig+0x1e0>
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d814      	bhi.n	80043f8 <UART_SetConfig+0x1f8>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0x1d8>
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d008      	beq.n	80043e8 <UART_SetConfig+0x1e8>
 80043d6:	e00f      	b.n	80043f8 <UART_SetConfig+0x1f8>
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e082      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043e0:	2302      	movs	r3, #2
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e07e      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043e8:	2304      	movs	r3, #4
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e07a      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043f0:	2308      	movs	r3, #8
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e076      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80043f8:	2310      	movs	r3, #16
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e072      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a35      	ldr	r2, [pc, #212]	; (80044dc <UART_SetConfig+0x2dc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d12a      	bne.n	8004460 <UART_SetConfig+0x260>
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <UART_SetConfig+0x2cc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004418:	d01a      	beq.n	8004450 <UART_SetConfig+0x250>
 800441a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441e:	d81b      	bhi.n	8004458 <UART_SetConfig+0x258>
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d00c      	beq.n	8004440 <UART_SetConfig+0x240>
 8004426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442a:	d815      	bhi.n	8004458 <UART_SetConfig+0x258>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x238>
 8004430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004434:	d008      	beq.n	8004448 <UART_SetConfig+0x248>
 8004436:	e00f      	b.n	8004458 <UART_SetConfig+0x258>
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e052      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e04e      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e04a      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e046      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e042      	b.n	80044e6 <UART_SetConfig+0x2e6>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <UART_SetConfig+0x2c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d13a      	bne.n	80044e0 <UART_SetConfig+0x2e0>
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <UART_SetConfig+0x2cc>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004478:	d01a      	beq.n	80044b0 <UART_SetConfig+0x2b0>
 800447a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800447e:	d81b      	bhi.n	80044b8 <UART_SetConfig+0x2b8>
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d00c      	beq.n	80044a0 <UART_SetConfig+0x2a0>
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448a:	d815      	bhi.n	80044b8 <UART_SetConfig+0x2b8>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <UART_SetConfig+0x298>
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d008      	beq.n	80044a8 <UART_SetConfig+0x2a8>
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x2b8>
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e022      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e01e      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e01a      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e016      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e012      	b.n	80044e6 <UART_SetConfig+0x2e6>
 80044c0:	efff69f3 	.word	0xefff69f3
 80044c4:	40008000 	.word	0x40008000
 80044c8:	40013800 	.word	0x40013800
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	40005000 	.word	0x40005000
 80044e0:	2310      	movs	r3, #16
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a9f      	ldr	r2, [pc, #636]	; (8004768 <UART_SetConfig+0x568>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d17a      	bne.n	80045e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d824      	bhi.n	8004542 <UART_SetConfig+0x342>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x300>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004525 	.word	0x08004525
 8004504:	08004543 	.word	0x08004543
 8004508:	0800452d 	.word	0x0800452d
 800450c:	08004543 	.word	0x08004543
 8004510:	08004533 	.word	0x08004533
 8004514:	08004543 	.word	0x08004543
 8004518:	08004543 	.word	0x08004543
 800451c:	08004543 	.word	0x08004543
 8004520:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe fd20 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004528:	61f8      	str	r0, [r7, #28]
        break;
 800452a:	e010      	b.n	800454e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b8f      	ldr	r3, [pc, #572]	; (800476c <UART_SetConfig+0x56c>)
 800452e:	61fb      	str	r3, [r7, #28]
        break;
 8004530:	e00d      	b.n	800454e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fc81 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8004536:	61f8      	str	r0, [r7, #28]
        break;
 8004538:	e009      	b.n	800454e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	61fb      	str	r3, [r7, #28]
        break;
 8004540:	e005      	b.n	800454e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800454c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80fb 	beq.w	800474c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	429a      	cmp	r2, r3
 8004564:	d305      	bcc.n	8004572 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	429a      	cmp	r2, r3
 8004570:	d903      	bls.n	800457a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004578:	e0e8      	b.n	800474c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2200      	movs	r2, #0
 800457e:	461c      	mov	r4, r3
 8004580:	4615      	mov	r5, r2
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	022b      	lsls	r3, r5, #8
 800458c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004590:	0222      	lsls	r2, r4, #8
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	6849      	ldr	r1, [r1, #4]
 8004596:	0849      	lsrs	r1, r1, #1
 8004598:	2000      	movs	r0, #0
 800459a:	4688      	mov	r8, r1
 800459c:	4681      	mov	r9, r0
 800459e:	eb12 0a08 	adds.w	sl, r2, r8
 80045a2:	eb43 0b09 	adc.w	fp, r3, r9
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045b4:	4650      	mov	r0, sl
 80045b6:	4659      	mov	r1, fp
 80045b8:	f7fb fe0a 	bl	80001d0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d308      	bcc.n	80045de <UART_SetConfig+0x3de>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d2:	d204      	bcs.n	80045de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e0b6      	b.n	800474c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045e4:	e0b2      	b.n	800474c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ee:	d15e      	bne.n	80046ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d828      	bhi.n	800464a <UART_SetConfig+0x44a>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x400>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004635 	.word	0x08004635
 800460c:	0800464b 	.word	0x0800464b
 8004610:	0800463b 	.word	0x0800463b
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800464b 	.word	0x0800464b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fe fca0 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8004628:	61f8      	str	r0, [r7, #28]
        break;
 800462a:	e014      	b.n	8004656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fcb2 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e010      	b.n	8004656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <UART_SetConfig+0x56c>)
 8004636:	61fb      	str	r3, [r7, #28]
        break;
 8004638:	e00d      	b.n	8004656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe fbfd 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 800463e:	61f8      	str	r0, [r7, #28]
        break;
 8004640:	e009      	b.n	8004656 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e005      	b.n	8004656 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d077      	beq.n	800474c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005a      	lsls	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b0f      	cmp	r3, #15
 8004676:	d916      	bls.n	80046a6 <UART_SetConfig+0x4a6>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d212      	bcs.n	80046a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f023 030f 	bic.w	r3, r3, #15
 8004688:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	b29a      	uxth	r2, r3
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	4313      	orrs	r3, r2
 800469a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	8afa      	ldrh	r2, [r7, #22]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e052      	b.n	800474c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046ac:	e04e      	b.n	800474c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d827      	bhi.n	8004706 <UART_SetConfig+0x506>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0x4bc>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	08004707 	.word	0x08004707
 80046cc:	080046f7 	.word	0x080046f7
 80046d0:	08004707 	.word	0x08004707
 80046d4:	08004707 	.word	0x08004707
 80046d8:	08004707 	.word	0x08004707
 80046dc:	080046ff 	.word	0x080046ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e0:	f7fe fc42 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80046e4:	61f8      	str	r0, [r7, #28]
        break;
 80046e6:	e014      	b.n	8004712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fc54 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80046ec:	61f8      	str	r0, [r7, #28]
        break;
 80046ee:	e010      	b.n	8004712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <UART_SetConfig+0x56c>)
 80046f2:	61fb      	str	r3, [r7, #28]
        break;
 80046f4:	e00d      	b.n	8004712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f6:	f7fe fb9f 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 80046fa:	61f8      	str	r0, [r7, #28]
        break;
 80046fc:	e009      	b.n	8004712 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004702:	61fb      	str	r3, [r7, #28]
        break;
 8004704:	e005      	b.n	8004712 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004710:	bf00      	nop
    }

    if (pclk != 0U)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d019      	beq.n	800474c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	085a      	lsrs	r2, r3, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	441a      	add	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	d909      	bls.n	8004746 <UART_SetConfig+0x546>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d205      	bcs.n	8004746 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	e002      	b.n	800474c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004766:	bf00      	nop
 8004768:	40008000 	.word	0x40008000
 800476c:	00f42400 	.word	0x00f42400

08004770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01a      	beq.n	8004886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486e:	d10a      	bne.n	8004886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c4:	f7fc fe10 	bl	80014e8 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d10e      	bne.n	80048f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f82d 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e023      	b.n	800493e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d10e      	bne.n	8004922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f817 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e00d      	b.n	800493e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b09c      	sub	sp, #112	; 0x70
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	e0a5      	b.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495e:	f000 80a1 	beq.w	8004aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fc fdc1 	bl	80014e8 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <UART_WaitOnFlagUntilTimeout+0x32>
 8004972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004974:	2b00      	cmp	r3, #0
 8004976:	d13e      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800498c:	667b      	str	r3, [r7, #100]	; 0x64
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004998:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800499c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e6      	bne.n	8004978 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	663b      	str	r3, [r7, #96]	; 0x60
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e5      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e067      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d04f      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d147      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a70:	623a      	str	r2, [r7, #32]
 8004a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e5      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e010      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	f43f af4a 	beq.w	8004958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3770      	adds	r7, #112	; 0x70
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ace:	b084      	sub	sp, #16
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	f107 001c 	add.w	r0, r7, #28
 8004adc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa6f 	bl	8004fd0 <USB_CoreReset>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
 8004b08:	e005      	b.n	8004b16 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b22:	b004      	add	sp, #16
 8004b24:	4770      	bx	lr

08004b26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d115      	bne.n	8004b96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b76:	2001      	movs	r0, #1
 8004b78:	f7fc fcc2 	bl	8001500 <HAL_Delay>
      ms++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa16 	bl	8004fb4 <USB_GetMode>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d01e      	beq.n	8004bcc <USB_SetCurrentMode+0x84>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b31      	cmp	r3, #49	; 0x31
 8004b92:	d9f0      	bls.n	8004b76 <USB_SetCurrentMode+0x2e>
 8004b94:	e01a      	b.n	8004bcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d115      	bne.n	8004bc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f7fc fca9 	bl	8001500 <HAL_Delay>
      ms++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9fd 	bl	8004fb4 <USB_GetMode>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <USB_SetCurrentMode+0x84>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b31      	cmp	r3, #49	; 0x31
 8004bc4:	d9f0      	bls.n	8004ba8 <USB_SetCurrentMode+0x60>
 8004bc6:	e001      	b.n	8004bcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e005      	b.n	8004bd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b32      	cmp	r3, #50	; 0x32
 8004bd0:	d101      	bne.n	8004bd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be0:	b084      	sub	sp, #16
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e009      	b.n	8004c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3340      	adds	r3, #64	; 0x40
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b0e      	cmp	r3, #14
 8004c18:	d9f2      	bls.n	8004c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11c      	bne.n	8004c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e005      	b.n	8004c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	461a      	mov	r2, r3
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c86:	2103      	movs	r1, #3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f959 	bl	8004f40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c8e:	2110      	movs	r1, #16
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8f1 	bl	8004e78 <USB_FlushTxFifo>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f91d 	bl	8004ee0 <USB_FlushRxFifo>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	461a      	mov	r2, r3
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e043      	b.n	8004d62 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf0:	d118      	bne.n	8004d24 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	461a      	mov	r2, r3
 8004d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e013      	b.n	8004d36 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e008      	b.n	8004d36 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	461a      	mov	r2, r3
 8004d32:	2300      	movs	r3, #0
 8004d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d3b7      	bcc.n	8004cda <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e043      	b.n	8004df8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d86:	d118      	bne.n	8004dba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e013      	b.n	8004dcc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e008      	b.n	8004dcc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d3b7      	bcc.n	8004d70 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <USB_DevInit+0x294>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f043 0208 	orr.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d107      	bne.n	8004e62 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e6e:	b004      	add	sp, #16
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	803c3800 	.word	0x803c3800

08004e78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <USB_FlushTxFifo+0x64>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e01b      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	daf2      	bge.n	8004e86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <USB_FlushTxFifo+0x64>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e006      	b.n	8004ed0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d0f0      	beq.n	8004eb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	00030d40 	.word	0x00030d40

08004ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <USB_FlushRxFifo+0x5c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e018      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	daf2      	bge.n	8004eec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <USB_FlushRxFifo+0x5c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d0f0      	beq.n	8004f10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	00030d40 	.word	0x00030d40

08004f40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f8c:	f023 0303 	bic.w	r3, r3, #3
 8004f90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <USB_CoreReset+0x64>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e01b      	b.n	8005026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	daf2      	bge.n	8004fdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <USB_CoreReset+0x64>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e006      	b.n	8005026 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d0f0      	beq.n	8005006 <USB_CoreReset+0x36>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	00030d40 	.word	0x00030d40

08005038 <__NVIC_SetPriority>:
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	6039      	str	r1, [r7, #0]
 8005042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db0a      	blt.n	8005062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	490c      	ldr	r1, [pc, #48]	; (8005084 <__NVIC_SetPriority+0x4c>)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	440b      	add	r3, r1
 800505c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005060:	e00a      	b.n	8005078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4908      	ldr	r1, [pc, #32]	; (8005088 <__NVIC_SetPriority+0x50>)
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	3b04      	subs	r3, #4
 8005070:	0112      	lsls	r2, r2, #4
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	440b      	add	r3, r1
 8005076:	761a      	strb	r2, [r3, #24]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000e100 	.word	0xe000e100
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <SysTick_Handler+0x1c>)
 8005092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005094:	f001 fcfe 	bl	8006a94 <xTaskGetSchedulerState>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800509e:	f002 fae3 	bl	8007668 <xPortSysTickHandler>
  }
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	e000e010 	.word	0xe000e010

080050ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050b0:	2100      	movs	r1, #0
 80050b2:	f06f 0004 	mvn.w	r0, #4
 80050b6:	f7ff ffbf 	bl	8005038 <__NVIC_SetPriority>
#endif
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c6:	f3ef 8305 	mrs	r3, IPSR
 80050ca:	603b      	str	r3, [r7, #0]
  return(result);
 80050cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050d2:	f06f 0305 	mvn.w	r3, #5
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	e00c      	b.n	80050f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <osKernelInitialize+0x44>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <osKernelInitialize+0x44>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	e002      	b.n	80050f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050f4:	687b      	ldr	r3, [r7, #4]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	200007f0 	.word	0x200007f0

08005108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	603b      	str	r3, [r7, #0]
  return(result);
 8005114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800511a:	f06f 0305 	mvn.w	r3, #5
 800511e:	607b      	str	r3, [r7, #4]
 8005120:	e010      	b.n	8005144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <osKernelStart+0x48>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d109      	bne.n	800513e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800512a:	f7ff ffbf 	bl	80050ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <osKernelStart+0x48>)
 8005130:	2202      	movs	r2, #2
 8005132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005134:	f001 f866 	bl	8006204 <vTaskStartScheduler>
      stat = osOK;
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e002      	b.n	8005144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005144:	687b      	ldr	r3, [r7, #4]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200007f0 	.word	0x200007f0

08005154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af04      	add	r7, sp, #16
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005164:	f3ef 8305 	mrs	r3, IPSR
 8005168:	617b      	str	r3, [r7, #20]
  return(result);
 800516a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800516c:	2b00      	cmp	r3, #0
 800516e:	d17e      	bne.n	800526e <osThreadNew+0x11a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d07b      	beq.n	800526e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800517a:	2318      	movs	r3, #24
 800517c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d045      	beq.n	800521a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <osThreadNew+0x48>
        name = attr->name;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <osThreadNew+0x6e>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b38      	cmp	r3, #56	; 0x38
 80051b4:	d805      	bhi.n	80051c2 <osThreadNew+0x6e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <osThreadNew+0x72>
        return (NULL);
 80051c2:	2300      	movs	r3, #0
 80051c4:	e054      	b.n	8005270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <osThreadNew+0xa8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b5b      	cmp	r3, #91	; 0x5b
 80051e4:	d90a      	bls.n	80051fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <osThreadNew+0xa8>
        mem = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	e010      	b.n	800521e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10c      	bne.n	800521e <osThreadNew+0xca>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <osThreadNew+0xca>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <osThreadNew+0xca>
          mem = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e001      	b.n	800521e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d110      	bne.n	8005246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fe0c 	bl	8005e58 <xTaskCreateStatic>
 8005240:	4603      	mov	r3, r0
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	e013      	b.n	800526e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	b29a      	uxth	r2, r3
 8005250:	f107 0310 	add.w	r3, r7, #16
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fe57 	bl	8005f12 <xTaskCreate>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <osThreadNew+0x11a>
            hTask = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800526e:	693b      	ldr	r3, [r7, #16]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3728      	adds	r7, #40	; 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005280:	f3ef 8305 	mrs	r3, IPSR
 8005284:	60bb      	str	r3, [r7, #8]
  return(result);
 8005286:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <osDelay+0x1c>
    stat = osErrorISR;
 800528c:	f06f 0305 	mvn.w	r3, #5
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e007      	b.n	80052a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 ff7c 	bl	800619c <vTaskDelay>
    }
  }

  return (stat);
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a07      	ldr	r2, [pc, #28]	; (80052dc <vApplicationGetIdleTaskMemory+0x2c>)
 80052c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <vApplicationGetIdleTaskMemory+0x30>)
 80052c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	200007f4 	.word	0x200007f4
 80052e0:	20000850 	.word	0x20000850

080052e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a07      	ldr	r2, [pc, #28]	; (8005310 <vApplicationGetTimerTaskMemory+0x2c>)
 80052f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a06      	ldr	r2, [pc, #24]	; (8005314 <vApplicationGetTimerTaskMemory+0x30>)
 80052fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000a50 	.word	0x20000a50
 8005314:	20000aac 	.word	0x20000aac

08005318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f103 0208 	add.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f103 0208 	add.w	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0208 	add.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d0:	d103      	bne.n	80053da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e00c      	b.n	80053f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3308      	adds	r3, #8
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e002      	b.n	80053e8 <vListInsert+0x2e>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d2f6      	bcs.n	80053e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6852      	ldr	r2, [r2, #4]
 800544c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d103      	bne.n	8005460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054aa:	f002 f84b 	bl	8007544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	441a      	add	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	3b01      	subs	r3, #1
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	441a      	add	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	22ff      	movs	r2, #255	; 0xff
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d114      	bne.n	800552a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f001 f903 	bl	8006718 <xTaskRemoveFromEventList>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <xQueueGenericReset+0xcc>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	e009      	b.n	800553e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3310      	adds	r3, #16
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fef2 	bl	8005318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3324      	adds	r3, #36	; 0x24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff feed 	bl	8005318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800553e:	f002 f831 	bl	80075a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005542:	2301      	movs	r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08e      	sub	sp, #56	; 0x38
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <xQueueGenericCreateStatic+0x52>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <xQueueGenericCreateStatic+0x56>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xQueueGenericCreateStatic+0x58>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	623b      	str	r3, [r7, #32]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <xQueueGenericCreateStatic+0x7e>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <xQueueGenericCreateStatic+0x82>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <xQueueGenericCreateStatic+0x84>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61fb      	str	r3, [r7, #28]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055ee:	2350      	movs	r3, #80	; 0x50
 80055f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b50      	cmp	r3, #80	; 0x50
 80055f6:	d00a      	beq.n	800560e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61bb      	str	r3, [r7, #24]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800560e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005622:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f805 	bl	8005640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005638:	4618      	mov	r0, r3
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e002      	b.n	8005662 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800566e:	2101      	movs	r1, #1
 8005670:	69b8      	ldr	r0, [r7, #24]
 8005672:	f7ff ff05 	bl	8005480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08e      	sub	sp, #56	; 0x38
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005696:	2300      	movs	r3, #0
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xQueueGenericSend+0x32>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <xQueueGenericSend+0x40>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <xQueueGenericSend+0x44>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <xQueueGenericSend+0x46>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xQueueGenericSend+0x60>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d103      	bne.n	80056f6 <xQueueGenericSend+0x6e>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <xQueueGenericSend+0x72>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <xQueueGenericSend+0x74>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <xQueueGenericSend+0x8e>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	623b      	str	r3, [r7, #32]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005716:	f001 f9bd 	bl	8006a94 <xTaskGetSchedulerState>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <xQueueGenericSend+0x9e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xQueueGenericSend+0xa2>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xQueueGenericSend+0xa4>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xQueueGenericSend+0xbe>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	61fb      	str	r3, [r7, #28]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005746:	f001 fefd 	bl	8007544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <xQueueGenericSend+0xd4>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d129      	bne.n	80057b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005762:	f000 fa0b 	bl	8005b7c <prvCopyDataToQueue>
 8005766:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	4618      	mov	r0, r3
 8005776:	f000 ffcf 	bl	8006718 <xTaskRemoveFromEventList>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d013      	beq.n	80057a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005780:	4b3f      	ldr	r3, [pc, #252]	; (8005880 <xQueueGenericSend+0x1f8>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	e00a      	b.n	80057a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005798:	4b39      	ldr	r3, [pc, #228]	; (8005880 <xQueueGenericSend+0x1f8>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057a8:	f001 fefc 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e063      	b.n	8005878 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057b6:	f001 fef5 	bl	80075a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e05c      	b.n	8005878 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f809 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057d2:	f001 fee7 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057d6:	f000 fd7b 	bl	80062d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057da:	f001 feb3 	bl	8007544 <vPortEnterCritical>
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ea:	d103      	bne.n	80057f4 <xQueueGenericSend+0x16c>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005800:	d103      	bne.n	800580a <xQueueGenericSend+0x182>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800580a:	f001 fecb 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800580e:	1d3a      	adds	r2, r7, #4
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	4611      	mov	r1, r2
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fff8 	bl	800680c <xTaskCheckForTimeOut>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d124      	bne.n	800586c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005824:	f000 faa2 	bl	8005d6c <prvIsQueueFull>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	3310      	adds	r3, #16
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 ff1e 	bl	8006678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800583c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583e:	f000 fa2d 	bl	8005c9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005842:	f000 fd53 	bl	80062ec <xTaskResumeAll>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af7c 	bne.w	8005746 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800584e:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <xQueueGenericSend+0x1f8>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	e772      	b.n	8005746 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005862:	f000 fa1b 	bl	8005c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005866:	f000 fd41 	bl	80062ec <xTaskResumeAll>
 800586a:	e76c      	b.n	8005746 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586e:	f000 fa15 	bl	8005c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005872:	f000 fd3b 	bl	80062ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005876:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005878:	4618      	mov	r0, r3
 800587a:	3738      	adds	r7, #56	; 0x38
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b090      	sub	sp, #64	; 0x40
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <xQueueGenericSendFromISR+0x3c>
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <xQueueGenericSendFromISR+0x40>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <xQueueGenericSendFromISR+0x42>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSendFromISR+0x6a>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <xQueueGenericSendFromISR+0x6e>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <xQueueGenericSendFromISR+0x70>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	623b      	str	r3, [r7, #32]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800590e:	f001 fefb 	bl	8007708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005912:	f3ef 8211 	mrs	r2, BASEPRI
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61fa      	str	r2, [r7, #28]
 8005928:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800592a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <xQueueGenericSendFromISR+0xbc>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d12f      	bne.n	80059a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005956:	f000 f911 	bl	8005b7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800595a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d112      	bne.n	800598a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fed1 	bl	8006718 <xTaskRemoveFromEventList>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e007      	b.n	800599a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800598a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800598e:	3301      	adds	r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	b25a      	sxtb	r2, r3
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800599a:	2301      	movs	r3, #1
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800599e:	e001      	b.n	80059a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3740      	adds	r7, #64	; 0x40
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <xQueueReceive+0x30>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	623b      	str	r3, [r7, #32]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <xQueueReceive+0x3e>
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueReceive+0x42>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueReceive+0x44>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueReceive+0x5e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61fb      	str	r3, [r7, #28]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a1a:	f001 f83b 	bl	8006a94 <xTaskGetSchedulerState>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <xQueueReceive+0x6e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <xQueueReceive+0x72>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xQueueReceive+0x74>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueReceive+0x8e>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	61bb      	str	r3, [r7, #24]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a4a:	f001 fd7b 	bl	8007544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01f      	beq.n	8005a9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a5e:	f000 f8f7 	bl	8005c50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	1e5a      	subs	r2, r3, #1
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00f      	beq.n	8005a92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	3310      	adds	r3, #16
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fe4e 	bl	8006718 <xTaskRemoveFromEventList>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a82:	4b3d      	ldr	r3, [pc, #244]	; (8005b78 <xQueueReceive+0x1bc>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a92:	f001 fd87 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e069      	b.n	8005b6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aa0:	f001 fd80 	bl	80075a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e062      	b.n	8005b6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fe94 	bl	80067e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005abc:	f001 fd72 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ac0:	f000 fc06 	bl	80062d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac4:	f001 fd3e 	bl	8007544 <vPortEnterCritical>
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad4:	d103      	bne.n	8005ade <xQueueReceive+0x122>
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae4:	b25b      	sxtb	r3, r3
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aea:	d103      	bne.n	8005af4 <xQueueReceive+0x138>
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af4:	f001 fd56 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af8:	1d3a      	adds	r2, r7, #4
 8005afa:	f107 0310 	add.w	r3, r7, #16
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fe83 	bl	800680c <xTaskCheckForTimeOut>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d123      	bne.n	8005b54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0e:	f000 f917 	bl	8005d40 <prvIsQueueEmpty>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d017      	beq.n	8005b48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fda9 	bl	8006678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b28:	f000 f8b8 	bl	8005c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b2c:	f000 fbde 	bl	80062ec <xTaskResumeAll>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d189      	bne.n	8005a4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <xQueueReceive+0x1bc>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	e780      	b.n	8005a4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4a:	f000 f8a7 	bl	8005c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4e:	f000 fbcd 	bl	80062ec <xTaskResumeAll>
 8005b52:	e77a      	b.n	8005a4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b56:	f000 f8a1 	bl	8005c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5a:	f000 fbc7 	bl	80062ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b60:	f000 f8ee 	bl	8005d40 <prvIsQueueEmpty>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f43f af6f 	beq.w	8005a4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3730      	adds	r7, #48	; 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d14d      	bne.n	8005c3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 ff92 	bl	8006ad0 <xTaskPriorityDisinherit>
 8005bac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	e043      	b.n	8005c3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d119      	bne.n	8005bf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6858      	ldr	r0, [r3, #4]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	f001 ffec 	bl	8007ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	441a      	add	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d32b      	bcc.n	8005c3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e026      	b.n	8005c3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68d8      	ldr	r0, [r3, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	f001 ffd2 	bl	8007ba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	425b      	negs	r3, r3
 8005c0a:	441a      	add	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d207      	bcs.n	8005c2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	425b      	negs	r3, r3
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d105      	bne.n	8005c3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c46:	697b      	ldr	r3, [r7, #20]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	441a      	add	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d303      	bcc.n	8005c84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68d9      	ldr	r1, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6838      	ldr	r0, [r7, #0]
 8005c90:	f001 ff88 	bl	8007ba4 <memcpy>
	}
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ca4:	f001 fc4e 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cb0:	e011      	b.n	8005cd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3324      	adds	r3, #36	; 0x24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fd2a 	bl	8006718 <xTaskRemoveFromEventList>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cca:	f000 fe01 	bl	80068d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dce9      	bgt.n	8005cb2 <prvUnlockQueue+0x16>
 8005cde:	e000      	b.n	8005ce2 <prvUnlockQueue+0x46>
					break;
 8005ce0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	22ff      	movs	r2, #255	; 0xff
 8005ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cea:	f001 fc5b 	bl	80075a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cee:	f001 fc29 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	e011      	b.n	8005d20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d012      	beq.n	8005d2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3310      	adds	r3, #16
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fd05 	bl	8006718 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d14:	f000 fddc 	bl	80068d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dce9      	bgt.n	8005cfc <prvUnlockQueue+0x60>
 8005d28:	e000      	b.n	8005d2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	22ff      	movs	r2, #255	; 0xff
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d34:	f001 fc36 	bl	80075a4 <vPortExitCritical>
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d48:	f001 fbfc 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e001      	b.n	8005d5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d5e:	f001 fc21 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d62:	68fb      	ldr	r3, [r7, #12]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d74:	f001 fbe6 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d102      	bne.n	8005d8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e001      	b.n	8005d8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 fc09 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d92:	68fb      	ldr	r3, [r7, #12]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e014      	b.n	8005dd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dac:	4a0f      	ldr	r2, [pc, #60]	; (8005dec <vQueueAddToRegistry+0x50>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005db8:	490c      	ldr	r1, [pc, #48]	; (8005dec <vQueueAddToRegistry+0x50>)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <vQueueAddToRegistry+0x50>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4413      	add	r3, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dce:	e006      	b.n	8005dde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d9e7      	bls.n	8005dac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000eac 	.word	0x20000eac

08005df0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e00:	f001 fba0 	bl	8007544 <vPortEnterCritical>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e10:	d103      	bne.n	8005e1a <vQueueWaitForMessageRestricted+0x2a>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e26:	d103      	bne.n	8005e30 <vQueueWaitForMessageRestricted+0x40>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e30:	f001 fbb8 	bl	80075a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3324      	adds	r3, #36	; 0x24
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fc3b 	bl	80066c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f7ff ff26 	bl	8005c9c <prvUnlockQueue>
	}
 8005e50:	bf00      	nop
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCreateStatic+0x46>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61fb      	str	r3, [r7, #28]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e9e:	235c      	movs	r3, #92	; 0x5c
 8005ea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ea6:	d00a      	beq.n	8005ebe <xTaskCreateStatic+0x66>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	61bb      	str	r3, [r7, #24]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ebe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01e      	beq.n	8005f04 <xTaskCreateStatic+0xac>
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	f107 0314 	add.w	r3, r7, #20
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f850 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005efe:	f000 f8dd 	bl	80060bc <prvAddNewTaskToReadyList>
 8005f02:	e001      	b.n	8005f08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f08:	697b      	ldr	r3, [r7, #20]
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b08c      	sub	sp, #48	; 0x30
 8005f16:	af04      	add	r7, sp, #16
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fc2e 	bl	8007788 <pvPortMalloc>
 8005f2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f34:	205c      	movs	r0, #92	; 0x5c
 8005f36:	f001 fc27 	bl	8007788 <pvPortMalloc>
 8005f3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
 8005f48:	e005      	b.n	8005f56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f001 fce8 	bl	8007920 <vPortFree>
 8005f50:	e001      	b.n	8005f56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f80e 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f80:	69f8      	ldr	r0, [r7, #28]
 8005f82:	f000 f89b 	bl	80060bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f86:	2301      	movs	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e002      	b.n	8005f92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f92:	69bb      	ldr	r3, [r7, #24]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	21a5      	movs	r1, #165	; 0xa5
 8005fb6:	f001 fe03 	bl	8007bc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f023 0307 	bic.w	r3, r3, #7
 8005fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01f      	beq.n	800603a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	e012      	b.n	8006026 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	3334      	adds	r3, #52	; 0x34
 8006010:	460a      	mov	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d9e9      	bls.n	8006000 <prvInitialiseNewTask+0x64>
 800602c:	e000      	b.n	8006030 <prvInitialiseNewTask+0x94>
			{
				break;
 800602e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	e003      	b.n	8006042 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	2b37      	cmp	r3, #55	; 0x37
 8006046:	d901      	bls.n	800604c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006048:	2337      	movs	r3, #55	; 0x37
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	2200      	movs	r2, #0
 800605c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f978 	bl	8005358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	3318      	adds	r3, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f973 	bl	8005358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2200      	movs	r2, #0
 800608c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f001 f928 	bl	80072f0 <pxPortInitialiseStack>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c4:	f001 fa3e 	bl	8007544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c8:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 80060d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060d2:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e0:	4b27      	ldr	r3, [pc, #156]	; (8006180 <prvAddNewTaskToReadyList+0xc4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d110      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e8:	f000 fc16 	bl	8006918 <prvInitialiseTaskLists>
 80060ec:	e00d      	b.n	800610a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ee:	4b26      	ldr	r3, [pc, #152]	; (8006188 <prvAddNewTaskToReadyList+0xcc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f6:	4b23      	ldr	r3, [pc, #140]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d802      	bhi.n	800610a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <prvAddNewTaskToReadyList+0xd0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	4a1e      	ldr	r2, [pc, #120]	; (800618c <prvAddNewTaskToReadyList+0xd0>)
 8006112:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006114:	4b1d      	ldr	r3, [pc, #116]	; (800618c <prvAddNewTaskToReadyList+0xd0>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <prvAddNewTaskToReadyList+0xd4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <prvAddNewTaskToReadyList+0x74>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4a18      	ldr	r2, [pc, #96]	; (8006190 <prvAddNewTaskToReadyList+0xd4>)
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <prvAddNewTaskToReadyList+0xd8>)
 800613e:	441a      	add	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7ff f913 	bl	8005372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800614c:	f001 fa2a 	bl	80075a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006150:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <prvAddNewTaskToReadyList+0xcc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <prvAddNewTaskToReadyList+0xc8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	429a      	cmp	r2, r3
 8006164:	d207      	bcs.n	8006176 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvAddNewTaskToReadyList+0xdc>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200013c0 	.word	0x200013c0
 8006184:	20000eec 	.word	0x20000eec
 8006188:	200013cc 	.word	0x200013cc
 800618c:	200013dc 	.word	0x200013dc
 8006190:	200013c8 	.word	0x200013c8
 8006194:	20000ef0 	.word	0x20000ef0
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <vTaskDelay+0x60>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <vTaskDelay+0x30>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60bb      	str	r3, [r7, #8]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061cc:	f000 f880 	bl	80062d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fcea 	bl	8006bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d8:	f000 f888 	bl	80062ec <xTaskResumeAll>
 80061dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <vTaskDelay+0x64>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	200013e8 	.word	0x200013e8
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006212:	463a      	mov	r2, r7
 8006214:	1d39      	adds	r1, r7, #4
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff f848 	bl	80052b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	9202      	str	r2, [sp, #8]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	2300      	movs	r3, #0
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	2300      	movs	r3, #0
 8006230:	460a      	mov	r2, r1
 8006232:	4921      	ldr	r1, [pc, #132]	; (80062b8 <vTaskStartScheduler+0xb4>)
 8006234:	4821      	ldr	r0, [pc, #132]	; (80062bc <vTaskStartScheduler+0xb8>)
 8006236:	f7ff fe0f 	bl	8005e58 <xTaskCreateStatic>
 800623a:	4603      	mov	r3, r0
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <vTaskStartScheduler+0xbc>)
 800623e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006240:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <vTaskStartScheduler+0xbc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006248:	2301      	movs	r3, #1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e001      	b.n	8006252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006258:	f000 fcfc 	bl	8006c54 <xTimerCreateTimerTask>
 800625c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d116      	bne.n	8006292 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	613b      	str	r3, [r7, #16]
}
 8006276:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <vTaskStartScheduler+0xc0>)
 800627a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <vTaskStartScheduler+0xc4>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <vTaskStartScheduler+0xc8>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800628c:	f001 f8b8 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006290:	e00e      	b.n	80062b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006298:	d10a      	bne.n	80062b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	60fb      	str	r3, [r7, #12]
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <vTaskStartScheduler+0xaa>
}
 80062b0:	bf00      	nop
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	08007c04 	.word	0x08007c04
 80062bc:	080068e9 	.word	0x080068e9
 80062c0:	200013e4 	.word	0x200013e4
 80062c4:	200013e0 	.word	0x200013e0
 80062c8:	200013cc 	.word	0x200013cc
 80062cc:	200013c4 	.word	0x200013c4

080062d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <vTaskSuspendAll+0x18>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3301      	adds	r3, #1
 80062da:	4a03      	ldr	r2, [pc, #12]	; (80062e8 <vTaskSuspendAll+0x18>)
 80062dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062de:	bf00      	nop
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	200013e8 	.word	0x200013e8

080062ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062fa:	4b42      	ldr	r3, [pc, #264]	; (8006404 <xTaskResumeAll+0x118>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <xTaskResumeAll+0x2c>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006318:	f001 f914 	bl	8007544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800631c:	4b39      	ldr	r3, [pc, #228]	; (8006404 <xTaskResumeAll+0x118>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	4a38      	ldr	r2, [pc, #224]	; (8006404 <xTaskResumeAll+0x118>)
 8006324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006326:	4b37      	ldr	r3, [pc, #220]	; (8006404 <xTaskResumeAll+0x118>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d162      	bne.n	80063f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800632e:	4b36      	ldr	r3, [pc, #216]	; (8006408 <xTaskResumeAll+0x11c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d05e      	beq.n	80063f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006336:	e02f      	b.n	8006398 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006338:	4b34      	ldr	r3, [pc, #208]	; (800640c <xTaskResumeAll+0x120>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3318      	adds	r3, #24
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff f871 	bl	800542c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff f86c 	bl	800542c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <xTaskResumeAll+0x124>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d903      	bls.n	8006368 <xTaskResumeAll+0x7c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <xTaskResumeAll+0x124>)
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <xTaskResumeAll+0x128>)
 8006376:	441a      	add	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f7fe fff7 	bl	8005372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4b23      	ldr	r3, [pc, #140]	; (8006418 <xTaskResumeAll+0x12c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <xTaskResumeAll+0x130>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006398:	4b1c      	ldr	r3, [pc, #112]	; (800640c <xTaskResumeAll+0x120>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1cb      	bne.n	8006338 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063a6:	f000 fb55 	bl	8006a54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <xTaskResumeAll+0x134>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d010      	beq.n	80063d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063b6:	f000 f847 	bl	8006448 <xTaskIncrementTick>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063c0:	4b16      	ldr	r3, [pc, #88]	; (800641c <xTaskResumeAll+0x130>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f1      	bne.n	80063b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <xTaskResumeAll+0x134>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <xTaskResumeAll+0x130>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <xTaskResumeAll+0x138>)
 80063e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063f4:	f001 f8d6 	bl	80075a4 <vPortExitCritical>

	return xAlreadyYielded;
 80063f8:	68bb      	ldr	r3, [r7, #8]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200013e8 	.word	0x200013e8
 8006408:	200013c0 	.word	0x200013c0
 800640c:	20001380 	.word	0x20001380
 8006410:	200013c8 	.word	0x200013c8
 8006414:	20000ef0 	.word	0x20000ef0
 8006418:	20000eec 	.word	0x20000eec
 800641c:	200013d4 	.word	0x200013d4
 8006420:	200013d0 	.word	0x200013d0
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <xTaskGetTickCount+0x1c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006434:	687b      	ldr	r3, [r7, #4]
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200013c4 	.word	0x200013c4

08006448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006452:	4b4f      	ldr	r3, [pc, #316]	; (8006590 <xTaskIncrementTick+0x148>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 808f 	bne.w	800657a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800645c:	4b4d      	ldr	r3, [pc, #308]	; (8006594 <xTaskIncrementTick+0x14c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006464:	4a4b      	ldr	r2, [pc, #300]	; (8006594 <xTaskIncrementTick+0x14c>)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d120      	bne.n	80064b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006470:	4b49      	ldr	r3, [pc, #292]	; (8006598 <xTaskIncrementTick+0x150>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <xTaskIncrementTick+0x48>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xTaskIncrementTick+0x46>
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <xTaskIncrementTick+0x150>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	4b41      	ldr	r3, [pc, #260]	; (800659c <xTaskIncrementTick+0x154>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xTaskIncrementTick+0x150>)
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4a3f      	ldr	r2, [pc, #252]	; (800659c <xTaskIncrementTick+0x154>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <xTaskIncrementTick+0x158>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	4a3d      	ldr	r2, [pc, #244]	; (80065a0 <xTaskIncrementTick+0x158>)
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	f000 fad1 	bl	8006a54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064b2:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <xTaskIncrementTick+0x15c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d349      	bcc.n	8006550 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064bc:	4b36      	ldr	r3, [pc, #216]	; (8006598 <xTaskIncrementTick+0x150>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c6:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <xTaskIncrementTick+0x15c>)
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064cc:	601a      	str	r2, [r3, #0]
					break;
 80064ce:	e03f      	b.n	8006550 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d0:	4b31      	ldr	r3, [pc, #196]	; (8006598 <xTaskIncrementTick+0x150>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d203      	bcs.n	80064f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064e8:	4a2e      	ldr	r2, [pc, #184]	; (80065a4 <xTaskIncrementTick+0x15c>)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064ee:	e02f      	b.n	8006550 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe ff99 	bl	800542c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	3318      	adds	r3, #24
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe ff90 	bl	800542c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <xTaskIncrementTick+0x160>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d903      	bls.n	8006520 <xTaskIncrementTick+0xd8>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <xTaskIncrementTick+0x160>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4a1f      	ldr	r2, [pc, #124]	; (80065ac <xTaskIncrementTick+0x164>)
 800652e:	441a      	add	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fe ff1b 	bl	8005372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <xTaskIncrementTick+0x168>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	429a      	cmp	r2, r3
 8006548:	d3b8      	bcc.n	80064bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800654e:	e7b5      	b.n	80064bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <xTaskIncrementTick+0x168>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4915      	ldr	r1, [pc, #84]	; (80065ac <xTaskIncrementTick+0x164>)
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d901      	bls.n	800656c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <xTaskIncrementTick+0x16c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e004      	b.n	8006584 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <xTaskIncrementTick+0x170>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3301      	adds	r3, #1
 8006580:	4a0d      	ldr	r2, [pc, #52]	; (80065b8 <xTaskIncrementTick+0x170>)
 8006582:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006584:	697b      	ldr	r3, [r7, #20]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200013e8 	.word	0x200013e8
 8006594:	200013c4 	.word	0x200013c4
 8006598:	20001378 	.word	0x20001378
 800659c:	2000137c 	.word	0x2000137c
 80065a0:	200013d8 	.word	0x200013d8
 80065a4:	200013e0 	.word	0x200013e0
 80065a8:	200013c8 	.word	0x200013c8
 80065ac:	20000ef0 	.word	0x20000ef0
 80065b0:	20000eec 	.word	0x20000eec
 80065b4:	200013d4 	.word	0x200013d4
 80065b8:	200013d0 	.word	0x200013d0

080065bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065c2:	4b28      	ldr	r3, [pc, #160]	; (8006664 <vTaskSwitchContext+0xa8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <vTaskSwitchContext+0xac>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065d0:	e041      	b.n	8006656 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065d2:	4b25      	ldr	r3, [pc, #148]	; (8006668 <vTaskSwitchContext+0xac>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <vTaskSwitchContext+0xb0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	e010      	b.n	8006602 <vTaskSwitchContext+0x46>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <vTaskSwitchContext+0x40>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	607b      	str	r3, [r7, #4]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <vTaskSwitchContext+0x3e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	491b      	ldr	r1, [pc, #108]	; (8006670 <vTaskSwitchContext+0xb4>)
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0e4      	beq.n	80065e0 <vTaskSwitchContext+0x24>
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <vTaskSwitchContext+0xb4>)
 8006622:	4413      	add	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3308      	adds	r3, #8
 8006638:	429a      	cmp	r2, r3
 800663a:	d104      	bne.n	8006646 <vTaskSwitchContext+0x8a>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a09      	ldr	r2, [pc, #36]	; (8006674 <vTaskSwitchContext+0xb8>)
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4a06      	ldr	r2, [pc, #24]	; (800666c <vTaskSwitchContext+0xb0>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6013      	str	r3, [r2, #0]
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	200013e8 	.word	0x200013e8
 8006668:	200013d4 	.word	0x200013d4
 800666c:	200013c8 	.word	0x200013c8
 8006670:	20000ef0 	.word	0x20000ef0
 8006674:	20000eec 	.word	0x20000eec

08006678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <vTaskPlaceOnEventList+0x44>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3318      	adds	r3, #24
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fe fe87 	bl	80053ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066ac:	2101      	movs	r1, #1
 80066ae:	6838      	ldr	r0, [r7, #0]
 80066b0:	f000 fa7c 	bl	8006bac <prvAddCurrentTaskToDelayedList>
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000eec 	.word	0x20000eec

080066c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <vTaskPlaceOnEventListRestricted+0x54>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3318      	adds	r3, #24
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7fe fe3e 	bl	8005372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006700:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68b8      	ldr	r0, [r7, #8]
 8006706:	f000 fa51 	bl	8006bac <prvAddCurrentTaskToDelayedList>
	}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000eec 	.word	0x20000eec

08006718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3318      	adds	r3, #24
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fe6f 	bl	800542c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674e:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <xTaskRemoveFromEventList+0xb0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d11d      	bne.n	8006792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fe66 	bl	800542c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <xTaskRemoveFromEventList+0xb4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d903      	bls.n	8006774 <xTaskRemoveFromEventList+0x5c>
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a16      	ldr	r2, [pc, #88]	; (80067cc <xTaskRemoveFromEventList+0xb4>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a13      	ldr	r2, [pc, #76]	; (80067d0 <xTaskRemoveFromEventList+0xb8>)
 8006782:	441a      	add	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fe fdf1 	bl	8005372 <vListInsertEnd>
 8006790:	e005      	b.n	800679e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3318      	adds	r3, #24
 8006796:	4619      	mov	r1, r3
 8006798:	480e      	ldr	r0, [pc, #56]	; (80067d4 <xTaskRemoveFromEventList+0xbc>)
 800679a:	f7fe fdea 	bl	8005372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <xTaskRemoveFromEventList+0xc0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d905      	bls.n	80067b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067ac:	2301      	movs	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <xTaskRemoveFromEventList+0xc4>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e001      	b.n	80067bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067bc:	697b      	ldr	r3, [r7, #20]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200013e8 	.word	0x200013e8
 80067cc:	200013c8 	.word	0x200013c8
 80067d0:	20000ef0 	.word	0x20000ef0
 80067d4:	20001380 	.word	0x20001380
 80067d8:	20000eec 	.word	0x20000eec
 80067dc:	200013d4 	.word	0x200013d4

080067e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <vTaskInternalSetTimeOutState+0x24>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <vTaskInternalSetTimeOutState+0x28>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	200013d8 	.word	0x200013d8
 8006808:	200013c4 	.word	0x200013c4

0800680c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800684e:	f000 fe79 	bl	8007544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <xTaskCheckForTimeOut+0xbc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686a:	d102      	bne.n	8006872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e023      	b.n	80068ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <xTaskCheckForTimeOut+0xc0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d007      	beq.n	800688e <xTaskCheckForTimeOut+0x82>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	429a      	cmp	r2, r3
 8006886:	d302      	bcc.n	800688e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e015      	b.n	80068ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	429a      	cmp	r2, r3
 8006896:	d20b      	bcs.n	80068b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff9b 	bl	80067e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e004      	b.n	80068ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068ba:	f000 fe73 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 80068be:	69fb      	ldr	r3, [r7, #28]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200013c4 	.word	0x200013c4
 80068cc:	200013d8 	.word	0x200013d8

080068d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <vTaskMissedYield+0x14>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	200013d4 	.word	0x200013d4

080068e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068f0:	f000 f852 	bl	8006998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <prvIdleTask+0x28>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d9f9      	bls.n	80068f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <prvIdleTask+0x2c>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800690c:	e7f0      	b.n	80068f0 <prvIdleTask+0x8>
 800690e:	bf00      	nop
 8006910:	20000ef0 	.word	0x20000ef0
 8006914:	e000ed04 	.word	0xe000ed04

08006918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	e00c      	b.n	800693e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <prvInitialiseTaskLists+0x60>)
 8006930:	4413      	add	r3, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fcf0 	bl	8005318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3301      	adds	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b37      	cmp	r3, #55	; 0x37
 8006942:	d9ef      	bls.n	8006924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <prvInitialiseTaskLists+0x64>)
 8006946:	f7fe fce7 	bl	8005318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800694a:	480d      	ldr	r0, [pc, #52]	; (8006980 <prvInitialiseTaskLists+0x68>)
 800694c:	f7fe fce4 	bl	8005318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006950:	480c      	ldr	r0, [pc, #48]	; (8006984 <prvInitialiseTaskLists+0x6c>)
 8006952:	f7fe fce1 	bl	8005318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006956:	480c      	ldr	r0, [pc, #48]	; (8006988 <prvInitialiseTaskLists+0x70>)
 8006958:	f7fe fcde 	bl	8005318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800695c:	480b      	ldr	r0, [pc, #44]	; (800698c <prvInitialiseTaskLists+0x74>)
 800695e:	f7fe fcdb 	bl	8005318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <prvInitialiseTaskLists+0x78>)
 8006964:	4a05      	ldr	r2, [pc, #20]	; (800697c <prvInitialiseTaskLists+0x64>)
 8006966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvInitialiseTaskLists+0x7c>)
 800696a:	4a05      	ldr	r2, [pc, #20]	; (8006980 <prvInitialiseTaskLists+0x68>)
 800696c:	601a      	str	r2, [r3, #0]
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000ef0 	.word	0x20000ef0
 800697c:	20001350 	.word	0x20001350
 8006980:	20001364 	.word	0x20001364
 8006984:	20001380 	.word	0x20001380
 8006988:	20001394 	.word	0x20001394
 800698c:	200013ac 	.word	0x200013ac
 8006990:	20001378 	.word	0x20001378
 8006994:	2000137c 	.word	0x2000137c

08006998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800699e:	e019      	b.n	80069d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069a0:	f000 fdd0 	bl	8007544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <prvCheckTasksWaitingTermination+0x50>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fd3b 	bl	800542c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <prvCheckTasksWaitingTermination+0x54>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <prvCheckTasksWaitingTermination+0x54>)
 80069be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <prvCheckTasksWaitingTermination+0x58>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <prvCheckTasksWaitingTermination+0x58>)
 80069c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ca:	f000 fdeb 	bl	80075a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f810 	bl	80069f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <prvCheckTasksWaitingTermination+0x58>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e1      	bne.n	80069a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20001394 	.word	0x20001394
 80069ec:	200013c0 	.word	0x200013c0
 80069f0:	200013a8 	.word	0x200013a8

080069f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d108      	bne.n	8006a18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 ff88 	bl	8007920 <vPortFree>
				vPortFree( pxTCB );
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 ff85 	bl	8007920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a16:	e018      	b.n	8006a4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d103      	bne.n	8006a2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 ff7c 	bl	8007920 <vPortFree>
	}
 8006a28:	e00f      	b.n	8006a4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d00a      	beq.n	8006a4a <prvDeleteTCB+0x56>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <prvDeleteTCB+0x54>
	}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <prvResetNextTaskUnblockTime+0x38>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvResetNextTaskUnblockTime+0x3c>)
 8006a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a6c:	e008      	b.n	8006a80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <prvResetNextTaskUnblockTime+0x38>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4a04      	ldr	r2, [pc, #16]	; (8006a90 <prvResetNextTaskUnblockTime+0x3c>)
 8006a7e:	6013      	str	r3, [r2, #0]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20001378 	.word	0x20001378
 8006a90:	200013e0 	.word	0x200013e0

08006a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <xTaskGetSchedulerState+0x34>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	e008      	b.n	8006aba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa8:	4b08      	ldr	r3, [pc, #32]	; (8006acc <xTaskGetSchedulerState+0x38>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	e001      	b.n	8006aba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aba:	687b      	ldr	r3, [r7, #4]
	}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	200013cc 	.word	0x200013cc
 8006acc:	200013e8 	.word	0x200013e8

08006ad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d056      	beq.n	8006b94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <xTaskPriorityDisinherit+0xd0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d00a      	beq.n	8006b06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60bb      	str	r3, [r7, #8]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d02c      	beq.n	8006b94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d128      	bne.n	8006b94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fc70 	bl	800542c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <xTaskPriorityDisinherit+0xd4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d903      	bls.n	8006b74 <xTaskPriorityDisinherit+0xa4>
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a0c      	ldr	r2, [pc, #48]	; (8006ba4 <xTaskPriorityDisinherit+0xd4>)
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <xTaskPriorityDisinherit+0xd8>)
 8006b82:	441a      	add	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fe fbf1 	bl	8005372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b94:	697b      	ldr	r3, [r7, #20]
	}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000eec 	.word	0x20000eec
 8006ba4:	200013c8 	.word	0x200013c8
 8006ba8:	20000ef0 	.word	0x20000ef0

08006bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fc32 	bl	800542c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bce:	d10a      	bne.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006be0:	f7fe fbc7 	bl	8005372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006be4:	e026      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d209      	bcs.n	8006c12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe fbd5 	bl	80053ba <vListInsert>
}
 8006c10:	e010      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c12:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fe fbcb 	bl	80053ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d202      	bcs.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c2e:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200013c4 	.word	0x200013c4
 8006c40:	20000eec 	.word	0x20000eec
 8006c44:	200013ac 	.word	0x200013ac
 8006c48:	2000137c 	.word	0x2000137c
 8006c4c:	20001378 	.word	0x20001378
 8006c50:	200013e0 	.word	0x200013e0

08006c54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c5e:	f000 fb07 	bl	8007270 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <xTimerCreateTimerTask+0x80>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d021      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c72:	1d3a      	adds	r2, r7, #4
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fb31 	bl	80052e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	9202      	str	r2, [sp, #8]
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2300      	movs	r3, #0
 8006c92:	460a      	mov	r2, r1
 8006c94:	4910      	ldr	r1, [pc, #64]	; (8006cd8 <xTimerCreateTimerTask+0x84>)
 8006c96:	4811      	ldr	r0, [pc, #68]	; (8006cdc <xTimerCreateTimerTask+0x88>)
 8006c98:	f7ff f8de 	bl	8005e58 <xTaskCreateStatic>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <xTimerCreateTimerTask+0x8c>)
 8006ca0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <xTimerCreateTimerTask+0x8c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	613b      	str	r3, [r7, #16]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cca:	697b      	ldr	r3, [r7, #20]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	2000141c 	.word	0x2000141c
 8006cd8:	08007c0c 	.word	0x08007c0c
 8006cdc:	08006e19 	.word	0x08006e19
 8006ce0:	20001420 	.word	0x20001420

08006ce4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	623b      	str	r3, [r7, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <xTimerGenericCommand+0x98>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02a      	beq.n	8006d70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	dc18      	bgt.n	8006d5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d2c:	f7ff feb2 	bl	8006a94 <xTaskGetSchedulerState>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d109      	bne.n	8006d4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <xTimerGenericCommand+0x98>)
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f107 0110 	add.w	r1, r7, #16
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d42:	f7fe fca1 	bl	8005688 <xQueueGenericSend>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24
 8006d48:	e012      	b.n	8006d70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <xTimerGenericCommand+0x98>)
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	f107 0110 	add.w	r1, r7, #16
 8006d52:	2300      	movs	r3, #0
 8006d54:	2200      	movs	r2, #0
 8006d56:	f7fe fc97 	bl	8005688 <xQueueGenericSend>
 8006d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d5c:	e008      	b.n	8006d70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <xTimerGenericCommand+0x98>)
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f107 0110 	add.w	r1, r7, #16
 8006d66:	2300      	movs	r3, #0
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	f7fe fd8b 	bl	8005884 <xQueueGenericSendFromISR>
 8006d6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3728      	adds	r7, #40	; 0x28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	2000141c 	.word	0x2000141c

08006d80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <prvProcessExpiredTimer+0x94>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fb47 	bl	800542c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d022      	beq.n	8006df2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	699a      	ldr	r2, [r3, #24]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	18d1      	adds	r1, r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	6978      	ldr	r0, [r7, #20]
 8006dba:	f000 f8d1 	bl	8006f60 <prvInsertTimerInActiveList>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01f      	beq.n	8006e04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	6978      	ldr	r0, [r7, #20]
 8006dd0:	f7ff ff88 	bl	8006ce4 <xTimerGenericCommand>
 8006dd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d113      	bne.n	8006e04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	6978      	ldr	r0, [r7, #20]
 8006e0a:	4798      	blx	r3
}
 8006e0c:	bf00      	nop
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20001414 	.word	0x20001414

08006e18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e20:	f107 0308 	add.w	r3, r7, #8
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f857 	bl	8006ed8 <prvGetNextExpireTime>
 8006e2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 f803 	bl	8006e3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e36:	f000 f8d5 	bl	8006fe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e3a:	e7f1      	b.n	8006e20 <prvTimerTask+0x8>

08006e3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e46:	f7ff fa43 	bl	80062d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f866 	bl	8006f20 <prvSampleTimeNow>
 8006e54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d130      	bne.n	8006ebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d806      	bhi.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e6a:	f7ff fa3f 	bl	80062ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff85 	bl	8006d80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e76:	e024      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <prvProcessTimerOrBlockTask+0x90>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <prvProcessTimerOrBlockTask+0x50>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <prvProcessTimerOrBlockTask+0x52>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <prvProcessTimerOrBlockTask+0x94>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f7fe ffa7 	bl	8005df0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ea2:	f7ff fa23 	bl	80062ec <xTaskResumeAll>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvProcessTimerOrBlockTask+0x98>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
}
 8006ebc:	e001      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ebe:	f7ff fa15 	bl	80062ec <xTaskResumeAll>
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20001418 	.word	0x20001418
 8006ed0:	2000141c 	.word	0x2000141c
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <prvGetNextExpireTime+0x44>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <prvGetNextExpireTime+0x16>
 8006eea:	2201      	movs	r2, #1
 8006eec:	e000      	b.n	8006ef0 <prvGetNextExpireTime+0x18>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <prvGetNextExpireTime+0x44>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e001      	b.n	8006f0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20001414 	.word	0x20001414

08006f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f28:	f7ff fa7e 	bl	8006428 <xTaskGetTickCount>
 8006f2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <prvSampleTimeNow+0x3c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d205      	bcs.n	8006f44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f38:	f000 f936 	bl	80071a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f4a:	4a04      	ldr	r2, [pc, #16]	; (8006f5c <prvSampleTimeNow+0x3c>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20001424 	.word	0x20001424

08006f60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d812      	bhi.n	8006fac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e01b      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <prvInsertTimerInActiveList+0x7c>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fe fa08 	bl	80053ba <vListInsert>
 8006faa:	e012      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d206      	bcs.n	8006fc2 <prvInsertTimerInActiveList+0x62>
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e007      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <prvInsertTimerInActiveList+0x80>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe f9f4 	bl	80053ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20001418 	.word	0x20001418
 8006fe0:	20001414 	.word	0x20001414

08006fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	; 0x38
 8006fe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fea:	e0ca      	b.n	8007182 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da18      	bge.n	8007024 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61fb      	str	r3, [r7, #28]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701a:	6850      	ldr	r0, [r2, #4]
 800701c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701e:	6892      	ldr	r2, [r2, #8]
 8007020:	4611      	mov	r1, r2
 8007022:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f2c0 80aa 	blt.w	8007180 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	3304      	adds	r3, #4
 800703c:	4618      	mov	r0, r3
 800703e:	f7fe f9f5 	bl	800542c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007042:	463b      	mov	r3, r7
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff ff6b 	bl	8006f20 <prvSampleTimeNow>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b09      	cmp	r3, #9
 8007050:	f200 8097 	bhi.w	8007182 <prvProcessReceivedCommands+0x19e>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <prvProcessReceivedCommands+0x78>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007085 	.word	0x08007085
 8007060:	08007085 	.word	0x08007085
 8007064:	08007085 	.word	0x08007085
 8007068:	080070f9 	.word	0x080070f9
 800706c:	0800710d 	.word	0x0800710d
 8007070:	08007157 	.word	0x08007157
 8007074:	08007085 	.word	0x08007085
 8007078:	08007085 	.word	0x08007085
 800707c:	080070f9 	.word	0x080070f9
 8007080:	0800710d 	.word	0x0800710d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	18d1      	adds	r1, r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a4:	f7ff ff5c 	bl	8006f60 <prvInsertTimerInActiveList>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d069      	beq.n	8007182 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d05e      	beq.n	8007182 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	441a      	add	r2, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d6:	f7ff fe05 	bl	8006ce4 <xTimerGenericCommand>
 80070da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d14f      	bne.n	8007182 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61bb      	str	r3, [r7, #24]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	b2da      	uxtb	r2, r3
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800710a:	e03a      	b.n	8007182 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	b2da      	uxtb	r2, r3
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	617b      	str	r3, [r7, #20]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	18d1      	adds	r1, r2, r3
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007150:	f7ff ff06 	bl	8006f60 <prvInsertTimerInActiveList>
					break;
 8007154:	e015      	b.n	8007182 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d103      	bne.n	800716c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007166:	f000 fbdb 	bl	8007920 <vPortFree>
 800716a:	e00a      	b.n	8007182 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800717e:	e000      	b.n	8007182 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007180:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <prvProcessReceivedCommands+0x1c0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	1d39      	adds	r1, r7, #4
 8007188:	2200      	movs	r2, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fc16 	bl	80059bc <xQueueReceive>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f47f af2a 	bne.w	8006fec <prvProcessReceivedCommands+0x8>
	}
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	3730      	adds	r7, #48	; 0x30
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2000141c 	.word	0x2000141c

080071a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ae:	e048      	b.n	8007242 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <prvSwitchTimerLists+0xc0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ba:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <prvSwitchTimerLists+0xc0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe f92f 	bl	800542c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02e      	beq.n	8007242 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4413      	add	r3, r2
 80071ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d90e      	bls.n	8007214 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <prvSwitchTimerLists+0xc0>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7fe f8d4 	bl	80053ba <vListInsert>
 8007212:	e016      	b.n	8007242 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2300      	movs	r3, #0
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	2100      	movs	r1, #0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fd60 	bl	8006ce4 <xTimerGenericCommand>
 8007224:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	603b      	str	r3, [r7, #0]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <prvSwitchTimerLists+0xc0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1b1      	bne.n	80071b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <prvSwitchTimerLists+0xc0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <prvSwitchTimerLists+0xc4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a04      	ldr	r2, [pc, #16]	; (8007268 <prvSwitchTimerLists+0xc0>)
 8007258:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800725a:	4a04      	ldr	r2, [pc, #16]	; (800726c <prvSwitchTimerLists+0xc4>)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6013      	str	r3, [r2, #0]
}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20001414 	.word	0x20001414
 800726c:	20001418 	.word	0x20001418

08007270 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007276:	f000 f965 	bl	8007544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <prvCheckForValidListAndQueue+0x60>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d120      	bne.n	80072c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007282:	4814      	ldr	r0, [pc, #80]	; (80072d4 <prvCheckForValidListAndQueue+0x64>)
 8007284:	f7fe f848 	bl	8005318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007288:	4813      	ldr	r0, [pc, #76]	; (80072d8 <prvCheckForValidListAndQueue+0x68>)
 800728a:	f7fe f845 	bl	8005318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <prvCheckForValidListAndQueue+0x6c>)
 8007290:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <prvCheckForValidListAndQueue+0x64>)
 8007292:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007294:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <prvCheckForValidListAndQueue+0x70>)
 8007296:	4a10      	ldr	r2, [pc, #64]	; (80072d8 <prvCheckForValidListAndQueue+0x68>)
 8007298:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800729a:	2300      	movs	r3, #0
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <prvCheckForValidListAndQueue+0x74>)
 80072a0:	4a11      	ldr	r2, [pc, #68]	; (80072e8 <prvCheckForValidListAndQueue+0x78>)
 80072a2:	2110      	movs	r1, #16
 80072a4:	200a      	movs	r0, #10
 80072a6:	f7fe f953 	bl	8005550 <xQueueGenericCreateStatic>
 80072aa:	4603      	mov	r3, r0
 80072ac:	4a08      	ldr	r2, [pc, #32]	; (80072d0 <prvCheckForValidListAndQueue+0x60>)
 80072ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <prvCheckForValidListAndQueue+0x60>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <prvCheckForValidListAndQueue+0x60>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	490b      	ldr	r1, [pc, #44]	; (80072ec <prvCheckForValidListAndQueue+0x7c>)
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fd6c 	bl	8005d9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f000 f96e 	bl	80075a4 <vPortExitCritical>
}
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	2000141c 	.word	0x2000141c
 80072d4:	200013ec 	.word	0x200013ec
 80072d8:	20001400 	.word	0x20001400
 80072dc:	20001414 	.word	0x20001414
 80072e0:	20001418 	.word	0x20001418
 80072e4:	200014c8 	.word	0x200014c8
 80072e8:	20001428 	.word	0x20001428
 80072ec:	08007c14 	.word	0x08007c14

080072f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b04      	subs	r3, #4
 8007300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b04      	subs	r3, #4
 800730e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 0201 	bic.w	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b04      	subs	r3, #4
 800731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007320:	4a0c      	ldr	r2, [pc, #48]	; (8007354 <pxPortInitialiseStack+0x64>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b14      	subs	r3, #20
 800732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b04      	subs	r3, #4
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f06f 0202 	mvn.w	r2, #2
 800733e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3b20      	subs	r3, #32
 8007344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007346:	68fb      	ldr	r3, [r7, #12]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	08007359 	.word	0x08007359

08007358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <prvTaskExitError+0x54>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800736a:	d00a      	beq.n	8007382 <prvTaskExitError+0x2a>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <prvTaskExitError+0x28>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60bb      	str	r3, [r7, #8]
}
 8007394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007396:	bf00      	nop
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0fc      	beq.n	8007398 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b46      	ldr	r3, [pc, #280]	; (8007520 <xPortStartScheduler+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a46      	ldr	r2, [pc, #280]	; (8007524 <xPortStartScheduler+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10a      	bne.n	8007426 <xPortStartScheduler+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <xPortStartScheduler+0x120>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3f      	ldr	r2, [pc, #252]	; (8007528 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10a      	bne.n	8007446 <xPortStartScheduler+0x46>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <xPortStartScheduler+0x12c>)
 8007448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007468:	b2da      	uxtb	r2, r3
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <xPortStartScheduler+0x130>)
 800746c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746e:	4b31      	ldr	r3, [pc, #196]	; (8007534 <xPortStartScheduler+0x134>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007474:	e009      	b.n	800748a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3b01      	subs	r3, #1
 800747c:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <xPortStartScheduler+0x134>)
 800747e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d0ef      	beq.n	8007476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <xPortStartScheduler+0x134>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d00a      	beq.n	80074b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <xPortStartScheduler+0x134>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <xPortStartScheduler+0x134>)
 80074c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xPortStartScheduler+0x134>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <xPortStartScheduler+0x134>)
 80074cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <xPortStartScheduler+0x138>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <xPortStartScheduler+0x138>)
 80074dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <xPortStartScheduler+0x138>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <xPortStartScheduler+0x138>)
 80074e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074ee:	f000 f8dd 	bl	80076ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <xPortStartScheduler+0x13c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f8:	f000 f8fc 	bl	80076f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xPortStartScheduler+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <xPortStartScheduler+0x140>)
 8007502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007508:	f7ff ff66 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800750c:	f7ff f856 	bl	80065bc <vTaskSwitchContext>
	prvTaskExitError();
 8007510:	f7ff ff22 	bl	8007358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	410fc271 	.word	0x410fc271
 8007528:	410fc270 	.word	0x410fc270
 800752c:	e000e400 	.word	0xe000e400
 8007530:	20001518 	.word	0x20001518
 8007534:	2000151c 	.word	0x2000151c
 8007538:	e000ed20 	.word	0xe000ed20
 800753c:	2000000c 	.word	0x2000000c
 8007540:	e000ef34 	.word	0xe000ef34

08007544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	607b      	str	r3, [r7, #4]
}
 800755c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <vPortEnterCritical+0x58>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a0d      	ldr	r2, [pc, #52]	; (800759c <vPortEnterCritical+0x58>)
 8007566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <vPortEnterCritical+0x58>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10f      	bne.n	8007590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortEnterCritical+0x5c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <vPortEnterCritical+0x4c>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vPortEnterCritical+0x4a>
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	2000000c 	.word	0x2000000c
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <vPortExitCritical+0x50>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vPortExitCritical+0x24>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vPortExitCritical+0x50>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <vPortExitCritical+0x50>)
 80075d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <vPortExitCritical+0x42>
 80075da:	2300      	movs	r3, #0
 80075dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f383 8811 	msr	BASEPRI, r3
}
 80075e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	2000000c 	.word	0x2000000c
	...

08007600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b15      	ldr	r3, [pc, #84]	; (8007660 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f01e 0f10 	tst.w	lr, #16
 8007610:	bf08      	it	eq
 8007612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007624:	f380 8811 	msr	BASEPRI, r0
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f7fe ffc4 	bl	80065bc <vTaskSwitchContext>
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	bc09      	pop	{r0, r3}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007646:	f01e 0f10 	tst.w	lr, #16
 800764a:	bf08      	it	eq
 800764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007650:	f380 8809 	msr	PSP, r0
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst>:
 8007660:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007682:	f7fe fee1 	bl	8006448 <xTaskIncrementTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <xPortSysTickHandler+0x40>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortSetupTimerInterrupt+0x38>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <vPortSetupTimerInterrupt+0x3c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <vPortSetupTimerInterrupt+0x40>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <vPortSetupTimerInterrupt+0x44>)
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000e010 	.word	0xe000e010
 80076e4:	e000e018 	.word	0xe000e018
 80076e8:	20000000 	.word	0x20000000
 80076ec:	10624dd3 	.word	0x10624dd3
 80076f0:	e000e014 	.word	0xe000e014

080076f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007704 <vPortEnableVFP+0x10>
 80076f8:	6801      	ldr	r1, [r0, #0]
 80076fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076fe:	6001      	str	r1, [r0, #0]
 8007700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007702:	bf00      	nop
 8007704:	e000ed88 	.word	0xe000ed88

08007708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800770e:	f3ef 8305 	mrs	r3, IPSR
 8007712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d914      	bls.n	8007744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <vPortValidateInterruptPriority+0x70>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <vPortValidateInterruptPriority+0x74>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	7afa      	ldrb	r2, [r7, #11]
 800772a:	429a      	cmp	r2, r3
 800772c:	d20a      	bcs.n	8007744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <vPortValidateInterruptPriority+0x78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <vPortValidateInterruptPriority+0x7c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90a      	bls.n	800776a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	603b      	str	r3, [r7, #0]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <vPortValidateInterruptPriority+0x60>
	}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000e3f0 	.word	0xe000e3f0
 800777c:	20001518 	.word	0x20001518
 8007780:	e000ed0c 	.word	0xe000ed0c
 8007784:	2000151c 	.word	0x2000151c

08007788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007794:	f7fe fd9c 	bl	80062d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007798:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <pvPortMalloc+0x180>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a0:	f000 f920 	bl	80079e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <pvPortMalloc+0x184>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8093 	bne.w	80078d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01d      	beq.n	80077f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <pvPortMalloc+0x6c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d06e      	beq.n	80078d8 <pvPortMalloc+0x150>
 80077fa:	4b45      	ldr	r3, [pc, #276]	; (8007910 <pvPortMalloc+0x188>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d869      	bhi.n	80078d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007804:	4b43      	ldr	r3, [pc, #268]	; (8007914 <pvPortMalloc+0x18c>)
 8007806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <pvPortMalloc+0x18c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780e:	e004      	b.n	800781a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <pvPortMalloc+0xa4>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f1      	bne.n	8007810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800782c:	4b36      	ldr	r3, [pc, #216]	; (8007908 <pvPortMalloc+0x180>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	429a      	cmp	r2, r3
 8007834:	d050      	beq.n	80078d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2208      	movs	r2, #8
 800783c:	4413      	add	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2308      	movs	r3, #8
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	429a      	cmp	r2, r3
 8007856:	d91f      	bls.n	8007898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <pvPortMalloc+0xf8>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	613b      	str	r3, [r7, #16]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f000 f908 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <pvPortMalloc+0x188>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <pvPortMalloc+0x188>)
 80078a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <pvPortMalloc+0x188>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <pvPortMalloc+0x190>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d203      	bcs.n	80078ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <pvPortMalloc+0x188>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <pvPortMalloc+0x190>)
 80078b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x184>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <pvPortMalloc+0x194>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <pvPortMalloc+0x194>)
 80078d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078d8:	f7fe fd08 	bl	80062ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <pvPortMalloc+0x174>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <pvPortMalloc+0x172>
	return pvReturn;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200020e0 	.word	0x200020e0
 800790c:	200020f4 	.word	0x200020f4
 8007910:	200020e4 	.word	0x200020e4
 8007914:	200020d8 	.word	0x200020d8
 8007918:	200020e8 	.word	0x200020e8
 800791c:	200020ec 	.word	0x200020ec

08007920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04d      	beq.n	80079ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007932:	2308      	movs	r3, #8
 8007934:	425b      	negs	r3, r3
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <vPortFree+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <vPortFree+0x44>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <vPortFree+0x62>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <vPortFree+0xb8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01e      	beq.n	80079ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <vPortFree+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079a8:	f7fe fc92 	bl	80062d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <vPortFree+0xbc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <vPortFree+0xbc>)
 80079b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f000 f874 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <vPortFree+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <vPortFree+0xc0>)
 80079c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ca:	f7fe fc8f 	bl	80062ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ce:	bf00      	nop
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	200020f4 	.word	0x200020f4
 80079dc:	200020e4 	.word	0x200020e4
 80079e0:	200020f0 	.word	0x200020f0

080079e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <prvHeapInit+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00c      	beq.n	8007a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <prvHeapInit+0xac>)
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <prvHeapInit+0xb0>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <prvHeapInit+0xb0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a30:	2208      	movs	r2, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <prvHeapInit+0xb4>)
 8007a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <prvHeapInit+0xb4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <prvHeapInit+0xb4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvHeapInit+0xb4>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <prvHeapInit+0xb8>)
 8007a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvHeapInit+0xbc>)
 8007a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <prvHeapInit+0xc0>)
 8007a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	20001520 	.word	0x20001520
 8007a94:	200020d8 	.word	0x200020d8
 8007a98:	200020e0 	.word	0x200020e0
 8007a9c:	200020e8 	.word	0x200020e8
 8007aa0:	200020e4 	.word	0x200020e4
 8007aa4:	200020f4 	.word	0x200020f4

08007aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <prvInsertBlockIntoFreeList+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <prvInsertBlockIntoFreeList+0x14>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d8f7      	bhi.n	8007ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d108      	bne.n	8007aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d118      	bne.n	8007b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d00d      	beq.n	8007b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e008      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e003      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d002      	beq.n	8007b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	200020d8 	.word	0x200020d8
 8007b58:	200020e0 	.word	0x200020e0

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f82e 	bl	8007bd0 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08007c90 	.word	0x08007c90
 8007b98:	08007c90 	.word	0x08007c90
 8007b9c:	08007c90 	.word	0x08007c90
 8007ba0:	08007c94 	.word	0x08007c94

08007ba4 <memcpy>:
 8007ba4:	440a      	add	r2, r1
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bac:	d100      	bne.n	8007bb0 <memcpy+0xc>
 8007bae:	4770      	bx	lr
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memcpy+0xe>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

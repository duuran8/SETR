
Practica2-SETR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ec  20000010  08007fd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020fc  08007fd8  000220fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002882b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bc2  00000000  00000000  0004886b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  0004d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  0004f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050b6  00000000  00000000  00051958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027fab  00000000  00000000  00056a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b56  00000000  00000000  0007e9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018650f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098f4  00000000  00000000  00186560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ec0 	.word	0x08007ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007ec0 	.word	0x08007ec0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <led_toggle>:
 *      Author: julianduran
 */
#include "led_toggle.h"


void led_toggle(uint8_t led) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	switch (led) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d850      	bhi.n	8000586 <led_toggle+0xb2>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <led_toggle+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051d 	.word	0x0800051d
 80004f4:	08000541 	.word	0x08000541
 80004f8:	08000565 	.word	0x08000565
		case 0:
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80004fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000500:	4823      	ldr	r0, [pc, #140]	; (8000590 <led_toggle+0xbc>)
 8000502:	f001 fc43 	bl	8001d8c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <led_toggle+0xc0>)
 800050c:	f001 fc3e 	bl	8001d8c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fc39 	bl	8001d8c <HAL_GPIO_TogglePin>
		}	break;
 800051a:	e035      	b.n	8000588 <led_toggle+0xb4>
		case 1:
			HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <led_toggle+0xc0>)
 8000524:	f001 fc1a 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_3_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 fc14 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <led_toggle+0xbc>)
 800053a:	f001 fc27 	bl	8001d8c <HAL_GPIO_TogglePin>
			break;
 800053e:	e023      	b.n	8000588 <led_toggle+0xb4>
		case 2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <led_toggle+0xbc>)
 8000548:	f001 fc08 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_3_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f001 fc02 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOC, LED3_WIFI__LED4_BLE_Pin);
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <led_toggle+0xc0>)
 800055e:	f001 fc15 	bl	8001d8c <HAL_GPIO_TogglePin>
			break;
 8000562:	e011      	b.n	8000588 <led_toggle+0xb4>
		case 3:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <led_toggle+0xbc>)
 800056c:	f001 fbf6 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <led_toggle+0xc0>)
 8000578:	f001 fbf0 	bl	8001d5c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f001 fc03 	bl	8001d8c <HAL_GPIO_TogglePin>
		default:
			break;
 8000586:	bf00      	nop
		}
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400
 8000594:	48000800 	.word	0x48000800

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 ffd1 	bl	8001542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f828 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f9f0 	bl	8000988 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005a8:	f000 f886 	bl	80006b8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005ac:	f000 f8bc 	bl	8000728 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005b0:	f000 f8f8 	bl	80007a4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005b4:	f000 f91c 	bl	80007f0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f958 	bl	800086c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 f986 	bl	80008cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f9b4 	bl	800092c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f004 fdee 	bl	80051a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <main+0x50>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x54>)
 80005ce:	f004 fe33 	bl	8005238 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <main+0x58>)
 80005d6:	6013      	str	r3, [r2, #0]
  //CreateLedTask();
  /*
  int param=0;
  CreateLedTaskChain(param);
  */
  CreateButtonTask();
 80005d8:	f000 ff24 	bl	8001424 <CreateButtonTask>
  CreateLedTaskNotify();
 80005dc:	f000 ff52 	bl	8001484 <CreateLedTaskNotify>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f004 fe04 	bl	80051ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x4c>
 80005e6:	bf00      	nop
 80005e8:	08007f4c 	.word	0x08007f4c
 80005ec:	08000ced 	.word	0x08000ced
 80005f0:	20000774 	.word	0x20000774

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	; 0x58
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 fc54 	bl	8007eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f001 fe81 	bl	8002320 <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000624:	f000 fb7c 	bl	8000d20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f001 fe5c 	bl	80022e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <SystemClock_Config+0xc0>)
 800062e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <SystemClock_Config+0xc0>)
 8000634:	f023 0318 	bic.w	r3, r3, #24
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800063c:	2314      	movs	r3, #20
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800065c:	2328      	movs	r3, #40	; 0x28
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f001 ff77 	bl	8002564 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800067c:	f000 fb50 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2104      	movs	r1, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fb3f 	bl	8002d1c <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a4:	f000 fb3c 	bl	8000d20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a8:	f003 f878 	bl	800379c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	; 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006be:	4a19      	ldr	r2, [pc, #100]	; (8000724 <MX_DFSDM1_Init+0x6c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006f0:	2204      	movs	r2, #4
 80006f2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_DFSDM1_Init+0x68>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_DFSDM1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_DFSDM1_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_DFSDM1_Init+0x68>)
 800070e:	f001 f857 	bl	80017c0 <HAL_DFSDM_ChannelInit>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000718:	f000 fb02 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40016020 	.word	0x40016020

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C2_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C2_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C2_Init+0x74>)
 8000734:	f640 6214 	movw	r2, #3604	; 0xe14
 8000738:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_I2C2_Init+0x74>)
 8000742:	2201      	movs	r2, #1
 8000744:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_I2C2_Init+0x74>)
 8000766:	f001 fb4e 	bl	8001e06 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fad6 	bl	8000d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C2_Init+0x74>)
 8000778:	f001 fbd4 	bl	8001f24 <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 facd 	bl	8000d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C2_Init+0x74>)
 800078a:	f001 fc16 	bl	8001fba <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 fac4 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000064 	.word	0x20000064
 80007a0:	40005800 	.word	0x40005800

080007a4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_QUADSPI_Init+0x48>)
 80007ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007bc:	2210      	movs	r2, #16
 80007be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007c2:	2217      	movs	r2, #23
 80007c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_QUADSPI_Init+0x44>)
 80007d4:	f001 fe0a 	bl	80023ec <HAL_QSPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007de:	f000 fa9f 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b8 	.word	0x200000b8
 80007ec:	a0001000 	.word	0xa0001000

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_SPI3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_SPI3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_SPI3_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI3_Init+0x74>)
 800080a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800080e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI3_Init+0x74>)
 800081e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI3_Init+0x74>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI3_Init+0x74>)
 800084a:	2208      	movs	r2, #8
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_SPI3_Init+0x74>)
 8000850:	f003 f986 	bl	8003b60 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fa61 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000fc 	.word	0x200000fc
 8000868:	40003c00 	.word	0x40003c00

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART1_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008b0:	f003 fcca 	bl	8004248 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 fa31 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000160 	.word	0x20000160
 80008c8:	40013800 	.word	0x40013800

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART3_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART3_UART_Init+0x58>)
 8000910:	f003 fc9a 	bl	8004248 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 fa01 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001e4 	.word	0x200001e4
 8000928:	40004800 	.word	0x40004800

0800092c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2206      	movs	r2, #6
 800093c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2202      	movs	r2, #2
 8000942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2202      	movs	r2, #2
 8000948:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	f001 fb6f 	bl	8002052 <HAL_PCD_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f9d1 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000268 	.word	0x20000268

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	4bbd      	ldr	r3, [pc, #756]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4abc      	ldr	r2, [pc, #752]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4bba      	ldr	r3, [pc, #744]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4bb7      	ldr	r3, [pc, #732]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4ab6      	ldr	r2, [pc, #728]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4bb4      	ldr	r3, [pc, #720]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4bb1      	ldr	r3, [pc, #708]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4ab0      	ldr	r2, [pc, #704]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4bae      	ldr	r3, [pc, #696]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4bab      	ldr	r3, [pc, #684]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4aaa      	ldr	r2, [pc, #680]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4ba8      	ldr	r3, [pc, #672]	; (8000c94 <MX_GPIO_Init+0x30c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4ba5      	ldr	r3, [pc, #660]	; (8000c94 <MX_GPIO_Init+0x30c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4aa4      	ldr	r2, [pc, #656]	; (8000c94 <MX_GPIO_Init+0x30c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4ba2      	ldr	r3, [pc, #648]	; (8000c94 <MX_GPIO_Init+0x30c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a1c:	489e      	ldr	r0, [pc, #632]	; (8000c98 <MX_GPIO_Init+0x310>)
 8000a1e:	f001 f99d 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f248 1124 	movw	r1, #33060	; 0x8124
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 f996 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a30:	2200      	movs	r2, #0
 8000a32:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a36:	4899      	ldr	r0, [pc, #612]	; (8000c9c <MX_GPIO_Init+0x314>)
 8000a38:	f001 f990 	bl	8001d5c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a42:	4897      	ldr	r0, [pc, #604]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000a44:	f001 f98a 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4e:	4894      	ldr	r0, [pc, #592]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000a50:	f001 f984 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a5a:	4892      	ldr	r0, [pc, #584]	; (8000ca4 <MX_GPIO_Init+0x31c>)
 8000a5c:	f001 f97e 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	488d      	ldr	r0, [pc, #564]	; (8000c9c <MX_GPIO_Init+0x314>)
 8000a66:	f001 f979 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	488a      	ldr	r0, [pc, #552]	; (8000c98 <MX_GPIO_Init+0x310>)
 8000a70:	f001 f974 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a74:	f240 1315 	movw	r3, #277	; 0x115
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4882      	ldr	r0, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x310>)
 8000a8e:	f000 ffa3 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a92:	236a      	movs	r3, #106	; 0x6a
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	487c      	ldr	r0, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x310>)
 8000aa8:	f000 ff96 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4878      	ldr	r0, [pc, #480]	; (8000ca4 <MX_GPIO_Init+0x31c>)
 8000ac4:	f000 ff88 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ac8:	233f      	movs	r3, #63	; 0x3f
 8000aca:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000acc:	230b      	movs	r3, #11
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4872      	ldr	r0, [pc, #456]	; (8000ca4 <MX_GPIO_Init+0x31c>)
 8000adc:	f000 ff7c 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000af0:	2308      	movs	r3, #8
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f000 ff6b 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_3_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_3_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b02:	f248 1324 	movw	r3, #33060	; 0x8124
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 ff5b 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b22:	2308      	movs	r3, #8
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b32:	2301      	movs	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 ff4a 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b44:	2310      	movs	r3, #16
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b48:	230b      	movs	r3, #11
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 ff3d 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b5e:	23c0      	movs	r3, #192	; 0xc0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f000 ff2c 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4841      	ldr	r0, [pc, #260]	; (8000c9c <MX_GPIO_Init+0x314>)
 8000b96:	f000 ff1f 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	483b      	ldr	r0, [pc, #236]	; (8000c9c <MX_GPIO_Init+0x314>)
 8000bae:	f000 ff13 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bb2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bb6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4834      	ldr	r0, [pc, #208]	; (8000c9c <MX_GPIO_Init+0x314>)
 8000bcc:	f000 ff04 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bd0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bd4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000be8:	f000 fef6 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bec:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000c06:	f000 fee7 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x31c>)
 8000c24:	f000 fed8 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <MX_GPIO_Init+0x31c>)
 8000c40:	f000 feca 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c54:	2305      	movs	r3, #5
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000c60:	f000 feba 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c64:	2378      	movs	r3, #120	; 0x78
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_GPIO_Init+0x318>)
 8000c80:	f000 feaa 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <MX_GPIO_Init+0x320>
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48001000 	.word	0x48001000
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	48000c00 	.word	0x48000c00
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <MX_GPIO_Init+0x360>)
 8000cba:	f000 fe8d 	bl	80019d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2017      	movs	r0, #23
 8000cc4:	f000 fd52 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cc8:	2017      	movs	r0, #23
 8000cca:	f000 fd6b 	bl	80017a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f000 fd4a 	bl	800176c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f000 fd63 	bl	80017a4 <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	48000400 	.word	0x48000400

08000cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f004 fb31 	bl	800535c <osDelay>
 8000cfa:	e7fb      	b.n	8000cf4 <StartDefaultTask+0x8>

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d0e:	f000 fc31 	bl	8001574 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40014800 	.word	0x40014800

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210f      	movs	r1, #15
 8000d66:	f06f 0001 	mvn.w	r0, #1
 8000d6a:	f000 fcff 	bl	800176c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	; 0xb0
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2288      	movs	r2, #136	; 0x88
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 f887 	bl	8007eb0 <memset>
  if(DFSDM1_Init == 0)
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d142      	bne.n	8000e30 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fa04 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000dc6:	f7ff ffab 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dfa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e14:	2306      	movs	r3, #6
 8000e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e22:	f000 fdd9 	bl	80019d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a02      	ldr	r2, [pc, #8]	; (8000e38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e2e:	6013      	str	r3, [r2, #0]
  }

}
 8000e30:	bf00      	nop
 8000e32:	37b0      	adds	r7, #176	; 0xb0
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000778 	.word	0x20000778
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48001000 	.word	0x48001000

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ac      	sub	sp, #176	; 0xb0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2288      	movs	r2, #136	; 0x88
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 f823 	bl	8007eb0 <memset>
  if(hi2c->Instance==I2C2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <HAL_I2C_MspInit+0xb0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d13b      	bne.n	8000eec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 f9a1 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e8c:	f7ff ff48 	bl	8000d20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ea8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_I2C_MspInit+0xb8>)
 8000ed0:	f000 fd82 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ede:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_I2C_MspInit+0xb4>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	37b0      	adds	r7, #176	; 0xb0
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400

08000f00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_QSPI_MspInit+0x7c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d128      	bne.n	8000f74 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6513      	str	r3, [r2, #80]	; 0x50
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_QSPI_MspInit+0x80>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f52:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f56:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f64:	230a      	movs	r3, #10
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_QSPI_MspInit+0x84>)
 8000f70:	f000 fd32 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	a0001000 	.word	0xa0001000
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000

08000f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_SPI_MspInit+0x7c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d128      	bne.n	8000ffc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_SPI_MspInit+0x80>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fec:	2306      	movs	r3, #6
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_SPI_MspInit+0x84>)
 8000ff8:	f000 fcee 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40003c00 	.word	0x40003c00
 8001008:	40021000 	.word	0x40021000
 800100c:	48000800 	.word	0x48000800

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0ae      	sub	sp, #184	; 0xb8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2288      	movs	r2, #136	; 0x88
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f006 ff3d 	bl	8007eb0 <memset>
  if(huart->Instance==USART1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a42      	ldr	r2, [pc, #264]	; (8001144 <HAL_UART_MspInit+0x134>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d13b      	bne.n	80010b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001044:	2300      	movs	r3, #0
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4618      	mov	r0, r3
 800104e:	f002 f8bb 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001058:	f7ff fe62 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_UART_MspInit+0x138>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <HAL_UART_MspInit+0x138>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6613      	str	r3, [r2, #96]	; 0x60
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HAL_UART_MspInit+0x138>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <HAL_UART_MspInit+0x138>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_UART_MspInit+0x138>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_UART_MspInit+0x138>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800108c:	23c0      	movs	r3, #192	; 0xc0
 800108e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a4:	2307      	movs	r3, #7
 80010a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4826      	ldr	r0, [pc, #152]	; (800114c <HAL_UART_MspInit+0x13c>)
 80010b2:	f000 fc91 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010b6:	e040      	b.n	800113a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_UART_MspInit+0x140>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13b      	bne.n	800113a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c2:	2304      	movs	r3, #4
 80010c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f87a 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010da:	f7ff fe21 	bl	8000d20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_UART_MspInit+0x138>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_UART_MspInit+0x138>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_UART_MspInit+0x138>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_UART_MspInit+0x138>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_UART_MspInit+0x138>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_MspInit+0x138>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800110e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001128:	2307      	movs	r3, #7
 800112a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <HAL_UART_MspInit+0x144>)
 8001136:	f000 fc4f 	bl	80019d8 <HAL_GPIO_Init>
}
 800113a:	bf00      	nop
 800113c:	37b8      	adds	r7, #184	; 0xb8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40013800 	.word	0x40013800
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400
 8001150:	40004800 	.word	0x40004800
 8001154:	48000c00 	.word	0x48000c00

08001158 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	; 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2288      	movs	r2, #136	; 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fe99 	bl	8007eb0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001186:	d17c      	bne.n	8001282 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800118e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001196:	2301      	movs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800119e:	2318      	movs	r3, #24
 80011a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a2:	2307      	movs	r3, #7
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f805 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011c4:	f7ff fdac 	bl	8000d20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_PCD_MspInit+0x134>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a2f      	ldr	r2, [pc, #188]	; (800128c <HAL_PCD_MspInit+0x134>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_PCD_MspInit+0x134>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fbeb 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001202:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800121c:	230a      	movs	r3, #10
 800121e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f000 fbd4 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001236:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_PCD_MspInit+0x134>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_PCD_MspInit+0x134>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d114      	bne.n	800127e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_PCD_MspInit+0x134>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800126c:	f001 f8ae 	bl	80023cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_PCD_MspInit+0x134>)
 8001276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800127c:	e001      	b.n	8001282 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800127e:	f001 f8a5 	bl	80023cc <HAL_PWREx_EnableVddUSB>
}
 8001282:	bf00      	nop
 8001284:	37b0      	adds	r7, #176	; 0xb0
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_InitTick+0xc8>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <HAL_InitTick+0xc8>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6613      	str	r3, [r2, #96]	; 0x60
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_InitTick+0xc8>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 feef 	bl	80030a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012c6:	f001 fed7 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80012ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_InitTick+0xcc>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	3b01      	subs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_InitTick+0xd0>)
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <HAL_InitTick+0xd4>)
 80012de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_InitTick+0xd0>)
 80012e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_InitTick+0xd0>)
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_InitTick+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_InitTick+0xd0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_InitTick+0xd0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <HAL_InitTick+0xd0>)
 8001302:	f002 fcd0 	bl	8003ca6 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800130c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11b      	bne.n	800134c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <HAL_InitTick+0xd0>)
 8001316:	f002 fd27 	bl	8003d68 <HAL_TIM_Base_Start_IT>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001324:	2b00      	cmp	r3, #0
 8001326:	d111      	bne.n	800134c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001328:	201a      	movs	r0, #26
 800132a:	f000 fa3b 	bl	80017a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d808      	bhi.n	8001346 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	201a      	movs	r0, #26
 800133a:	f000 fa17 	bl	800176c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_InitTick+0xd8>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e002      	b.n	800134c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800134c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001350:	4618      	mov	r0, r3
 8001352:	3730      	adds	r7, #48	; 0x30
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	431bde83 	.word	0x431bde83
 8001360:	2000077c 	.word	0x2000077c
 8001364:	40014800 	.word	0x40014800
 8001368:	20000004 	.word	0x20000004

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800139c:	2020      	movs	r0, #32
 800139e:	f000 fd0f 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013a2:	2040      	movs	r0, #64	; 0x40
 80013a4:	f000 fd0c 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013a8:	2080      	movs	r0, #128	; 0x80
 80013aa:	f000 fd09 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013b2:	f000 fd05 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80013c2:	f002 fd41 	bl	8003e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000077c 	.word	0x2000077c

080013d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013d8:	f000 fcf2 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013e0:	f000 fcee 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e8:	f000 fcea 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013f0:	f000 fce6 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013f8:	f000 fce2 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <CreateButtonTask>:
		CreateLedTaskChain((p=p+1)%4);
		vTaskDelete(NULL);
	}
}

void CreateButtonTask(){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8
	xTaskCreate(ButtonTask, "ButtonTask", 128,NULL,1, NULL);
 800142a:	2300      	movs	r3, #0
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	2301      	movs	r3, #1
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	4903      	ldr	r1, [pc, #12]	; (8001444 <CreateButtonTask+0x20>)
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <CreateButtonTask+0x24>)
 800143a:	f004 fddc 	bl	8005ff6 <xTaskCreate>
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	08007f18 	.word	0x08007f18
 8001448:	0800144d 	.word	0x0800144d

0800144c <ButtonTask>:

void ButtonTask(void *pArg){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	while(1){
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET){
 8001454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <ButtonTask+0x30>)
 800145a:	f000 fc67 	bl	8001d2c <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f7      	bne.n	8001454 <ButtonTask+0x8>
			xTaskNotifyGive(manejador);
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <ButtonTask+0x34>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	2202      	movs	r2, #2
 800146c:	2100      	movs	r1, #0
 800146e:	f005 fc57 	bl	8006d20 <xTaskGenericNotify>
			vTaskDelay(100);
 8001472:	2064      	movs	r0, #100	; 0x64
 8001474:	f004 ff04 	bl	8006280 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET){
 8001478:	e7ec      	b.n	8001454 <ButtonTask+0x8>
 800147a:	bf00      	nop
 800147c:	48000800 	.word	0x48000800
 8001480:	200007c8 	.word	0x200007c8

08001484 <CreateLedTaskNotify>:
		}
	}
}

void CreateLedTaskNotify(){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af02      	add	r7, sp, #8
	xTaskCreate(LedTaskNotify, "LedTaskNotify", 128, NULL, 1, &manejador);
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <CreateLedTaskNotify+0x20>)
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2301      	movs	r3, #1
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	4904      	ldr	r1, [pc, #16]	; (80014a8 <CreateLedTaskNotify+0x24>)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <CreateLedTaskNotify+0x28>)
 800149a:	f004 fdac 	bl	8005ff6 <xTaskCreate>
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200007c8 	.word	0x200007c8
 80014a8:	08007f24 	.word	0x08007f24
 80014ac:	080014b1 	.word	0x080014b1

080014b0 <LedTaskNotify>:

void LedTaskNotify(void *pArg){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	while(1){
		ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014bc:	2001      	movs	r0, #1
 80014be:	f005 fbe7 	bl	8006c90 <ulTaskNotifyTake>
		for(int i=0;i<4;i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e00e      	b.n	80014e6 <LedTaskNotify+0x36>
			led_toggle(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff f803 	bl	80004d4 <led_toggle>
			vTaskDelay(200);
 80014ce:	20c8      	movs	r0, #200	; 0xc8
 80014d0:	f004 fed6 	bl	8006280 <vTaskDelay>
			led_toggle(0);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7fe fffd 	bl	80004d4 <led_toggle>
			vTaskDelay(100);
 80014da:	2064      	movs	r0, #100	; 0x64
 80014dc:	f004 fed0 	bl	8006280 <vTaskDelay>
		for(int i=0;i<4;i++){
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	dded      	ble.n	80014c8 <LedTaskNotify+0x18>
		ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80014ec:	e7e4      	b.n	80014b8 <LedTaskNotify+0x8>
	...

080014f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff ff84 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	; (8001530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	; (800153c <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f006 fc95 	bl	8007e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001522:	f7ff f839 	bl	8000598 <main>

08001526 <LoopForever>:

LoopForever:
    b LoopForever
 8001526:	e7fe      	b.n	8001526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001534:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8001538:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800153c:	200020fc 	.word	0x200020fc

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>

08001542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f902 	bl	8001756 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001552:	200f      	movs	r0, #15
 8001554:	f7ff fe9c 	bl	8001290 <HAL_InitTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e001      	b.n	8001568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001564:	f7ff fbe2 	bl	8000d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001568:	79fb      	ldrb	r3, [r7, #7]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	200007cc 	.word	0x200007cc

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200007cc 	.word	0x200007cc

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff4c 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177e:	f7ff ff61 	bl	8001644 <__NVIC_GetPriorityGrouping>
 8001782:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	6978      	ldr	r0, [r7, #20]
 800178a:	f7ff ffb1 	bl	80016f0 <NVIC_EncodePriority>
 800178e:	4602      	mov	r2, r0
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff80 	bl	800169c <__NVIC_SetPriority>
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff54 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0ac      	b.n	800192c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f8b2 	bl	8001940 <DFSDM_GetChannelFromInstance>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a55      	ldr	r2, [pc, #340]	; (8001934 <HAL_DFSDM_ChannelInit+0x174>)
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e09f      	b.n	800192c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fac5 	bl	8000d7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017f2:	4b51      	ldr	r3, [pc, #324]	; (8001938 <HAL_DFSDM_ChannelInit+0x178>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_DFSDM_ChannelInit+0x178>)
 80017fa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_DFSDM_ChannelInit+0x178>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d125      	bne.n	8001850 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 800180a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800180e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4948      	ldr	r1, [pc, #288]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001824:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001828:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	493f      	ldr	r1, [pc, #252]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001844:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a3c      	ldr	r2, [pc, #240]	; (800193c <HAL_DFSDM_ChannelInit+0x17c>)
 800184a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800184e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800185e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800186e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001874:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 020f 	bic.w	r2, r2, #15
 800188c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f002 0207 	and.w	r2, r2, #7
 80018e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f810 	bl	8001940 <DFSDM_GetChannelFromInstance>
 8001920:	4602      	mov	r2, r0
 8001922:	4904      	ldr	r1, [pc, #16]	; (8001934 <HAL_DFSDM_ChannelInit+0x174>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200007d4 	.word	0x200007d4
 8001938:	200007d0 	.word	0x200007d0
 800193c:	40016000 	.word	0x40016000

08001940 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <DFSDM_GetChannelFromInstance+0x7c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d102      	bne.n	8001956 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e02b      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <DFSDM_GetChannelFromInstance+0x80>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d102      	bne.n	8001964 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e024      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <DFSDM_GetChannelFromInstance+0x84>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d102      	bne.n	8001972 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e01d      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <DFSDM_GetChannelFromInstance+0x88>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d102      	bne.n	8001980 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800197a:	2304      	movs	r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e016      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <DFSDM_GetChannelFromInstance+0x8c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001988:	2305      	movs	r3, #5
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e00f      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <DFSDM_GetChannelFromInstance+0x90>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d102      	bne.n	800199c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001996:	2306      	movs	r3, #6
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e008      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <DFSDM_GetChannelFromInstance+0x94>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019a4:	2307      	movs	r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e001      	b.n	80019ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019aa:	2303      	movs	r3, #3
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40016000 	.word	0x40016000
 80019c0:	40016020 	.word	0x40016020
 80019c4:	40016040 	.word	0x40016040
 80019c8:	40016080 	.word	0x40016080
 80019cc:	400160a0 	.word	0x400160a0
 80019d0:	400160c0 	.word	0x400160c0
 80019d4:	400160e0 	.word	0x400160e0

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e17f      	b.n	8001ce8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8171 	beq.w	8001ce2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d118      	bne.n	8001ab8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	f003 0201 	and.w	r2, r3, #1
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d017      	beq.n	8001af4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d123      	bne.n	8001b48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	6939      	ldr	r1, [r7, #16]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80ac 	beq.w	8001ce2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_GPIO_Init+0x330>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	4a5e      	ldr	r2, [pc, #376]	; (8001d08 <HAL_GPIO_Init+0x330>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6613      	str	r3, [r2, #96]	; 0x60
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_GPIO_Init+0x330>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba2:	4a5a      	ldr	r2, [pc, #360]	; (8001d0c <HAL_GPIO_Init+0x334>)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x242>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	; (8001d10 <HAL_GPIO_Init+0x338>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x23e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <HAL_GPIO_Init+0x33c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x23a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4d      	ldr	r2, [pc, #308]	; (8001d18 <HAL_GPIO_Init+0x340>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x236>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_GPIO_Init+0x344>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x232>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4b      	ldr	r2, [pc, #300]	; (8001d20 <HAL_GPIO_Init+0x348>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4a      	ldr	r2, [pc, #296]	; (8001d24 <HAL_GPIO_Init+0x34c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00c      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00a      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c06:	2305      	movs	r3, #5
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x244>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c2c:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_GPIO_Init+0x334>)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5e:	4a32      	ldr	r2, [pc, #200]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c88:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f ae78 	bne.w	80019e8 <HAL_GPIO_Init+0x10>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000800 	.word	0x48000800
 8001d18:	48000c00 	.word	0x48000c00
 8001d1c:	48001000 	.word	0x48001000
 8001d20:	48001400 	.word	0x48001400
 8001d24:	48001800 	.word	0x48001800
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43d9      	mvns	r1, r3
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f806 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e081      	b.n	8001f1c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff f809 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2224      	movs	r2, #36	; 0x24
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e006      	b.n	8001e8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d104      	bne.n	8001ea0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69d9      	ldr	r1, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d138      	bne.n	8001fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e032      	b.n	8001fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6819      	ldr	r1, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d139      	bne.n	8002044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e033      	b.n	8002046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2224      	movs	r2, #36	; 0x24
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800200c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002044:	2302      	movs	r3, #2
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002054:	b08f      	sub	sp, #60	; 0x3c
 8002056:	af0a      	add	r7, sp, #40	; 0x28
 8002058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e116      	b.n	8002292 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff f86a 	bl	8001158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fdb1 	bl	8004c0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	687e      	ldr	r6, [r7, #4]
 80020b0:	466d      	mov	r5, sp
 80020b2:	f106 0410 	add.w	r4, r6, #16
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c6:	1d33      	adds	r3, r6, #4
 80020c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f002 fd71 	bl	8004bb2 <USB_CoreInit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0d7      	b.n	8002292 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fd9f 	bl	8004c2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e04a      	b.n	800218a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	333d      	adds	r3, #61	; 0x3d
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	333c      	adds	r3, #60	; 0x3c
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	b298      	uxth	r0, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3344      	adds	r3, #68	; 0x44
 8002130:	4602      	mov	r2, r0
 8002132:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3340      	adds	r3, #64	; 0x40
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	3348      	adds	r3, #72	; 0x48
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	334c      	adds	r3, #76	; 0x4c
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3354      	adds	r3, #84	; 0x54
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3af      	bcc.n	80020f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e044      	b.n	8002224 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3301      	adds	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3b5      	bcc.n	800219a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	687e      	ldr	r6, [r7, #4]
 8002236:	466d      	mov	r5, sp
 8002238:	f106 0410 	add.w	r4, r6, #16
 800223c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002244:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002248:	e885 0003 	stmia.w	r5, {r0, r1}
 800224c:	1d33      	adds	r3, r6, #4
 800224e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f002 fd37 	bl	8004cc4 <USB_DevInit>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e014      	b.n	8002292 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f80a 	bl	800229a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fee3 	bl	8005056 <USB_DevDisconnect>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800229a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	f043 0303 	orr.w	r3, r3, #3
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_PWREx_GetVoltageRange+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000

08002320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d130      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d038      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002364:	e002      	b.n	800236c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d110      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e00f      	b.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d007      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000
 80023c4:	20000000 	.word	0x20000000
 80023c8:	431bde83 	.word	0x431bde83

080023cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6053      	str	r3, [r2, #4]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40007000 	.word	0x40007000

080023ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff f8d2 	bl	800159c <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e063      	b.n	80024cc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fe fd71 	bl	8000f00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800241e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f858 	bl	80024d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	3b01      	subs	r3, #1
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	2120      	movs	r1, #32
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f850 	bl	80024f4 <QSPI_WaitFlagStateUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d131      	bne.n	80024c2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002468:	f023 0310 	bic.w	r3, r3, #16
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	0611      	lsls	r1, r2, #24
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_QSPI_Init+0xe8>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6912      	ldr	r2, [r2, #16]
 800248e:	0411      	lsls	r1, r2, #16
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6952      	ldr	r2, [r2, #20]
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6992      	ldr	r2, [r2, #24]
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80024ca:	7afb      	ldrb	r3, [r7, #11]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	ffe0f8fe 	.word	0xffe0f8fe

080024d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002504:	e01a      	b.n	800253c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250c:	d016      	beq.n	800253c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250e:	f7ff f845 	bl	800159c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	429a      	cmp	r2, r3
 800251c:	d302      	bcc.n	8002524 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2204      	movs	r2, #4
 8002528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e00e      	b.n	800255a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d1d6      	bne.n	8002506 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e3ca      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002576:	4b97      	ldr	r3, [pc, #604]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002580:	4b94      	ldr	r3, [pc, #592]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80e4 	beq.w	8002760 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_RCC_OscConfig+0x4a>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	f040 808b 	bne.w	80026bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f040 8087 	bne.w	80026bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x62>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e3a2      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1a      	ldr	r2, [r3, #32]
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_RCC_OscConfig+0x7c>
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025de:	e005      	b.n	80025ec <HAL_RCC_OscConfig+0x88>
 80025e0:	4b7c      	ldr	r3, [pc, #496]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d223      	bcs.n	8002638 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fd87 	bl	8003108 <RCC_SetFlashLatencyFromMSIRange>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e383      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002604:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a72      	ldr	r2, [pc, #456]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	496d      	ldr	r1, [pc, #436]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002622:	4b6c      	ldr	r3, [pc, #432]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	4968      	ldr	r1, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e025      	b.n	8002684 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4960      	ldr	r1, [pc, #384]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	495b      	ldr	r1, [pc, #364]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fd47 	bl	8003108 <RCC_SetFlashLatencyFromMSIRange>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e343      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002684:	f000 fc4a 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	4950      	ldr	r1, [pc, #320]	; (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_RCC_OscConfig+0x278>)
 80026a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026a4:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fdf1 	bl	8001290 <HAL_InitTick>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d052      	beq.n	800275e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	e327      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d032      	beq.n	800272a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a42      	ldr	r2, [pc, #264]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d0:	f7fe ff64 	bl	800159c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d8:	f7fe ff60 	bl	800159c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e310      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f6:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a36      	ldr	r2, [pc, #216]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4931      	ldr	r1, [pc, #196]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	492c      	ldr	r1, [pc, #176]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e01a      	b.n	8002760 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002736:	f7fe ff31 	bl	800159c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273e:	f7fe ff2d 	bl	800159c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e2dd      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x1da>
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800275e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d074      	beq.n	8002856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x21a>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d10e      	bne.n	8002796 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d10b      	bne.n	8002796 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d064      	beq.n	8002854 <HAL_RCC_OscConfig+0x2f0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d160      	bne.n	8002854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e2ba      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x24a>
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e026      	b.n	80027fc <HAL_RCC_OscConfig+0x298>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b6:	d115      	bne.n	80027e4 <HAL_RCC_OscConfig+0x280>
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a02      	ldr	r2, [pc, #8]	; (80027d4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x298>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08007f70 	.word	0x08007f70
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004
 80027e4:	4ba0      	ldr	r3, [pc, #640]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a9f      	ldr	r2, [pc, #636]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a9c      	ldr	r2, [pc, #624]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe feca 	bl	800159c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fec6 	bl	800159c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e276      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281e:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x2a8>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe feb6 	bl	800159c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe feb2 	bl	800159c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e262      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x2d0>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d060      	beq.n	8002924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d005      	beq.n	8002874 <HAL_RCC_OscConfig+0x310>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d116      	bne.n	80028a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002874:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x328>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e23f      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	4973      	ldr	r1, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a0:	e040      	b.n	8002924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d023      	beq.n	80028f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fe71 	bl	800159c <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fe6d 	bl	800159c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e21d      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d0:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	495f      	ldr	r1, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
 80028f0:	e018      	b.n	8002924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5c      	ldr	r2, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe4d 	bl	800159c <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fe49 	bl	800159c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1f9      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03c      	beq.n	80029aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01c      	beq.n	8002972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fe28 	bl	800159c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fe24 	bl	800159c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1d4      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ef      	beq.n	8002950 <HAL_RCC_OscConfig+0x3ec>
 8002970:	e01b      	b.n	80029aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a3b      	ldr	r2, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fe0b 	bl	800159c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fe07 	bl	800159c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1b7      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ef      	bne.n	800298a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80a6 	beq.w	8002b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x508>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d118      	bne.n	8002a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_RCC_OscConfig+0x508>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x508>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fc:	f7fe fdce 	bl	800159c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fe fdca 	bl	800159c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e17a      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_RCC_OscConfig+0x508>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d108      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4d8>
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3a:	e029      	b.n	8002a90 <HAL_RCC_OscConfig+0x52c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d115      	bne.n	8002a70 <HAL_RCC_OscConfig+0x50c>
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a64:	e014      	b.n	8002a90 <HAL_RCC_OscConfig+0x52c>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	4b9c      	ldr	r3, [pc, #624]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a9b      	ldr	r2, [pc, #620]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a80:	4b98      	ldr	r3, [pc, #608]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	4a97      	ldr	r2, [pc, #604]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d016      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fd80 	bl	800159c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fd7c 	bl	800159c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e12a      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ed      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x53c>
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fd69 	bl	800159c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe fd65 	bl	800159c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e113      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ed      	bne.n	8002ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80fe 	beq.w	8002d0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f040 80d0 	bne.w	8002cb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b18:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d130      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	3b01      	subs	r3, #1
 8002b38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d127      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11f      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b58:	2a07      	cmp	r2, #7
 8002b5a:	bf14      	ite	ne
 8002b5c:	2201      	movne	r2, #1
 8002b5e:	2200      	moveq	r2, #0
 8002b60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d109      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	3b01      	subs	r3, #1
 8002b88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d06e      	beq.n	8002c6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d069      	beq.n	8002c68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b94:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ba0:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0ad      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bbc:	f7fe fcee 	bl	800159c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fcea 	bl	800159c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e09a      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be2:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x784>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bfc:	0212      	lsls	r2, r2, #8
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c04:	0852      	lsrs	r2, r2, #1
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0552      	lsls	r2, r2, #21
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0652      	lsls	r2, r2, #25
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1c:	0912      	lsrs	r2, r2, #4
 8002c1e:	0452      	lsls	r2, r2, #17
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c40:	f7fe fcac 	bl	800159c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fca8 	bl	800159c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c66:	e050      	b.n	8002d0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04f      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d148      	bne.n	8002d0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c90:	f7fe fc84 	bl	800159c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fc80 	bl	800159c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e030      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x734>
 8002cb6:	e028      	b.n	8002d0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d023      	beq.n	8002d06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x780>)
 8002cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fc67 	bl	800159c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	e00c      	b.n	8002cec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe fc63 	bl	800159c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d905      	bls.n	8002cec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x7b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ec      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x7b0>)
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4905      	ldr	r1, [pc, #20]	; (8002d14 <HAL_RCC_OscConfig+0x7b0>)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x7b4>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
 8002d04:	e001      	b.n	8002d0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	feeefffc 	.word	0xfeeefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0e7      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b75      	ldr	r3, [pc, #468]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4970      	ldr	r1, [pc, #448]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cf      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4960      	ldr	r1, [pc, #384]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d04c      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	4b5a      	ldr	r3, [pc, #360]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d121      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0a6      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dba:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d115      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e09a      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e08e      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e086      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4943      	ldr	r1, [pc, #268]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e04:	f7fe fbca 	bl	800159c <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0c:	f7fe fbc6 	bl	800159c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e06e      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 020c 	and.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d208      	bcs.n	8002e62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	492b      	ldr	r1, [pc, #172]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d210      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 0207 	bic.w	r2, r3, #7
 8002e78:	4923      	ldr	r1, [pc, #140]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_ClockConfig+0x1ec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e036      	b.n	8002f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4918      	ldr	r1, [pc, #96]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4910      	ldr	r1, [pc, #64]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed0:	f000 f824 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	490b      	ldr	r1, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1fc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f9cb 	bl	8001290 <HAL_InitTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08007f70 	.word	0x08007f70
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004

08002f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x34>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d11e      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f50:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e005      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f78:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e004      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fa0:	4b23      	ldr	r3, [pc, #140]	; (8003030 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d134      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002fc0:	e005      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fc4:	617b      	str	r3, [r7, #20]
      break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fca:	617b      	str	r3, [r7, #20]
      break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	617b      	str	r3, [r7, #20]
      break;
 8002fd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	3301      	adds	r3, #1
 8002fe0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	fb03 f202 	mul.w	r2, r3, r2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0e5b      	lsrs	r3, r3, #25
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	3301      	adds	r3, #1
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003014:	69bb      	ldr	r3, [r7, #24]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	08007f88 	.word	0x08007f88
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200

08003034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	08007f80 	.word	0x08007f80

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800307c:	f7ff ffda 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0adb      	lsrs	r3, r3, #11
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4904      	ldr	r1, [pc, #16]	; (80030a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	08007f80 	.word	0x08007f80

080030a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	220f      	movs	r2, #15
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0203 	and.w	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_GetClockConfig+0x5c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RCC_GetClockConfig+0x60>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	40022000 	.word	0x40022000

08003108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003120:	f7ff f8f0 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003124:	6178      	str	r0, [r7, #20]
 8003126:	e014      	b.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003140:	f7ff f8e0 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003144:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003150:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d10b      	bne.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d919      	bls.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2ba0      	cmp	r3, #160	; 0xa0
 8003164:	d902      	bls.n	800316c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003166:	2302      	movs	r3, #2
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e013      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800316c:	2301      	movs	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e010      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d902      	bls.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003178:	2303      	movs	r3, #3
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e00a      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d102      	bne.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003184:	2302      	movs	r3, #2
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e004      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b70      	cmp	r3, #112	; 0x70
 800318e:	d101      	bne.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003190:	2301      	movs	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 0207 	bic.w	r2, r3, #7
 800319c:	4909      	ldr	r1, [pc, #36]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d4:	2300      	movs	r3, #0
 80031d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d041      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ec:	d02a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031f2:	d824      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fe:	d81e      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	d010      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800320a:	e018      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800320c:	4b86      	ldr	r3, [pc, #536]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a85      	ldr	r2, [pc, #532]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003218:	e015      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 facb 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322a:	e00c      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3320      	adds	r3, #32
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fbb6 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323c:	e003      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	74fb      	strb	r3, [r7, #19]
      break;
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324c:	4b76      	ldr	r3, [pc, #472]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325a:	4973      	ldr	r1, [pc, #460]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003262:	e001      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d041      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003278:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800327c:	d02a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800327e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003282:	d824      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800328a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328e:	d81e      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003298:	d010      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329a:	e018      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800329c:	4b62      	ldr	r3, [pc, #392]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a61      	ldr	r2, [pc, #388]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a8:	e015      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fa83 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ba:	e00c      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3320      	adds	r3, #32
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fb6e 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	74fb      	strb	r3, [r7, #19]
      break;
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ea:	494f      	ldr	r1, [pc, #316]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032f2:	e001      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a0 	beq.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a40      	ldr	r2, [pc, #256]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003338:	2301      	movs	r3, #1
 800333a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3a      	ldr	r2, [pc, #232]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003348:	f7fe f928 	bl	800159c <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800334e:	e009      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fe f924 	bl	800159c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d902      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	74fb      	strb	r3, [r7, #19]
        break;
 8003362:	e005      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ef      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d15c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d019      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a20      	ldr	r2, [pc, #128]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe f8e3 	bl	800159c <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	e00b      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe f8df 	bl	800159c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d902      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	74fb      	strb	r3, [r7, #19]
            break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ec      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003434:	7c7b      	ldrb	r3, [r7, #17]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b9e      	ldr	r3, [pc, #632]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4a9d      	ldr	r2, [pc, #628]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003452:	4b98      	ldr	r3, [pc, #608]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f023 0203 	bic.w	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	4994      	ldr	r1, [pc, #592]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003474:	4b8f      	ldr	r3, [pc, #572]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 020c 	bic.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	498c      	ldr	r1, [pc, #560]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003496:	4b87      	ldr	r3, [pc, #540]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4983      	ldr	r1, [pc, #524]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b8:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	497b      	ldr	r1, [pc, #492]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	4972      	ldr	r1, [pc, #456]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034fc:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	496a      	ldr	r1, [pc, #424]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	4961      	ldr	r1, [pc, #388]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003540:	4b5c      	ldr	r3, [pc, #368]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	4959      	ldr	r1, [pc, #356]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	4950      	ldr	r1, [pc, #320]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003584:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	4948      	ldr	r1, [pc, #288]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a6:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	493f      	ldr	r1, [pc, #252]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d028      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c8:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	4937      	ldr	r1, [pc, #220]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f2:	60d3      	str	r3, [r2, #12]
 80035f4:	e011      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035fe:	d10c      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f8d8 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d028      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003626:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	491f      	ldr	r1, [pc, #124]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003650:	60d3      	str	r3, [r2, #12]
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2101      	movs	r1, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f8a9 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02b      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a2:	d109      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a02      	ldr	r2, [pc, #8]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ae:	60d3      	str	r3, [r2, #12]
 80036b0:	e014      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f877 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02f      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f6:	4928      	ldr	r1, [pc, #160]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2102      	movs	r1, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f854 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d014      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	74bb      	strb	r3, [r7, #18]
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3320      	adds	r3, #32
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f935 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003762:	490d      	ldr	r1, [pc, #52]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800378e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b75      	ldr	r3, [pc, #468]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037d6:	4b72      	ldr	r3, [pc, #456]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ee:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d047      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e044      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d018      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x86>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d825      	bhi.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x62>
 8003818:	2b02      	cmp	r3, #2
 800381a:	d009      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x74>
 800381c:	e020      	b.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381e:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382e:	e01a      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e013      	b.n	800386a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384e:	4b54      	ldr	r3, [pc, #336]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385e:	e006      	b.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e004      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	430b      	orrs	r3, r1
 800388c:	4944      	ldr	r1, [pc, #272]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d17d      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003898:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fd fe7a 	bl	800159c <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ac:	f7fd fe76 	bl	800159c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
        break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c0:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d160      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	0211      	lsls	r1, r2, #8
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0912      	lsrs	r2, r2, #4
 80038f0:	0452      	lsls	r2, r2, #17
 80038f2:	430a      	orrs	r2, r1
 80038f4:	492a      	ldr	r1, [pc, #168]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e027      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d112      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800390a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	0211      	lsls	r1, r2, #8
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	0852      	lsrs	r2, r2, #1
 800391a:	3a01      	subs	r2, #1
 800391c:	0552      	lsls	r2, r2, #21
 800391e:	430a      	orrs	r2, r1
 8003920:	491f      	ldr	r1, [pc, #124]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
 8003926:	e011      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6952      	ldr	r2, [r2, #20]
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	430a      	orrs	r2, r1
 8003946:	4916      	ldr	r1, [pc, #88]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd fe20 	bl	800159c <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800395e:	e009      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003960:	f7fd fe1c 	bl	800159c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d902      	bls.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	73fb      	strb	r3, [r7, #15]
          break;
 8003972:	e005      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b2:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039be:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0203 	and.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10d      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
       ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039d6:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
       ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d047      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e044      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d018      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x86>
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x62>
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d009      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0x74>
 8003a04:	e020      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a06:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11d      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a16:	e01a      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e013      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a36:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a46:	e006      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e004      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e002      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	430b      	orrs	r3, r1
 8003a74:	4939      	ldr	r1, [pc, #228]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d167      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a80:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fd86 	bl	800159c <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a92:	e009      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a94:	f7fd fd82 	bl	800159c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d902      	bls.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa6:	e005      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d14a      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	0912      	lsrs	r2, r2, #4
 8003ad8:	0452      	lsls	r2, r2, #17
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6912      	ldr	r2, [r2, #16]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd42 	bl	800159c <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b1c:	f7fd fd3e 	bl	800159c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e095      	b.n	8003c9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d009      	beq.n	8003b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]
 8003b8a:	e005      	b.n	8003b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd f9e8 	bl	8000f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd8:	d902      	bls.n	8003be0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e002      	b.n	8003be6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bee:	d007      	beq.n	8003c00 <HAL_SPI_Init+0xa0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf8:	d002      	beq.n	8003c00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	ea42 0103 	orr.w	r1, r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	f003 0204 	and.w	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e049      	b.n	8003d4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f841 	bl	8003d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 f9f7 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04f      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d018      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x76>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d115      	bne.n	8003e0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d015      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0xb4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d011      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	e008      	b.n	8003e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40013400 	.word	0x40013400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	00010007 	.word	0x00010007

08003e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0202 	mvn.w	r2, #2
 8003e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f905 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8f7 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f908 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0204 	mvn.w	r2, #4
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f8db 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8cd 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f8de 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0208 	mvn.w	r2, #8
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8b1 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8a3 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f8b4 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2208      	movs	r2, #8
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f887 	bl	800409a <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f879 	bl	8004086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f88a 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0201 	mvn.w	r2, #1
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fe98 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f914 	bl	8004220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	d10e      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b80      	cmp	r3, #128	; 0x80
 8004014:	d107      	bne.n	8004026 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800401e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f907 	bl	8004234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d10e      	bne.n	8004052 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d107      	bne.n	8004052 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f838 	bl	80040c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b20      	cmp	r3, #32
 800405e:	d10e      	bne.n	800407e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d107      	bne.n	800407e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0220 	mvn.w	r2, #32
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8c7 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <TIM_Base_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d00f      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3d      	ldr	r2, [pc, #244]	; (80041f0 <TIM_Base_SetConfig+0x118>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3c      	ldr	r2, [pc, #240]	; (80041f4 <TIM_Base_SetConfig+0x11c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <TIM_Base_SetConfig+0x120>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3a      	ldr	r2, [pc, #232]	; (80041fc <TIM_Base_SetConfig+0x124>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2f      	ldr	r2, [pc, #188]	; (80041ec <TIM_Base_SetConfig+0x114>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d01b      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <TIM_Base_SetConfig+0x118>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d017      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <TIM_Base_SetConfig+0x11c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <TIM_Base_SetConfig+0x120>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00f      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a29      	ldr	r2, [pc, #164]	; (80041fc <TIM_Base_SetConfig+0x124>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00b      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <TIM_Base_SetConfig+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <TIM_Base_SetConfig+0x12c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_Base_SetConfig+0x9a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <TIM_Base_SetConfig+0x130>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a10      	ldr	r2, [pc, #64]	; (80041ec <TIM_Base_SetConfig+0x114>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00f      	beq.n	80041d0 <TIM_Base_SetConfig+0xf8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <TIM_Base_SetConfig+0x124>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0xf8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a11      	ldr	r2, [pc, #68]	; (8004200 <TIM_Base_SetConfig+0x128>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0xf8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <TIM_Base_SetConfig+0x12c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0xf8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0f      	ldr	r2, [pc, #60]	; (8004208 <TIM_Base_SetConfig+0x130>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fed0 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f82c 	bl	80042e4 <UART_SetConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fad8 	bl	8004854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb5f 	bl	8004998 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b08a      	sub	sp, #40	; 0x28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4ba4      	ldr	r3, [pc, #656]	; (80045a4 <UART_SetConfig+0x2c0>)
 8004314:	4013      	ands	r3, r2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431c:	430b      	orrs	r3, r1
 800431e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a99      	ldr	r2, [pc, #612]	; (80045a8 <UART_SetConfig+0x2c4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434c:	4313      	orrs	r3, r2
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a90      	ldr	r2, [pc, #576]	; (80045ac <UART_SetConfig+0x2c8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d126      	bne.n	80043bc <UART_SetConfig+0xd8>
 800436e:	4b90      	ldr	r3, [pc, #576]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b03      	cmp	r3, #3
 800437a:	d81b      	bhi.n	80043b4 <UART_SetConfig+0xd0>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0xa0>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004395 	.word	0x08004395
 8004388:	080043a5 	.word	0x080043a5
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043ad 	.word	0x080043ad
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e116      	b.n	80045ca <UART_SetConfig+0x2e6>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e112      	b.n	80045ca <UART_SetConfig+0x2e6>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e10e      	b.n	80045ca <UART_SetConfig+0x2e6>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e10a      	b.n	80045ca <UART_SetConfig+0x2e6>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e106      	b.n	80045ca <UART_SetConfig+0x2e6>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a7c      	ldr	r2, [pc, #496]	; (80045b4 <UART_SetConfig+0x2d0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d138      	bne.n	8004438 <UART_SetConfig+0x154>
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <UART_SetConfig+0x2cc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d82d      	bhi.n	8004430 <UART_SetConfig+0x14c>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0xf8>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004431 	.word	0x08004431
 80043e4:	08004431 	.word	0x08004431
 80043e8:	08004431 	.word	0x08004431
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004431 	.word	0x08004431
 80043f4:	08004431 	.word	0x08004431
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004419 	.word	0x08004419
 8004400:	08004431 	.word	0x08004431
 8004404:	08004431 	.word	0x08004431
 8004408:	08004431 	.word	0x08004431
 800440c:	08004429 	.word	0x08004429
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e0d8      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004418:	2302      	movs	r3, #2
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e0d4      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004420:	2304      	movs	r3, #4
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0d0      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004428:	2308      	movs	r3, #8
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e0cc      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004430:	2310      	movs	r3, #16
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e0c8      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5e      	ldr	r2, [pc, #376]	; (80045b8 <UART_SetConfig+0x2d4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d125      	bne.n	800448e <UART_SetConfig+0x1aa>
 8004442:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444c:	2b30      	cmp	r3, #48	; 0x30
 800444e:	d016      	beq.n	800447e <UART_SetConfig+0x19a>
 8004450:	2b30      	cmp	r3, #48	; 0x30
 8004452:	d818      	bhi.n	8004486 <UART_SetConfig+0x1a2>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d00a      	beq.n	800446e <UART_SetConfig+0x18a>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d814      	bhi.n	8004486 <UART_SetConfig+0x1a2>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <UART_SetConfig+0x182>
 8004460:	2b10      	cmp	r3, #16
 8004462:	d008      	beq.n	8004476 <UART_SetConfig+0x192>
 8004464:	e00f      	b.n	8004486 <UART_SetConfig+0x1a2>
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446c:	e0ad      	b.n	80045ca <UART_SetConfig+0x2e6>
 800446e:	2302      	movs	r3, #2
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004474:	e0a9      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004476:	2304      	movs	r3, #4
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e0a5      	b.n	80045ca <UART_SetConfig+0x2e6>
 800447e:	2308      	movs	r3, #8
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e0a1      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004486:	2310      	movs	r3, #16
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e09d      	b.n	80045ca <UART_SetConfig+0x2e6>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4a      	ldr	r2, [pc, #296]	; (80045bc <UART_SetConfig+0x2d8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d125      	bne.n	80044e4 <UART_SetConfig+0x200>
 8004498:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <UART_SetConfig+0x2cc>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044a2:	2bc0      	cmp	r3, #192	; 0xc0
 80044a4:	d016      	beq.n	80044d4 <UART_SetConfig+0x1f0>
 80044a6:	2bc0      	cmp	r3, #192	; 0xc0
 80044a8:	d818      	bhi.n	80044dc <UART_SetConfig+0x1f8>
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d00a      	beq.n	80044c4 <UART_SetConfig+0x1e0>
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d814      	bhi.n	80044dc <UART_SetConfig+0x1f8>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <UART_SetConfig+0x1d8>
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d008      	beq.n	80044cc <UART_SetConfig+0x1e8>
 80044ba:	e00f      	b.n	80044dc <UART_SetConfig+0x1f8>
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e082      	b.n	80045ca <UART_SetConfig+0x2e6>
 80044c4:	2302      	movs	r3, #2
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e07e      	b.n	80045ca <UART_SetConfig+0x2e6>
 80044cc:	2304      	movs	r3, #4
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e07a      	b.n	80045ca <UART_SetConfig+0x2e6>
 80044d4:	2308      	movs	r3, #8
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e076      	b.n	80045ca <UART_SetConfig+0x2e6>
 80044dc:	2310      	movs	r3, #16
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e072      	b.n	80045ca <UART_SetConfig+0x2e6>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a35      	ldr	r2, [pc, #212]	; (80045c0 <UART_SetConfig+0x2dc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d12a      	bne.n	8004544 <UART_SetConfig+0x260>
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <UART_SetConfig+0x2cc>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fc:	d01a      	beq.n	8004534 <UART_SetConfig+0x250>
 80044fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004502:	d81b      	bhi.n	800453c <UART_SetConfig+0x258>
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d00c      	beq.n	8004524 <UART_SetConfig+0x240>
 800450a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450e:	d815      	bhi.n	800453c <UART_SetConfig+0x258>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <UART_SetConfig+0x238>
 8004514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004518:	d008      	beq.n	800452c <UART_SetConfig+0x248>
 800451a:	e00f      	b.n	800453c <UART_SetConfig+0x258>
 800451c:	2300      	movs	r3, #0
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e052      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004524:	2302      	movs	r3, #2
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e04e      	b.n	80045ca <UART_SetConfig+0x2e6>
 800452c:	2304      	movs	r3, #4
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e04a      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004534:	2308      	movs	r3, #8
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e046      	b.n	80045ca <UART_SetConfig+0x2e6>
 800453c:	2310      	movs	r3, #16
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e042      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <UART_SetConfig+0x2c4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d13a      	bne.n	80045c4 <UART_SetConfig+0x2e0>
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800455c:	d01a      	beq.n	8004594 <UART_SetConfig+0x2b0>
 800455e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004562:	d81b      	bhi.n	800459c <UART_SetConfig+0x2b8>
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004568:	d00c      	beq.n	8004584 <UART_SetConfig+0x2a0>
 800456a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456e:	d815      	bhi.n	800459c <UART_SetConfig+0x2b8>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <UART_SetConfig+0x298>
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004578:	d008      	beq.n	800458c <UART_SetConfig+0x2a8>
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x2b8>
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e022      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e01e      	b.n	80045ca <UART_SetConfig+0x2e6>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e01a      	b.n	80045ca <UART_SetConfig+0x2e6>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e016      	b.n	80045ca <UART_SetConfig+0x2e6>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e012      	b.n	80045ca <UART_SetConfig+0x2e6>
 80045a4:	efff69f3 	.word	0xefff69f3
 80045a8:	40008000 	.word	0x40008000
 80045ac:	40013800 	.word	0x40013800
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004800 	.word	0x40004800
 80045bc:	40004c00 	.word	0x40004c00
 80045c0:	40005000 	.word	0x40005000
 80045c4:	2310      	movs	r3, #16
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a9f      	ldr	r2, [pc, #636]	; (800484c <UART_SetConfig+0x568>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d17a      	bne.n	80046ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d824      	bhi.n	8004626 <UART_SetConfig+0x342>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0x300>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004609 	.word	0x08004609
 80045e8:	08004627 	.word	0x08004627
 80045ec:	08004611 	.word	0x08004611
 80045f0:	08004627 	.word	0x08004627
 80045f4:	08004617 	.word	0x08004617
 80045f8:	08004627 	.word	0x08004627
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004627 	.word	0x08004627
 8004604:	0800461f 	.word	0x0800461f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe fd20 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 800460c:	61f8      	str	r0, [r7, #28]
        break;
 800460e:	e010      	b.n	8004632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004610:	4b8f      	ldr	r3, [pc, #572]	; (8004850 <UART_SetConfig+0x56c>)
 8004612:	61fb      	str	r3, [r7, #28]
        break;
 8004614:	e00d      	b.n	8004632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004616:	f7fe fc81 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 800461a:	61f8      	str	r0, [r7, #28]
        break;
 800461c:	e009      	b.n	8004632 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004622:	61fb      	str	r3, [r7, #28]
        break;
 8004624:	e005      	b.n	8004632 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80fb 	beq.w	8004830 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	429a      	cmp	r2, r3
 8004648:	d305      	bcc.n	8004656 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	429a      	cmp	r2, r3
 8004654:	d903      	bls.n	800465e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800465c:	e0e8      	b.n	8004830 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2200      	movs	r2, #0
 8004662:	461c      	mov	r4, r3
 8004664:	4615      	mov	r5, r2
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	022b      	lsls	r3, r5, #8
 8004670:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004674:	0222      	lsls	r2, r4, #8
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	6849      	ldr	r1, [r1, #4]
 800467a:	0849      	lsrs	r1, r1, #1
 800467c:	2000      	movs	r0, #0
 800467e:	4688      	mov	r8, r1
 8004680:	4681      	mov	r9, r0
 8004682:	eb12 0a08 	adds.w	sl, r2, r8
 8004686:	eb43 0b09 	adc.w	fp, r3, r9
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004698:	4650      	mov	r0, sl
 800469a:	4659      	mov	r1, fp
 800469c:	f7fb fd98 	bl	80001d0 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ae:	d308      	bcc.n	80046c2 <UART_SetConfig+0x3de>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d204      	bcs.n	80046c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	e0b6      	b.n	8004830 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046c8:	e0b2      	b.n	8004830 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d15e      	bne.n	8004792 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d828      	bhi.n	800472e <UART_SetConfig+0x44a>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x400>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004719 	.word	0x08004719
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800472f 	.word	0x0800472f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fca0 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 800470c:	61f8      	str	r0, [r7, #28]
        break;
 800470e:	e014      	b.n	800473a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fcb2 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8004714:	61f8      	str	r0, [r7, #28]
        break;
 8004716:	e010      	b.n	800473a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b4d      	ldr	r3, [pc, #308]	; (8004850 <UART_SetConfig+0x56c>)
 800471a:	61fb      	str	r3, [r7, #28]
        break;
 800471c:	e00d      	b.n	800473a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe fbfd 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8004722:	61f8      	str	r0, [r7, #28]
        break;
 8004724:	e009      	b.n	800473a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e005      	b.n	800473a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d077      	beq.n	8004830 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005a      	lsls	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b0f      	cmp	r3, #15
 800475a:	d916      	bls.n	800478a <UART_SetConfig+0x4a6>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004762:	d212      	bcs.n	800478a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f023 030f 	bic.w	r3, r3, #15
 800476c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	b29b      	uxth	r3, r3
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	b29a      	uxth	r2, r3
 800477a:	8afb      	ldrh	r3, [r7, #22]
 800477c:	4313      	orrs	r3, r2
 800477e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	8afa      	ldrh	r2, [r7, #22]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e052      	b.n	8004830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004790:	e04e      	b.n	8004830 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004796:	2b08      	cmp	r3, #8
 8004798:	d827      	bhi.n	80047ea <UART_SetConfig+0x506>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x4bc>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	080047eb 	.word	0x080047eb
 80047b0:	080047db 	.word	0x080047db
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	080047eb 	.word	0x080047eb
 80047bc:	080047eb 	.word	0x080047eb
 80047c0:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fe fc42 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80047c8:	61f8      	str	r0, [r7, #28]
        break;
 80047ca:	e014      	b.n	80047f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7fe fc54 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 80047d0:	61f8      	str	r0, [r7, #28]
        break;
 80047d2:	e010      	b.n	80047f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <UART_SetConfig+0x56c>)
 80047d6:	61fb      	str	r3, [r7, #28]
        break;
 80047d8:	e00d      	b.n	80047f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fe fb9f 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 80047de:	61f8      	str	r0, [r7, #28]
        break;
 80047e0:	e009      	b.n	80047f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e005      	b.n	80047f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047f4:	bf00      	nop
    }

    if (pclk != 0U)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d019      	beq.n	8004830 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	085a      	lsrs	r2, r3, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b0f      	cmp	r3, #15
 8004814:	d909      	bls.n	800482a <UART_SetConfig+0x546>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d205      	bcs.n	800482a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e002      	b.n	8004830 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800483c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004840:	4618      	mov	r0, r3
 8004842:	3728      	adds	r7, #40	; 0x28
 8004844:	46bd      	mov	sp, r7
 8004846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484a:	bf00      	nop
 800484c:	40008000 	.word	0x40008000
 8004850:	00f42400 	.word	0x00f42400

08004854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01a      	beq.n	800496a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004952:	d10a      	bne.n	800496a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a8:	f7fc fdf8 	bl	800159c <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d10e      	bne.n	80049da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f82d 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e023      	b.n	8004a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d10e      	bne.n	8004a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f817 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e00d      	b.n	8004a22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b09c      	sub	sp, #112	; 0x70
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3a:	e0a5      	b.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a42:	f000 80a1 	beq.w	8004b88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fc fda9 	bl	800159c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13e      	bne.n	8004ada <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a70:	667b      	str	r3, [r7, #100]	; 0x64
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e067      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d04f      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af6:	d147      	bne.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
 8004b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	613b      	str	r3, [r7, #16]
   return(result);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b54:	623a      	str	r2, [r7, #32]
 8004b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	69f9      	ldr	r1, [r7, #28]
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e010      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	f43f af4a 	beq.w	8004a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3770      	adds	r7, #112	; 0x70
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	f107 001c 	add.w	r0, r7, #28
 8004bc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa6f 	bl	80050b4 <USB_CoreReset>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
 8004bec:	e005      	b.n	8004bfa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c06:	b004      	add	sp, #16
 8004c08:	4770      	bx	lr

08004c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d115      	bne.n	8004c7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c5a:	2001      	movs	r0, #1
 8004c5c:	f7fc fcaa 	bl	80015b4 <HAL_Delay>
      ms++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa16 	bl	8005098 <USB_GetMode>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d01e      	beq.n	8004cb0 <USB_SetCurrentMode+0x84>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b31      	cmp	r3, #49	; 0x31
 8004c76:	d9f0      	bls.n	8004c5a <USB_SetCurrentMode+0x2e>
 8004c78:	e01a      	b.n	8004cb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d115      	bne.n	8004cac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	f7fc fc91 	bl	80015b4 <HAL_Delay>
      ms++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f9fd 	bl	8005098 <USB_GetMode>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <USB_SetCurrentMode+0x84>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b31      	cmp	r3, #49	; 0x31
 8004ca8:	d9f0      	bls.n	8004c8c <USB_SetCurrentMode+0x60>
 8004caa:	e001      	b.n	8004cb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e005      	b.n	8004cbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b32      	cmp	r3, #50	; 0x32
 8004cb4:	d101      	bne.n	8004cba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e009      	b.n	8004cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3340      	adds	r3, #64	; 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0e      	cmp	r3, #14
 8004cfc:	d9f2      	bls.n	8004ce4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11c      	bne.n	8004d3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e005      	b.n	8004d4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	461a      	mov	r2, r3
 8004d66:	680b      	ldr	r3, [r1, #0]
 8004d68:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d6a:	2103      	movs	r1, #3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f959 	bl	8005024 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d72:	2110      	movs	r1, #16
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8f1 	bl	8004f5c <USB_FlushTxFifo>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f91d 	bl	8004fc4 <USB_FlushRxFifo>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	461a      	mov	r2, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	461a      	mov	r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e043      	b.n	8004e46 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd4:	d118      	bne.n	8004e08 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	461a      	mov	r2, r3
 8004dea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e013      	b.n	8004e1a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e008      	b.n	8004e1a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	3301      	adds	r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3b7      	bcc.n	8004dbe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e043      	b.n	8004edc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6a:	d118      	bne.n	8004e9e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e013      	b.n	8004eb0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	461a      	mov	r2, r3
 8004e96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	e008      	b.n	8004eb0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ed4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d3b7      	bcc.n	8004e54 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f043 0210 	orr.w	r2, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <USB_DevInit+0x294>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f043 0208 	orr.w	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f3e:	f043 0304 	orr.w	r3, r3, #4
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f52:	b004      	add	sp, #16
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	803c3800 	.word	0x803c3800

08004f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <USB_FlushTxFifo+0x64>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e01b      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	daf2      	bge.n	8004f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	019b      	lsls	r3, r3, #6
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <USB_FlushTxFifo+0x64>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e006      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d0f0      	beq.n	8004f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a11      	ldr	r2, [pc, #68]	; (8005020 <USB_FlushRxFifo+0x5c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e018      	b.n	8005014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	daf2      	bge.n	8004fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <USB_FlushRxFifo+0x5c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e006      	b.n	8005014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d0f0      	beq.n	8004ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	00030d40 	.word	0x00030d40

08005024 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0301 	and.w	r3, r3, #1
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a13      	ldr	r2, [pc, #76]	; (8005118 <USB_CoreReset+0x64>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e01b      	b.n	800510a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	daf2      	bge.n	80050c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f043 0201 	orr.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <USB_CoreReset+0x64>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d0f0      	beq.n	80050ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	00030d40 	.word	0x00030d40

0800511c <__NVIC_SetPriority>:
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db0a      	blt.n	8005146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	490c      	ldr	r1, [pc, #48]	; (8005168 <__NVIC_SetPriority+0x4c>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	440b      	add	r3, r1
 8005140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005144:	e00a      	b.n	800515c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <__NVIC_SetPriority+0x50>)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3b04      	subs	r3, #4
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	440b      	add	r3, r1
 800515a:	761a      	strb	r2, [r3, #24]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000e100 	.word	0xe000e100
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <SysTick_Handler+0x1c>)
 8005176:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005178:	f001 fcfe 	bl	8006b78 <xTaskGetSchedulerState>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d001      	beq.n	8005186 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005182:	f002 fbe9 	bl	8007958 <xPortSysTickHandler>
  }
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	e000e010 	.word	0xe000e010

08005190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005194:	2100      	movs	r1, #0
 8005196:	f06f 0004 	mvn.w	r0, #4
 800519a:	f7ff ffbf 	bl	800511c <__NVIC_SetPriority>
#endif
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051aa:	f3ef 8305 	mrs	r3, IPSR
 80051ae:	603b      	str	r3, [r7, #0]
  return(result);
 80051b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051b6:	f06f 0305 	mvn.w	r3, #5
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	e00c      	b.n	80051d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <osKernelInitialize+0x44>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d105      	bne.n	80051d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051c6:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <osKernelInitialize+0x44>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e002      	b.n	80051d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051d8:	687b      	ldr	r3, [r7, #4]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	200007f4 	.word	0x200007f4

080051ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f2:	f3ef 8305 	mrs	r3, IPSR
 80051f6:	603b      	str	r3, [r7, #0]
  return(result);
 80051f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e010      	b.n	8005228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <osKernelStart+0x48>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d109      	bne.n	8005222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800520e:	f7ff ffbf 	bl	8005190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <osKernelStart+0x48>)
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005218:	f001 f866 	bl	80062e8 <vTaskStartScheduler>
      stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e002      	b.n	8005228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200007f4 	.word	0x200007f4

08005238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af04      	add	r7, sp, #16
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005248:	f3ef 8305 	mrs	r3, IPSR
 800524c:	617b      	str	r3, [r7, #20]
  return(result);
 800524e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005250:	2b00      	cmp	r3, #0
 8005252:	d17e      	bne.n	8005352 <osThreadNew+0x11a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d07b      	beq.n	8005352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800525e:	2318      	movs	r3, #24
 8005260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d045      	beq.n	80052fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <osThreadNew+0x48>
        name = attr->name;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <osThreadNew+0x6e>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b38      	cmp	r3, #56	; 0x38
 8005298:	d805      	bhi.n	80052a6 <osThreadNew+0x6e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <osThreadNew+0x72>
        return (NULL);
 80052a6:	2300      	movs	r3, #0
 80052a8:	e054      	b.n	8005354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <osThreadNew+0xa8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b5b      	cmp	r3, #91	; 0x5b
 80052c8:	d90a      	bls.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osThreadNew+0xa8>
        mem = 1;
 80052da:	2301      	movs	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e010      	b.n	8005302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <osThreadNew+0xca>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <osThreadNew+0xca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <osThreadNew+0xca>
          mem = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e001      	b.n	8005302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005310:	9202      	str	r2, [sp, #8]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fe0c 	bl	8005f3c <xTaskCreateStatic>
 8005324:	4603      	mov	r3, r0
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	e013      	b.n	8005352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	b29a      	uxth	r2, r3
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fe57 	bl	8005ff6 <xTaskCreate>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <osThreadNew+0x11a>
            hTask = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	; 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005364:	f3ef 8305 	mrs	r3, IPSR
 8005368:	60bb      	str	r3, [r7, #8]
  return(result);
 800536a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <osDelay+0x1c>
    stat = osErrorISR;
 8005370:	f06f 0305 	mvn.w	r3, #5
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e007      	b.n	8005388 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 ff7c 	bl	8006280 <vTaskDelay>
    }
  }

  return (stat);
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80053a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <vApplicationGetIdleTaskMemory+0x30>)
 80053aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2280      	movs	r2, #128	; 0x80
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200007f8 	.word	0x200007f8
 80053c4:	20000854 	.word	0x20000854

080053c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80053d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <vApplicationGetTimerTaskMemory+0x30>)
 80053de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000a54 	.word	0x20000a54
 80053f8:	20000ab0 	.word	0x20000ab0

080053fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 0208 	add.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 0208 	add.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f103 0208 	add.w	r2, r3, #8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b4:	d103      	bne.n	80054be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00c      	b.n	80054d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3308      	adds	r3, #8
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <vListInsert+0x2e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d2f6      	bcs.n	80054c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6852      	ldr	r2, [r2, #4]
 8005530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d103      	bne.n	8005544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1e5a      	subs	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800558e:	f002 f951 	bl	8007834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	441a      	add	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	3b01      	subs	r3, #1
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d114      	bne.n	800560e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3310      	adds	r3, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f903 	bl	80067fc <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <xQueueGenericReset+0xcc>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e009      	b.n	8005622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fef2 	bl	80053fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff feed 	bl	80053fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005622:	f002 f937 	bl	8007894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xQueueGenericCreateStatic+0x52>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xQueueGenericCreateStatic+0x56>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericCreateStatic+0x58>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueGenericCreateStatic+0x7e>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericCreateStatic+0x82>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericCreateStatic+0x84>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056d2:	2350      	movs	r3, #80	; 0x50
 80056d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d00a      	beq.n	80056f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f805 	bl	8005724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d103      	bne.n	8005740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e002      	b.n	8005746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005752:	2101      	movs	r1, #1
 8005754:	69b8      	ldr	r0, [r7, #24]
 8005756:	f7ff ff05 	bl	8005564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08e      	sub	sp, #56	; 0x38
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGenericSend+0x32>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <xQueueGenericSend+0x40>
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <xQueueGenericSend+0x44>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <xQueueGenericSend+0x46>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xQueueGenericSend+0x60>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d103      	bne.n	80057da <xQueueGenericSend+0x6e>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <xQueueGenericSend+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueGenericSend+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueGenericSend+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	623b      	str	r3, [r7, #32]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057fa:	f001 f9bd 	bl	8006b78 <xTaskGetSchedulerState>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xQueueGenericSend+0x9e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <xQueueGenericSend+0xa2>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <xQueueGenericSend+0xa4>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <xQueueGenericSend+0xbe>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	61fb      	str	r3, [r7, #28]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800582a:	f002 f803 	bl	8007834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <xQueueGenericSend+0xd4>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d129      	bne.n	8005894 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fa0b 	bl	8005c60 <prvCopyDataToQueue>
 800584a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	3324      	adds	r3, #36	; 0x24
 8005858:	4618      	mov	r0, r3
 800585a:	f000 ffcf 	bl	80067fc <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005864:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <xQueueGenericSend+0x1f8>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	e00a      	b.n	800588c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <xQueueGenericSend+0x1f8>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800588c:	f002 f802 	bl	8007894 <vPortExitCritical>
				return pdPASS;
 8005890:	2301      	movs	r3, #1
 8005892:	e063      	b.n	800595c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800589a:	f001 fffb 	bl	8007894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	e05c      	b.n	800595c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f809 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058b6:	f001 ffed 	bl	8007894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ba:	f000 fd7b 	bl	80063b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058be:	f001 ffb9 	bl	8007834 <vPortEnterCritical>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c8:	b25b      	sxtb	r3, r3
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ce:	d103      	bne.n	80058d8 <xQueueGenericSend+0x16c>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSend+0x182>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ee:	f001 ffd1 	bl	8007894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fff8 	bl	80068f0 <xTaskCheckForTimeOut>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d124      	bne.n	8005950 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005908:	f000 faa2 	bl	8005e50 <prvIsQueueFull>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	3310      	adds	r3, #16
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 ff1e 	bl	800675c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005922:	f000 fa2d 	bl	8005d80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005926:	f000 fd53 	bl	80063d0 <xTaskResumeAll>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f47f af7c 	bne.w	800582a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xQueueGenericSend+0x1f8>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e772      	b.n	800582a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005946:	f000 fa1b 	bl	8005d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800594a:	f000 fd41 	bl	80063d0 <xTaskResumeAll>
 800594e:	e76c      	b.n	800582a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005952:	f000 fa15 	bl	8005d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005956:	f000 fd3b 	bl	80063d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800595a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800595c:	4618      	mov	r0, r3
 800595e:	3738      	adds	r7, #56	; 0x38
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b090      	sub	sp, #64	; 0x40
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d103      	bne.n	80059a4 <xQueueGenericSendFromISR+0x3c>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <xQueueGenericSendFromISR+0x40>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <xQueueGenericSendFromISR+0x42>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <xQueueGenericSendFromISR+0x6a>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <xQueueGenericSendFromISR+0x6e>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xQueueGenericSendFromISR+0x70>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	623b      	str	r3, [r7, #32]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f2:	f002 f801 	bl	80079f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059f6:	f3ef 8211 	mrs	r2, BASEPRI
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	61fa      	str	r2, [r7, #28]
 8005a0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <xQueueGenericSendFromISR+0xbc>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d12f      	bne.n	8005a84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a3a:	f000 f911 	bl	8005c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a46:	d112      	bne.n	8005a6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fed1 	bl	80067fc <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e007      	b.n	8005a7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a72:	3301      	adds	r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b25a      	sxtb	r2, r3
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a82:	e001      	b.n	8005a88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	; 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <xQueueReceive+0x30>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	623b      	str	r3, [r7, #32]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <xQueueReceive+0x3e>
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <xQueueReceive+0x42>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <xQueueReceive+0x44>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xQueueReceive+0x5e>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	61fb      	str	r3, [r7, #28]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afe:	f001 f83b 	bl	8006b78 <xTaskGetSchedulerState>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <xQueueReceive+0x6e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <xQueueReceive+0x72>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueReceive+0x74>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueReceive+0x8e>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61bb      	str	r3, [r7, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b2e:	f001 fe81 	bl	8007834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01f      	beq.n	8005b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 f8f7 	bl	8005d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00f      	beq.n	8005b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	3310      	adds	r3, #16
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fe4e 	bl	80067fc <xTaskRemoveFromEventList>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <xQueueReceive+0x1bc>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b76:	f001 fe8d 	bl	8007894 <vPortExitCritical>
				return pdPASS;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e069      	b.n	8005c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b84:	f001 fe86 	bl	8007894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e062      	b.n	8005c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b92:	f107 0310 	add.w	r3, r7, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fe94 	bl	80068c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba0:	f001 fe78 	bl	8007894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba4:	f000 fc06 	bl	80063b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ba8:	f001 fe44 	bl	8007834 <vPortEnterCritical>
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb8:	d103      	bne.n	8005bc2 <xQueueReceive+0x122>
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bce:	d103      	bne.n	8005bd8 <xQueueReceive+0x138>
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd8:	f001 fe5c 	bl	8007894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bdc:	1d3a      	adds	r2, r7, #4
 8005bde:	f107 0310 	add.w	r3, r7, #16
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fe83 	bl	80068f0 <xTaskCheckForTimeOut>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d123      	bne.n	8005c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf2:	f000 f917 	bl	8005e24 <prvIsQueueEmpty>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	3324      	adds	r3, #36	; 0x24
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fda9 	bl	800675c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0c:	f000 f8b8 	bl	8005d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c10:	f000 fbde 	bl	80063d0 <xTaskResumeAll>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d189      	bne.n	8005b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <xQueueReceive+0x1bc>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e780      	b.n	8005b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2e:	f000 f8a7 	bl	8005d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c32:	f000 fbcd 	bl	80063d0 <xTaskResumeAll>
 8005c36:	e77a      	b.n	8005b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3a:	f000 f8a1 	bl	8005d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c3e:	f000 fbc7 	bl	80063d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c44:	f000 f8ee 	bl	8005e24 <prvIsQueueEmpty>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f43f af6f 	beq.w	8005b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3730      	adds	r7, #48	; 0x30
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d14d      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ff92 	bl	8006bb4 <xTaskPriorityDisinherit>
 8005c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	e043      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d119      	bne.n	8005cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6858      	ldr	r0, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f002 f8f2 	bl	8007e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d32b      	bcc.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e026      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68d8      	ldr	r0, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	f002 f8d8 	bl	8007e94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	425b      	negs	r3, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d207      	bcs.n	8005d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	425b      	negs	r3, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d105      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	441a      	add	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d303      	bcc.n	8005d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	461a      	mov	r2, r3
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f002 f88e 	bl	8007e94 <memcpy>
	}
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d88:	f001 fd54 	bl	8007834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d94:	e011      	b.n	8005dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d012      	beq.n	8005dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3324      	adds	r3, #36	; 0x24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd2a 	bl	80067fc <xTaskRemoveFromEventList>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dae:	f000 fe01 	bl	80069b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dce9      	bgt.n	8005d96 <prvUnlockQueue+0x16>
 8005dc2:	e000      	b.n	8005dc6 <prvUnlockQueue+0x46>
					break;
 8005dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fd61 	bl	8007894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dd2:	f001 fd2f 	bl	8007834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dde:	e011      	b.n	8005e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3310      	adds	r3, #16
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fd05 	bl	80067fc <xTaskRemoveFromEventList>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005df8:	f000 fddc 	bl	80069b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dce9      	bgt.n	8005de0 <prvUnlockQueue+0x60>
 8005e0c:	e000      	b.n	8005e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	22ff      	movs	r2, #255	; 0xff
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e18:	f001 fd3c 	bl	8007894 <vPortExitCritical>
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e2c:	f001 fd02 	bl	8007834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e001      	b.n	8005e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f001 fd27 	bl	8007894 <vPortExitCritical>

	return xReturn;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e58:	f001 fcec 	bl	8007834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d102      	bne.n	8005e6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e001      	b.n	8005e72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 fd0f 	bl	8007894 <vPortExitCritical>

	return xReturn;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e014      	b.n	8005eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e90:	4a0f      	ldr	r2, [pc, #60]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e9c:	490c      	ldr	r1, [pc, #48]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <vQueueAddToRegistry+0x50>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eb2:	e006      	b.n	8005ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b07      	cmp	r3, #7
 8005ebe:	d9e7      	bls.n	8005e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000eb0 	.word	0x20000eb0

08005ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ee4:	f001 fca6 	bl	8007834 <vPortEnterCritical>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef4:	d103      	bne.n	8005efe <vQueueWaitForMessageRestricted+0x2a>
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f0a:	d103      	bne.n	8005f14 <vQueueWaitForMessageRestricted+0x40>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	f001 fcbe 	bl	8007894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3324      	adds	r3, #36	; 0x24
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fc3b 	bl	80067a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f7ff ff26 	bl	8005d80 <prvUnlockQueue>
	}
 8005f34:	bf00      	nop
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	; 0x38
 8005f40:	af04      	add	r7, sp, #16
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	623b      	str	r3, [r7, #32]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	61fb      	str	r3, [r7, #28]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f82:	235c      	movs	r3, #92	; 0x5c
 8005f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b5c      	cmp	r3, #92	; 0x5c
 8005f8a:	d00a      	beq.n	8005fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61bb      	str	r3, [r7, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01e      	beq.n	8005fe8 <xTaskCreateStatic+0xac>
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f850 	bl	8006080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe2:	f000 f8dd 	bl	80061a0 <prvAddNewTaskToReadyList>
 8005fe6:	e001      	b.n	8005fec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fec:	697b      	ldr	r3, [r7, #20]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b08c      	sub	sp, #48	; 0x30
 8005ffa:	af04      	add	r7, sp, #16
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fd34 	bl	8007a78 <pvPortMalloc>
 8006010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006018:	205c      	movs	r0, #92	; 0x5c
 800601a:	f001 fd2d 	bl	8007a78 <pvPortMalloc>
 800601e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
 800602c:	e005      	b.n	800603a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800602e:	6978      	ldr	r0, [r7, #20]
 8006030:	f001 fdee 	bl	8007c10 <vPortFree>
 8006034:	e001      	b.n	800603a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d017      	beq.n	8006070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	2300      	movs	r3, #0
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f80e 	bl	8006080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006064:	69f8      	ldr	r0, [r7, #28]
 8006066:	f000 f89b 	bl	80061a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800606a:	2301      	movs	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e002      	b.n	8006076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006076:	69bb      	ldr	r3, [r7, #24]
	}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	461a      	mov	r2, r3
 8006098:	21a5      	movs	r1, #165	; 0xa5
 800609a:	f001 ff09 	bl	8007eb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060a8:	3b01      	subs	r3, #1
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f023 0307 	bic.w	r3, r3, #7
 80060b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	617b      	str	r3, [r7, #20]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01f      	beq.n	800611e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e012      	b.n	800610a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	7819      	ldrb	r1, [r3, #0]
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	3334      	adds	r3, #52	; 0x34
 80060f4:	460a      	mov	r2, r1
 80060f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d9e9      	bls.n	80060e4 <prvInitialiseNewTask+0x64>
 8006110:	e000      	b.n	8006114 <prvInitialiseNewTask+0x94>
			{
				break;
 8006112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611c:	e003      	b.n	8006126 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	2b37      	cmp	r3, #55	; 0x37
 800612a:	d901      	bls.n	8006130 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800612c:	2337      	movs	r3, #55	; 0x37
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f978 	bl	800543c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	3318      	adds	r3, #24
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f973 	bl	800543c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	69b8      	ldr	r0, [r7, #24]
 8006180:	f001 fa28 	bl	80075d4 <pxPortInitialiseStack>
 8006184:	4602      	mov	r2, r0
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006196:	bf00      	nop
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061a8:	f001 fb44 	bl	8007834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061ac:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <prvAddNewTaskToReadyList+0xc4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <prvAddNewTaskToReadyList+0xc4>)
 80061b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061b6:	4b2c      	ldr	r3, [pc, #176]	; (8006268 <prvAddNewTaskToReadyList+0xc8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061be:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <prvAddNewTaskToReadyList+0xc8>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061c4:	4b27      	ldr	r3, [pc, #156]	; (8006264 <prvAddNewTaskToReadyList+0xc4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d110      	bne.n	80061ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061cc:	f000 fc16 	bl	80069fc <prvInitialiseTaskLists>
 80061d0:	e00d      	b.n	80061ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <prvAddNewTaskToReadyList+0xcc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061da:	4b23      	ldr	r3, [pc, #140]	; (8006268 <prvAddNewTaskToReadyList+0xc8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d802      	bhi.n	80061ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <prvAddNewTaskToReadyList+0xc8>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <prvAddNewTaskToReadyList+0xd0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <prvAddNewTaskToReadyList+0xd0>)
 80061f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <prvAddNewTaskToReadyList+0xd0>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <prvAddNewTaskToReadyList+0xd4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d903      	bls.n	8006214 <prvAddNewTaskToReadyList+0x74>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	4a18      	ldr	r2, [pc, #96]	; (8006274 <prvAddNewTaskToReadyList+0xd4>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <prvAddNewTaskToReadyList+0xd8>)
 8006222:	441a      	add	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f7ff f913 	bl	8005456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006230:	f001 fb30 	bl	8007894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006234:	4b0d      	ldr	r3, [pc, #52]	; (800626c <prvAddNewTaskToReadyList+0xcc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <prvAddNewTaskToReadyList+0xc8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	429a      	cmp	r2, r3
 8006248:	d207      	bcs.n	800625a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <prvAddNewTaskToReadyList+0xdc>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200013c4 	.word	0x200013c4
 8006268:	20000ef0 	.word	0x20000ef0
 800626c:	200013d0 	.word	0x200013d0
 8006270:	200013e0 	.word	0x200013e0
 8006274:	200013cc 	.word	0x200013cc
 8006278:	20000ef4 	.word	0x20000ef4
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d017      	beq.n	80062c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <vTaskDelay+0x60>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <vTaskDelay+0x30>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	60bb      	str	r3, [r7, #8]
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062b0:	f000 f880 	bl	80063b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b4:	2100      	movs	r1, #0
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fdea 	bl	8006e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062bc:	f000 f888 	bl	80063d0 <xTaskResumeAll>
 80062c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d107      	bne.n	80062d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <vTaskDelay+0x64>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200013ec 	.word	0x200013ec
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062f6:	463a      	mov	r2, r7
 80062f8:	1d39      	adds	r1, r7, #4
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff f848 	bl	8005394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	9202      	str	r2, [sp, #8]
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	2300      	movs	r3, #0
 8006314:	460a      	mov	r2, r1
 8006316:	4921      	ldr	r1, [pc, #132]	; (800639c <vTaskStartScheduler+0xb4>)
 8006318:	4821      	ldr	r0, [pc, #132]	; (80063a0 <vTaskStartScheduler+0xb8>)
 800631a:	f7ff fe0f 	bl	8005f3c <xTaskCreateStatic>
 800631e:	4603      	mov	r3, r0
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <vTaskStartScheduler+0xbc>)
 8006322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006324:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <vTaskStartScheduler+0xbc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800632c:	2301      	movs	r3, #1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e001      	b.n	8006336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d102      	bne.n	8006342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800633c:	f000 fdfc 	bl	8006f38 <xTimerCreateTimerTask>
 8006340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d116      	bne.n	8006376 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	613b      	str	r3, [r7, #16]
}
 800635a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800635c:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <vTaskStartScheduler+0xc0>)
 800635e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006362:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <vTaskStartScheduler+0xc4>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <vTaskStartScheduler+0xc8>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006370:	f001 f9be 	bl	80076f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006374:	e00e      	b.n	8006394 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800637c:	d10a      	bne.n	8006394 <vTaskStartScheduler+0xac>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <vTaskStartScheduler+0xaa>
}
 8006394:	bf00      	nop
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	08007f34 	.word	0x08007f34
 80063a0:	080069cd 	.word	0x080069cd
 80063a4:	200013e8 	.word	0x200013e8
 80063a8:	200013e4 	.word	0x200013e4
 80063ac:	200013d0 	.word	0x200013d0
 80063b0:	200013c8 	.word	0x200013c8

080063b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <vTaskSuspendAll+0x18>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	4a03      	ldr	r2, [pc, #12]	; (80063cc <vTaskSuspendAll+0x18>)
 80063c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	200013ec 	.word	0x200013ec

080063d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063de:	4b42      	ldr	r3, [pc, #264]	; (80064e8 <xTaskResumeAll+0x118>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <xTaskResumeAll+0x2c>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	603b      	str	r3, [r7, #0]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063fc:	f001 fa1a 	bl	8007834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006400:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <xTaskResumeAll+0x118>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3b01      	subs	r3, #1
 8006406:	4a38      	ldr	r2, [pc, #224]	; (80064e8 <xTaskResumeAll+0x118>)
 8006408:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <xTaskResumeAll+0x118>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d162      	bne.n	80064d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <xTaskResumeAll+0x11c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d05e      	beq.n	80064d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641a:	e02f      	b.n	800647c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641c:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <xTaskResumeAll+0x120>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3318      	adds	r3, #24
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff f871 	bl	8005510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f86c 	bl	8005510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4b2d      	ldr	r3, [pc, #180]	; (80064f4 <xTaskResumeAll+0x124>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d903      	bls.n	800644c <xTaskResumeAll+0x7c>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <xTaskResumeAll+0x124>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <xTaskResumeAll+0x128>)
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7fe fff7 	bl	8005456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4b23      	ldr	r3, [pc, #140]	; (80064fc <xTaskResumeAll+0x12c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006476:	4b22      	ldr	r3, [pc, #136]	; (8006500 <xTaskResumeAll+0x130>)
 8006478:	2201      	movs	r2, #1
 800647a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800647c:	4b1c      	ldr	r3, [pc, #112]	; (80064f0 <xTaskResumeAll+0x120>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1cb      	bne.n	800641c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800648a:	f000 fb55 	bl	8006b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <xTaskResumeAll+0x134>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800649a:	f000 f847 	bl	800652c <xTaskIncrementTick>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064a4:	4b16      	ldr	r3, [pc, #88]	; (8006500 <xTaskResumeAll+0x130>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f1      	bne.n	800649a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <xTaskResumeAll+0x134>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <xTaskResumeAll+0x130>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <xTaskResumeAll+0x138>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064d8:	f001 f9dc 	bl	8007894 <vPortExitCritical>

	return xAlreadyYielded;
 80064dc:	68bb      	ldr	r3, [r7, #8]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200013ec 	.word	0x200013ec
 80064ec:	200013c4 	.word	0x200013c4
 80064f0:	20001384 	.word	0x20001384
 80064f4:	200013cc 	.word	0x200013cc
 80064f8:	20000ef4 	.word	0x20000ef4
 80064fc:	20000ef0 	.word	0x20000ef0
 8006500:	200013d8 	.word	0x200013d8
 8006504:	200013d4 	.word	0x200013d4
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <xTaskGetTickCount+0x1c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006518:	687b      	ldr	r3, [r7, #4]
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	200013c8 	.word	0x200013c8

0800652c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006536:	4b4f      	ldr	r3, [pc, #316]	; (8006674 <xTaskIncrementTick+0x148>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 808f 	bne.w	800665e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006540:	4b4d      	ldr	r3, [pc, #308]	; (8006678 <xTaskIncrementTick+0x14c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3301      	adds	r3, #1
 8006546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006548:	4a4b      	ldr	r2, [pc, #300]	; (8006678 <xTaskIncrementTick+0x14c>)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d120      	bne.n	8006596 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006554:	4b49      	ldr	r3, [pc, #292]	; (800667c <xTaskIncrementTick+0x150>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <xTaskIncrementTick+0x48>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	603b      	str	r3, [r7, #0]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <xTaskIncrementTick+0x46>
 8006574:	4b41      	ldr	r3, [pc, #260]	; (800667c <xTaskIncrementTick+0x150>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	4b41      	ldr	r3, [pc, #260]	; (8006680 <xTaskIncrementTick+0x154>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a3f      	ldr	r2, [pc, #252]	; (800667c <xTaskIncrementTick+0x150>)
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	4a3f      	ldr	r2, [pc, #252]	; (8006680 <xTaskIncrementTick+0x154>)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	4b3e      	ldr	r3, [pc, #248]	; (8006684 <xTaskIncrementTick+0x158>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	4a3d      	ldr	r2, [pc, #244]	; (8006684 <xTaskIncrementTick+0x158>)
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	f000 fad1 	bl	8006b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <xTaskIncrementTick+0x15c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	429a      	cmp	r2, r3
 800659e:	d349      	bcc.n	8006634 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a0:	4b36      	ldr	r3, [pc, #216]	; (800667c <xTaskIncrementTick+0x150>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065aa:	4b37      	ldr	r3, [pc, #220]	; (8006688 <xTaskIncrementTick+0x15c>)
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b0:	601a      	str	r2, [r3, #0]
					break;
 80065b2:	e03f      	b.n	8006634 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b4:	4b31      	ldr	r3, [pc, #196]	; (800667c <xTaskIncrementTick+0x150>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d203      	bcs.n	80065d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065cc:	4a2e      	ldr	r2, [pc, #184]	; (8006688 <xTaskIncrementTick+0x15c>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065d2:	e02f      	b.n	8006634 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe ff99 	bl	8005510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3318      	adds	r3, #24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe ff90 	bl	8005510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <xTaskIncrementTick+0x160>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d903      	bls.n	8006604 <xTaskIncrementTick+0xd8>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <xTaskIncrementTick+0x160>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <xTaskIncrementTick+0x164>)
 8006612:	441a      	add	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3304      	adds	r3, #4
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f7fe ff1b 	bl	8005456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <xTaskIncrementTick+0x168>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	429a      	cmp	r2, r3
 800662c:	d3b8      	bcc.n	80065a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800662e:	2301      	movs	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006632:	e7b5      	b.n	80065a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006634:	4b17      	ldr	r3, [pc, #92]	; (8006694 <xTaskIncrementTick+0x168>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	4915      	ldr	r1, [pc, #84]	; (8006690 <xTaskIncrementTick+0x164>)
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d901      	bls.n	8006650 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <xTaskIncrementTick+0x16c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e004      	b.n	8006668 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <xTaskIncrementTick+0x170>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a0d      	ldr	r2, [pc, #52]	; (800669c <xTaskIncrementTick+0x170>)
 8006666:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006668:	697b      	ldr	r3, [r7, #20]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200013ec 	.word	0x200013ec
 8006678:	200013c8 	.word	0x200013c8
 800667c:	2000137c 	.word	0x2000137c
 8006680:	20001380 	.word	0x20001380
 8006684:	200013dc 	.word	0x200013dc
 8006688:	200013e4 	.word	0x200013e4
 800668c:	200013cc 	.word	0x200013cc
 8006690:	20000ef4 	.word	0x20000ef4
 8006694:	20000ef0 	.word	0x20000ef0
 8006698:	200013d8 	.word	0x200013d8
 800669c:	200013d4 	.word	0x200013d4

080066a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066a6:	4b28      	ldr	r3, [pc, #160]	; (8006748 <vTaskSwitchContext+0xa8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <vTaskSwitchContext+0xac>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066b4:	e041      	b.n	800673a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066b6:	4b25      	ldr	r3, [pc, #148]	; (800674c <vTaskSwitchContext+0xac>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <vTaskSwitchContext+0xb0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e010      	b.n	80066e6 <vTaskSwitchContext+0x46>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	607b      	str	r3, [r7, #4]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskSwitchContext+0x3e>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	491b      	ldr	r1, [pc, #108]	; (8006754 <vTaskSwitchContext+0xb4>)
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0e4      	beq.n	80066c4 <vTaskSwitchContext+0x24>
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4a13      	ldr	r2, [pc, #76]	; (8006754 <vTaskSwitchContext+0xb4>)
 8006706:	4413      	add	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3308      	adds	r3, #8
 800671c:	429a      	cmp	r2, r3
 800671e:	d104      	bne.n	800672a <vTaskSwitchContext+0x8a>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4a09      	ldr	r2, [pc, #36]	; (8006758 <vTaskSwitchContext+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4a06      	ldr	r2, [pc, #24]	; (8006750 <vTaskSwitchContext+0xb0>)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6013      	str	r3, [r2, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	200013ec 	.word	0x200013ec
 800674c:	200013d8 	.word	0x200013d8
 8006750:	200013cc 	.word	0x200013cc
 8006754:	20000ef4 	.word	0x20000ef4
 8006758:	20000ef0 	.word	0x20000ef0

0800675c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60fb      	str	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <vTaskPlaceOnEventList+0x44>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3318      	adds	r3, #24
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fe fe87 	bl	800549e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006790:	2101      	movs	r1, #1
 8006792:	6838      	ldr	r0, [r7, #0]
 8006794:	f000 fb7c 	bl	8006e90 <prvAddCurrentTaskToDelayedList>
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000ef0 	.word	0x20000ef0

080067a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	617b      	str	r3, [r7, #20]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3318      	adds	r3, #24
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7fe fe3e 	bl	8005456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f000 fb51 	bl	8006e90 <prvAddCurrentTaskToDelayedList>
	}
 80067ee:	bf00      	nop
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000ef0 	.word	0x20000ef0

080067fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60fb      	str	r3, [r7, #12]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	3318      	adds	r3, #24
 800682c:	4618      	mov	r0, r3
 800682e:	f7fe fe6f 	bl	8005510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006832:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <xTaskRemoveFromEventList+0xb0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d11d      	bne.n	8006876 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3304      	adds	r3, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe fe66 	bl	8005510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <xTaskRemoveFromEventList+0xb4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d903      	bls.n	8006858 <xTaskRemoveFromEventList+0x5c>
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <xTaskRemoveFromEventList+0xb4>)
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <xTaskRemoveFromEventList+0xb8>)
 8006866:	441a      	add	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f7fe fdf1 	bl	8005456 <vListInsertEnd>
 8006874:	e005      	b.n	8006882 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3318      	adds	r3, #24
 800687a:	4619      	mov	r1, r3
 800687c:	480e      	ldr	r0, [pc, #56]	; (80068b8 <xTaskRemoveFromEventList+0xbc>)
 800687e:	f7fe fdea 	bl	8005456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <xTaskRemoveFromEventList+0xc0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	429a      	cmp	r2, r3
 800688e:	d905      	bls.n	800689c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <xTaskRemoveFromEventList+0xc4>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e001      	b.n	80068a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068a0:	697b      	ldr	r3, [r7, #20]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200013ec 	.word	0x200013ec
 80068b0:	200013cc 	.word	0x200013cc
 80068b4:	20000ef4 	.word	0x20000ef4
 80068b8:	20001384 	.word	0x20001384
 80068bc:	20000ef0 	.word	0x20000ef0
 80068c0:	200013d8 	.word	0x200013d8

080068c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <vTaskInternalSetTimeOutState+0x24>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <vTaskInternalSetTimeOutState+0x28>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200013dc 	.word	0x200013dc
 80068ec:	200013c8 	.word	0x200013c8

080068f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	613b      	str	r3, [r7, #16]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006932:	f000 ff7f 	bl	8007834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <xTaskCheckForTimeOut+0xbc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694e:	d102      	bne.n	8006956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e023      	b.n	800699e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <xTaskCheckForTimeOut+0xc0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d007      	beq.n	8006972 <xTaskCheckForTimeOut+0x82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	d302      	bcc.n	8006972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800696c:	2301      	movs	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e015      	b.n	800699e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	429a      	cmp	r2, r3
 800697a:	d20b      	bcs.n	8006994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1ad2      	subs	r2, r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ff9b 	bl	80068c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e004      	b.n	800699e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800699a:	2301      	movs	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800699e:	f000 ff79 	bl	8007894 <vPortExitCritical>

	return xReturn;
 80069a2:	69fb      	ldr	r3, [r7, #28]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200013c8 	.word	0x200013c8
 80069b0:	200013dc 	.word	0x200013dc

080069b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <vTaskMissedYield+0x14>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	200013d8 	.word	0x200013d8

080069cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069d4:	f000 f852 	bl	8006a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <prvIdleTask+0x28>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d9f9      	bls.n	80069d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <prvIdleTask+0x2c>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069f0:	e7f0      	b.n	80069d4 <prvIdleTask+0x8>
 80069f2:	bf00      	nop
 80069f4:	20000ef4 	.word	0x20000ef4
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a02:	2300      	movs	r3, #0
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	e00c      	b.n	8006a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4a12      	ldr	r2, [pc, #72]	; (8006a5c <prvInitialiseTaskLists+0x60>)
 8006a14:	4413      	add	r3, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fcf0 	bl	80053fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b37      	cmp	r3, #55	; 0x37
 8006a26:	d9ef      	bls.n	8006a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a28:	480d      	ldr	r0, [pc, #52]	; (8006a60 <prvInitialiseTaskLists+0x64>)
 8006a2a:	f7fe fce7 	bl	80053fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a2e:	480d      	ldr	r0, [pc, #52]	; (8006a64 <prvInitialiseTaskLists+0x68>)
 8006a30:	f7fe fce4 	bl	80053fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a34:	480c      	ldr	r0, [pc, #48]	; (8006a68 <prvInitialiseTaskLists+0x6c>)
 8006a36:	f7fe fce1 	bl	80053fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a3a:	480c      	ldr	r0, [pc, #48]	; (8006a6c <prvInitialiseTaskLists+0x70>)
 8006a3c:	f7fe fcde 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a40:	480b      	ldr	r0, [pc, #44]	; (8006a70 <prvInitialiseTaskLists+0x74>)
 8006a42:	f7fe fcdb 	bl	80053fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <prvInitialiseTaskLists+0x78>)
 8006a48:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <prvInitialiseTaskLists+0x64>)
 8006a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <prvInitialiseTaskLists+0x7c>)
 8006a4e:	4a05      	ldr	r2, [pc, #20]	; (8006a64 <prvInitialiseTaskLists+0x68>)
 8006a50:	601a      	str	r2, [r3, #0]
}
 8006a52:	bf00      	nop
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000ef4 	.word	0x20000ef4
 8006a60:	20001354 	.word	0x20001354
 8006a64:	20001368 	.word	0x20001368
 8006a68:	20001384 	.word	0x20001384
 8006a6c:	20001398 	.word	0x20001398
 8006a70:	200013b0 	.word	0x200013b0
 8006a74:	2000137c 	.word	0x2000137c
 8006a78:	20001380 	.word	0x20001380

08006a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a82:	e019      	b.n	8006ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a84:	f000 fed6 	bl	8007834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <prvCheckTasksWaitingTermination+0x50>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fd3b 	bl	8005510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <prvCheckTasksWaitingTermination+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	; (8006ad0 <prvCheckTasksWaitingTermination+0x54>)
 8006aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <prvCheckTasksWaitingTermination+0x58>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <prvCheckTasksWaitingTermination+0x58>)
 8006aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aae:	f000 fef1 	bl	8007894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f810 	bl	8006ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <prvCheckTasksWaitingTermination+0x58>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e1      	bne.n	8006a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20001398 	.word	0x20001398
 8006ad0:	200013c4 	.word	0x200013c4
 8006ad4:	200013ac 	.word	0x200013ac

08006ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d108      	bne.n	8006afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f88e 	bl	8007c10 <vPortFree>
				vPortFree( pxTCB );
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f88b 	bl	8007c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006afa:	e018      	b.n	8006b2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d103      	bne.n	8006b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f882 	bl	8007c10 <vPortFree>
	}
 8006b0c:	e00f      	b.n	8006b2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d00a      	beq.n	8006b2e <prvDeleteTCB+0x56>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	60fb      	str	r3, [r7, #12]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <prvDeleteTCB+0x54>
	}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <prvResetNextTaskUnblockTime+0x38>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvResetNextTaskUnblockTime+0x3c>)
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b50:	e008      	b.n	8006b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b52:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <prvResetNextTaskUnblockTime+0x38>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <prvResetNextTaskUnblockTime+0x3c>)
 8006b62:	6013      	str	r3, [r2, #0]
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	2000137c 	.word	0x2000137c
 8006b74:	200013e4 	.word	0x200013e4

08006b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <xTaskGetSchedulerState+0x34>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b86:	2301      	movs	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	e008      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <xTaskGetSchedulerState+0x38>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b94:	2302      	movs	r3, #2
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	e001      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b9e:	687b      	ldr	r3, [r7, #4]
	}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	200013d0 	.word	0x200013d0
 8006bb0:	200013ec 	.word	0x200013ec

08006bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d056      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <xTaskPriorityDisinherit+0xd0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d00a      	beq.n	8006bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d02c      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d128      	bne.n	8006c78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc70 	bl	8005510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <xTaskPriorityDisinherit+0xd4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <xTaskPriorityDisinherit+0xa4>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <xTaskPriorityDisinherit+0xd4>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <xTaskPriorityDisinherit+0xd8>)
 8006c66:	441a      	add	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fbf1 	bl	8005456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000ef0 	.word	0x20000ef0
 8006c88:	200013cc 	.word	0x200013cc
 8006c8c:	20000ef4 	.word	0x20000ef4

08006c90 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006c9a:	f000 fdcb 	bl	8007834 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d113      	bne.n	8006cd0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6838      	ldr	r0, [r7, #0]
 8006cbc:	f000 f8e8 	bl	8006e90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006cc0:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <ulTaskNotifyTake+0x8c>)
 8006cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006cd0:	f000 fde0 	bl	8007894 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006cd4:	f000 fdae 	bl	8007834 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00c      	beq.n	8006d00 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8006cf4:	e004      	b.n	8006d00 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006cf6:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	3a01      	subs	r2, #1
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <ulTaskNotifyTake+0x88>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8006d0a:	f000 fdc3 	bl	8007894 <vPortExitCritical>

		return ulReturn;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000ef0 	.word	0x20000ef0
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <xTaskGenericNotify+0x30>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	61bb      	str	r3, [r7, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006d54:	f000 fd6e 	bl	8007834 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d6c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d828      	bhi.n	8006dce <xTaskGenericNotify+0xae>
 8006d7c:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <xTaskGenericNotify+0x64>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006def 	.word	0x08006def
 8006d88:	08006d99 	.word	0x08006d99
 8006d8c:	08006da7 	.word	0x08006da7
 8006d90:	08006db3 	.word	0x08006db3
 8006d94:	08006dbb 	.word	0x08006dbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006da4:	e026      	b.n	8006df4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006db0:	e020      	b.n	8006df4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006db8:	e01c      	b.n	8006df4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d003      	beq.n	8006dc8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006dc6:	e015      	b.n	8006df4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006dcc:	e012      	b.n	8006df4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd6:	d00c      	beq.n	8006df2 <xTaskGenericNotify+0xd2>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	617b      	str	r3, [r7, #20]
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xTaskGenericNotify+0xcc>
					break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <xTaskGenericNotify+0xd4>

					break;
 8006df2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006df4:	7ffb      	ldrb	r3, [r7, #31]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d13a      	bne.n	8006e70 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fb86 	bl	8005510 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <xTaskGenericNotify+0x160>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d903      	bls.n	8006e18 <xTaskGenericNotify+0xf8>
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <xTaskGenericNotify+0x160>)
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <xTaskGenericNotify+0x164>)
 8006e26:	441a      	add	r2, r3
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f7fe fb11 	bl	8005456 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <xTaskGenericNotify+0x132>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613b      	str	r3, [r7, #16]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <xTaskGenericNotify+0x168>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d907      	bls.n	8006e70 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <xTaskGenericNotify+0x16c>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006e70:	f000 fd10 	bl	8007894 <vPortExitCritical>

		return xReturn;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3728      	adds	r7, #40	; 0x28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200013cc 	.word	0x200013cc
 8006e84:	20000ef4 	.word	0x20000ef4
 8006e88:	20000ef0 	.word	0x20000ef0
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e9a:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea0:	4b20      	ldr	r3, [pc, #128]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fb32 	bl	8005510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb2:	d10a      	bne.n	8006eca <prvAddCurrentTaskToDelayedList+0x3a>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4819      	ldr	r0, [pc, #100]	; (8006f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ec4:	f7fe fac7 	bl	8005456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ec8:	e026      	b.n	8006f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ed2:	4b14      	ldr	r3, [pc, #80]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d209      	bcs.n	8006ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fad5 	bl	800549e <vListInsert>
}
 8006ef4:	e010      	b.n	8006f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef6:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe facb 	bl	800549e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d202      	bcs.n	8006f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f12:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	6013      	str	r3, [r2, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200013c8 	.word	0x200013c8
 8006f24:	20000ef0 	.word	0x20000ef0
 8006f28:	200013b0 	.word	0x200013b0
 8006f2c:	20001380 	.word	0x20001380
 8006f30:	2000137c 	.word	0x2000137c
 8006f34:	200013e4 	.word	0x200013e4

08006f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f42:	f000 fb07 	bl	8007554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f46:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <xTimerCreateTimerTask+0x80>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d021      	beq.n	8006f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f56:	1d3a      	adds	r2, r7, #4
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fa31 	bl	80053c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	9202      	str	r2, [sp, #8]
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	2302      	movs	r3, #2
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	460a      	mov	r2, r1
 8006f78:	4910      	ldr	r1, [pc, #64]	; (8006fbc <xTimerCreateTimerTask+0x84>)
 8006f7a:	4811      	ldr	r0, [pc, #68]	; (8006fc0 <xTimerCreateTimerTask+0x88>)
 8006f7c:	f7fe ffde 	bl	8005f3c <xTaskCreateStatic>
 8006f80:	4603      	mov	r3, r0
 8006f82:	4a10      	ldr	r2, [pc, #64]	; (8006fc4 <xTimerCreateTimerTask+0x8c>)
 8006f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <xTimerCreateTimerTask+0x8c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	613b      	str	r3, [r7, #16]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20001420 	.word	0x20001420
 8006fbc:	08007f3c 	.word	0x08007f3c
 8006fc0:	080070fd 	.word	0x080070fd
 8006fc4:	20001424 	.word	0x20001424

08006fc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	623b      	str	r3, [r7, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <xTimerGenericCommand+0x98>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02a      	beq.n	8007054 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b05      	cmp	r3, #5
 800700e:	dc18      	bgt.n	8007042 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007010:	f7ff fdb2 	bl	8006b78 <xTaskGetSchedulerState>
 8007014:	4603      	mov	r3, r0
 8007016:	2b02      	cmp	r3, #2
 8007018:	d109      	bne.n	800702e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <xTimerGenericCommand+0x98>)
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	f107 0110 	add.w	r1, r7, #16
 8007022:	2300      	movs	r3, #0
 8007024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007026:	f7fe fba1 	bl	800576c <xQueueGenericSend>
 800702a:	6278      	str	r0, [r7, #36]	; 0x24
 800702c:	e012      	b.n	8007054 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <xTimerGenericCommand+0x98>)
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f107 0110 	add.w	r1, r7, #16
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	f7fe fb97 	bl	800576c <xQueueGenericSend>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
 8007040:	e008      	b.n	8007054 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <xTimerGenericCommand+0x98>)
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f107 0110 	add.w	r1, r7, #16
 800704a:	2300      	movs	r3, #0
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	f7fe fc8b 	bl	8005968 <xQueueGenericSendFromISR>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007056:	4618      	mov	r0, r3
 8007058:	3728      	adds	r7, #40	; 0x28
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001420 	.word	0x20001420

08007064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706e:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <prvProcessExpiredTimer+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fa47 	bl	8005510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d022      	beq.n	80070d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	18d1      	adds	r1, r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	6978      	ldr	r0, [r7, #20]
 800709e:	f000 f8d1 	bl	8007244 <prvInsertTimerInActiveList>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01f      	beq.n	80070e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070a8:	2300      	movs	r3, #0
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	2100      	movs	r1, #0
 80070b2:	6978      	ldr	r0, [r7, #20]
 80070b4:	f7ff ff88 	bl	8006fc8 <xTimerGenericCommand>
 80070b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d113      	bne.n	80070e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60fb      	str	r3, [r7, #12]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	4798      	blx	r3
}
 80070f0:	bf00      	nop
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20001418 	.word	0x20001418

080070fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007104:	f107 0308 	add.w	r3, r7, #8
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f857 	bl	80071bc <prvGetNextExpireTime>
 800710e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4619      	mov	r1, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f803 	bl	8007120 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800711a:	f000 f8d5 	bl	80072c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800711e:	e7f1      	b.n	8007104 <prvTimerTask+0x8>

08007120 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800712a:	f7ff f943 	bl	80063b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800712e:	f107 0308 	add.w	r3, r7, #8
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f866 	bl	8007204 <prvSampleTimeNow>
 8007138:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d130      	bne.n	80071a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <prvProcessTimerOrBlockTask+0x3c>
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	429a      	cmp	r2, r3
 800714c:	d806      	bhi.n	800715c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800714e:	f7ff f93f 	bl	80063d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff85 	bl	8007064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800715a:	e024      	b.n	80071a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007162:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <prvProcessTimerOrBlockTask+0x90>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <prvProcessTimerOrBlockTask+0x50>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <prvProcessTimerOrBlockTask+0x52>
 8007170:	2300      	movs	r3, #0
 8007172:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007174:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <prvProcessTimerOrBlockTask+0x94>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	f7fe fea7 	bl	8005ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007186:	f7ff f923 	bl	80063d0 <xTaskResumeAll>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007190:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <prvProcessTimerOrBlockTask+0x98>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
}
 80071a0:	e001      	b.n	80071a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071a2:	f7ff f915 	bl	80063d0 <xTaskResumeAll>
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	2000141c 	.word	0x2000141c
 80071b4:	20001420 	.word	0x20001420
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <prvGetNextExpireTime+0x44>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <prvGetNextExpireTime+0x16>
 80071ce:	2201      	movs	r2, #1
 80071d0:	e000      	b.n	80071d4 <prvGetNextExpireTime+0x18>
 80071d2:	2200      	movs	r2, #0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <prvGetNextExpireTime+0x44>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e001      	b.n	80071f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071f0:	68fb      	ldr	r3, [r7, #12]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	20001418 	.word	0x20001418

08007204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800720c:	f7ff f97e 	bl	800650c <xTaskGetTickCount>
 8007210:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007212:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <prvSampleTimeNow+0x3c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d205      	bcs.n	8007228 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800721c:	f000 f936 	bl	800748c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e002      	b.n	800722e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800722e:	4a04      	ldr	r2, [pc, #16]	; (8007240 <prvSampleTimeNow+0x3c>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007234:	68fb      	ldr	r3, [r7, #12]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20001428 	.word	0x20001428

08007244 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d812      	bhi.n	8007290 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	d302      	bcc.n	800727e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e01b      	b.n	80072b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <prvInsertTimerInActiveList+0x7c>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7fe f908 	bl	800549e <vListInsert>
 800728e:	e012      	b.n	80072b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d206      	bcs.n	80072a6 <prvInsertTimerInActiveList+0x62>
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d302      	bcc.n	80072a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e007      	b.n	80072b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <prvInsertTimerInActiveList+0x80>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fe f8f4 	bl	800549e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072b6:	697b      	ldr	r3, [r7, #20]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	2000141c 	.word	0x2000141c
 80072c4:	20001418 	.word	0x20001418

080072c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08e      	sub	sp, #56	; 0x38
 80072cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ce:	e0ca      	b.n	8007466 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da18      	bge.n	8007308 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072d6:	1d3b      	adds	r3, r7, #4
 80072d8:	3304      	adds	r3, #4
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	61fb      	str	r3, [r7, #28]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fe:	6850      	ldr	r0, [r2, #4]
 8007300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007302:	6892      	ldr	r2, [r2, #8]
 8007304:	4611      	mov	r1, r2
 8007306:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f2c0 80aa 	blt.w	8007464 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe f8f5 	bl	8005510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007326:	463b      	mov	r3, r7
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ff6b 	bl	8007204 <prvSampleTimeNow>
 800732e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b09      	cmp	r3, #9
 8007334:	f200 8097 	bhi.w	8007466 <prvProcessReceivedCommands+0x19e>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <prvProcessReceivedCommands+0x78>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007369 	.word	0x08007369
 8007344:	08007369 	.word	0x08007369
 8007348:	08007369 	.word	0x08007369
 800734c:	080073dd 	.word	0x080073dd
 8007350:	080073f1 	.word	0x080073f1
 8007354:	0800743b 	.word	0x0800743b
 8007358:	08007369 	.word	0x08007369
 800735c:	08007369 	.word	0x08007369
 8007360:	080073dd 	.word	0x080073dd
 8007364:	080073f1 	.word	0x080073f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	18d1      	adds	r1, r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007388:	f7ff ff5c 	bl	8007244 <prvInsertTimerInActiveList>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d069      	beq.n	8007466 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007398:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05e      	beq.n	8007466 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	441a      	add	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ba:	f7ff fe05 	bl	8006fc8 <xTimerGenericCommand>
 80073be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d14f      	bne.n	8007466 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	61bb      	str	r3, [r7, #24]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073ee:	e03a      	b.n	8007466 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	617b      	str	r3, [r7, #20]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	18d1      	adds	r1, r2, r3
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007434:	f7ff ff06 	bl	8007244 <prvInsertTimerInActiveList>
					break;
 8007438:	e015      	b.n	8007466 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744a:	f000 fbe1 	bl	8007c10 <vPortFree>
 800744e:	e00a      	b.n	8007466 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	b2da      	uxtb	r2, r3
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007462:	e000      	b.n	8007466 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <prvProcessReceivedCommands+0x1c0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	1d39      	adds	r1, r7, #4
 800746c:	2200      	movs	r2, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fb16 	bl	8005aa0 <xQueueReceive>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f af2a 	bne.w	80072d0 <prvProcessReceivedCommands+0x8>
	}
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3730      	adds	r7, #48	; 0x30
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20001420 	.word	0x20001420

0800748c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007492:	e048      	b.n	8007526 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007494:	4b2d      	ldr	r3, [pc, #180]	; (800754c <prvSwitchTimerLists+0xc0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749e:	4b2b      	ldr	r3, [pc, #172]	; (800754c <prvSwitchTimerLists+0xc0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe f82f 	bl	8005510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d02e      	beq.n	8007526 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d90e      	bls.n	80074f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074e6:	4b19      	ldr	r3, [pc, #100]	; (800754c <prvSwitchTimerLists+0xc0>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f7fd ffd4 	bl	800549e <vListInsert>
 80074f6:	e016      	b.n	8007526 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074f8:	2300      	movs	r3, #0
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	2300      	movs	r3, #0
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	2100      	movs	r1, #0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff fd60 	bl	8006fc8 <xTimerGenericCommand>
 8007508:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	603b      	str	r3, [r7, #0]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <prvSwitchTimerLists+0xc0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1b1      	bne.n	8007494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <prvSwitchTimerLists+0xc0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <prvSwitchTimerLists+0xc4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a04      	ldr	r2, [pc, #16]	; (800754c <prvSwitchTimerLists+0xc0>)
 800753c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800753e:	4a04      	ldr	r2, [pc, #16]	; (8007550 <prvSwitchTimerLists+0xc4>)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	6013      	str	r3, [r2, #0]
}
 8007544:	bf00      	nop
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20001418 	.word	0x20001418
 8007550:	2000141c 	.word	0x2000141c

08007554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800755a:	f000 f96b 	bl	8007834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800755e:	4b15      	ldr	r3, [pc, #84]	; (80075b4 <prvCheckForValidListAndQueue+0x60>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d120      	bne.n	80075a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007566:	4814      	ldr	r0, [pc, #80]	; (80075b8 <prvCheckForValidListAndQueue+0x64>)
 8007568:	f7fd ff48 	bl	80053fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800756c:	4813      	ldr	r0, [pc, #76]	; (80075bc <prvCheckForValidListAndQueue+0x68>)
 800756e:	f7fd ff45 	bl	80053fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <prvCheckForValidListAndQueue+0x6c>)
 8007574:	4a10      	ldr	r2, [pc, #64]	; (80075b8 <prvCheckForValidListAndQueue+0x64>)
 8007576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007578:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <prvCheckForValidListAndQueue+0x70>)
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <prvCheckForValidListAndQueue+0x68>)
 800757c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800757e:	2300      	movs	r3, #0
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <prvCheckForValidListAndQueue+0x74>)
 8007584:	4a11      	ldr	r2, [pc, #68]	; (80075cc <prvCheckForValidListAndQueue+0x78>)
 8007586:	2110      	movs	r1, #16
 8007588:	200a      	movs	r0, #10
 800758a:	f7fe f853 	bl	8005634 <xQueueGenericCreateStatic>
 800758e:	4603      	mov	r3, r0
 8007590:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <prvCheckForValidListAndQueue+0x60>)
 8007592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <prvCheckForValidListAndQueue+0x60>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <prvCheckForValidListAndQueue+0x60>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	490b      	ldr	r1, [pc, #44]	; (80075d0 <prvCheckForValidListAndQueue+0x7c>)
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fc6c 	bl	8005e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075a8:	f000 f974 	bl	8007894 <vPortExitCritical>
}
 80075ac:	bf00      	nop
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20001420 	.word	0x20001420
 80075b8:	200013f0 	.word	0x200013f0
 80075bc:	20001404 	.word	0x20001404
 80075c0:	20001418 	.word	0x20001418
 80075c4:	2000141c 	.word	0x2000141c
 80075c8:	200014cc 	.word	0x200014cc
 80075cc:	2000142c 	.word	0x2000142c
 80075d0:	08007f44 	.word	0x08007f44

080075d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3b04      	subs	r3, #4
 80075e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3b04      	subs	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007604:	4a0c      	ldr	r2, [pc, #48]	; (8007638 <pxPortInitialiseStack+0x64>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3b14      	subs	r3, #20
 800760e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3b04      	subs	r3, #4
 800761a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f06f 0202 	mvn.w	r2, #2
 8007622:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3b20      	subs	r3, #32
 8007628:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	0800763d 	.word	0x0800763d

0800763c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <prvTaskExitError+0x54>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764e:	d00a      	beq.n	8007666 <prvTaskExitError+0x2a>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	60fb      	str	r3, [r7, #12]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <prvTaskExitError+0x28>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60bb      	str	r3, [r7, #8]
}
 8007678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800767a:	bf00      	nop
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0fc      	beq.n	800767c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	2000000c 	.word	0x2000000c
	...

080076a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <pxCurrentTCBConst2>)
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	f380 8809 	msr	PSP, r0
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	4770      	bx	lr
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst2>:
 80076c0:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076c8:	4808      	ldr	r0, [pc, #32]	; (80076ec <prvPortStartFirstTask+0x24>)
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f380 8808 	msr	MSP, r0
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8814 	msr	CONTROL, r0
 80076da:	b662      	cpsie	i
 80076dc:	b661      	cpsie	f
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	df00      	svc	0
 80076e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ea:	bf00      	nop
 80076ec:	e000ed08 	.word	0xe000ed08

080076f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076f6:	4b46      	ldr	r3, [pc, #280]	; (8007810 <xPortStartScheduler+0x120>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a46      	ldr	r2, [pc, #280]	; (8007814 <xPortStartScheduler+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10a      	bne.n	8007716 <xPortStartScheduler+0x26>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007716:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <xPortStartScheduler+0x120>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a3f      	ldr	r2, [pc, #252]	; (8007818 <xPortStartScheduler+0x128>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10a      	bne.n	8007736 <xPortStartScheduler+0x46>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	60fb      	str	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007736:	4b39      	ldr	r3, [pc, #228]	; (800781c <xPortStartScheduler+0x12c>)
 8007738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007758:	b2da      	uxtb	r2, r3
 800775a:	4b31      	ldr	r3, [pc, #196]	; (8007820 <xPortStartScheduler+0x130>)
 800775c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800775e:	4b31      	ldr	r3, [pc, #196]	; (8007824 <xPortStartScheduler+0x134>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007764:	e009      	b.n	800777a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <xPortStartScheduler+0x134>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3b01      	subs	r3, #1
 800776c:	4a2d      	ldr	r2, [pc, #180]	; (8007824 <xPortStartScheduler+0x134>)
 800776e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d0ef      	beq.n	8007766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007786:	4b27      	ldr	r3, [pc, #156]	; (8007824 <xPortStartScheduler+0x134>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f1c3 0307 	rsb	r3, r3, #7
 800778e:	2b04      	cmp	r3, #4
 8007790:	d00a      	beq.n	80077a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077a8:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <xPortStartScheduler+0x134>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <xPortStartScheduler+0x134>)
 80077b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <xPortStartScheduler+0x134>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ba:	4a1a      	ldr	r2, [pc, #104]	; (8007824 <xPortStartScheduler+0x134>)
 80077bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077c6:	4b18      	ldr	r3, [pc, #96]	; (8007828 <xPortStartScheduler+0x138>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a17      	ldr	r2, [pc, #92]	; (8007828 <xPortStartScheduler+0x138>)
 80077cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <xPortStartScheduler+0x138>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a14      	ldr	r2, [pc, #80]	; (8007828 <xPortStartScheduler+0x138>)
 80077d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077de:	f000 f8dd 	bl	800799c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <xPortStartScheduler+0x13c>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077e8:	f000 f8fc 	bl	80079e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <xPortStartScheduler+0x140>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a0f      	ldr	r2, [pc, #60]	; (8007830 <xPortStartScheduler+0x140>)
 80077f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077f8:	f7ff ff66 	bl	80076c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077fc:	f7fe ff50 	bl	80066a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007800:	f7ff ff1c 	bl	800763c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	e000ed00 	.word	0xe000ed00
 8007814:	410fc271 	.word	0x410fc271
 8007818:	410fc270 	.word	0x410fc270
 800781c:	e000e400 	.word	0xe000e400
 8007820:	2000151c 	.word	0x2000151c
 8007824:	20001520 	.word	0x20001520
 8007828:	e000ed20 	.word	0xe000ed20
 800782c:	2000000c 	.word	0x2000000c
 8007830:	e000ef34 	.word	0xe000ef34

08007834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	607b      	str	r3, [r7, #4]
}
 800784c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <vPortEnterCritical+0x58>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3301      	adds	r3, #1
 8007854:	4a0d      	ldr	r2, [pc, #52]	; (800788c <vPortEnterCritical+0x58>)
 8007856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <vPortEnterCritical+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d10f      	bne.n	8007880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortEnterCritical+0x5c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <vPortEnterCritical+0x4c>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <vPortEnterCritical+0x4a>
	}
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	2000000c 	.word	0x2000000c
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <vPortExitCritical+0x50>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <vPortExitCritical+0x24>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	607b      	str	r3, [r7, #4]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <vPortExitCritical+0x50>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3b01      	subs	r3, #1
 80078be:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <vPortExitCritical+0x50>)
 80078c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <vPortExitCritical+0x50>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <vPortExitCritical+0x42>
 80078ca:	2300      	movs	r3, #0
 80078cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f383 8811 	msr	BASEPRI, r3
}
 80078d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c
	...

080078f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078f0:	f3ef 8009 	mrs	r0, PSP
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <pxCurrentTCBConst>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f01e 0f10 	tst.w	lr, #16
 8007900:	bf08      	it	eq
 8007902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	6010      	str	r0, [r2, #0]
 800790c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007914:	f380 8811 	msr	BASEPRI, r0
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f7fe febe 	bl	80066a0 <vTaskSwitchContext>
 8007924:	f04f 0000 	mov.w	r0, #0
 8007928:	f380 8811 	msr	BASEPRI, r0
 800792c:	bc09      	pop	{r0, r3}
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007936:	f01e 0f10 	tst.w	lr, #16
 800793a:	bf08      	it	eq
 800793c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007940:	f380 8809 	msr	PSP, r0
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst>:
 8007950:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop

08007958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	607b      	str	r3, [r7, #4]
}
 8007970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007972:	f7fe fddb 	bl	800652c <xTaskIncrementTick>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <xPortSysTickHandler+0x40>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	2300      	movs	r3, #0
 8007986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f383 8811 	msr	BASEPRI, r3
}
 800798e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortSetupTimerInterrupt+0x34>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <vPortSetupTimerInterrupt+0x38>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <vPortSetupTimerInterrupt+0x3c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <vPortSetupTimerInterrupt+0x40>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	099b      	lsrs	r3, r3, #6
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <vPortSetupTimerInterrupt+0x44>)
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <vPortSetupTimerInterrupt+0x34>)
 80079c0:	2207      	movs	r2, #7
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	e000e010 	.word	0xe000e010
 80079d4:	e000e018 	.word	0xe000e018
 80079d8:	20000000 	.word	0x20000000
 80079dc:	10624dd3 	.word	0x10624dd3
 80079e0:	e000e014 	.word	0xe000e014

080079e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079f4 <vPortEnableVFP+0x10>
 80079e8:	6801      	ldr	r1, [r0, #0]
 80079ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079ee:	6001      	str	r1, [r0, #0]
 80079f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079f2:	bf00      	nop
 80079f4:	e000ed88 	.word	0xe000ed88

080079f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079fe:	f3ef 8305 	mrs	r3, IPSR
 8007a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b0f      	cmp	r3, #15
 8007a08:	d914      	bls.n	8007a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <vPortValidateInterruptPriority+0x70>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <vPortValidateInterruptPriority+0x74>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	7afa      	ldrb	r2, [r7, #11]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d20a      	bcs.n	8007a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <vPortValidateInterruptPriority+0x78>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <vPortValidateInterruptPriority+0x7c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d90a      	bls.n	8007a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	603b      	str	r3, [r7, #0]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <vPortValidateInterruptPriority+0x60>
	}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	e000e3f0 	.word	0xe000e3f0
 8007a6c:	2000151c 	.word	0x2000151c
 8007a70:	e000ed0c 	.word	0xe000ed0c
 8007a74:	20001520 	.word	0x20001520

08007a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a84:	f7fe fc96 	bl	80063b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a88:	4b5b      	ldr	r3, [pc, #364]	; (8007bf8 <pvPortMalloc+0x180>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a90:	f000 f920 	bl	8007cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a94:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <pvPortMalloc+0x184>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8093 	bne.w	8007bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01d      	beq.n	8007ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4413      	add	r3, r2
 8007aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d014      	beq.n	8007ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d06e      	beq.n	8007bc8 <pvPortMalloc+0x150>
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <pvPortMalloc+0x188>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d869      	bhi.n	8007bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007af4:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <pvPortMalloc+0x18c>)
 8007af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <pvPortMalloc+0x18c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007afe:	e004      	b.n	8007b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <pvPortMalloc+0xa4>
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f1      	bne.n	8007b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <pvPortMalloc+0x180>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d050      	beq.n	8007bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	4413      	add	r3, r2
 8007b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	2308      	movs	r3, #8
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d91f      	bls.n	8007b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <pvPortMalloc+0xf8>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	613b      	str	r3, [r7, #16]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f000 f908 	bl	8007d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <pvPortMalloc+0x188>)
 8007b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b96:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <pvPortMalloc+0x188>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <pvPortMalloc+0x190>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d203      	bcs.n	8007baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <pvPortMalloc+0x188>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <pvPortMalloc+0x190>)
 8007ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <pvPortMalloc+0x184>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <pvPortMalloc+0x194>)
 8007bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc8:	f7fe fc02 	bl	80063d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <pvPortMalloc+0x174>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0x172>
	return pvReturn;
 8007bec:	69fb      	ldr	r3, [r7, #28]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200020e4 	.word	0x200020e4
 8007bfc:	200020f8 	.word	0x200020f8
 8007c00:	200020e8 	.word	0x200020e8
 8007c04:	200020dc 	.word	0x200020dc
 8007c08:	200020ec 	.word	0x200020ec
 8007c0c:	200020f0 	.word	0x200020f0

08007c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04d      	beq.n	8007cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c22:	2308      	movs	r3, #8
 8007c24:	425b      	negs	r3, r3
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <vPortFree+0xb8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <vPortFree+0x44>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	60fb      	str	r3, [r7, #12]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <vPortFree+0x62>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60bb      	str	r3, [r7, #8]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <vPortFree+0xb8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01e      	beq.n	8007cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11a      	bne.n	8007cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <vPortFree+0xb8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c98:	f7fe fb8c 	bl	80063b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <vPortFree+0xbc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4a09      	ldr	r2, [pc, #36]	; (8007ccc <vPortFree+0xbc>)
 8007ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007caa:	6938      	ldr	r0, [r7, #16]
 8007cac:	f000 f874 	bl	8007d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <vPortFree+0xc0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <vPortFree+0xc0>)
 8007cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cba:	f7fe fb89 	bl	80063d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200020f8 	.word	0x200020f8
 8007ccc:	200020e8 	.word	0x200020e8
 8007cd0:	200020f4 	.word	0x200020f4

08007cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <prvHeapInit+0xac>)
 8007ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <prvHeapInit+0xac>)
 8007d04:	4413      	add	r3, r2
 8007d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d0c:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <prvHeapInit+0xb0>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <prvHeapInit+0xb0>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <prvHeapInit+0xb4>)
 8007d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <prvHeapInit+0xb4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d3e:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <prvHeapInit+0xb4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <prvHeapInit+0xb4>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <prvHeapInit+0xb8>)
 8007d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <prvHeapInit+0xbc>)
 8007d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d6c:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <prvHeapInit+0xc0>)
 8007d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20001524 	.word	0x20001524
 8007d84:	200020dc 	.word	0x200020dc
 8007d88:	200020e4 	.word	0x200020e4
 8007d8c:	200020ec 	.word	0x200020ec
 8007d90:	200020e8 	.word	0x200020e8
 8007d94:	200020f8 	.word	0x200020f8

08007d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007da0:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <prvInsertBlockIntoFreeList+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	e002      	b.n	8007dac <prvInsertBlockIntoFreeList+0x14>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d8f7      	bhi.n	8007da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d108      	bne.n	8007dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	441a      	add	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d118      	bne.n	8007e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d00d      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	441a      	add	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvInsertBlockIntoFreeList+0xb0>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	e003      	b.n	8007e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d002      	beq.n	8007e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	200020dc 	.word	0x200020dc
 8007e48:	200020e4 	.word	0x200020e4

08007e4c <__libc_init_array>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4d0d      	ldr	r5, [pc, #52]	; (8007e84 <__libc_init_array+0x38>)
 8007e50:	4c0d      	ldr	r4, [pc, #52]	; (8007e88 <__libc_init_array+0x3c>)
 8007e52:	1b64      	subs	r4, r4, r5
 8007e54:	10a4      	asrs	r4, r4, #2
 8007e56:	2600      	movs	r6, #0
 8007e58:	42a6      	cmp	r6, r4
 8007e5a:	d109      	bne.n	8007e70 <__libc_init_array+0x24>
 8007e5c:	4d0b      	ldr	r5, [pc, #44]	; (8007e8c <__libc_init_array+0x40>)
 8007e5e:	4c0c      	ldr	r4, [pc, #48]	; (8007e90 <__libc_init_array+0x44>)
 8007e60:	f000 f82e 	bl	8007ec0 <_init>
 8007e64:	1b64      	subs	r4, r4, r5
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	2600      	movs	r6, #0
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	d105      	bne.n	8007e7a <__libc_init_array+0x2e>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e74:	4798      	blx	r3
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7ee      	b.n	8007e58 <__libc_init_array+0xc>
 8007e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7e:	4798      	blx	r3
 8007e80:	3601      	adds	r6, #1
 8007e82:	e7f2      	b.n	8007e6a <__libc_init_array+0x1e>
 8007e84:	08007fc0 	.word	0x08007fc0
 8007e88:	08007fc0 	.word	0x08007fc0
 8007e8c:	08007fc0 	.word	0x08007fc0
 8007e90:	08007fc4 	.word	0x08007fc4

08007e94 <memcpy>:
 8007e94:	440a      	add	r2, r1
 8007e96:	4291      	cmp	r1, r2
 8007e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e9c:	d100      	bne.n	8007ea0 <memcpy+0xc>
 8007e9e:	4770      	bx	lr
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eaa:	4291      	cmp	r1, r2
 8007eac:	d1f9      	bne.n	8007ea2 <memcpy+0xe>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <memset>:
 8007eb0:	4402      	add	r2, r0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d100      	bne.n	8007eba <memset+0xa>
 8007eb8:	4770      	bx	lr
 8007eba:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebe:	e7f9      	b.n	8007eb4 <memset+0x4>

08007ec0 <_init>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	bf00      	nop
 8007ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec6:	bc08      	pop	{r3}
 8007ec8:	469e      	mov	lr, r3
 8007eca:	4770      	bx	lr

08007ecc <_fini>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr
